{"version":3,"sources":["../../app/index.ts","../../src/index.ts","../node_modules/@material-ui/styles/esm/styled/styled.js","../node_modules/@material-ui/core/esm/styles/styled.js","../node_modules/@material-ui/core/esm/ListItem/ListItem.js","../../src/util/constants.ts","../../src/util/errors.ts","../../src/api/common.ts","../../src/api/create-installation-request.ts","../../src/util/sleep.ts","../../src/helpers/generate-fid.ts","../../src/helpers/buffer-to-base64-url-safe.ts","../../src/util/get-key.ts","../../src/helpers/fid-changed.ts","../../src/helpers/idb-manager.ts","../../src/helpers/get-installation-entry.ts","../../src/api/generate-auth-token-request.ts","../../src/helpers/refresh-auth-token.ts","../../src/functions/get-token.ts","../../src/api/delete-installation-request.ts","../../src/functions/on-id-change.ts","../../src/helpers/extract-app-config.ts","../../src/functions/get-id.ts","../../src/functions/delete-installation.ts","../node_modules/idb/build/idb.js","../node_modules/@material-ui/system/esm/css.js","../node_modules/@material-ui/system/esm/compose.js","../node_modules/@material-ui/system/esm/style.js","../node_modules/@material-ui/system/esm/borders.js","../node_modules/@material-ui/system/esm/display.js","../node_modules/@material-ui/system/esm/flexbox.js","../node_modules/@material-ui/system/esm/grid.js","../node_modules/@material-ui/system/esm/positions.js","../node_modules/@material-ui/system/esm/palette.js","../node_modules/@material-ui/system/esm/shadows.js","../node_modules/@material-ui/system/esm/sizing.js","../node_modules/@material-ui/system/esm/typography.js","../node_modules/@material-ui/core/esm/Box/Box.js","../../src/core/storage/DOMStorageWrapper.ts","../../src/core/storage/MemoryStorage.ts","../../src/core/storage/storage.ts","../../src/core/util/util.ts","../../src/core/util/Path.ts","../../src/realtime/Constants.ts","../../src/core/RepoInfo.ts","../../src/core/util/libs/parser.ts","../../src/core/snap/indexes/KeyIndex.ts","../../src/core/snap/snap.ts","../../src/core/util/validation.ts","../../src/api/onDisconnect.ts","../../src/api/TransactionResult.ts","../../src/core/util/NextPushId.ts","../../src/core/snap/Node.ts","../../src/core/snap/indexes/Index.ts","../../src/core/snap/LeafNode.ts","../../src/core/snap/indexes/PriorityIndex.ts","../../src/core/snap/IndexMap.ts","../../src/core/snap/ChildrenNode.ts","../../src/core/util/SortedMap.ts","../../src/core/snap/childSet.ts","../../src/core/snap/comparators.ts","../../src/core/snap/nodeFromJSON.ts","../../src/core/snap/indexes/ValueIndex.ts","../../src/api/Query.ts","../../src/core/snap/indexes/PathIndex.ts","../../src/api/DataSnapshot.ts","../../src/core/view/Event.ts","../../src/core/view/EventRegistration.ts","../../src/core/util/ServerValues.ts","../../src/core/SparseSnapshotTree.ts","../../src/core/operation/Operation.ts","../../src/core/util/ImmutableTree.ts","../../src/core/SyncPoint.ts","../../src/core/operation/AckUserWrite.ts","../../src/core/operation/ListenComplete.ts","../../src/core/operation/Overwrite.ts","../../src/core/operation/Merge.ts","../../src/core/view/CacheNode.ts","../../src/core/view/ViewCache.ts","../../src/core/view/Change.ts","../../src/core/view/filter/IndexedFilter.ts","../../src/core/view/ChildChangeAccumulator.ts","../../src/core/view/CompleteChildSource.ts","../../src/core/view/ViewProcessor.ts","../../src/core/view/EventGenerator.ts","../../src/core/view/View.ts","../../src/core/CompoundWrite.ts","../../src/core/WriteTree.ts","../../src/core/SyncTree.ts","../../src/core/SnapshotHolder.ts","../../src/core/stats/StatsCollection.ts","../../src/core/stats/StatsManager.ts","../../src/core/stats/StatsListener.ts","../../src/core/stats/StatsReporter.ts","../../src/core/view/EventQueue.ts","../../src/core/util/EventEmitter.ts","../../src/core/util/VisibilityMonitor.ts","../../src/core/util/OnlineMonitor.ts","../../src/realtime/polling/PacketReceiver.ts","../../src/realtime/BrowserPollConnection.ts","../../src/core/version.ts","../../src/realtime/WebSocketConnection.ts","../../src/realtime/TransportManager.ts","../../src/realtime/Connection.ts","../../src/core/ServerActions.ts","../../src/core/PersistentConnection.ts","../../src/core/ReadonlyRestClient.ts","../../src/core/Repo.ts","../../src/core/view/filter/RangedFilter.ts","../../src/core/view/filter/LimitedFilter.ts","../../src/core/view/QueryParams.ts","../../src/api/Reference.ts","../../src/core/util/Tree.ts","../../src/core/Repo_transaction.ts","../../src/core/AuthTokenProvider.ts","../../src/core/RepoManager.ts","../../src/api/Database.ts","../../src/api/internal.ts","../../src/api/test_access.ts","../../index.ts","../../src/api/error.ts","../../src/context.ts","../../src/serializer.ts","../../src/api/service.ts","../../src/config.ts","../../src/interfaces/internal-message-payload.ts","../../src/helpers/array-base64-translator.ts","../../src/helpers/migrate-old-database.ts","../../src/core/api.ts","../../src/core/token-management.ts","../../src/helpers/is-console-message.ts","../../src/controllers/sw-controller.ts","../../src/helpers/externalizePayload.ts","../../src/helpers/sleep.ts","../../src/controllers/window-controller.ts","../../src/services/api_service.ts","../../src/constants.ts","../../src/utils/errors.ts","../../src/utils/console_logger.ts","../../src/services/settings_service.ts","../../src/utils/string_merger.ts","../../src/services/iid_service.ts","../../src/utils/attributes_utils.ts","../../src/services/remote_config_service.ts","../../src/services/initialization_service.ts","../../src/services/transport_service.ts","../../src/services/perf_logger.ts","../../src/utils/metric_utils.ts","../../src/resources/trace.ts","../../src/resources/network_request.ts","../../src/services/oob_resources_service.ts","../../src/controllers/perf.ts","../../src/logger.ts","../../src/helpers.ts","../../src/errors.ts","../../src/get-config.ts","../../src/initialize-ids.ts","../../src/factory.ts","../../src/functions.ts","../../src/client/caching_client.ts","../../src/client/rest_client.ts","../../src/language.ts","../../src/client/remote_config_fetch_client.ts","../../src/value.ts","../../src/remote_config.ts","../../src/storage/storage.ts","../../src/storage/storage_cache.ts","../../src/client/retrying_client.ts"],"names":["firebase","registerVersion","omit","input","fields","output","Object","keys","forEach","prop","indexOf","styled","Component","componentCreator","style","filterProps","options","arguments","length","undefined","name","stylesOptions","_objectWithoutProperties","classNamePrefix","stylesOrCreator","theme","root","props","_extends","useStyles","makeStyles","displayName","propTypes","StyledComponent","React","forwardRef","ref","children","classNameProp","className","clone","ComponentProp","component","other","classes","clsx","spread","cloneElement","FinalComponent","createElement","hoistNonReactStatics","styledWithoutDefault","defaultTheme","useEnhancedEffect","window","ListItem","_props$alignItems","alignItems","_props$autoFocus","autoFocus","_props$button","button","childrenProp","componentProp","_props$ContainerCompo","ContainerComponent","_props$ContainerProps","ContainerProps","ContainerClassName","_props$dense","dense","_props$disabled","disabled","_props$disableGutters","disableGutters","_props$divider","divider","focusVisibleClassName","_props$selected","selected","context","ListContext","childContext","listItemRef","current","focus","toArray","hasSecondaryAction","isMuiElement","handleOwnRef","instance","ReactDOM","handleRef","useForkRef","componentProps","gutters","alignItemsFlexStart","secondaryAction","focusVisible","ButtonBase","Provider","value","container","pop","withStyles","display","justifyContent","position","textDecoration","width","boxSizing","textAlign","paddingTop","paddingBottom","backgroundColor","palette","action","opacity","borderBottom","concat","backgroundClip","paddingLeft","paddingRight","transition","transitions","create","duration","shortest","hover","getInstallationsEndpoint","INSTALLATIONS_API_URL","extractAuthTokenInfoFromResponse","response","token","requestStatus","expiresIn","responseExpiresIn","Number","replace","creationTime","Date","now","getErrorFromResponse","requestName","json","responseJson","errorData","error","ERROR_FACTORY","serverCode","code","serverMessage","message","serverStatus","status","getHeaders","apiKey","Headers","Accept","getHeadersWithAuth","appConfig","refreshToken","headers","append","INTERNAL_AUTH_VERSION","getAuthorizationHeader","retryIfServerError","fn","result","createInstallationRequest","fid","endpoint","body","authVersion","appId","sdkVersion","PACKAGE_VERSION","request","method","JSON","stringify","fetch","ok","responseValue","registrationStatus","authToken","sleep","ms","Promise","resolve","setTimeout","VALID_FID_PATTERN","generateFid","fidByteArray","Uint8Array","self","crypto","msCrypto","getRandomValues","array","btoa","String","fromCharCode","substr","encode","test","getKey","appName","fidChangeCallbacks","Map","fidChanged","key","callFidChangeCallbacks","channel","getBroadcastChannel","postMessage","closeBroadcastChannel","broadcastFidChange","callbacks","get","callback","broadcastChannel","BroadcastChannel","onmessage","e","data","size","close","oldVersion","createObjectStore","OBJECT_STORE_NAME","dbPromise","getInstallationEntry","update","oldEntry","installationEntry","clearTimedOutRequest","updateOrCreateInstallationEntry","entryWithPromise","navigator","onLine","registrationPromise","reject","inProgressEntry","registrationTime","registeredInstallationEntry","set","isServerError","remove","registerInstallation","waitUntilFidRegistration","triggerRegistrationIfNecessary","updateInstallationRequest","entry","PENDING_TIMEOUT_MS","generateAuthTokenRequest","platformLoggerProvider","getGenerateAuthTokenEndpoint","platformLogger","getImmediate","optional","getPlatformInfoString","installation","refreshAuthToken","dependencies","forceRefresh","isEntryRegistered","oldAuthToken","TOKEN_EXPIRATION_BUFFER","isAuthTokenExpired","isAuthTokenValid","tokenPromise","updateAuthTokenRequest","waitUntilAuthTokenRequest","inProgressAuthToken","requestTime","makeAuthTokenRequestInProgressEntry","updatedInstallationEntry","fetchAuthTokenFromServer","completeInstallationRegistration","deleteInstallationRequest","getDeleteEndpoint","callbackSet","Set","add","addCallback","delete","removeCallback","catch","console","exports","arr","Array","prototype","slice","call","promisifyRequest","onsuccess","onerror","promisifyRequestCall","obj","args","p","apply","then","promisifyCursorRequestCall","Cursor","proxyProperties","ProxyClass","targetProp","properties","defineProperty","this","val","proxyRequestMethods","Constructor","proxyMethods","proxyCursorRequestMethods","Index","index","_index","cursor","_cursor","_request","ObjectStore","store","_store","Transaction","idbTransaction","_tx","complete","oncomplete","onabort","UpgradeDB","db","transaction","_db","DB","openDb","version","upgradeCallback","indexedDB","onupgradeneeded","event","deleteDb","IDBIndex","IDBCursor","methodName","createIndex","IDBObjectStore","objectStore","IDBTransaction","IDBDatabase","funcName","nativeObject","getAll","query","count","items","iterateCursor","push","continue","factory","css","styleFunction","newStyleFunction","merge","_toConsumableArray","compose","_len","styles","_key","reduce","acc","getPath","path","split","item","_options$cssProperty","cssProperty","themeKey","transform","propValue","themeMapping","handleBreakpoints","propValueFinal","isArray","_defineProperty","getBorder","borders","flexbox","grid","boxShadow","maxWidth","minWidth","height","maxHeight","minHeight","sizing","typography","positions","shadows","spacing","Box","domStorage_","prefix_","removeItem","prefixedName_","setItem","storedVal","getItem","jsonEval","toString","cache_","isInMemoryStorage","contains","createStoragefor","domStorageName","domStorage","DOMStorageWrapper","MemoryStorage","PersistentStorage","SessionStorage","logClient","Logger","LUIDGenerator","id","sha1","str","utf8Bytes","stringToByteArray","Sha1","sha1Bytes","digest","base64","encodeByteArray","buildLogMessage_","i","varArgs","arg","logger","firstLog_","enableLogging","logger_","persistent","assert","logLevel","LogLevel","VERBOSE","log","bind","logWrapper","prefix","fatal","Error","warn","isInvalidJSONNumber","POSITIVE_INFINITY","NEGATIVE_INFINITY","MIN_NAME","MAX_NAME","nameCompare","a","b","aAsInt","tryParseInt","bAsInt","stringCompare","requireKey","ObjectToUniqueKey","k","sort","splitStringBySize","segsize","len","dataSegs","c","substring","each","hasOwnProperty","doubleToIEEE754String","v","s","f","ln","bias","Infinity","Math","abs","pow","min","floor","LN2","round","bits","reverse","join","hexByteString","hexByte","parseInt","toLowerCase","INTEGER_REGEXP_","RegExp","intVal","exceptionGuard","stack","setTimeoutNonBlocking","time","timeout","pathOrString","pieceNum","pieces_","copyTo","pieceNum_","Path","getFront","getLength","popFront","getBack","pathString","toUrlEncodedString","encodeURIComponent","begin","parent","pieces","child","childPathObj","childPieces","isEmpty","relativePath","outerPath","innerPath","outer","inner","comparePaths","left","right","leftKeys","rightKeys","cmp","equals","j","errorPrefix_","parts_","byteLength_","max","stringLength","checkValid_","last","ValidationPath","MAX_PATH_LENGTH_BYTES","MAX_PATH_DEPTH","toErrorString","PROTOCOL_VERSION","FORGE_DOMAIN","WEBSOCKET","LONG_POLLING","host","secure","namespace","webSocketOnly","nodeAdmin","persistenceKey","includeNamespaceInQueryParams","domain","internalHost","needsQueryParam","isCustomHost","isCacheableHost","isDemoHost","updateHost","newHost","connectionURL","type","params","connURL","pairs","toURLString","__EMPTY_NODE","MAX_NODE","parseRepoInfo","dataURL","parsedUrl","parseDatabaseURL","location","protocol","scheme","repoInfo","RepoInfo","subdomain","port","colonInd","slashInd","questionMarkInd","pathStringDecoded","piece","decodeURIComponent","decodePath","queryParams","queryString","results","charAt","segment","kv","decodeQuery","hostWithoutPort","dotInd","INVALID_KEY_REGEX_","INVALID_PATH_REGEX_","MAX_LEAF_SIZE_","isValidKey","isValidPathString","isValidPriority","priority","validateFirebaseDataArg","fnName","argumentNumber","validateFirebaseData","errorPrefixFxn","errorPrefix","path_","validateFirebaseMergeDataArg","mergePaths","curPath","prevPath","validateFirebaseMergePaths","validatePriority","validateEventType","eventType","validateKey","validatePathString","validateRootPathString","validateWritablePath","validateUrl","isValidRootPathString","validateBoolean","bool","repo_","cancel","onComplete","validateArgCount","validateCallback","deferred","Deferred","onDisconnectCancel","wrapCallback","promise","onDisconnectSet","setWithPriority","onDisconnectSetWithPriority","objectToMerge","newObjectToMerge","onDisconnectUpdate","committed","snapshot","toJSON","nextPushId","PUSH_CHARS","lastPushTime","lastRandChars","duplicateTime","timeStampChars","random","node","Wrap","NamedNode","getCompare","compare","indexedValueChanged","oldNode","newNode","oldWrapped","newWrapped","minPost","MIN","isDefinedOn","assertionError","maxPost","makePost","indexValue","KEY_INDEX","KeyIndex","__childrenNodeConstructor","nodeFromJSON","priorityHashText","validatePriorityNode","priorityNode","isLeafNode","getPriority","value_","priorityNode_","LeafNode","EMPTY_NODE","lazyHash_","updatePriority","newPriorityNode","getImmediateChild","childName","getChild","hasChild","getPredecessorChildName","childNode","updateImmediateChild","newChildNode","updateChild","front","numChildren","forEachChild","exportFormat","getValue","hash","toHash","compareTo","compareToLeafNode_","otherLeaf","otherLeafType","thisLeafType","otherIndex","VALUE_TYPE_ORDER","thisIndex","withIndex","isIndexed","_defaultIndexMap","PRIORITY_INDEX","aPriority","bPriority","indexCmp","startKey","comparator","isReverse_","resultGenerator_","nodeStack_","getNext","hasNext","peek","color","LLRBNode","RED","SortedMap","copy","inorderTraversal","reverseTraversal","min_","minKey","maxKey","insert","n","fixUp_","removeMin_","isRed_","moveRedLeft_","smallest","rotateRight_","moveRedRight_","rotateLeft_","colorFlip_","nl","nr","checkMaxDepth_","blackDepth","check_","BLACK","comparator_","root_","getPredecessorKey","rightParent","getIterator","resultGenerator","SortedMapIterator","getIteratorFrom","getReverseIteratorFrom","getReverseIterator","LLRBEmptyNode","LOG_2","num","current_","mask","bits_","nextBitIsOne","buildChildSet","childList","keyFn","mapSortFn","buildBalancedTree","low","high","namedNode","middle","base12","buildPennant","chunkSize","childTree","attachPennant","pennant","isOne","buildFrom12Array","Base12Num","fallbackObject","indexes_","indexSet_","IndexMap","indexKey","sortedMap","safeGet","hasIndex","indexDefinition","addIndex","existingChildren","newIndex","sawIndexedValue","iter","next","indexName","newIndexSet","newIndexes","addToIndexes","map","indexedChildren","existingSnap","newChildren","removeFromIndexes","NAME_ONLY_COMPARATOR","NAME_COMPARATOR","children_","indexMap_","ChildrenNode","Default","newIndexMap","newPriority","newImmediateChild","numKeys","allIntegerKeys","childHash","idx","resolveIndex_","predecessor","getFirstChildName","getFirstChild","getLastChildName","getLastChild","wrappedNode","startPost","iterator","endPost","otherChildrenNode","thisIter","otherIter","thisCurrent","otherCurrent","defineProperties","MAX","setPriorityMaxNode","childData","childSet","sortedChildSet","setNodeFromJSON","__referenceConstructor","VALUE_INDEX","valueNode","indexPath_","extractChild","snap","aChild","bChild","node_","ref_","index_","exportVal","exists","childPathString","childPath","childRef","DataSnapshot","childrenNode","hasChildren","getRef","eventRegistration","prevName","getParent","getEventType","getEventRunner","callback_","cancelCallback_","context_","respondsTo","createEvent","change","getQueryParams","getIndex","DataEvent","snapshotNode","eventData","ctx","createCancelEvent","CancelEvent","matches","ValueEventRegistration","hasAnyCallback","callbacks_","eventToCheck","ChildEventRegistration","otherKeys","thisKeys","otherCount","otherKey","thisKey","every","repo","queryParams_","orderByCalled_","validateQueryEndpoints_","startNode","endNode","hasStart","getIndexStartValue","hasEnd","getIndexEndValue","tooManyArgsError","wrongArgTypeError","getIndexStartName","getIndexEndName","PathIndex","validateLimit_","hasLimit","hasAnchoredLimit","validateNoPreviousOrderByCall_","Query","on","cancelCallbackOrContext","ret","getCancelAndContextArgs_","onValueEvent","onChildEvent","cancelCallback","addEventCallbackForQuery","off","validateContextObject","valueCallback","removeEventCallbackForQuery","once","userCallback","failureCallbackOrContext","firstCall","onceCallback","err","limitToFirst","limit","limitToLast","orderByChild","parsedPath","newParams","orderBy","orderByKey","orderByPriority","orderByValue","startAt","endAt","equalTo","queryObject","getQueryObject","queryIdentifier","isEqual","sameRepo","samePath","sameQueryIdentifier","cancelOrContext","ExistingValueProvider","syncTree","syncTree_","DeferredValueProvider","calcCompleteEventCache","resolveDeferredLeafValue","existingVal","serverValues","resolveScalarDeferredValue","resolveComplexDeferredValue","op","existing","unused","delta","existingNode","resolveDeferredValueTree","resolveDeferredValue","resolveDeferredValueSnapshot","rawPri","leafNode","OperationType","find","childKey","has","remember","clear","SparseSnapshotTree","forget","tree","forEachTree","prefixPath","func","emptyChildrenSingleton","fromUser","fromServer","queryId","tagged","User","OperationSource","Server","forServerTaggedQuery","affectedTree","revert","ACK_USER_WRITE","source","operationForChild","subtree","AckUserWrite","Empty","fromObject","ImmutableTree","childSnap","findRootMostMatchingPathAndValue","predicate","childExistingPathAndValue","findRootMostValueAndPath","toSet","newChild","setTree","newTree","fold","fold_","pathSoFar","accum","findOnPath","findOnPath_","pathToFollow","nextChild","foreachOnPath","foreachOnPath_","currentRelativePath","foreach","foreach_","foreachChild","LISTEN_COMPLETE","ListenComplete","OVERWRITE","Overwrite","MERGE","Merge","fullyInitialized_","filtered_","isFullyInitialized","isFiltered","isCompleteForPath","isCompleteForChild","getNode","eventCache_","serverCache_","updateEventSnap","eventSnap","filtered","ViewCache","CacheNode","updateServerSnap","serverSnap","getEventCache","getCompleteEventSnap","getServerCache","getCompleteServerSnap","oldSnap","valueChange","Change","VALUE","childAddedChange","CHILD_ADDED","childRemovedChange","CHILD_REMOVED","childChangedChange","newSnapshot","oldSnapshot","CHILD_CHANGED","childMovedChange","CHILD_MOVED","affectedPath","optChangeAccumulator","oldChild","trackChildChange","updateFullNode","newSnap","filtersNodes","getIndexedFilter","changeMap","oldChange","oldType","getChanges","from","values","NO_COMPLETE_CHILD_SOURCE","getCompleteChild","getChildAfterChild","writes_","viewCache_","optCompleteServerCache_","serverNode","calcCompleteChild","completeServerData","nodes","calcIndexedSlice","viewCache","changes","filter_","assertIndexed","applyOperation","oldViewCache","operation","writesCache","completeCache","newViewCache","filterServerNode","accumulator","ChildChangeAccumulator","overwrite","applyUserOverwrite_","applyServerOverwrite_","applyUserMerge_","applyServerMerge_","ackUserWrite","revertUserWrite_","ackUserWrite_","listenComplete_","ViewProcessor","maybeAddValueEvent_","ProcessorResult","isLeafOrEmpty","oldCompleteSnap","generateEventCacheAfterServerEvent_","changePath","oldEventSnap","shadowingWrite","newEventCache","serverCache","completeChildren","completeEventChildren","calcCompleteEventChildren","completeNode","oldEventNode","updatedPriority","calcEventCacheAfterServerOverwrite","childChangePath","newEventChild","eventChildUpdate","changedSnap","newServerCache","oldServerSnap","serverFilter","newServerNode","WriteTreeCompleteChildSource","newEventSnap","cacheHasChild_","changedChildren","curViewCache","writePath","applyMerge_","viewMergeTree","serverChild","childMergeTree","isUnknownDeepMerge","ackPath","mergePath","serverCachePath","oldServerNode","completeServerCache","oldEventCache","serverChildren","query_","generateEventsForChanges","eventCache","eventRegistrations","events","moves","generateEventsForType_","registrations","filteredChanges","filter","compareChanges_","materializedChange","materializeSingleChange_","registration","aWrapped","bWrapped","initialViewCache","eventRegistrations_","indexFilter","IndexedFilter","getNodeFilter","processor_","initialServerCache","initialEventCache","eventGenerator_","EventGenerator","getQuery","getCompleteServerCache","cache","loadsAllData","addEventRegistration","removeEventRegistration","cancelError","cancelEvents","maybeEvent","remaining","generateEventsForChanges_","getInitialEvents","initialChanges","views","optCompleteServerCache","view","serverCacheComplete","eventCacheComplete","View","removed","hadCompleteView","hasCompleteView","entries","viewQueryId","SyncPoint","getQueryViews","viewForQuery","getCompleteView","viewExistsForQuery","writeTree_","addWrite","CompoundWrite","rootmost","rootMostPath","addWrites","updates","newWrite","removeWrite","hasCompleteWrite","getCompleteNode","getCompleteChildren","childCompoundWrite","shadowingNode","applySubtreeWrite","writeTree","visibleWrites_","allWrites_","lastWriteId_","childWrites","WriteTreeRef","addOverwrite","writeId","visible","addMerge","getWrite","record","findIndex","writeToRemove","splice","removedWriteWasVisible","removedWriteOverlapsWithOtherWrites","currentWrite","recordContainsPath_","resetTree_","getCompleteWriteData","treePath","writeIdsToExclude","includeHiddenWrites","mergeAtPath","WriteTree","layerTree_","write","layeredCache","subMerge","completeServerChildren","topLevelSet","existingEventSnap","existingServerSnap","childMerge","toIterate","writeRecord","DefaultFilter_","writes","treeRoot","compoundWrite","deepNode","treePath_","existingServerCache","listenProvider_","syncPointTree_","pendingWriteTree_","tagToQueryMap","queryToTagMap","applyUserOverwrite","newData","applyOperationToSyncPoints_","applyUserMerge","changeTree","applyServerOverwrite","applyServerMerge","applyListenComplete","applyTaggedQueryOverwrite","tag","queryKey","queryKeyForTag_","r","SyncTree","parseQueryKey_","queryPath","applyTaggedOperation_","applyTaggedQueryMerge","applyTaggedListenComplete","foundAncestorDefaultView","pathToSyncPoint","sp","syncPoint","childSyncPoint","viewAlreadyExists","makeQueryKey_","getNextQueryTag_","setupListener_","maybeSyncPoint","removedAndEvents","removingDefault","covered","parentSyncPoint","newViews","collectDistinctViewsForSubTree_","newQuery","listener","createListenerForView_","startListening","queryForListening_","tagForQuery_","hashFn","stopListening","queryToRemove","tagToRemove","removeTags_","maybeChildSyncPoint","childMap","childViews","queries","removedQuery","removedQueryKey","removedQueryTag","isDefault","queriesToStop","childQueries","queryToStop","reason","toUpperCase","errorForServerCode","splitIndex","nextQueryTag_","applyOperationHelper_","syncPointTree","applyOperationDescendantsHelper_","childOperation","childServerCache","childWritesCache","rootNode_","updateSnapshot","newSnapshotNode","counters_","incrementCounter","amount","deepCopy","getCollection","hashString","collections_","StatsCollection","getOrCreateReporter","creatorFunction","reporters_","collection_","last_","newStats","stat","collection","server_","statsToReport_","statsListener_","StatsListener","reportStats_","includeStat","stats","reportedStats","haveStatsToReport","reportStats","eventLists_","recursionDepth_","queueEvents","eventDataList","currList","eventPath","EventList","raiseEventsAtPath","raiseQueuedEventsMatchingPredicate_","raiseEventsForChangedPath","changedPath","sentAll","eventList","raise","events_","eventFn","allowedEvents_","listeners_","trigger","listeners","validateEventType_","getInitialEvent","et","hidden","visibilityChange","document","addEventListener","visible_","getInstance","VisibilityMonitor","EventEmitter","online_","isMobileCordova","OnlineMonitor","currentlyOnline","onMessage_","pendingResponses","currentResponseNum","closeAfterResponse","onClose","closeAfter","responseNum","handleResponse","requestNum","toProcess","FIREBASE_LONGPOLL_START_PARAM","FIREBASE_LONGPOLL_CLOSE_COMMAND","connId","applicationId","transportSessionId","lastSessionId","bytesSent","bytesReceived","everConnected_","log_","stats_","StatsManager","urlFn","open","onMessage","onDisconnect","curSegmentNum","onDisconnect_","myPacketOrderer","PacketReceiver","isClosed_","connectTimeoutTimer_","onClosed_","isNodeSdk","readyState","attachEvent","executeWhenDOMReady","scriptTagHolder","FirebaseIFrameScriptHolder","command","arg1","arg2","incrementIncomingBytes_","clearTimeout","password","sendNewPolls","pN","urlParams","uniqueCallbackIdentifier","href","connectURL","addTag","start","startLongPoll","addDisconnectPingFrame","forceAllow","BrowserPollConnection","forceAllow_","forceDisallow","forceDisallow_","isAvailable","Windows","UI","markConnectionHealthy","shutdown_","myDisconnFrame","removeChild","send","dataStr","base64data","base64Encode","MAX_URL_DATA_SIZE","enqueueSegment","pw","src","appendChild","commandCB","onMessageCB","outstandingRequests","pendingSegs","currentSerial","myIFrame","createIFrame_","script","iframeContents","doc","iframe","contentWindow","contentDocument","alive","innerHTML","myID","myPW","newRequest_","theURL","curDataString","d","theSeg","shift","seg","ts","addLongPollTag_","segnum","totalsegs","url","serial","doNewRequest","keepaliveTimeout","loadCB","doNodeLongPoll","async","onload","onreadystatechange","rstate","parentNode","SDK_VERSION","WebSocketImpl","MozWebSocket","WebSocket","keepaliveTimer","frames","totalFrames","WebSocketConnection","connectionURL_","device","process","platform","env","proxy","origin","mySock","onopen","onclose","m","handleIncomingFrame","isOldAndroid","userAgent","oldAndroidMatch","match","parseFloat","previouslyFailed","appendFrame_","fullMess","jsonMess","handleNewFrameCount_","frameCount","extractFrameCount_","isNaN","mess","resetKeepAlive","remainingData","sendString_","clearInterval","setInterval","responsesRequiredToBeHealthy","healthyTimeout","initTransports_","isWebSocketsAvailable","isSkipPollConnection","transports_","transports","TransportManager","ALL_TRANSPORTS","transport","initialTransport","upgradeTransport","repoInfo_","applicationId_","onReady_","onKill_","connectionCount","pendingDataMessages","state_","transportManager_","start_","conn","conn_","nextTransportId_","primaryResponsesRequired_","onMessageReceived","connReceiver_","onConnectionLost","disconnReceiver_","tx_","rx_","secondaryConn_","isHealthy_","healthyTimeoutMS","healthyTimeout_","everConnected","onConnectionLost_","onSecondaryConnectionLost_","onPrimaryMessageReceived_","onSecondaryMessageReceived_","sendRequest","dataMsg","msg","t","sendData_","tryCleanupConnection","onSecondaryControl_","controlData","cmd","upgradeIfSecondaryHealthy_","secondaryResponsesRequired_","parsedData","layer","proceedWithUpgrade_","onControl_","onDataMessage_","onPrimaryResponse_","payload","onHandshake_","onConnectionShutdown_","onReset_","sendPingOnPrimaryIfNecessary_","handshake","timestamp","h","sessionId","onConnectionEstablished_","tryStartUpgrade_","startUpgrade_","closeConnections_","put","onDisconnectPut","onDisconnectMerge","RECONNECT_MIN_DELAY","onDataUpdate_","onConnectStatus_","onServerInfoUpdate_","authTokenProvider_","authOverride_","PersistentConnection","nextPersistentConnectionId_","interruptReasons_","listens","outstandingPuts_","outstandingPutCount_","onDisconnectRequestQueue_","connected_","reconnectDelay_","maxReconnectDelay_","securityDebugCallback_","establishConnectionTimer_","requestCBHash_","requestNumber_","realtime_","authToken_","forceTokenRefresh_","invalidAuthTokenCount_","firstConnection_","lastConnectionAttemptTime_","lastConnectionEstablishedTime_","scheduleConnect_","onVisible_","onOnline_","onResponse","curReqNum","listen","currentHashFn","listenSpec","sendListen_","req","warnOnListenWarnings_","removeListen_","warnings","indexSpec","indexPath","tryAuth","reduceReconnectDelayIfAdminCredential_","credential","isAdmin","authMethod","isValidFormat","requestData","cred","res","onAuthRevoked_","unlisten","sendUnlisten_","queryObj","sendOnDisconnect_","putInternal","sendPut_","queued","errorReason","reqNum","onDataPush_","onListenRevoked_","onSecurityDebugPacket_","getTime","handleTimestamp_","sendConnectStats_","restoreState_","establishConnection_","online","onRealtimeDisconnect_","cancelSentTransactions_","shouldReconnect_","timeSinceLastConnectAttempt","reconnectDelay","nextConnectionId_","getToken","accessToken","Connection","interrupt","resume","serverTimeOffset","q","normalizedPathString","statusCode","explanation","notifyForInvalidToken","clientName","isReactNative","ServerActions","listens_","getListenId_","listenId","ReadonlyRestClient","thisListen","queryStringParameters","toRestQueryStringParameters","restRequest_","authTokenData","querystring","xhr","XMLHttpRequest","responseText","INTERRUPT_REASON","forceRestClient","app","authTokenProvider","dataUpdateCount","eventQueue_","EventQueue","nextWriteId_","interceptServerDataCallback_","persistentConnection_","search","authOverride","addTokenChangeListener","statsReporter_","StatsReporter","transactionsInit_","infoData_","SnapshotHolder","infoSyncTree_","infoEvents","updateInfo_","serverSyncTree_","serverTime","offset","generateServerValues","isMerge","taggedChildren","raw","taggedSnap","rerunTransactions_","interceptServerData_","connectStatus","runOnDisconnectEvents_","getNextWriteId_","newVal","newNodeUnresolved","success","clearEvents","callOnCompleteCallback","abortTransactions_","childrenToMerge","empty","changedKey","changedValue","resolvedOnDisconnectTree","resolved","showDelta","longestName","previousValue","currentValue","paddedStat","statsIncrementCounter","metric","__database","Database","indexedFilter_","startPost_","RangedFilter","getStartPost_","endPost_","getEndPost_","getStartPost","getEndPost","startName","endName","rangedFilter_","limit_","getLimit","reverse_","isViewFromLeft","fullLimitUpdateChild_","foundStartPost","changeAccumulator","newChildNamedNode","windowBoundary","inRange","oldChildSnap","compareNext","limitSet_","startSet_","startNameSet_","endSet_","endNameSet_","viewFrom_","indexStartValue_","indexStartName_","indexEndValue_","indexEndName_","QueryParams","WIRE_PROTOCOL_CONSTANTS_","VIEW_FROM_LEFT","copy_","newLimit","VIEW_FROM_RIGHT","WIRE_PROTOCOL_CONSTANTS","INDEX_START_VALUE","INDEX_START_NAME","INDEX_END_VALUE","INDEX_END_NAME","LIMIT","viewFrom","VIEW_FROM","INDEX","LimitedFilter","REST_CONSTANTS","REST_QUERY_CONSTANTS_","qs","ORDER_BY","START_AT","END_AT","LIMIT_TO_FIRST","LIMIT_TO_LAST","DEFAULT","Repo","Reference","parentPath","getRoot","databaseProp","database","transactionUpdate","applyLocally","promiseComplete","TransactionResult","startTransaction","setPriority","thennablePushRef","pushRef","OnDisconnect","TransactionStatus","childCount","name_","parent_","TreeNode","subTree","pathObj","Tree","setValue","updateParents_","forEachDescendant","includeSelf","childrenFirst","forEachAncestor","forEachImmediateDescendantWithValue","updateChild_","childEmpty","childExists","MAX_TRANSACTION_RETRIES_","transactionQueueTree_","watchRef","order","retryCount","unwatcher","abortReason","currentWriteId","currentInputSnapshot","currentOutputSnapshotRaw","currentOutputSnapshotResolved","currentState","getLatestState_","RUN","queueNode","nodeQueue","priorityForNode","sendReadyTransactions_","excludeSets","pruneCompletedTransactionsBelowNode_","queue","buildTransactionQueue_","sendTransactionQueue_","setsToIgnore","txn","latestState","snapToSend","latestHash","SENT","dataToSend","pathToSend","COMPLETED","SENT_NEEDS_ABORT","NEEDS_ABORT","rootMostTransactionNode","getAncestorTransactionNode_","rerunTransactionQueue_","abortTransaction","currentNode","newDataNode","oldWriteId","newNodeResolved","lastInput","transactionNode","transactionQueue","aggregateTransactionQueuesForNode_","to","abortTransactionsOnNode_","lastSent","_staticInstance","app_","authProvider_","auth_","auth","addAuthTokenListener","removeTokenChangeListener","removeAuthTokenListener","errorMessage","EmulatorAdminTokenProvider","EMULATOR_AUTH_TOKEN","repos_","useRestClient_","RepoManager","dbUrl","databaseFromApp","authProvider","databaseURL","projectId","isEmulator","dbEmulatorHost","FirebaseAuthTokenProvider","createRepo","deleteRepo","appRepos","INTERNAL","DatabaseInternals","checkDeleted_","refFromURL","apiName","parsedURL","goOffline","goOnline","ServerValue","TIMESTAMP","increment","DataConnection","simpleListen","echo","onEcho","RealTimeConnection","ConnectionTarget","newHash","oldPut","errorCodeMap","OK","CANCELLED","UNKNOWN","INVALID_ARGUMENT","DEADLINE_EXCEEDED","NOT_FOUND","ALREADY_EXISTS","PERMISSION_DENIED","UNAUTHENTICATED","RESOURCE_EXHAUSTED","FAILED_PRECONDITION","ABORTED","OUT_OF_RANGE","UNIMPLEMENTED","UNAVAILABLE","DATA_LOSS","details","setPrototypeOf","HttpsErrorImpl","messagingProvider","messaging","getAuthToken","getInstanceIdToken","Notification","permission","getContext","instanceIdToken","mapValues","o","valueOf","isFinite","x","decode","regionOrCustomDomain_","fetchImpl","serializer","Serializer","emulatorOrigin","deleteService","contextProvider","ContextProvider","cancelAllRequests","URL","customDomain","region","_url","useFunctionsEmulator","httpsCallable","postJSON","millis","timer","_","failAfter","failAfterPromise","race","clearTimeoutWrapper","bodyJSON","codeForHTTPStatus","description","errorJSON","_errorForResponse","responseData","namespaceExports","Functions","Service","registerComponent","regionOrCustomDomain","getProvider","setServiceProps","setMultipleInstances","MessageType","ERROR_MAP","DEFAULT_VAPID_KEY","CONSOLE_CAMPAIGN_ID","arrayToBase64","uint8Array","base64ToArray","base64String","repeat","rawData","atob","outputArray","charCodeAt","OLD_DB_NAME","OLD_OBJECT_STORE_NAME","migrateOldDatabase","senderId","databases","includes","tokenDetails","objectStoreNames","oldDetails","p256dh","fcmToken","createTime","subscriptionOptions","swScope","vapidKey","checkTokenDetails","getDbPromise","upgradeDb","dbGet","firebaseDependencies","oldTokenDetails","dbSet","tx","dbRemove","requestGetToken","getBody","subscribeOptions","getEndpoint","errorInfo","requestUpdateToken","updateOptions","requestDeleteToken","unsubscribeOptions","ENDPOINT","installations","web","applicationPubKey","swRegistration","getPushSubscription","pushSubscription","scope","getNewToken","dbOptions","currentOptions","isVapidKeyEqual","isEndpointEqual","isAuthEqual","isP256dhEqual","isTokenValid","updateToken","deleteToken","pushManager","getSubscription","unsubscribe","updatedToken","updatedTokenDetails","subscription","subscribe","userVisibleOnly","applicationServerKey","isConsoleMessage","isOnBackgroundMessageUsed","bgMessageHandler","waitUntil","onPush","onSubChange","onNotificationClick","setBackgroundMessageHandler","onBackgroundMessage","nextOrObserver","requestPermission","usePublicVapidKey","useServiceWorker","onTokenRefresh","internalPayload","getMessagePayloadInternal","getClientList","debug","TAG","clientList","some","client","visibilityState","startsWith","hasVisibleClients","sendMessagePayloadInternalToWindows","isNotificationShown","notification","showNotification","wrapInternalPayload","collapseKey","collapse_key","messagePayloadInternal","title","image","propagateNotificationPayload","propagateDataPayload","fcmOptions","link","analyticsLabel","analytics_label","propagateFcmOptions","externalizePayload","stopImmediatePropagation","click_action","getLink","originUrl","getWindowClient","clients","openWindow","messageType","NOTIFICATION_CLICKED","isFirebaseMessaging","wrappedInternalPayload","clientUrl","PUSH_RECEIVED","matchAll","includeUncontrolled","notificationPayloadInternal","actions","maxActions","onMessageCallback","serviceWorker","messageEventListener","stripInternalFields","assign","dataPayload","logEvent","getVapidKey","getSwReg","updateVapidKey","updateSwReg","serviceWorkerRegistration","registerDefaultSw","ServiceWorkerRegistration","register","browserErrorMessage","permissionResult","analyticsProvider","message_id","message_name","message_time","message_device_time","getMissingValueError","valueName","NAMESPACE_EXPORTS","isSupported","PushSubscription","cookieEnabled","keyName","messagingSenderId","extractAppConfig","SwController","WindowController","apiInstance","windowInstance","ERROR_DESCRIPTION_MAP","ErrorFactory","SERVICE_NAME","consoleLogger","INFO","settingsServiceInstance","performance","PerformanceObserver","windowLocation","localStorage","perfMetrics","onFirstInputDelay","getUrl","mark","measure","measureName","mark1","mark2","getEntriesByType","getEntriesByName","getTimeOrigin","timeOrigin","timing","navigationStart","requiredApisAvailable","isIndexedDBAvailable","info","setupObserver","entryType","list","getEntries","observe","entryTypes","Api","mergeStrings","part1","part2","sizeDiff","resultArray","iid","VisibilityState","instrumentationEnabled","dataCollectionEnabled","loggingEnabled","tracesSamplingRate","networkRequestsSamplingRate","logEndPointUrl","flTransportEndpointUrl","transportKey","logSource","logTraceAfterSampling","logNetworkAfterSampling","configTimeToLive","getAppId","firebaseAppInstance","getProjectId","getApiKey","getFlTransportFullUrl","SettingsService","getIid","RESERVED_ATTRIBUTE_PREFIXES","ATTRIBUTE_FORMAT_REGEX","getServiceWorkerStatus","controller","getVisibilityState","VISIBLE","HIDDEN","getEffectiveConnectionType","navigatorConnection","connection","effectiveType","REMOTE_CONFIG_SDK_VERSION","DEFAULT_CONFIGS","FIS_AUTH_PREFIX","getConfig","config","expiryString","CONFIG_EXPIRY_LOCAL_STORAGE_KEY","expiry","configStringified","CONFIG_LOCAL_STORAGE_KEY","parse","getStoredConfig","processConfig","authTokenPromise","installationsService","authTokenVal","getAuthTokenPromise","configEndPoint","Request","Authorization","app_instance_id","app_instance_id_token","app_id","app_version","sdk_version","COULD_NOT_GET_CONFIG_MSG","getRemoteConfig","storeConfig","fpr_enabled","fpr_log_source","fpr_log_endpoint_url","fpr_log_transport_key","fpr_vc_network_request_sampling_rate","fpr_vc_trace_sampling_rate","shouldLogAfterSampling","samplingRate","initializationPromise","initializationStatus","getInitializationPromise","removeEventListener","getDocumentReadyComplete","iidPromise","getId","iidVal","getIidPromise","changeInitializationStatus","DEFAULT_SEND_INTERVAL_MS","remainingTries","isTransportSetup","processQueue","timeOffset","staged","log_event","evt","source_extension_json_proto3","event_time_ms","eventTime","flTransportFullUrl","postToFlEndpoint","transportWait","nextRequestWaitMillis","requestOffset","logResponseDetails","responseAction","sendEventsToFl","request_time_ms","client_info","client_type","js_client_info","log_source","dispatchQueueEvents","addToQueue","sendLog","resource","resourceType","transportHandler","logTrace","trace","settingsService","isAuto","sendTraceLog","networkRequest","networkRequestMetric","http_method","httpMethod","http_response_code","response_payload_bytes","responsePayloadBytes","client_start_time_us","startTimeUs","time_to_response_initiated_us","timeToResponseInitiatedUs","time_to_response_completed_us","timeToResponseCompletedUs","perfMetric","application_info","getApplicationInfo","network_request_metric","serializeNetworkRequest","traceMetric","is_auto","duration_us","durationUs","counters","customAttributes","getAttributes","custom_attributes","trace_metric","serializeTrace","google_app_id","web_app_info","page_url","service_worker_status","visibility_state","effective_connection_type","application_process_state","oobMetrics","FIRST_CONTENTFUL_PAINT_COUNTER_NAME","FIRST_INPUT_DELAY_COUNTER_NAME","traceMeasureName","state","api","randomId","traceStartMark","TRACE_START_MARK_PREFIX","traceStopMark","TRACE_STOP_MARK_PREFIX","traceMeasure","TRACE_MEASURE_PREFIX","calculateTraceMetrics","traceName","stop","startTime","attributes","metrics","incrementMetric","counter","numAsInteger","putMetric","OOB_TRACE_PAGE_LOAD_PREFIX","isValidMetricName","customMetricName","providedValue","valueAsInteger","convertMetricValueToInteger","getMetric","putAttribute","attr","isValidName","isValidCustomAttributeName","isValidValue","isValidCustomAttributeValue","attributeName","attributeValue","getAttribute","removeAttribute","setStartTime","setDuration","perfMeasureEntries","perfMeasureEntry","createOobTrace","navigationTimings","paintTimings","firstInputDelay","route","Trace","timeOriginUs","domInteractive","domContentLoadedEventEnd","loadEventEnd","firstPaint","paintObject","firstContentfulPaint","createUserTimingTrace","createNetworkRequestEntry","performanceEntry","responseStart","responseEnd","networkRequestUrl","logEndpointUrl","flEndpointUrl","logNetworkRequest","transferSize","setupOobResources","setupOobTraces","resources","setupNetworkRequests","measures","setupUserTimingTraces","validateIndexedDBOpenable","GtagCommand","EventName","GTAG_URL","gtagOnConfig","gtagCore","initializationPromisesMap","dynamicConfigPromisesList","measurementIdToAppId","measurementId","gtagParams","correspondingAppId","all","dynamicConfigResults","foundConfig","CONFIG","gtagOnEvent","initializationPromisesToWaitFor","gaSendToList","sendToId","EVENT","wrapOrCreateGtag","dataLayerName","gtagFunctionName","idOrNameOrParams","SET","wrapGtag","wrappedGtag","defaultRetryData","throttleMetadata","intervalMillis","getThrottleMetadata","setThrottleMetadata","metadata","deleteThrottleMetadata","fetchDynamicConfig","appFields","appUrl","jsonResponse","httpStatus","responseMessage","attemptFetchDynamicConfigWithRetry","signal","retryData","throttleEndTimeMillis","backoffCount","setAbortableTimeout","isRetriableError","backoffMillis","abort","initializeIds","dynamicConfigPromise","timeoutMillis","AnalyticsAbortSignal","fetchDynamicConfigWithRetry","fidPromise","validateIndexedDB","envIsValid","dynamicConfig","configProperties","gtagCoreFunction","wrappedGtagFunction","gtagName","globalInitDone","resetGlobalVars","newGlobalInitDone","newInitializationPromisesMap","newDynamicPromises","getGlobalVars","settings","mismatchedEnvMessages","warnOnBrowserContextMismatch","scriptTags","getElementsByTagName","findGtagScriptOnPage","head","insertScriptTag","dataLayer","getOrCreateDataLayer","eventName","eventParams","gtagFunction","global","setCurrentScreen","screenName","setUserId","setUserProperties","flatProperties","setAnalyticsCollectionEnabled","enabled","storage","storageCache","isCachedDataFresh","cacheMaxAgeMillis","lastSuccessfulFetchTimestampMillis","cacheAgeMillis","getLastSuccessfulFetchTimestampMillis","getLastSuccessfulFetchResponse","lastSuccessfulFetchResponse","eTag","storageOperations","setLastSuccessfulFetchTimestampMillis","setLastSuccessfulFetchResponse","firebaseInstallations","installationId","installationToken","urlBase","FIREBASE_REMOTE_CONFIG_URL_BASE","requestBody","language_code","navigatorLanguage","languages","language","fetchPromise","timeoutPromise","_resolve","errorCode","originalErrorMessage","responseEtag","responseBody","BOOLEAN_TRUTHY_VALUES","_source","_value","asString","asBoolean","asNumber","getSource","_client","_storageCache","_storage","_logger","_isInitializationComplete","fetchTimeoutMillis","minimumFetchIntervalMillis","defaultConfig","setLogLevel","FirebaseLogLevel","DEBUG","SILENT","ERROR","getLastFetchStatus","activate","getActiveConfigEtag","activeConfigEtag","setActiveConfig","setActiveConfigEtag","ensureInitialized","_initializePromise","loadFromStorage","abortSignal","RemoteConfigAbortSignal","setLastFetchStatus","lastFetchStatus","FirebaseError","fetchAndActivate","obj1","obj2","getAllKeys","getActiveConfig","allConfigs","getBoolean","getNumber","getString","activeConfig","Value","toFirebaseError","originalError","target","APP_NAMESPACE_STORE","openDbPromise","keyPath","etag","compositeKey","createCompositeKey","lastFetchStatusPromise","lastSuccessfulFetchTimestampMillisPromise","activeConfigPromise","timestampMillis","attemptFetch","calculateBackoffMillis","registerRemoteConfig","firebaseInstance","Storage","StorageCache","packageName","restClient","RestClient","retryingClient","RetryingClient","cachingClient","CachingClient","remoteConfigInstance","RemoteConfig"],"mappings":";wRAoBAA,UAASC,gB,oBAA+B,OCHxC,QAAQ,KAAK,6mBAkCbD,UAAS,gB,qJC1CT,SAASE,EAAKC,EAAOC,GACnB,IAAIC,EAAS,GAMb,OALAC,OAAOC,KAAKJ,GAAOK,SAAQ,SAAUC,IACL,IAA1BL,EAAOM,QAAQD,KACjBJ,EAAOI,GAAQN,EAAMM,OAGlBJ,E,YCHMM,IATF,SAAgBC,GAC3B,IAAIC,EDgBS,SAAgBD,GAkI7B,OAjIuB,SAA0BE,GAC/C,IAsCIC,EAtCAC,EAAUC,UAAUC,OAAS,QAAsBC,IAAjBF,UAAU,GAAmBA,UAAU,GAAK,GAE9EG,EAAOJ,EAAQI,KACfC,EAAgBC,YAAyBN,EAAS,CAAC,SAMnDO,EAAkBH,EAalBI,EAAmC,oBAAVV,EAAuB,SAAUW,GAC5D,MAAO,CACLC,KAAM,SAAcC,GAClB,OAAOb,EAAMc,YAAS,CACpBH,MAAOA,GACNE,OAGL,CACFD,KAAMZ,GAEJe,EAAYC,YAAWN,EAAiBI,YAAS,CACnDhB,UAAWA,EACXQ,KAAMA,GAAQR,EAAUmB,YACxBR,gBAAiBA,GAChBF,IAICP,EAAMC,cACRA,EAAcD,EAAMC,mBACbD,EAAMC,aAKXD,EAAMkB,YACIlB,EAAMkB,iBACXlB,EAAMkB,WAKf,IAAIC,EAAkBC,IAAMC,YAAW,SAAyBR,EAAOS,GACrE,IAAIC,EAAWV,EAAMU,SACjBC,EAAgBX,EAAMY,UACtBC,EAAQb,EAAMa,MACdC,EAAgBd,EAAMe,UACtBC,EAAQrB,YAAyBK,EAAO,CAAC,WAAY,YAAa,QAAS,cAE3EiB,EAAUf,EAAUF,GACpBY,EAAYM,YAAKD,EAAQlB,KAAMY,GAC/BQ,EAASH,EAMb,GAJI5B,IACF+B,EAAS5C,EAAK4C,EAAQ/B,IAGpByB,EACF,OAAON,IAAMa,aAAaV,EAAUT,YAAS,CAC3CW,UAAWM,YAAKR,EAASV,MAAMY,UAAWA,IACzCO,IAGL,GAAwB,oBAAbT,EACT,OAAOA,EAAST,YAAS,CACvBW,UAAWA,GACVO,IAGL,IAAIE,EAAiBP,GAAiB7B,EACtC,OAAoBsB,IAAMe,cAAcD,EAAgBpB,YAAS,CAC/DQ,IAAKA,EACLG,UAAWA,GACVO,GAAST,MAuCd,OADAa,IAAqBjB,EAAiBrB,GAC/BqB,GC/IckB,CAAqBvC,GAC5C,OAAO,SAAUE,EAAOE,GACtB,OAAOH,EAAiBC,EAAOc,YAAS,CACtCwB,aAAcA,KACbpC,O,iCCTP,2FAiGIqC,EAAsC,qBAAXC,OAAyBpB,YAAkBA,kBAKtEqB,EAAwBrB,cAAiB,SAAkBP,EAAOS,GACpE,IAAIoB,EAAoB7B,EAAM8B,WAC1BA,OAAmC,IAAtBD,EAA+B,SAAWA,EACvDE,EAAmB/B,EAAMgC,UACzBA,OAAiC,IAArBD,GAAsCA,EAClDE,EAAgBjC,EAAMkC,OACtBA,OAA2B,IAAlBD,GAAmCA,EAC5CE,EAAenC,EAAMU,SACrBO,EAAUjB,EAAMiB,QAChBL,EAAYZ,EAAMY,UAClBwB,EAAgBpC,EAAMe,UACtBsB,EAAwBrC,EAAMsC,mBAC9BA,OAA+C,IAA1BD,EAAmC,KAAOA,EAC/DE,EAAwBvC,EAAMwC,eAG9BC,GAFJF,OAAkD,IAA1BA,EAAmC,GAAKA,GAEjB3B,UAC3C4B,EAAiB7C,YAAyB4C,EAAuB,CAAC,cAClEG,EAAe1C,EAAM2C,MACrBA,OAAyB,IAAjBD,GAAkCA,EAC1CE,EAAkB5C,EAAM6C,SACxBA,OAA+B,IAApBD,GAAqCA,EAChDE,EAAwB9C,EAAM+C,eAC9BA,OAA2C,IAA1BD,GAA2CA,EAC5DE,EAAiBhD,EAAMiD,QACvBA,OAA6B,IAAnBD,GAAoCA,EAC9CE,EAAwBlD,EAAMkD,sBAC9BC,EAAkBnD,EAAMoD,SACxBA,OAA+B,IAApBD,GAAqCA,EAChDnC,EAAQrB,YAAyBK,EAAO,CAAC,aAAc,YAAa,SAAU,WAAY,UAAW,YAAa,YAAa,qBAAsB,iBAAkB,QAAS,WAAY,iBAAkB,UAAW,wBAAyB,aAElPqD,EAAU9C,aAAiB+C,KAC3BC,EAAe,CACjBZ,MAAOA,GAASU,EAAQV,QAAS,EACjCb,WAAYA,GAEV0B,EAAcjD,SAAa,MAC/BmB,GAAkB,WACZM,GACEwB,EAAYC,SACdD,EAAYC,QAAQC,UAKvB,CAAC1B,IACJ,IAAItB,EAAWH,WAAeoD,QAAQxB,GAClCyB,EAAqBlD,EAASnB,QAAUsE,YAAanD,EAASA,EAASnB,OAAS,GAAI,CAAC,4BACrFuE,EAAevD,eAAkB,SAAUwD,GAE7CP,EAAYC,QAAUO,cAAqBD,KAC1C,IACCE,EAAYC,YAAWJ,EAAcrD,GAErC0D,EAAiBlE,YAAS,CAC5BW,UAAWM,YAAKD,EAAQlB,KAAMa,EAAW2C,EAAaZ,OAAS1B,EAAQ0B,OAAQI,GAAkB9B,EAAQmD,QAASnB,GAAWhC,EAAQgC,QAASJ,GAAY5B,EAAQ4B,SAAUX,GAAUjB,EAAQiB,OAAuB,WAAfJ,GAA2Bb,EAAQoD,oBAAqBT,GAAsB3C,EAAQqD,gBAAiBlB,GAAYnC,EAAQmC,UACjUP,SAAUA,GACT7B,GAEC/B,EAAYmD,GAAiB,KAQjC,OANIF,IACFiC,EAAepD,UAAYqB,GAAiB,MAC5C+B,EAAejB,sBAAwBhC,YAAKD,EAAQsD,aAAcrB,GAClEjE,EAAYuF,KAGVZ,GAEF3E,EAAakF,EAAepD,WAAcqB,EAAwBnD,EAAR,MAE/B,OAAvBqD,IACgB,OAAdrD,EACFA,EAAY,MAC0B,OAA7BkF,EAAepD,YACxBoD,EAAepD,UAAY,QAIXR,gBAAoB+C,IAAYmB,SAAU,CAC5DC,MAAOnB,GACOhD,gBAAoB+B,EAAoBrC,YAAS,CAC/DW,UAAWM,YAAKD,EAAQ0D,UAAWlC,GACnChC,IAAKwD,GACJzB,GAA8BjC,gBAAoBtB,EAAWkF,EAAgBzD,GAAWA,EAASkE,SAGlFrE,gBAAoB+C,IAAYmB,SAAU,CAC5DC,MAAOnB,GACOhD,gBAAoBtB,EAAWgB,YAAS,CACtDQ,IAAKwD,GACJE,GAAiBzD,OA0GPmE,iBA/RK,SAAgB/E,GAClC,MAAO,CAELC,KAAM,CACJ+E,QAAS,OACTC,eAAgB,aAChBjD,WAAY,SACZkD,SAAU,WACVC,eAAgB,OAChBC,MAAO,OACPC,UAAW,aACXC,UAAW,OACXC,WAAY,EACZC,cAAe,EACf,iBAAkB,CAChBC,gBAAiBzF,EAAM0F,QAAQC,OAAOrC,UAExC,+BAAgC,CAC9BmC,gBAAiBzF,EAAM0F,QAAQC,OAAOrC,UAExC,aAAc,CACZsC,QAAS,KAKbf,UAAW,CACTK,SAAU,YAIZT,aAAc,GAGd5B,MAAO,CACL0C,WAAY,EACZC,cAAe,GAIjBjB,oBAAqB,CACnBvC,WAAY,cAIde,SAAU,GAGVI,QAAS,CACP0C,aAAc,aAAaC,OAAO9F,EAAM0F,QAAQvC,SAChD4C,eAAgB,eAIlBzB,QAAS,CACP0B,YAAa,GACbC,aAAc,IAIhB7D,OAAQ,CACN8D,WAAYlG,EAAMmG,YAAYC,OAAO,mBAAoB,CACvDC,SAAUrG,EAAMmG,YAAYE,SAASC,WAEvC,UAAW,CACTnB,eAAgB,OAChBM,gBAAiBzF,EAAM0F,QAAQC,OAAOY,MAEtC,uBAAwB,CACtBd,gBAAiB,iBAMvBjB,gBAAiB,CAGfyB,aAAc,IAIhB3C,SAAU,MA6MoB,CAChC3D,KAAM,eADOoF,CAEZjD,I,qKC1RU,EAAqB,IAErB,EAAkB,WAClB,EAAwB,SAKxB,EAA0B,KCEjC,IAAqB,MACzB,6BACE,kDACF,oBAA4B,2CAC5B,4BAAoC,mCACpC,oBACE,6FACF,iBAAyB,kDACzB,iCACE,2EACH,GAYY,EAAgB,IAAI,eDtBV,gBACK,gBCwB1B,G,SAYc,EAAc,GAC1B,OACA,aAAiB,iBACjB,EAAM,KAAK,SAAQ,kB,SCtCP0E,EAAyB,GACvC,MAAUC,4DADwC,YACG,iB,SAGvCC,EACdC,GAEA,MAAO,CACLC,MAAOD,EAASC,MAChBC,cAAe,EACfC,WA8DuCC,EA9DMJ,EAASG,UAgEjDE,OAAOD,EAAkBE,QAAQ,IAAK,SA/D3CC,aAAcC,KAAKC,OA6DvB,IAA2CL,E,SAzDrBM,EACpBC,EACAX,G,wIAEoC,SAAMA,EAASY,Q,OAEnD,OAFMC,EAA8B,SAC9BC,EAAYD,EAAaE,MAC/B,GAAOC,EAAcvB,OAAM,iBAA2B,CACpDkB,YAAW,EACXM,WAAYH,EAAUI,KACtBC,cAAeL,EAAUM,QACzBC,aAAcP,EAAUQ,iB,SAIZC,EAAW,G,IAAEC,EAAM,SACjC,OAAO,IAAIC,QAAQ,CACjB,eAAgB,mBAChBC,OAAQ,mBACR,iBAAkBF,I,SAING,EACdC,EACA,G,IAAEC,EAAY,eAERC,EAAUP,EAAWK,GAE3B,OADAE,EAAQC,OAAO,gBAmCjB,SAAgCF,GAC9B,MAAUG,UAAyBH,EApCHI,CAAuBJ,IAChDC,E,SAgBaI,EACpBC,G,sIAEe,SAAMA,K,OAErB,OAFMC,EAAS,UAEJd,QAAU,KAAOc,EAAOd,OAAS,IAE1C,GAAOa,KAGT,GAAOC,U,SCnEaC,EACpBT,EACA,G,IAAEU,EAAG,M,gJAkBY,OAhBXC,EAAW1C,EAAyB+B,GAEpCE,EAAUP,EAAWK,GACrBY,EAAO,CACXF,IAAG,EACHG,YAAaT,EACbU,MAAOd,EAAUc,MACjBC,WAAYC,GAGRC,EAAuB,CAC3BC,OAAQ,OACRhB,QAAO,EACPU,KAAMO,KAAKC,UAAUR,IAGN,GAAMN,GAAmB,WAAM,OAAAe,MAAMV,EAAUM,O,cAA1D7C,EAAW,UACJkD,GACuC,GAAMlD,EAASY,QAD/D,M,OAQF,OAPMuC,EAA4C,SAOlD,GANiE,CAC/Db,IAAKa,EAAcb,KAAOA,EAC1Bc,mBAAoB,EACpBvB,aAAcsB,EAActB,aAC5BwB,UAAWtD,EAAiCoD,EAAcE,a,OAItD,SAAM3C,EAAqB,sBAAuBV,I,OAAxD,MAAM,gB,SC9CMsD,EAAMC,GACpB,OAAO,IAAIC,SAAc,SAAAC,GACvBC,WAAWD,EAASF,MCDjB,IAAMI,EAAoB,oB,SAOjBC,IACd,IAGE,IAAMC,EAAe,IAAIC,WAAW,KAElCC,KAAKC,QAAYD,KAA0CE,UACtDC,gBAAgBL,GAGvBA,EAAa,GAAK,IAAcA,EAAa,GAAK,GAElD,IAAMvB,EAUV,SAAgBuB,GAKd,OCpCoCM,EDgCIN,EC/B5BO,KAAKC,OAAOC,aAAY,MAAnBD,OAAM,mBAAiBF,KAC7B7D,QAAQ,MAAO,KAAKA,QAAQ,MAAO,MDkC7BiE,OAAO,EAAG,I,ICpCSJ,EDqBtBK,CAAOX,GAEnB,OAAOF,EAAkBc,KAAKnC,GAAOA,EApBd,GAqBvB,SAEA,MAvBuB,I,SEAXoC,EAAO9C,GACrB,OAAUA,EAAU+C,QAAO,IAAI/C,EAAUc,MCA3C,IAAMkC,EAA2D,IAAIC,I,SAMrDC,EAAWlD,EAAsBU,GAC/C,IAAMyC,EAAML,EAAO9C,GAEnBoD,EAAuBD,EAAKzC,GAsD9B,SAA4ByC,EAAazC,GACvC,IAAM2C,EAAUC,IACZD,GACFA,EAAQE,YAAY,CAAEJ,IAAG,EAAEzC,IAAG,IAEhC8C,IA1DAC,CAAmBN,EAAKzC,GA0C1B,SAAS0C,EAAuBD,EAAazC,G,QACrCgD,EAAYV,EAAmBW,IAAIR,GACzC,GAAKO,E,IAIL,IAAuB,yBAAAA,GAAS,8BAAE,EAChCE,EADiB,SACRlD,I,kGAYb,IAAImD,EAA4C,KAEhD,SAASP,IAOP,OANKO,GAAoB,qBAAsB1B,QAC7C0B,EAAmB,IAAIC,iBAAiB,0BACvBC,UAAY,SAAAC,GAC3BZ,EAAuBY,EAAEC,KAAKd,IAAKa,EAAEC,KAAKvD,OAGvCmD,EAGT,SAASL,IACyB,IAA5BR,EAAmBkB,MAAcL,IACnCA,EAAiBM,QACjBN,EAAmB,MCpFvB,IAEM,EAAoB,+BAEtB,EAAgC,KACpC,SAAS,IAcP,OAbK,IACH,EAAY,iBAPM,kCACG,GAM+B,YAMlD,OAAQ,EAAUO,YAChB,KAAK,EACH,EAAUC,kBAAkBC,QAI7BC,E,SAgBa,EACpB,EACA,G,8IAGW,OADL,EAAM,EAAO,GACR,GAAM,K,OAGA,OAHX,EAAK,SACL,EAAK,EAAG,YAAY,EAAmB,aAE5B,IADX,EAAc,EAAG,YAAY,IACA,IAAI,I,OACvC,OADM,EAAW,SACjB,GAAM,EAAY,IAAI,EAAO,I,OAC7B,OADA,SACA,GAAM,EAAG,U,OAMT,OANA,SAEK,GAAY,EAAS,MAAQ,EAAM,KACtC,EAAW,EAAW,EAAM,KAG9B,GAAO,U,SAIa,EAAO,G,0IAEhB,OADL,EAAM,EAAO,GACR,GAAM,K,OAEjB,OAFM,EAAK,SAEX,IADM,EAAK,EAAG,YAAY,EAAmB,cACpC,YAAY,GAAmB,OAAO,I,OAC/C,OADA,SACA,GAAM,EAAG,U,cAAT,S,oBASoB,EACpB,EACA,G,gJAGW,OADL,EAAM,EAAO,GACR,GAAM,K,OAG+B,OAH1C,EAAK,SACL,EAAK,EAAG,YAAY,EAAmB,aAEG,IAD1C,EAAQ,EAAG,YAAY,IAC+B,IAAI,I,cAA1D,EAA0C,cAG/B,KAFX,EAAW,EAAS,IAEtB,MACF,GAAM,EAAM,OAAO,I,cAAnB,S,aAEA,SAAM,EAAM,IAAI,EAAU,I,OAA1B,S,iBAEF,SAAM,EAAG,U,OAMT,OANA,UAEI,GAAc,GAAY,EAAS,MAAQ,EAAS,KACtD,EAAW,EAAW,EAAS,KAGjC,GAAO,U,SCzEaC,EACpBxE,G,0IAI0B,SAAMyE,EAAOzE,GAAW,SAAA0E,GAChD,IAAMC,EAwBV,SACED,GAOA,OAAOE,EAL0BF,GAAY,CAC3ChE,IAAKsB,IACLR,mBAAoB,IA7BMqD,CAAgCH,GACpDI,EAyCV,SACE9E,EACA2E,GAEA,GAAwC,IAApCA,EAAkBnD,mBAAkD,CACtE,IAAKuD,UAAUC,OAKb,MAAO,CACLL,kBAAiB,EACjBM,oBALmCrD,QAAQsD,OAC3C9F,EAAcvB,OAAM,iBASxB,IAAMsH,EAA+C,CACnDzE,IAAKiE,EAAkBjE,IACvBc,mBAAoB,EACpB4D,iBAAkBxG,KAAKC,OAMzB,MAAO,CAAE8F,kBAAmBQ,EAAiBF,oBAcjD,SACEjF,EACA2E,G,wIAGsC,O,sBAAA,GAAMlE,EACxCT,EACA2E,I,OAEF,OAJMU,EAA8B,SAIpC,GAAOC,EAAItF,EAAWqF,I,cAElBE,E,aAAqC,MAAjB,EAAElG,WAGxB,GAAMmG,EAAOxF,IAHX,M,cAGF,S,aAGA,SAAMsF,EAAItF,EAAW,CACnBU,IAAKiE,EAAkBjE,IACvBc,mBAAoB,K,OAFtB,S,iBAKF,MAAM,E,wBAxCsBiE,CAC1BzF,EACAmF,IAGG,OAC+B,IAApCR,EAAkBnD,mBAEX,CACLmD,kBAAiB,EACjBM,oBAAqBS,EAAyB1F,IAGzC,CAAE2E,kBAAiB,GA5EDgB,CACvB3F,EACA2E,GAGF,OADAM,EAAsBH,EAAiBG,oBAChCH,EAAiBH,sB,aLjCD,MK0BnBA,EAAoB,UAUJjE,IAAlB,O,KAE0B,GAAMuE,I,OAAlC,UAAS,EAAAN,kBAAmB,SAA0B,I,OAGxD,SAAO,CACLA,kBAAiB,EACjBM,oBAAmB,WA6FvB,SAAeS,EACb1F,G,4IAM+B,SAAM4F,EAA0B5F,I,OAA3D6F,EAA2B,S,wBACA,IAAxBA,EAAMrE,mBAAgD,MAE3D,GAAME,EAAM,M,OAEJ,OAFR,SAEQ,GAAMkE,EAA0B5F,I,cAAxC6F,EAAQ,S,oBAGkB,IAAxBA,EAAMrE,mBAAN,MAKE,GAAMgD,EAAqBxE,I,OAE/B,OALM,EAGF,SAFF2E,EAAiB,qBACjBM,EAAmB,uBAInB,GAAOA,GAGP,GAAON,G,OAIX,SAAOkB,UAWT,SAASD,EACP5F,GAEA,OAAOyE,EAAOzE,GAAW,SAAA0E,GACvB,IAAKA,EACH,MAAMtF,EAAcvB,OAAM,0BAE5B,OAAO+G,EAAqBF,MAIhC,SAASE,EAAqBiB,GAC5B,OAcsC,KAHtClB,EAXmCkB,GAcfrE,oBAClBmD,EAAkBS,iBAAmBU,EAAqBlH,KAAKC,MAdxD,CACL6B,IAAKmF,EAAMnF,IACXc,mBAAoB,GAIjBqE,EAGT,IACElB,E,SC3LoBoB,EACpB,EACApB,G,IADE3E,EAAS,YAAEgG,EAAsB,yB,kJA2BlB,OAxBXrF,EAoCR,SACEX,EACA,G,IAAEU,EAAG,MAEL,OAAUzC,EAAyB+B,GAAU,IAAIU,EAAG,uBAxCnCuF,CAA6BjG,EAAW2E,GAEnDzE,EAAUH,EAAmBC,EAAW2E,IAGxCuB,EAAiBF,EAAuBG,aAAa,CACzDC,UAAU,MAGVlG,EAAQC,OAAO,oBAAqB+F,EAAeG,yBAG/CzF,EAAO,CACX0F,aAAc,CACZvF,WAAYC,IAIVC,EAAuB,CAC3BC,OAAQ,OACRhB,QAAO,EACPU,KAAMO,KAAKC,UAAUR,IAGN,GAAMN,GAAmB,WAAM,OAAAe,MAAMV,EAAUM,O,cAA1D7C,EAAW,UACJkD,GACsC,GAAMlD,EAASY,QAD9D,M,OAKF,OAJMuC,EAA2C,SAIjD,GAH+CpD,EAC7CoD,I,OAII,SAAMzC,EAAqB,sBAAuBV,I,OAAxD,MAAM,gB,SC9BYmI,EACpBC,EACAC,G,YAAA,IAAAA,OAAA,G,mIAGc,SAAMhC,EAAO+B,EAAaxG,WAAW,SAAA0E,GACjD,IAAKgC,EAAkBhC,GACrB,MAAMtF,EAAcvB,OAAM,kBAG5B,IAAM8I,EAAejC,EAASjD,UAC9B,IAAKgF,GA4HT,SAA0BhF,GACxB,OACyB,IAAvBA,EAAUnD,gBAKd,SAA4BmD,GAC1B,IAAM5C,EAAMD,KAAKC,MACjB,OACEA,EAAM4C,EAAU9C,cAChB8C,EAAU9C,aAAe8C,EAAUlD,UAAYM,EAAM+H,EARpDC,CAAmBpF,GA/HCqF,CAAiBH,GAEpC,OAAOjC,EACF,GAA8B,IAA1BiC,EAAarI,cAGtB,OADAyI,EA0BN,SACEP,EACAC,G,wIAMY,SAAMO,EAAuBR,EAAaxG,Y,OAAlD6F,EAAQ,S,wBACwB,IAA7BA,EAAMpE,UAAUnD,cAA2C,MAEhE,GAAMoD,EAAM,M,OAEJ,OAFR,SAEQ,GAAMsF,EAAuBR,EAAaxG,Y,cAAlD6F,EAAQ,S,aAIV,OAA2B,KADrBpE,EAAYoE,EAAMpE,WACVnD,cAEZ,GAAOiI,EAAiBC,EAAcC,IAEtC,GAAOhF,UA/CUwF,CAA0BT,EAAcC,GAChD/B,EAGP,IAAKK,UAAUC,OACb,MAAM5F,EAAcvB,OAAM,eAG5B,IAAMsH,EA+HZ,SACET,GAEA,IAAMwC,EAA2C,CAC/C5I,cAAe,EACf6I,YAAavI,KAAKC,OAEpB,gDACK6F,GAAQ,CACXjD,UAAWyF,IAxIeE,CAAoC1C,GAE5D,OADAqC,EAsEN,SACEP,EACA7B,G,0IAGoB,O,sBAAA,GAAMoB,EACtBS,EACA7B,I,OAMF,OARMlD,EAAY,SAIZ4F,EAAwB,yCACzB1C,GAAiB,CACpBlD,UAAS,IAEX,GAAM6D,EAAIkB,EAAaxG,UAAWqH,I,OAClC,OADA,SACA,GAAO5F,G,cAEH8D,E,aAAsC,MAAjB,EAAElG,YAAuC,MAAjB,EAAEA,WAA/C,MAGF,GAAMmG,EAAOgB,EAAaxG,Y,cAA1B,S,aAMA,OAJMqH,EAAwB,yCACzB1C,GAAiB,CACpBlD,UAAW,CAAEnD,cAAe,KAE9B,GAAMgH,EAAIkB,EAAaxG,UAAWqH,I,OAAlC,S,iBAEF,MAAM,E,wBAjGWC,CAAyBd,EAAcrB,GAC/CA,M,cArBLU,EAAQ,SAyBIkB,EACd,GAAMA,GADQ,M,cACd,W,aACA,EAAClB,EAAMpE,U,iBACX,SAHkB,UA6CpB,SAASuF,EACPhH,GAEA,OAAOyE,EAAOzE,GAAW,SAAA0E,GACvB,IAAKgC,EAAkBhC,GACrB,MAAMtF,EAAcvB,OAAM,kBAG5B,IAiFiC4D,EAjF3BkF,EAAejC,EAASjD,UAC9B,OAkFuB,KAFUA,EAhFDkF,GAkFtBrI,eACVmD,EAAU0F,YAAcrB,EAAqBlH,KAAKC,MAlFhD,yCACK6F,GAAQ,CACXjD,UAAW,CAAEnD,cAAe,KAIzBoG,KAmCX,SAASgC,EACP/B,GAEA,YACwBxN,IAAtBwN,GACoC,IAApCA,EAAkBnD,mBCxItB,SAAe+F,EACbvH,G,sIAEgC,SAAMwE,EAAqBxE,I,cAAnDiF,EAAwB,SAAL,qBAIzB,GAAMA,GAFJ,M,OAEF,S,2CCfkBuC,EACpBxH,EACA2E,G,4IAUiB,OARXhE,EAcR,SACEX,EACA,G,IAAEU,EAAG,MAEL,OAAUzC,EAAyB+B,GAAU,IAAIU,EAlBhC+G,CAAkBzH,EAAW2E,GAExCzE,EAAUH,EAAmBC,EAAW2E,GACxC1D,EAAuB,CAC3BC,OAAQ,SACRhB,QAAO,GAGQ,GAAMI,GAAmB,WAAM,OAAAe,MAAMV,EAAUM,O,cAA1D7C,EAAW,UACHkD,GAAV,MACI,GAAMxC,EAAqB,sBAAuBV,I,OAAxD,MAAM,S,iCCbM,EACd,EACAwF,G,IADE5D,EAAS,YAKX,O,SPEAA,EACA4D,GAIAN,IAEA,IAAMH,EAAML,EAAO9C,GAEf0H,EAAc1E,EAAmBW,IAAIR,GACpCuE,IACHA,EAAc,IAAIC,IAClB3E,EAAmBsC,IAAInC,EAAKuE,IAE9BA,EAAYE,IAAIhE,GOlBhBiE,CAAY7H,EAAW4D,GAEhB,Y,SPoBP5D,EACA4D,GAEA,IAAMT,EAAML,EAAO9C,GAEb0H,EAAc1E,EAAmBW,IAAIR,GAEtCuE,IAILA,EAAYI,OAAOlE,GACM,IAArB8D,EAAYxD,MACdlB,EAAmB8E,OAAO3E,GAI5BK,KOpCEuE,CAAe/H,EAAW4D,ICkB9B,SAAS,EAAqB,GAC5B,OAAO,EAAc,OAAM,4BAAsC,CAC/D,UAAS,I,SpBjBG,EAAsB,GAGpC,EAAS,SAAS,kBAChB,IAAI,YAHoB,iBAKtB,YACE,IAAM,EAAM,EAAU,YAAY,OAAO,eAKnC,EAAqC,CACzC,U,SoB5BuB,G,QAC/B,IAAK,IAAQ,EAAI,QACf,MAAM,EAAqB,qBAG7B,IAAK,EAAI,KACP,MAAM,EAAqB,Y,IAU7B,IAAsB,yBAN2B,CAC/C,YACA,SACA,UAG8B,8BAAE,CAA7B,IAAM,EAAO,QAChB,IAAK,EAAI,QAAQ,GACf,MAAM,EAAqB,I,iGAI7B,MAAK,CACL,QAAS,EAAI,KACb,UAAW,EAAI,QAAQ,UACvB,OAAQ,EAAI,QAAQ,OACpB,MAAO,EAAI,QAAQ,OpBDG,CAAiB,GAIjC,uBAH6B,EAAU,YAAY,oBAerD,MAT+D,CAC7D,IAAG,EACH,MAAO,WAAM,O,SqBlCrB4C,G,0IAEmD,SAAMhC,EACvDgC,EAAaxG,Y,OAWf,OAZM,EAA6C,SAA3C2E,EAAiB,qBAAEM,EAAmB,uBAK5CA,EAAoB+C,MAAMC,QAAQ9I,OAIlCoH,EAAiBC,GAAcwB,MAAMC,QAAQ9I,OAG/C,GAAOwF,EAAkBjE,YrBoBJ,CAAM,IACnB,SAAU,SAAC,GACT,O,SiBnCV8F,EACAC,G,YAAA,IAAAA,OAAA,G,yHAEA,SAAMc,EAAiCf,EAAaxG,Y,OAIlC,OAJlB,SAIkB,GAAMuG,EAAiBC,EAAcC,I,OACvD,SADkB,SACDpI,cjB2BP,CAAS,EAAc,IACzB,OAAQ,WAAM,O,SsBnCtBmI,G,wIAIc,SAAM/B,EAFZzE,EAAcwG,EAAL,WAEqB,SAAA9B,GACpC,IAAIA,GAAuC,IAA3BA,EAASlD,mBAIzB,OAAOkD,M,YALHmB,EAAQ,UAQV,Y,GAC0B,IAAxBA,EAAMrE,mBAAN,YAEF,MAAMpC,EAAcvB,OAAM,+B,UACO,IAAxBgI,EAAMrE,mBAAN,Y,GACJuD,UAAUC,OAAX,YACF,MAAM5F,EAAcvB,OAAM,e,OAE1B,SAAM2J,EAA0BxH,EAAW6F,I,OAC3C,OADA,SACA,GAAML,EAAOxF,I,OAAb,S,kCtBcgB,CAAmB,IACjC,WAAY,SAAC,GACX,SAAW,EAAc,OAG9B,WAKL,EAAS,gB,0BAAsB,GAGjC,EAAsB,M,qBuBpEd,SAAUkI,GAAW,aAE3B,SAAS5M,EAAQ6M,GACf,OAAOC,MAAMC,UAAUC,MAAMC,KAAKJ,GAGpC,SAASK,EAAiBvH,GACxB,OAAO,IAAIW,SAAQ,SAASC,EAASqD,GACnCjE,EAAQwH,UAAY,WAClB5G,EAAQZ,EAAQT,SAGlBS,EAAQyH,QAAU,WAChBxD,EAAOjE,EAAQ9B,WAKrB,SAASwJ,EAAqBC,EAAK1H,EAAQ2H,GACzC,IAAI5H,EACA6H,EAAI,IAAIlH,SAAQ,SAASC,EAASqD,GAEpCsD,EADAvH,EAAU2H,EAAI1H,GAAQ6H,MAAMH,EAAKC,IACPG,KAAKnH,EAASqD,MAI1C,OADA4D,EAAE7H,QAAUA,EACL6H,EAGT,SAASG,EAA2BL,EAAK1H,EAAQ2H,GAC/C,IAAIC,EAAIH,EAAqBC,EAAK1H,EAAQ2H,GAC1C,OAAOC,EAAEE,MAAK,SAAS3M,GACrB,GAAKA,EACL,OAAO,IAAI6M,EAAO7M,EAAOyM,EAAE7H,YAI/B,SAASkI,EAAgBC,EAAYC,EAAYC,GAC/CA,EAAW9S,SAAQ,SAASC,GAC1BH,OAAOiT,eAAeH,EAAWf,UAAW5R,EAAM,CAChDkN,IAAK,WACH,OAAO6F,KAAKH,GAAY5S,IAE1B6O,IAAK,SAASmE,GACZD,KAAKH,GAAY5S,GAAQgT,QAMjC,SAASC,EAAoBN,EAAYC,EAAYM,EAAaL,GAChEA,EAAW9S,SAAQ,SAASC,GACpBA,KAAQkT,EAAYtB,YAC1Be,EAAWf,UAAU5R,GAAQ,WAC3B,OAAOkS,EAAqBa,KAAKH,GAAa5S,EAAMQ,gBAK1D,SAAS2S,EAAaR,EAAYC,EAAYM,EAAaL,GACzDA,EAAW9S,SAAQ,SAASC,GACpBA,KAAQkT,EAAYtB,YAC1Be,EAAWf,UAAU5R,GAAQ,WAC3B,OAAO+S,KAAKH,GAAY5S,GAAMsS,MAAMS,KAAKH,GAAapS,gBAK5D,SAAS4S,EAA0BT,EAAYC,EAAYM,EAAaL,GACtEA,EAAW9S,SAAQ,SAASC,GACpBA,KAAQkT,EAAYtB,YAC1Be,EAAWf,UAAU5R,GAAQ,WAC3B,OAAOwS,EAA2BO,KAAKH,GAAa5S,EAAMQ,gBAKhE,SAAS6S,EAAMC,GACbP,KAAKQ,OAASD,EAuBhB,SAASb,EAAOe,EAAQhJ,GACtBuI,KAAKU,QAAUD,EACfT,KAAKW,SAAWlJ,EA+BlB,SAASmJ,EAAYC,GACnBb,KAAKc,OAASD,EAuChB,SAASE,EAAYC,GACnBhB,KAAKiB,IAAMD,EACXhB,KAAKkB,SAAW,IAAI9I,SAAQ,SAASC,EAASqD,GAC5CsF,EAAeG,WAAa,WAC1B9I,KAEF2I,EAAe9B,QAAU,WACvBxD,EAAOsF,EAAerL,QAExBqL,EAAeI,QAAU,WACvB1F,EAAOsF,EAAerL,WAkB5B,SAAS0L,EAAUC,EAAI1G,EAAY2G,GACjCvB,KAAKwB,IAAMF,EACXtB,KAAKpF,WAAaA,EAClBoF,KAAKuB,YAAc,IAAIR,EAAYQ,GAkBrC,SAASE,EAAGH,GACVtB,KAAKwB,IAAMF,EA6Db,SAASI,EAAO9T,EAAM+T,EAASC,GAC7B,IAAItC,EAAIH,EAAqB0C,UAAW,OAAQ,CAACjU,EAAM+T,IACnDlK,EAAU6H,EAAE7H,QAUhB,OARIA,IACFA,EAAQqK,gBAAkB,SAASC,GAC7BH,GACFA,EAAgB,IAAIP,EAAU5J,EAAQT,OAAQ+K,EAAMnH,WAAYnD,EAAQ8J,gBAKvEjC,EAAEE,MAAK,SAAS8B,GACrB,OAAO,IAAIG,EAAGH,MAIlB,SAASU,EAASpU,GAChB,OAAOuR,EAAqB0C,UAAW,iBAAkB,CAACjU,IA9N5D+R,EAAgBW,EAAO,SAAU,CAC/B,OACA,UACA,aACA,WAGFJ,EAAoBI,EAAO,SAAU2B,SAAU,CAC7C,MACA,SACA,SACA,aACA,UAGF5B,EAA0BC,EAAO,SAAU2B,SAAU,CACnD,aACA,kBAQFtC,EAAgBD,EAAQ,UAAW,CACjC,YACA,MACA,aACA,UAGFQ,EAAoBR,EAAQ,UAAWwC,UAAW,CAChD,SACA,WAIF,CAAC,UAAW,WAAY,sBAAsBlV,SAAQ,SAASmV,GACvDA,KAAcD,UAAUrD,YAC9Ba,EAAOb,UAAUsD,GAAc,WAC7B,IAAI1B,EAAST,KACTX,EAAO5R,UACX,OAAO2K,QAAQC,UAAUmH,MAAK,WAE5B,OADAiB,EAAOC,QAAQyB,GAAY5C,MAAMkB,EAAOC,QAASrB,GAC1CL,EAAiByB,EAAOE,UAAUnB,MAAK,SAAS3M,GACrD,GAAKA,EACL,OAAO,IAAI6M,EAAO7M,EAAO4N,EAAOE,qBAUxCC,EAAY/B,UAAUuD,YAAc,WAClC,OAAO,IAAI9B,EAAMN,KAAKc,OAAOsB,YAAY7C,MAAMS,KAAKc,OAAQrT,aAG9DmT,EAAY/B,UAAU0B,MAAQ,WAC5B,OAAO,IAAID,EAAMN,KAAKc,OAAOP,MAAMhB,MAAMS,KAAKc,OAAQrT,aAGxDkS,EAAgBiB,EAAa,SAAU,CACrC,OACA,UACA,aACA,kBAGFV,EAAoBU,EAAa,SAAUyB,eAAgB,CACzD,MACA,MACA,SACA,QACA,MACA,SACA,SACA,aACA,UAGFhC,EAA0BO,EAAa,SAAUyB,eAAgB,CAC/D,aACA,kBAGFjC,EAAaQ,EAAa,SAAUyB,eAAgB,CAClD,gBAkBFtB,EAAYlC,UAAUyD,YAAc,WAClC,OAAO,IAAI1B,EAAYZ,KAAKiB,IAAIqB,YAAY/C,MAAMS,KAAKiB,IAAKxT,aAG9DkS,EAAgBoB,EAAa,MAAO,CAClC,mBACA,SAGFX,EAAaW,EAAa,MAAOwB,eAAgB,CAC/C,UASFlB,EAAUxC,UAAUhE,kBAAoB,WACtC,OAAO,IAAI+F,EAAYZ,KAAKwB,IAAI3G,kBAAkB0E,MAAMS,KAAKwB,IAAK/T,aAGpEkS,EAAgB0B,EAAW,MAAO,CAChC,OACA,UACA,qBAGFjB,EAAaiB,EAAW,MAAOmB,YAAa,CAC1C,oBACA,UAOFf,EAAG5C,UAAU0C,YAAc,WACzB,OAAO,IAAIR,EAAYf,KAAKwB,IAAID,YAAYhC,MAAMS,KAAKwB,IAAK/T,aAG9DkS,EAAgB8B,EAAI,MAAO,CACzB,OACA,UACA,qBAGFrB,EAAaqB,EAAI,MAAOe,YAAa,CACnC,UAKF,CAAC,aAAc,iBAAiBxV,SAAQ,SAASyV,GAC/C,CAAC7B,EAAaN,GAAOtT,SAAQ,SAASmT,GAE9BsC,KAAYtC,EAAYtB,YAE9BsB,EAAYtB,UAAU4D,EAASvN,QAAQ,OAAQ,YAAc,WAC3D,IAAImK,EAAOvN,EAAQrE,WACf2M,EAAWiF,EAAKA,EAAK3R,OAAS,GAC9BgV,EAAe1C,KAAKc,QAAUd,KAAKQ,OACnC/I,EAAUiL,EAAaD,GAAUlD,MAAMmD,EAAcrD,EAAKP,MAAM,GAAI,IACxErH,EAAQwH,UAAY,WAClB7E,EAAS3C,EAAQT,iBAOzB,CAACsJ,EAAOM,GAAa5T,SAAQ,SAASmT,GAChCA,EAAYtB,UAAU8D,SAC1BxC,EAAYtB,UAAU8D,OAAS,SAASC,EAAOC,GAC7C,IAAI3Q,EAAW8N,KACX8C,EAAQ,GAEZ,OAAO,IAAI1K,SAAQ,SAASC,GAC1BnG,EAAS6Q,cAAcH,GAAO,SAASnC,GAChCA,GAILqC,EAAME,KAAKvC,EAAO5N,YAEJlF,IAAVkV,GAAuBC,EAAMpV,QAAUmV,EAI3CpC,EAAOwC,WAHL5K,EAAQyK,IANRzK,EAAQyK,cAoClBpE,EAAQgD,OAASA,EACjBhD,EAAQsD,SAAWA,EAEnBlV,OAAOiT,eAAerB,EAAS,aAAc,CAAE7L,OAAO,IAxTSqQ,CAAQxE,I,mECkC1DyE,MApBf,SAAaC,GACX,IAAIC,EAAmB,SAA0BlV,GAC/C,IAAItB,EAASuW,EAAcjV,GAE3B,OAAIA,EAAMgV,IACD/U,YAASA,YAAS,GAAIkV,YAAMzW,EAAQuW,EAAchV,YAAS,CAChEH,MAAOE,EAAMF,OACZE,EAAMgV,QAjBf,SAAcxW,EAAOC,GACnB,IAAIC,EAAS,GAMb,OALAC,OAAOC,KAAKJ,GAAOK,SAAQ,SAAUC,IACL,IAA1BL,EAAOM,QAAQD,KACjBJ,EAAOI,GAAQN,EAAMM,OAGlBJ,EAUeH,CAAKyB,EAAMgV,IAAK,CAACC,EAAc7V,eAG5CV,GAOT,OAJAwW,EAAiB7U,UAEZ,GACL6U,EAAiB9V,YAAc,CAAC,OAAOwG,OAAOwP,YAAmBH,EAAc7V,cACxE8V,GCYMG,MAzCf,WACE,IAAK,IAAIC,EAAOhW,UAAUC,OAAQgW,EAAS,IAAI9E,MAAM6E,GAAOE,EAAO,EAAGA,EAAOF,EAAME,IACjFD,EAAOC,GAAQlW,UAAUkW,GAG3B,IAAI5M,EAAK,SAAY5I,GACnB,OAAOuV,EAAOE,QAAO,SAAUC,EAAKvW,GAClC,IAAIT,EAASS,EAAMa,GAEnB,OAAItB,EACKyW,YAAMO,EAAKhX,GAGbgX,IACN,KAwBL,OANA9M,EAAGvI,UAEM,GACTuI,EAAGxJ,YAAcmW,EAAOE,QAAO,SAAUC,EAAKvW,GAC5C,OAAOuW,EAAI9P,OAAOzG,EAAMC,eACvB,IACIwJ,G,gBCrCT,SAAS+M,EAAQ1E,EAAK2E,GACpB,OAAKA,GAAwB,kBAATA,EAIbA,EAAKC,MAAM,KAAKJ,QAAO,SAAUC,EAAKI,GAC3C,OAAOJ,GAAOA,EAAII,GAAQJ,EAAII,GAAQ,OACrC7E,GALM,KAsDI9R,MA9Cf,SAAeE,GACb,IAAIP,EAAOO,EAAQP,KACfiX,EAAuB1W,EAAQ2W,YAC/BA,OAAuC,IAAzBD,EAAkC1W,EAAQP,KAAOiX,EAC/DE,EAAW5W,EAAQ4W,SACnBC,EAAY7W,EAAQ6W,UAEpBtN,EAAK,SAAY5I,GACnB,GAAmB,MAAfA,EAAMlB,GACR,OAAO,KAGT,IAAIqX,EAAYnW,EAAMlB,GAElBsX,EAAeT,EADP3V,EAAMF,MACgBmW,IAAa,GAwB/C,OAAOI,YAAkBrW,EAAOmW,GAtBP,SAA4BG,GACnD,IAAI5R,EAcJ,MAZ4B,oBAAjB0R,EACT1R,EAAQ0R,EAAaE,GACZ7F,MAAM8F,QAAQH,GACvB1R,EAAQ0R,EAAaE,IAAmBA,GAExC5R,EAAQiR,EAAQS,EAAcE,IAAmBA,EAE7CJ,IACFxR,EAAQwR,EAAUxR,MAIF,IAAhBsR,EACKtR,EAGF8R,YAAgB,GAAIR,EAAatR,OAQ5C,OAFAkE,EAAGvI,UAAoG,GACvGuI,EAAGxJ,YAAc,CAACN,GACX8J,GCtDT,SAAS6N,EAAU/R,GACjB,MAAqB,kBAAVA,EACFA,EAGF,GAAGkB,OAAOlB,EAAO,YAGnB,IAkCQgS,EADDrB,EAjCMlW,EAAM,CACxBL,KAAM,SACNmX,SAAU,UACVC,UAAWO,IAEUtX,EAAM,CAC3BL,KAAM,YACNmX,SAAU,UACVC,UAAWO,IAEYtX,EAAM,CAC7BL,KAAM,cACNmX,SAAU,UACVC,UAAWO,IAEatX,EAAM,CAC9BL,KAAM,eACNmX,SAAU,UACVC,UAAWO,IAEWtX,EAAM,CAC5BL,KAAM,aACNmX,SAAU,UACVC,UAAWO,IAEYtX,EAAM,CAC7BL,KAAM,cACNmX,SAAU,YAEc9W,EAAM,CAC9BL,KAAM,eACNmX,SAAU,WCdGZ,IA1BWlW,EAAM,CAC9BL,KAAM,eACNkX,aAAa,EACbE,UAAW,SAAmBxR,GAC5B,MAAO,CACL,eAAgB,CACdI,QAASJ,OAKOvF,EAAM,CAC5BL,KAAM,YAEcK,EAAM,CAC1BL,KAAM,aAEkBK,EAAM,CAC9BL,KAAM,iBAEgBK,EAAM,CAC5BL,KAAM,eAEgBK,EAAM,CAC5BL,KAAM,gBCgBO6X,EADDtB,EAvCSlW,EAAM,CAC3BL,KAAM,cAEmBK,EAAM,CAC/BL,KAAM,kBAEcK,EAAM,CAC1BL,KAAM,aAEoBK,EAAM,CAChCL,KAAM,mBAEgBK,EAAM,CAC5BL,KAAM,eAEkBK,EAAM,CAC9BL,KAAM,iBAEWK,EAAM,CACvBL,KAAM,UAEUK,EAAM,CACtBL,KAAM,SAEcK,EAAM,CAC1BL,KAAM,aAEgBK,EAAM,CAC5BL,KAAM,eAEeK,EAAM,CAC3BL,KAAM,cAEkBK,EAAM,CAC9BL,KAAM,iBAEiBK,EAAM,CAC7BL,KAAM,iBCAO8X,EADJvB,EApCUlW,EAAM,CACzBL,KAAM,YAEmBK,EAAM,CAC/BL,KAAM,kBAEgBK,EAAM,CAC5BL,KAAM,eAEgBK,EAAM,CAC5BL,KAAM,eAEaK,EAAM,CACzBL,KAAM,YAEkBK,EAAM,CAC9BL,KAAM,iBAEqBK,EAAM,CACjCL,KAAM,oBAEkBK,EAAM,CAC9BL,KAAM,iBAEyBK,EAAM,CACrCL,KAAM,wBAEsBK,EAAM,CAClCL,KAAM,qBAEuBK,EAAM,CACnCL,KAAM,sBAEcK,EAAM,CAC1BL,KAAM,cCfOuW,IAnBOlW,EAAM,CAC1BL,KAAM,aAEYK,EAAM,CACxBL,KAAM,SACNmX,SAAU,WAEK9W,EAAM,CACrBL,KAAM,QAEWK,EAAM,CACvBL,KAAM,UAEYK,EAAM,CACxBL,KAAM,WAEUK,EAAM,CACtBL,KAAM,UCPO0G,EADD6P,EATKlW,EAAM,CACvBL,KAAM,QACNmX,SAAU,YAES9W,EAAM,CACzBL,KAAM,UACNkX,YAAa,kBACbC,SAAU,aCJGY,EAJC1X,EAAM,CACpBL,KAAM,YACNmX,SAAU,YCAZ,SAASC,EAAUxR,GACjB,OAAOA,GAAS,EAAI,GAAGkB,OAAe,IAARlB,EAAa,KAAOA,EAG7C,IAAIQ,EAAQ/F,EAAM,CACvBL,KAAM,QACNoX,UAAWA,IAEFY,EAAW3X,EAAM,CAC1BL,KAAM,WACNoX,UAAWA,IAEFa,EAAW5X,EAAM,CAC1BL,KAAM,WACNoX,UAAWA,IAEFc,EAAS7X,EAAM,CACxBL,KAAM,SACNoX,UAAWA,IAEFe,EAAY9X,EAAM,CAC3BL,KAAM,YACNoX,UAAWA,IAEFgB,EAAY/X,EAAM,CAC3BL,KAAM,YACNoX,UAAWA,IAgBEiB,GAdQhY,EAAM,CAC3BL,KAAM,OACNkX,YAAa,QACbE,UAAWA,IAEW/W,EAAM,CAC5BL,KAAM,OACNkX,YAAa,SACbE,UAAWA,IAKAb,EAAQnQ,EAAO4R,EAAUC,EAAUC,EAAQC,EAAWC,EAH5C/X,EAAM,CAC3BL,KAAM,gB,SCdOsY,EADE/B,EAzBOlW,EAAM,CAC5BL,KAAM,aACNmX,SAAU,eAEU9W,EAAM,CAC1BL,KAAM,WACNmX,SAAU,eAEW9W,EAAM,CAC3BL,KAAM,YACNmX,SAAU,eAEY9W,EAAM,CAC5BL,KAAM,aACNmX,SAAU,eAEe9W,EAAM,CAC/BL,KAAM,kBAEgBK,EAAM,CAC5BL,KAAM,eAEeK,EAAM,CAC3BL,KAAM,e,SCvBGmW,EAAgBD,EAAIK,EAAQqB,EAAS5R,EAAS6R,EAASC,EAAMS,EAAW7R,EAAS8R,EAASH,EAAQI,IAASH,IAKlHI,EAAMxY,YAAO,MAAPA,CAAciW,EAAe,CACrCxV,KAAM,WAEO+X,O,oOCmBf,aAOE,WAAoBC,GAAA,KAAAA,cALZ,KAAAC,QAAU,YAoDpB,OAzCE,YAAA/J,IAAA,SAAInC,EAAa9G,GACF,MAATA,EACFmN,KAAK4F,YAAYE,WAAW9F,KAAK+F,cAAcpM,IAE/CqG,KAAK4F,YAAYI,QAAQhG,KAAK+F,cAAcpM,GAAM/B,YAAU/E,KAQhE,YAAAsH,IAAA,SAAIR,GACF,IAAMsM,EAAYjG,KAAK4F,YAAYM,QAAQlG,KAAK+F,cAAcpM,IAC9D,OAAiB,MAAbsM,EACK,KAEAE,WAASF,IAOpB,YAAAjK,OAAA,SAAOrC,GACLqG,KAAK4F,YAAYE,WAAW9F,KAAK+F,cAAcpM,KASjD,YAAAoM,cAAA,SAAcnY,GACZ,OAAOoS,KAAK6F,QAAUjY,GAGxB,YAAAwY,SAAA,WACE,OAAOpG,KAAK4F,YAAYQ,YAE5B,EAtDA,GCJA,0BACU,KAAAC,OAAmC,GAqB3C,KAAAC,mBAAoB,EACtB,OApBE,YAAAxK,IAAA,SAAInC,EAAa9G,GACF,MAATA,SACKmN,KAAKqG,OAAO1M,GAEnBqG,KAAKqG,OAAO1M,GAAO9G,GAIvB,YAAAsH,IAAA,SAAIR,GACF,OAAI4M,WAASvG,KAAKqG,OAAQ1M,GACjBqG,KAAKqG,OAAO1M,GAEd,MAGT,YAAAqC,OAAA,SAAOrC,UACEqG,KAAKqG,OAAO1M,IAIvB,EAvBA,GCMM6M,EAAmB,SACvBC,GAEA,IAGE,GACoB,qBAAX3W,QAC2B,qBAA3BA,OAAO2W,GACd,CAEA,IAAMC,EAAa5W,OAAO2W,GAG1B,OAFAC,EAAWV,QAAQ,oBAAqB,SACxCU,EAAWZ,WAAW,qBACf,IAAIa,EAAkBD,IAE/B,MAAOlM,IAIT,OAAO,IAAIoM,GAIAC,EAAoBL,EAAiB,gBAGrCM,EAAiBN,EAAiB,kBCzBzCO,EAAY,IAAIC,SAAO,sBAMhBC,EAA+B,WAC1C,IAAIC,EAAK,EACT,OAAO,WACL,OAAOA,KAHiC,GAY/BC,EAAO,SAAUC,GAC5B,IAAMC,EAAYC,oBAAkBF,GAC9BD,EAAO,IAAII,OACjBJ,EAAKlM,OAAOoM,GACZ,IAAMG,EAAYL,EAAKM,SACvB,OAAOC,SAAOC,gBAAgBH,IAQ1BI,EAAmB,SAAnBA,I,IAA6B,sDAEjC,IADA,IAAI5R,EAAU,GACL6R,EAAI,EAAGA,EAAIC,EAAQpa,OAAQma,IAAK,CACvC,IAAME,EAAMD,EAAQD,GAElBjJ,MAAM8F,QAAQqD,IACbA,GACgB,kBAARA,GAEwB,kBAAvBA,EAAYra,OAEtBsI,GAAW4R,EAAiBrI,MAAM,KAAMwI,GAExC/R,GADwB,kBAAR+R,EACLnQ,YAAUmQ,GAEVA,EAEb/R,GAAW,IAGb,OAAOA,GAOEgS,EAAuC,KAO9CC,GAAY,EAOHC,EAAgB,SAC3BC,EACAC,GAEAC,UACGD,IAA0B,IAAZD,IAAgC,IAAZA,EACnC,+CAEc,IAAZA,GACFpB,EAAUuB,SAAWC,WAASC,QAC9BR,EAASjB,EAAU0B,IAAIC,KAAK3B,GACxBqB,GACFtB,EAAehL,IAAI,mBAAmB,IAEZ,oBAAZqM,EAChBH,EAASG,GAETH,EAAS,KACTlB,EAAe9K,OAAO,qBAQbyM,EAAM,W,IAAU,sDAQ3B,IAPkB,IAAdR,IACFA,GAAY,EACG,OAAXD,IAA6D,IAA1ClB,EAAe3M,IAAI,oBACxC+N,GAAc,IAIdF,EAAQ,CACV,IAAMhS,EAAU4R,EAAiBrI,MAAM,KAAMuI,GAC7CE,EAAOhS,KAQE2S,EAAa,SACxBC,GAEA,OAAO,W,IAAU,sDACfH,EAAG,yBAACG,GAAWd,MAONnS,EAAQ,W,IAAU,sDAC7B,IAAMK,EAAU,4BAA8B4R,EAAgB,wBAAIE,IAClEf,EAAUpR,MAAMK,IAML6S,EAAQ,W,IAAU,sDAC7B,IAAM7S,EAAU,yBAAyB4R,EAAgB,wBAAIE,IAE7D,MADAf,EAAUpR,MAAMK,GACV,IAAI8S,MAAM9S,IAML+S,EAAO,W,IAAU,sDAC5B,IAAM/S,EAAU,qBAAuB4R,EAAgB,wBAAIE,IAC3Df,EAAUgC,KAAK/S,IAsCJgT,EAAsB,SAAUvO,GAC3C,MACkB,kBAATA,IACNA,IAASA,GACRA,IAASxF,OAAOgU,mBAChBxO,IAASxF,OAAOiU,oBAuDTC,EAAW,aAMXC,EAAW,aAQXC,EAAc,SAAUC,EAAWC,GAC9C,GAAID,IAAMC,EACR,OAAO,EACF,GAAID,IAAMH,GAAYI,IAAMH,EACjC,OAAQ,EACH,GAAIG,IAAMJ,GAAYG,IAAMF,EACjC,OAAO,EAEP,IAAMI,EAASC,EAAYH,GACzBI,EAASD,EAAYF,GAEvB,OAAe,OAAXC,EACa,OAAXE,EACKF,EAASE,IAAW,EAAIJ,EAAE5b,OAAS6b,EAAE7b,OAAS8b,EAASE,GAEtD,EAEU,OAAXA,EACF,EAEAJ,EAAIC,GAAK,EAAI,GAUbI,EAAgB,SAAUL,EAAWC,GAChD,OAAID,IAAMC,EACD,EACED,EAAIC,GACL,EAED,GASEK,EAAa,SACxBjQ,EACAyF,GAEA,GAAIA,GAAOzF,KAAOyF,EAChB,OAAOA,EAAIzF,GAEX,MAAM,IAAImP,MACR,yBAA2BnP,EAAM,gBAAkB/B,YAAUwH,KAStDyK,EAAoB,SAApBA,EAA8BzK,GACzC,GAAmB,kBAARA,GAA4B,OAARA,EAC7B,OAAOxH,YAAUwH,GAGnB,IAAMrS,EAAO,GAEb,IAAK,IAAM+c,KAAK1K,EACdrS,EAAKiW,KAAK8G,GAIZ/c,EAAKgd,OAEL,IADA,IAAIpQ,EAAM,IACDkO,EAAI,EAAGA,EAAI9a,EAAKW,OAAQma,IACrB,IAANA,IACFlO,GAAO,KAETA,GAAO/B,YAAU7K,EAAK8a,IACtBlO,GAAO,IACPA,GAAOkQ,EAAkBzK,EAAIrS,EAAK8a,KAIpC,OADAlO,GAAO,KAUIqQ,EAAoB,SAC/B5C,EACA6C,GAEA,IAAMC,EAAM9C,EAAI1Z,OAEhB,GAAIwc,GAAOD,EACT,MAAO,CAAC7C,GAIV,IADA,IAAM+C,EAAW,GACRC,EAAI,EAAGA,EAAIF,EAAKE,GAAKH,EACxBG,EAAIH,EAAUC,EAChBC,EAASnH,KAAKoE,EAAIiD,UAAUD,EAAGF,IAE/BC,EAASnH,KAAKoE,EAAIiD,UAAUD,EAAGA,EAAIH,IAGvC,OAAOE,G,SASOG,EAAKlL,EAAarI,GAChC,IAAK,IAAM4C,KAAOyF,EACZA,EAAImL,eAAe5Q,IACrB5C,EAAG4C,EAAKyF,EAAIzF,IAyBX,IAAM6Q,EAAwB,SAAUC,GAC7CpC,UAAQW,EAAoByB,GAAI,uBAEhC,IAGIC,EAAGlQ,EAAGmQ,EAAGC,EAAI/C,EADXgD,EAAO,KAKH,IAANJ,GACFjQ,EAAI,EACJmQ,EAAI,EACJD,EAAI,EAAID,KAAOK,IAAW,EAAI,IAE9BJ,EAAID,EAAI,GACRA,EAAIM,KAAKC,IAAIP,KAEJM,KAAKE,IAAI,GAAG,OAGnBzQ,GADAoQ,EAAKG,KAAKG,IAAIH,KAAKI,MAAMJ,KAAKtC,IAAIgC,GAAKM,KAAKK,KAAMP,IACzCA,EACTF,EAAII,KAAKM,MAAMZ,EAAIM,KAAKE,IAAI,EAlBtB,GAkBiCL,GAAMG,KAAKE,IAAI,EAlBhD,OAqBNzQ,EAAI,EACJmQ,EAAII,KAAKM,MAAMZ,EAAIM,KAAKE,IAAI,GAAG,SAKnC,IAAMK,EAAO,GACb,IAAKzD,EA5BK,GA4BMA,EAAGA,GAAK,EACtByD,EAAKtI,KAAK2H,EAAI,EAAI,EAAI,GACtBA,EAAII,KAAKI,MAAMR,EAAI,GAErB,IAAK9C,EAjCS,GAiCEA,EAAGA,GAAK,EACtByD,EAAKtI,KAAKxI,EAAI,EAAI,EAAI,GACtBA,EAAIuQ,KAAKI,MAAM3Q,EAAI,GAErB8Q,EAAKtI,KAAK0H,EAAI,EAAI,GAClBY,EAAKC,UACL,IAAMnE,EAAMkE,EAAKE,KAAK,IAGlBC,EAAgB,GACpB,IAAK5D,EAAI,EAAGA,EAAI,GAAIA,GAAK,EAAG,CAC1B,IAAI6D,EAAUC,SAASvE,EAAIjO,OAAO0O,EAAG,GAAI,GAAGzB,SAAS,IAC9B,IAAnBsF,EAAQhe,SACVge,EAAU,IAAMA,GAElBD,GAAgCC,EAElC,OAAOD,EAAcG,eAyDVC,EAAkB,IAAIC,OAAO,qBAO7BrC,EAAc,SAAUrC,GACnC,GAAIyE,EAAgBxS,KAAK+N,GAAM,CAC7B,IAAM2E,EAAS9W,OAAOmS,GACtB,GAAI2E,IAAW,YAAcA,GAAU,WACrC,OAAOA,EAGX,OAAO,MAoBIC,EAAiB,SAAUjV,GACtC,IACEA,IACA,MAAOyD,GAEPlC,YAAW,WAKT,IAAM2T,EAAQzR,EAAEyR,OAAS,GAEzB,MADAlD,EAAK,yCAA0CkD,GACzCzR,IACLuQ,KAAKI,MAAM,MAqELe,EAAwB,SACnCnV,EACAoV,GAEA,IAAMC,EAA2B9T,WAAWvB,EAAIoV,GAMhD,MAJuB,kBAAZC,GAAyBA,EAAe,OAEhDA,EAAe,QAEXA,GC5oBT,aAkBE,WAAYC,EAAiCC,GAC3C,QAAiB,IAAbA,EAAqB,CACvBtM,KAAKuM,QAAWF,EAAwBrI,MAAM,KAI9C,IADA,IAAIwI,EAAS,EACJ3E,EAAI,EAAGA,EAAI7H,KAAKuM,QAAQ7e,OAAQma,IACnC7H,KAAKuM,QAAQ1E,GAAGna,OAAS,IAC3BsS,KAAKuM,QAAQC,GAAUxM,KAAKuM,QAAQ1E,GACpC2E,KAGJxM,KAAKuM,QAAQ7e,OAAS8e,EAEtBxM,KAAKyM,UAAY,OAEjBzM,KAAKuM,QAAUF,EACfrM,KAAKyM,UAAYH,EAqNvB,OA/OE,sBAAW,UAAK,C,IAAhB,WACE,OAAO,IAAII,EAAK,K,gCA6BlB,YAAAC,SAAA,WACE,OAAI3M,KAAKyM,WAAazM,KAAKuM,QAAQ7e,OAC1B,KAGFsS,KAAKuM,QAAQvM,KAAKyM,YAM3B,YAAAG,UAAA,WACE,OAAO5M,KAAKuM,QAAQ7e,OAASsS,KAAKyM,WAMpC,YAAAI,SAAA,WACE,IAAIP,EAAWtM,KAAKyM,UAIpB,OAHIH,EAAWtM,KAAKuM,QAAQ7e,QAC1B4e,IAEK,IAAII,EAAK1M,KAAKuM,QAASD,IAMhC,YAAAQ,QAAA,WACE,OAAI9M,KAAKyM,UAAYzM,KAAKuM,QAAQ7e,OACzBsS,KAAKuM,QAAQvM,KAAKuM,QAAQ7e,OAAS,GAGrC,MAGT,YAAA0Y,SAAA,WAEE,IADA,IAAI2G,EAAa,GACRlF,EAAI7H,KAAKyM,UAAW5E,EAAI7H,KAAKuM,QAAQ7e,OAAQma,IAC5B,KAApB7H,KAAKuM,QAAQ1E,KACfkF,GAAc,IAAM/M,KAAKuM,QAAQ1E,IAIrC,OAAOkF,GAAc,KAGvB,YAAAC,mBAAA,WAEE,IADA,IAAID,EAAa,GACRlF,EAAI7H,KAAKyM,UAAW5E,EAAI7H,KAAKuM,QAAQ7e,OAAQma,IAC5B,KAApB7H,KAAKuM,QAAQ1E,KACfkF,GAAc,IAAME,mBAAmBhU,OAAO+G,KAAKuM,QAAQ1E,MAI/D,OAAOkF,GAAc,KASvB,YAAAjO,MAAA,SAAMoO,GACJ,YADI,IAAAA,MAAA,GACGlN,KAAKuM,QAAQzN,MAAMkB,KAAKyM,UAAYS,IAM7C,YAAAC,OAAA,WACE,GAAInN,KAAKyM,WAAazM,KAAKuM,QAAQ7e,OACjC,OAAO,KAIT,IADA,IAAM0f,EAAS,GACNvF,EAAI7H,KAAKyM,UAAW5E,EAAI7H,KAAKuM,QAAQ7e,OAAS,EAAGma,IACxDuF,EAAOpK,KAAKhD,KAAKuM,QAAQ1E,IAG3B,OAAO,IAAI6E,EAAKU,EAAQ,IAO1B,YAAAC,MAAA,SAAMC,GAEJ,IADA,IAAMF,EAAS,GACNvF,EAAI7H,KAAKyM,UAAW5E,EAAI7H,KAAKuM,QAAQ7e,OAAQma,IACpDuF,EAAOpK,KAAKhD,KAAKuM,QAAQ1E,IAG3B,GAAIyF,aAAwBZ,EAC1B,IACM7E,EAAIyF,EAAab,UACrB5E,EAAIyF,EAAaf,QAAQ7e,OACzBma,IAEAuF,EAAOpK,KAAKsK,EAAaf,QAAQ1E,QAGnC,KAAM0F,EAAcD,EAAatJ,MAAM,KACvC,IAAS6D,EAAI,EAAGA,EAAI0F,EAAY7f,OAAQma,IAClC0F,EAAY1F,GAAGna,OAAS,GAC1B0f,EAAOpK,KAAKuK,EAAY1F,IAK9B,OAAO,IAAI6E,EAAKU,EAAQ,IAM1B,YAAAI,QAAA,WACE,OAAOxN,KAAKyM,WAAazM,KAAKuM,QAAQ7e,QAQjC,EAAA+f,aAAP,SAAoBC,EAAiBC,GACnC,IAAMC,EAAQF,EAAUf,WACtBkB,EAAQF,EAAUhB,WACpB,GAAc,OAAViB,EACF,OAAOD,EACF,GAAIC,IAAUC,EACnB,OAAOnB,EAAKe,aAAaC,EAAUb,WAAYc,EAAUd,YAEzD,MAAM,IAAI/D,MACR,8BACE6E,EADF,8BAIED,EACA,MAUD,EAAAI,aAAP,SAAoBC,EAAYC,GAG9B,IAFA,IAAMC,EAAWF,EAAKjP,QAChBoP,EAAYF,EAAMlP,QACf+I,EAAI,EAAGA,EAAIoG,EAASvgB,QAAUma,EAAIqG,EAAUxgB,OAAQma,IAAK,CAChE,IAAMsG,EAAM9E,EAAY4E,EAASpG,GAAIqG,EAAUrG,IAC/C,GAAY,IAARsG,EACF,OAAOA,EAGX,OAAIF,EAASvgB,SAAWwgB,EAAUxgB,OACzB,EAEFugB,EAASvgB,OAASwgB,EAAUxgB,QAAU,EAAI,GAQnD,YAAA0gB,OAAA,SAAOjf,GACL,GAAI6Q,KAAK4M,cAAgBzd,EAAMyd,YAC7B,OAAO,EAGT,IACE,IAAI/E,EAAI7H,KAAKyM,UAAW4B,EAAIlf,EAAMsd,UAClC5E,GAAK7H,KAAKuM,QAAQ7e,OAClBma,IAAKwG,IAEL,GAAIrO,KAAKuM,QAAQ1E,KAAO1Y,EAAMod,QAAQ8B,GACpC,OAAO,EAIX,OAAO,GAQT,YAAA9H,SAAA,SAASpX,GACP,IAAI0Y,EAAI7H,KAAKyM,UACT4B,EAAIlf,EAAMsd,UACd,GAAIzM,KAAK4M,YAAczd,EAAMyd,YAC3B,OAAO,EAET,KAAO/E,EAAI7H,KAAKuM,QAAQ7e,QAAQ,CAC9B,GAAIsS,KAAKuM,QAAQ1E,KAAO1Y,EAAMod,QAAQ8B,GACpC,OAAO,IAEPxG,IACAwG,EAEJ,OAAO,GAEX,EAxPA,GAoQA,aAUE,WAAYtK,EAAoBuK,GAAA,KAAAA,eAE9BtO,KAAKuO,OAASxK,EAAKjF,QAEnBkB,KAAKwO,YAAczD,KAAK0D,IAAI,EAAGzO,KAAKuO,OAAO7gB,QAE3C,IAAK,IAAIma,EAAI,EAAGA,EAAI7H,KAAKuO,OAAO7gB,OAAQma,IACtC7H,KAAKwO,aAAeE,eAAa1O,KAAKuO,OAAO1G,IAE/C7H,KAAK2O,cAkET,OA9DE,sBAAW,mBAAc,C,IAAzB,WACE,OAAO,I,gCAIT,sBAAW,0BAAqB,C,IAAhC,WACE,OAAO,K,gCAIT,YAAA3L,KAAA,SAAKqK,GAECrN,KAAKuO,OAAO7gB,OAAS,IACvBsS,KAAKwO,aAAe,GAEtBxO,KAAKuO,OAAOvL,KAAKqK,GACjBrN,KAAKwO,aAAeE,eAAarB,GACjCrN,KAAK2O,eAGP,YAAA5b,IAAA,WACE,IAAM6b,EAAO5O,KAAKuO,OAAOxb,MACzBiN,KAAKwO,aAAeE,eAAaE,GAE7B5O,KAAKuO,OAAO7gB,OAAS,IACvBsS,KAAKwO,aAAe,IAIhB,YAAAG,YAAR,WACE,GAAI3O,KAAKwO,YAAcK,EAAeC,sBACpC,MAAM,IAAIhG,MACR9I,KAAKsO,aACH,8BACAO,EAAeC,sBACf,WACA9O,KAAKwO,YACL,MAGN,GAAIxO,KAAKuO,OAAO7gB,OAASmhB,EAAeE,eACtC,MAAM,IAAIjG,MACR9I,KAAKsO,aACH,iEACAO,EAAeE,eACf,gCACA/O,KAAKgP,kBAUb,YAAAA,cAAA,WACE,OAA2B,IAAvBhP,KAAKuO,OAAO7gB,OACP,GAEF,gBAAkBsS,KAAKuO,OAAO/C,KAAK,KAAO,KAErD,EArFA,GC5QayD,EAAmB,IAUnBC,EAAe,iBAMfC,EAAY,YAEZC,EAAe,eCR5B,aAaE,WACEC,EACgBC,EACAC,EACAC,EACAC,EACAC,EACAC,QAFA,IAAAF,OAAA,QACA,IAAAC,MAAA,SACA,IAAAC,OAAA,GALA,KAAAL,SACA,KAAAC,YACA,KAAAC,gBACA,KAAAC,YACA,KAAAC,iBACA,KAAAC,gCAEhB3P,KAAKqP,KAAOA,EAAKzD,cACjB5L,KAAK4P,OAAS5P,KAAKqP,KAAKlW,OAAO6G,KAAKqP,KAAKniB,QAAQ,KAAO,GACxD8S,KAAK6P,aACFhJ,EAAkB1M,IAAI,QAAUkV,IAAoBrP,KAAKqP,KAgFhE,OA7EE,YAAAS,gBAAA,WACE,OACE9P,KAAKqP,OAASrP,KAAK6P,cACnB7P,KAAK+P,gBACL/P,KAAK2P,+BAIT,YAAAK,gBAAA,WACE,MAA0C,OAAnChQ,KAAK6P,aAAa1W,OAAO,EAAG,IAGrC,YAAA8W,WAAA,WACE,MAAuB,wBAAhBjQ,KAAK4P,QAGd,YAAAG,aAAA,WACE,MACkB,mBAAhB/P,KAAK4P,QAA+C,wBAAhB5P,KAAK4P,QAI7C,YAAAM,WAAA,SAAWC,GACLA,IAAYnQ,KAAK6P,eACnB7P,KAAK6P,aAAeM,EAChBnQ,KAAKgQ,mBACPnJ,EAAkB/K,IAAI,QAAUkE,KAAKqP,KAAMrP,KAAK6P,gBAWtD,YAAAO,cAAA,SAAcC,EAAcC,GAI1B,IAAIC,EACJ,GAJAlI,SAAuB,kBAATgI,EAAmB,8BACjChI,SAAyB,kBAAXiI,EAAqB,gCAG/BD,IAASlB,EACXoB,GACGvQ,KAAKsP,OAAS,SAAW,SAAWtP,KAAK6P,aAAe,YACtD,IAAIQ,IAASjB,EAIlB,MAAM,IAAItG,MAAM,4BAA8BuH,GAH9CE,GACGvQ,KAAKsP,OAAS,WAAa,WAAatP,KAAK6P,aAAe,QAI7D7P,KAAK8P,oBACPQ,EAAM,GAAStQ,KAAKuP,WAGtB,IAAMiB,EAAkB,GAMxB,OAJAlG,EAAKgG,GAAQ,SAAC3W,EAAa9G,GACzB2d,EAAMxN,KAAKrJ,EAAM,IAAM9G,MAGlB0d,EAAUC,EAAMhF,KAAK,MAI9B,YAAApF,SAAA,WACE,IAAIgB,EAAMpH,KAAKyQ,cAIf,OAHIzQ,KAAK0P,iBACPtI,GAAO,IAAMpH,KAAK0P,eAAiB,KAE9BtI,GAIT,YAAAqJ,YAAA,WACE,OAAQzQ,KAAKsP,OAAS,WAAa,WAAatP,KAAKqP,MAEzD,EAzGA,GCoCO,ICxCHqB,ECAAC,EFwCSC,EAAgB,SAC3BC,EACApB,GAEA,IAAMqB,EAAYC,EAAiBF,GACjCtB,EAAYuB,EAAUvB,UAEC,iBAArBuB,EAAUlB,QACZ/G,EACEiI,EAAUzB,KAAVyB,8EAQAvB,GAA2B,cAAdA,GACM,cAArBuB,EAAUlB,QAEV/G,EACE,gFAICiI,EAAUxB,QJqGK,qBAAXxf,QACPA,OAAOkhB,UACPlhB,OAAOkhB,SAASC,WACgC,IAAhDnhB,OAAOkhB,SAASC,SAAS/jB,QAAQ,WAEjC6b,EACE,6FIvGJ,IAAMyG,EAAqC,OAArBsB,EAAUI,QAAwC,QAArBJ,EAAUI,OAE7D,MAAO,CACLC,SAAU,IAAIC,EACZN,EAAUzB,KACVyB,EAAUxB,OACVC,EACAE,EACAD,EACoB,GACeD,IAAcuB,EAAUO,WAE7DtN,KAAM,IAAI2I,EAAKoE,EAAU/D,cAShBgE,EAAmB,SAC9BF,GAYA,IAAIxB,EAAO,GACTO,EAAS,GACTyB,EAAY,GACZtE,EAAa,GACbwC,EAAY,GAGVD,GAAS,EACX4B,EAAS,QACTI,EAAO,IAGT,GAAuB,kBAAZT,EAAsB,CAE/B,IAAIU,EAAWV,EAAQ3jB,QAAQ,MAC3BqkB,GAAY,IACdL,EAASL,EAAQxG,UAAU,EAAGkH,EAAW,GACzCV,EAAUA,EAAQxG,UAAUkH,EAAW,IAIzC,IAAIC,EAAWX,EAAQ3jB,QAAQ,MACb,IAAdskB,IACFA,EAAWX,EAAQnjB,QAErB,IAAI+jB,EAAkBZ,EAAQ3jB,QAAQ,MACb,IAArBukB,IACFA,EAAkBZ,EAAQnjB,QAE5B2hB,EAAOwB,EAAQxG,UAAU,EAAGU,KAAKG,IAAIsG,EAAUC,IAC3CD,EAAWC,IAEb1E,EArIN,SAAoBA,GAGlB,IAFA,IAAI2E,EAAoB,GAClBtE,EAASL,EAAW/I,MAAM,KACvB6D,EAAI,EAAGA,EAAIuF,EAAO1f,OAAQma,IACjC,GAAIuF,EAAOvF,GAAGna,OAAS,EAAG,CACxB,IAAIikB,EAAQvE,EAAOvF,GACnB,IACE8J,EAAQC,mBAAmBD,EAAMzc,QAAQ,MAAO,MAChD,MAAOsF,IACTkX,GAAqB,IAAMC,EAG/B,OAAOD,EAyHUG,CAAWhB,EAAQxG,UAAUmH,EAAUC,KAEtD,IAAMK,EApHV,SAAqBC,G,QACbC,EAAU,GACc,MAA1BD,EAAYE,OAAO,KACrBF,EAAcA,EAAY1H,UAAU,I,IAEtC,IAAsB,iBAAA0H,EAAY/N,MAAM,MAAI,8BAAE,CAAzC,IAAMkO,EAAO,QAChB,GAAuB,IAAnBA,EAAQxkB,OAAZ,CAGA,IAAMykB,EAAKD,EAAQlO,MAAM,KACP,IAAdmO,EAAGzkB,OACLskB,EAAQJ,mBAAmBO,EAAG,KAAOP,mBAAmBO,EAAG,IAE3DpJ,EAAK,0BAA0BmJ,EAAO,eAAeH,EAAW,O,iGAGpE,OAAOC,EAoGeI,CAClBvB,EAAQxG,UAAUU,KAAKG,IAAI2F,EAAQnjB,OAAQ+jB,MAI7CF,EAAWlC,EAAKniB,QAAQ,OACR,GACdoiB,EAAoB,UAAX4B,GAAiC,QAAXA,EAC/BI,EAAO3F,SAAS0D,EAAKhF,UAAUkH,EAAW,GAAI,KAE9CA,EAAWlC,EAAK3hB,OAGlB,IAAM2kB,EAAkBhD,EAAKvQ,MAAM,EAAGyS,GACtC,GAAsC,cAAlCc,EAAgBzG,cAClBgE,EAAS,iBACJ,GAAIyC,EAAgBrO,MAAM,KAAKtW,QAAU,EAC9CkiB,EAASyC,MACJ,CAEL,IAAMC,EAASjD,EAAKniB,QAAQ,KAC5BmkB,EAAYhC,EAAKhF,UAAU,EAAGiI,GAAQ1G,cACtCgE,EAASP,EAAKhF,UAAUiI,EAAS,GAEjC/C,EAAY8B,EAGV,OAAQS,IACVvC,EAAYuC,EAAW,IAI3B,MAAO,CACLzC,KAAI,EACJiC,KAAI,EACJ1B,OAAM,EACNyB,UAAS,EACT/B,OAAM,EACN4B,OAAM,EACNnE,WAAU,EACVwC,UAAS,IGvKAgD,EAAqB,iCAQrBC,GAAsB,+BAOtBC,GAAiB,SAMjBC,GAAa,SAAU/Y,GAClC,MACiB,kBAARA,GAAmC,IAAfA,EAAIjM,SAAiB6kB,EAAmBlZ,KAAKM,IAQ/DgZ,GAAoB,SAAU5F,GACzC,MACwB,kBAAfA,GACe,IAAtBA,EAAWrf,SACV8kB,GAAoBnZ,KAAK0T,IAqBjB6F,GAAkB,SAAUC,GACvC,OACe,OAAbA,GACoB,kBAAbA,GACc,kBAAbA,IAA0B7J,EAAoB6J,IACrDA,GACqB,kBAAbA,GAEPtM,WAASsM,EAAiB,QAanBC,GAA0B,SACrCC,EACAC,EACAvY,EACAsJ,EACAnH,GAEIA,QAAqBjP,IAAT8M,GAIhBwY,GACEC,cAAeH,EAAQC,EAAgBpW,GACvCnC,EACAsJ,IAWSkP,GAAuB,SAAvBA,EACXE,EACA1Y,EACA2Y,GAEA,IAAMrP,EACJqP,aAAiB1G,EAAO,IAAImC,EAAeuE,EAAOD,GAAeC,EAEnE,QAAazlB,IAAT8M,EACF,MAAM,IAAIqO,MAAMqK,EAAc,sBAAwBpP,EAAKiL,iBAE7D,GAAoB,oBAATvU,EACT,MAAM,IAAIqO,MACRqK,EACE,uBACApP,EAAKiL,gBACL,oBACAvU,EAAK2L,YAGX,GAAI4C,EAAoBvO,GACtB,MAAM,IAAIqO,MACRqK,EAAc,YAAc1Y,EAAK2L,WAAa,IAAMrC,EAAKiL,iBAK7D,GACkB,kBAATvU,GACPA,EAAK/M,OAAS+kB,GAAiB,GAC/B/D,eAAajU,GAAQgY,GAErB,MAAM,IAAI3J,MACRqK,EACE,kCADFA,uBAIEpP,EAAKiL,gBACL,MACAvU,EAAK4P,UAAU,EAAG,IAClB,SAMN,GAAI5P,GAAwB,kBAATA,EAAmB,CACpC,IAAI,GAAc,EACd,GAAiB,EAwBrB,GAvBA6P,EAAK7P,GAAM,SAACd,EAAa9G,GACvB,GAAY,WAAR8G,EACF,GAAc,OACT,GAAY,cAARA,GAA+B,QAARA,IAChC,GAAiB,GACZ+Y,GAAW/Y,IACd,MAAM,IAAImP,MACRqK,EACE,6BACAxZ,EACA,KACAoK,EAAKiL,gBAJPmE,wFAWNpP,EAAKf,KAAKrJ,GACVsZ,EAAqBE,EAAatgB,EAAOkR,GACzCA,EAAKhR,SAGH,GAAe,EACjB,MAAM,IAAI+V,MACRqK,EACE,4BACApP,EAAKiL,gBACL,sCAmEGqE,GAA+B,SAC1CN,EACAC,EACAvY,EACAsJ,EACAnH,GAEA,IAAIA,QAAqBjP,IAAT8M,EAAhB,CAIA,IAAM0Y,EAAcD,cAAeH,EAAQC,EAAgBpW,GAE3D,IAAMnC,GAAwB,kBAATA,GAAsBmE,MAAM8F,QAAQjK,GACvD,MAAM,IAAIqO,MACRqK,EAAc,0DAIlB,IAAMG,EAAqB,GAC3BhJ,EAAK7P,GAAM,SAACd,EAAa9G,GACvB,IAAM0gB,EAAU,IAAI7G,EAAK/S,GAEzB,GADAsZ,GAAqBE,EAAatgB,EAAOkR,EAAKsJ,MAAMkG,IAC1B,cAAtBA,EAAQzG,YACL8F,GAAgB/f,GACnB,MAAM,IAAIiW,MACRqK,EACE,kCACAI,EAAQnN,WAFV+M,gGAQNG,EAAWtQ,KAAKuQ,MAzFsB,SACxCJ,EACAG,GAEA,IAAIzL,EAAG0L,EACP,IAAK1L,EAAI,EAAGA,EAAIyL,EAAW5lB,OAAQma,IAGjC,IADA,IAAM9a,GADNwmB,EAAUD,EAAWzL,IACA/I,QACZuP,EAAI,EAAGA,EAAIthB,EAAKW,OAAQ2gB,IAC/B,GAAgB,cAAZthB,EAAKshB,IAAsBA,IAAMthB,EAAKW,OAAS,QAE5C,IAAKglB,GAAW3lB,EAAKshB,IAC1B,MAAM,IAAIvF,MACRqK,EACE,4BACApmB,EAAKshB,GACL,aACAkF,EAAQnN,WAJV+M,uFAeRG,EAAWvJ,KAAK2C,EAAKoB,cACrB,IAAI0F,EAAwB,KAC5B,IAAK3L,EAAI,EAAGA,EAAIyL,EAAW5lB,OAAQma,IAAK,CAEtC,GADA0L,EAAUD,EAAWzL,GACJ,OAAb2L,GAAqBA,EAASjN,SAASgN,GACzC,MAAM,IAAIzK,MACRqK,EACE,mBACAK,EAASpN,WACT,qCACAmN,EAAQnN,YAGdoN,EAAWD,GAkDbE,CAA2BN,EAAaG,KAG7BI,GAAmB,SAC9BX,EACAC,EACAH,EACAjW,GAEA,IAAIA,QAAyBjP,IAAbklB,EAAhB,CAGA,GAAI7J,EAAoB6J,GACtB,MAAM,IAAI/J,MACRoK,cAAeH,EAAQC,EAAgBpW,GACrC,MACAiW,EAASzM,WAFX8M,6FAQJ,IAAKN,GAAgBC,GACnB,MAAM,IAAI/J,MACRoK,cAAeH,EAAQC,EAAgBpW,GAAvCsW,yFAOOS,GAAoB,SAC/BZ,EACAC,EACAY,EACAhX,GAEA,IAAIA,QAA0BjP,IAAdimB,EAIhB,OAAQA,GACN,IAAK,QACL,IAAK,cACL,IAAK,gBACL,IAAK,gBACL,IAAK,cACH,MACF,QACE,MAAM,IAAI9K,MACRoK,cAAeH,EAAQC,EAAgBpW,GAAvCsW,8GAOKW,GAAc,SACzBd,EACAC,EACArZ,EACAiD,GAEA,KAAIA,QAAoBjP,IAARgM,KAGX+Y,GAAW/Y,GACd,MAAM,IAAImP,MACRoK,cAAeH,EAAQC,EAAgBpW,GACrC,yBACAjD,EAFFuZ,qGASOY,GAAqB,SAChCf,EACAC,EACAjG,EACAnQ,GAEA,KAAIA,QAA2BjP,IAAfof,KAIX4F,GAAkB5F,GACrB,MAAM,IAAIjE,MACRoK,cAAeH,EAAQC,EAAgBpW,GACrC,0BACAmQ,EAFFmG,qFASOa,GAAyB,SACpChB,EACAC,EACAjG,EACAnQ,GAEImQ,IAEFA,EAAaA,EAAW7X,QAAQ,mBAAoB,MAGtD4e,GAAmBf,EAAQC,EAAgBjG,EAAYnQ,IAG5CoX,GAAuB,SAAUjB,EAAgBhP,GAC5D,GAAwB,UAApBA,EAAK4I,WACP,MAAM,IAAI7D,MAAMiK,EAAS,8CAIhBkB,GAAc,SACzBlB,EACAC,EACAlC,GAGA,IAAM/D,EAAa+D,EAAU/M,KAAKqC,WAClC,GACuC,kBAA5B0K,EAAUK,SAAS9B,MACO,IAAnCyB,EAAUK,SAAS9B,KAAK3hB,SACtBglB,GAAW5B,EAAUK,SAAS5B,YACY,cAA1CuB,EAAUK,SAAS9B,KAAKrL,MAAM,KAAK,IACd,IAAtB+I,EAAWrf,SAjXqB,SAAUqf,GAM7C,OALIA,IAEFA,EAAaA,EAAW7X,QAAQ,mBAAoB,MAG/Cyd,GAAkB5F,GA2WMmH,CAAsBnH,GAEnD,MAAM,IAAIjE,MACRoK,cAAeH,EAAQC,GAAgB,GAAvCE,yFAwBOiB,GAAkB,SAC7BpB,EACAC,EACAoB,EACAxX,GAEA,KAAIA,QAAqBjP,IAATymB,IAGI,mBAATA,EACT,MAAM,IAAItL,MACRoK,cAAeH,EAAQC,EAAgBpW,GAAY,uB,cC7bvD,WAAoByX,EAAqBjB,GAArB,KAAAiB,QAAqB,KAAAjB,QA4H3C,OAtHE,YAAAkB,OAAA,SAAOC,GACLC,mBAAiB,sBAAuB,EAAG,EAAG/mB,UAAUC,QACxD+mB,mBAAiB,sBAAuB,EAAGF,GAAY,GACvD,IAAMG,EAAW,IAAIC,WAKrB,OAJA3U,KAAKqU,MAAMO,mBACT5U,KAAKoT,MACLsB,EAASG,aAAaN,IAEjBG,EAASI,SAOlB,YAAA9Y,OAAA,SAAOuY,GACLC,mBAAiB,sBAAuB,EAAG,EAAG/mB,UAAUC,QACxDsmB,GAAqB,sBAAuBhU,KAAKoT,OACjDqB,mBAAiB,sBAAuB,EAAGF,GAAY,GACvD,IAAMG,EAAW,IAAIC,WAMrB,OALA3U,KAAKqU,MAAMU,gBACT/U,KAAKoT,MACL,KACAsB,EAASG,aAAaN,IAEjBG,EAASI,SAQlB,YAAAhZ,IAAA,SAAIjJ,EAAgB0hB,GAClBC,mBAAiB,mBAAoB,EAAG,EAAG/mB,UAAUC,QACrDsmB,GAAqB,mBAAoBhU,KAAKoT,OAC9CN,GAAwB,mBAAoB,EAAGjgB,EAAOmN,KAAKoT,OAAO,GAClEqB,mBAAiB,mBAAoB,EAAGF,GAAY,GACpD,IAAMG,EAAW,IAAIC,WAMrB,OALA3U,KAAKqU,MAAMU,gBACT/U,KAAKoT,MACLvgB,EACA6hB,EAASG,aAAaN,IAEjBG,EAASI,SASlB,YAAAE,gBAAA,SACEniB,EACAggB,EACA0B,GAEAC,mBAAiB,+BAAgC,EAAG,EAAG/mB,UAAUC,QACjEsmB,GAAqB,+BAAgChU,KAAKoT,OAC1DN,GACE,+BACA,EACAjgB,EACAmN,KAAKoT,OACL,GAEFM,GAAiB,+BAAgC,EAAGb,GAAU,GAC9D4B,mBAAiB,+BAAgC,EAAGF,GAAY,GAEhE,IAAMG,EAAW,IAAIC,WAOrB,OANA3U,KAAKqU,MAAMY,4BACTjV,KAAKoT,MACLvgB,EACAggB,EACA6B,EAASG,aAAaN,IAEjBG,EAASI,SAQlB,YAAA7Z,OAAA,SACEia,EACAX,GAIA,GAFAC,mBAAiB,sBAAuB,EAAG,EAAG/mB,UAAUC,QACxDsmB,GAAqB,sBAAuBhU,KAAKoT,OAC7CxU,MAAM8F,QAAQwQ,GAAgB,CAEhC,IADA,IAAMC,EAA6C,GAC1CtN,EAAI,EAAGA,EAAIqN,EAAcxnB,SAAUma,EAC1CsN,EAAiB,GAAKtN,GAAKqN,EAAcrN,GAE3CqN,EAAgBC,EAChBpM,EACE,gOAIJsK,GACE,sBACA,EACA6B,EACAlV,KAAKoT,OACL,GAEFqB,mBAAiB,sBAAuB,EAAGF,GAAY,GACvD,IAAMG,EAAW,IAAIC,WAMrB,OALA3U,KAAKqU,MAAMe,mBACTpV,KAAKoT,MACL8B,EACAR,EAASG,aAAaN,IAEjBG,EAASI,SAEpB,E,GC9IA,cAQE,WAAmBO,EAA2BC,GAA3B,KAAAD,YAA2B,KAAAC,WAQhD,OAJE,YAAAC,OAAA,WAEE,OADAf,mBAAiB,2BAA4B,EAAG,EAAG/mB,UAAUC,QACtD,CAAE2nB,UAAWrV,KAAKqV,UAAWC,SAAUtV,KAAKsV,SAASC,WAEhE,EAhBA,GCaaC,GAAc,WAEzB,IAAMC,EACJ,mEAIEC,EAAe,EAMbC,EAA0B,GAEhC,OAAO,SAAUtgB,GACf,IAGIwS,EAHE+N,EAAgBvgB,IAAQqgB,EAC9BA,EAAergB,EAGf,IAAMwgB,EAAiB,IAAIjX,MAAM,GACjC,IAAKiJ,EAAI,EAAGA,GAAK,EAAGA,IAClBgO,EAAehO,GAAK4N,EAAWxD,OAAO5c,EAAM,IAG5CA,EAAM0V,KAAKI,MAAM9V,EAAM,IAEzBgT,SAAe,IAARhT,EAAW,4BAElB,IAAI6R,EAAK2O,EAAerK,KAAK,IAE7B,GAAKoK,EAIE,CAGL,IAAK/N,EAAI,GAAIA,GAAK,GAA0B,KAArB8N,EAAc9N,GAAWA,IAC9C8N,EAAc9N,GAAK,EAErB8N,EAAc9N,UATd,IAAKA,EAAI,EAAGA,EAAI,GAAIA,IAClB8N,EAAc9N,GAAKkD,KAAKI,MAAsB,GAAhBJ,KAAK+K,UAUvC,IAAKjO,EAAI,EAAGA,EAAI,GAAIA,IAClBX,GAAMuO,EAAWxD,OAAO0D,EAAc9N,IAIxC,OAFAQ,SAAqB,KAAdnB,EAAGxZ,OAAe,oCAElBwZ,GAhDgB,GC+H3B,cACE,WAAmBtZ,EAAqBmoB,GAArB,KAAAnoB,OAAqB,KAAAmoB,OAW1C,OAHS,EAAAC,KAAP,SAAYpoB,EAAcmoB,GACxB,OAAO,IAAIE,EAAUroB,EAAMmoB,IAE/B,EAZA,GCvIA,4BA8DA,OA5CE,YAAAG,WAAA,WACE,OAAOlW,KAAKmW,QAAQzN,KAAK1I,OAW3B,YAAAoW,oBAAA,SAAoBC,EAAeC,GACjC,IAAMC,EAAa,IAAIN,GAAU9M,EAAUkN,GACrCG,EAAa,IAAIP,GAAU9M,EAAUmN,GAC3C,OAAgD,IAAzCtW,KAAKmW,QAAQI,EAAYC,IAOlC,YAAAC,QAAA,WAEE,OAAQR,GAAkBS,KAoB9B,EA9DA,GPAA,4B,+CAqEA,OArE8B,iBAC5B,sBAAW,iBAAY,C,IAAvB,WACE,OAAOhG,G,IAGT,SAAwBzQ,GACtByQ,EAAezQ,G,gCAMjB,YAAAkW,QAAA,SAAQ7M,EAAcC,GACpB,OAAOF,EAAYC,EAAE1b,KAAM2b,EAAE3b,OAM/B,YAAA+oB,YAAA,SAAYZ,GAGV,MAAMa,iBAAe,oDAMvB,YAAAR,oBAAA,SAAoBC,EAAeC,GACjC,OAAO,GAMT,YAAAG,QAAA,WAEE,OAAQR,GAAkBS,KAM5B,YAAAG,QAAA,WAGE,OAAO,IAAIZ,GAAU7M,EAAUsH,IAQjC,YAAAoG,SAAA,SAASC,EAAoBnpB,GAM3B,OALAya,SACwB,kBAAf0O,EACP,gDAGK,IAAId,GAAUc,EAAYrG,IAMnC,YAAAtK,SAAA,WACE,MAAO,QAEX,EArEA,CAA8B9F,IAuEjB0W,GAAY,IAAIC,GC/DtB,IOPHC,GCJAC,GACAxG,GRUSyG,GAAmB,SAAUvE,GACxC,MAAwB,kBAAbA,EACF,UAAYrI,EAAsBqI,GAElC,UAAYA,GASVwE,GAAuB,SAAUC,GAC5C,GAAIA,EAAaC,aAAc,CAC7B,IAAMtX,EAAMqX,EAAarX,MACzBoI,SACiB,kBAARpI,GACU,kBAARA,GACS,kBAARA,GAAoBsG,WAAStG,EAAkB,OACzD,6CAGFoI,SACEiP,IAAiB3G,GAAY2G,EAAa9J,UAC1C,gCAIJnF,SACEiP,IAAiB3G,GAAY2G,EAAaE,cAAchK,UACxD,uDO/BJ,cAyBE,WACmBiK,EACTC,QAAA,IAAAA,MAAsBC,EAAST,0BAA0BU,YADhD,KAAAH,SACT,KAAAC,gBAVF,KAAAG,UAA2B,KAYjCxP,cACkB1a,IAAhBqS,KAAKyX,QAAwC,OAAhBzX,KAAKyX,OAClC,4DAGFJ,GAAqBrX,KAAK0X,eAoO9B,OArQE,sBAAW,8BAAyB,C,IAIpC,WACE,OAAOR,I,IALT,SAAqCjX,GACnCiX,GAA4BjX,G,gCAoC9B,YAAAsX,WAAA,WACE,OAAO,GAIT,YAAAC,YAAA,WACE,OAAOxX,KAAK0X,eAId,YAAAI,eAAA,SAAeC,GACb,OAAO,IAAIJ,EAAS3X,KAAKyX,OAAQM,IAInC,YAAAC,kBAAA,SAAkBC,GAEhB,MAAkB,cAAdA,EACKjY,KAAK0X,cAELC,EAAST,0BAA0BU,YAK9C,YAAAM,SAAA,SAASnU,GACP,OAAIA,EAAKyJ,UACAxN,KACsB,cAApB+D,EAAK4I,WACP3M,KAAK0X,cAELC,EAAST,0BAA0BU,YAO9C,YAAAO,SAAA,WACE,OAAO,GAIT,YAAAC,wBAAA,SAAwBH,EAAmBI,GACzC,OAAO,MAIT,YAAAC,qBAAA,SAAqBL,EAAmBM,GACtC,MAAkB,cAAdN,EACKjY,KAAK8X,eAAeS,GAClBA,EAAa/K,WAA2B,cAAdyK,EAC5BjY,KAEA2X,EAAST,0BAA0BU,WAAWU,qBACnDL,EACAM,GACAT,eAAe9X,KAAK0X,gBAK1B,YAAAc,YAAA,SAAYzU,EAAYwU,GACtB,IAAME,EAAQ1U,EAAK4I,WACnB,OAAc,OAAV8L,EACKF,EACEA,EAAa/K,WAAuB,cAAViL,EAC5BzY,MAEPqI,SACY,cAAVoQ,GAA8C,IAArB1U,EAAK6I,YAC9B,8CAGK5M,KAAKsY,qBACVG,EACAd,EAAST,0BAA0BU,WAAWY,YAC5CzU,EAAK8I,WACL0L,MAOR,YAAA/K,QAAA,WACE,OAAO,GAIT,YAAAkL,YAAA,WACE,OAAO,GAIT,YAAAC,aAAA,SAAapY,EAAc3M,GACzB,OAAO,GAMT,YAAAqM,IAAA,SAAI2Y,GACF,OAAIA,IAAiB5Y,KAAKwX,cAAchK,UAC/B,CACL,SAAUxN,KAAK6Y,WACf,YAAa7Y,KAAKwX,cAAcvX,OAG3BD,KAAK6Y,YAKhB,YAAAC,KAAA,WACE,GAAuB,OAAnB9Y,KAAK6X,UAAoB,CAC3B,IAAIkB,EAAS,GACR/Y,KAAK0X,cAAclK,YACtBuL,GACE,YACA3B,GAAiBpX,KAAK0X,cAAczX,OACpC,KAGJ,IAAMoQ,SAAcrQ,KAAKyX,OACzBsB,GAAU1I,EAAO,IAEf0I,GADW,WAAT1I,EACQ7F,EAAsBxK,KAAKyX,QAE3BzX,KAAKyX,OAEjBzX,KAAK6X,UAAY1Q,EAAK4R,GAExB,OAAO/Y,KAAK6X,WAOd,YAAAgB,SAAA,WACE,OAAO7Y,KAAKyX,QAMd,YAAAuB,UAAA,SAAU7pB,GACR,OAAIA,IAAUwoB,EAAST,0BAA0BU,WACxC,EACEzoB,aAAiBwoB,EAAST,2BAC3B,GAER7O,SAAOlZ,EAAMooB,aAAc,qBACpBvX,KAAKiZ,mBAAmB9pB,KAU3B,YAAA8pB,mBAAR,SAA2BC,GACzB,IAAMC,SAAuBD,EAAUzB,OACjC2B,SAAsBpZ,KAAKyX,OAC3B4B,EAAa1B,EAAS2B,iBAAiBpsB,QAAQisB,GAC/CI,EAAY5B,EAAS2B,iBAAiBpsB,QAAQksB,GAGpD,OAFA/Q,SAAOgR,GAAc,EAAG,sBAAwBF,GAChD9Q,SAAOkR,GAAa,EAAG,sBAAwBH,GAC3CC,IAAeE,EAEI,WAAjBH,EAEK,EAGHpZ,KAAKyX,OAASyB,EAAUzB,QAClB,EACCzX,KAAKyX,SAAWyB,EAAUzB,OAC5B,EAEA,EAIJ8B,EAAYF,GAOvB,YAAAG,UAAA,WACE,OAAOxZ,MAMT,YAAAyZ,UAAA,WACE,OAAO,GAMT,YAAArL,OAAA,SAAOjf,GAIL,GAAIA,IAAU6Q,KACZ,OAAO,EACF,GAAI7Q,EAAMooB,aAAc,CAC7B,IAAM2B,EAAY/pB,EAClB,OACE6Q,KAAKyX,SAAWyB,EAAUzB,QAC1BzX,KAAK0X,cAActJ,OAAO8K,EAAUxB,eAGtC,OAAO,GApPJ,EAAA4B,iBAAmB,CAAC,SAAU,UAAW,SAAU,UAuP5D,EAtQA,GCKA,ICZII,GCkBA9B,GFwDS+B,GAAiB,IA9D9B,yB,+CA4DA,OA5DmC,iBAIjC,YAAAxD,QAAA,SAAQ7M,EAAcC,GACpB,IAAMqQ,EAAYtQ,EAAEyM,KAAKyB,cACnBqC,EAAYtQ,EAAEwM,KAAKyB,cACnBsC,EAAWF,EAAUZ,UAAUa,GACrC,OAAiB,IAAbC,EACKzQ,EAAYC,EAAE1b,KAAM2b,EAAE3b,MAEtBksB,GAOX,YAAAnD,YAAA,SAAYZ,GACV,OAAQA,EAAKyB,cAAchK,WAM7B,YAAA4I,oBAAA,SAAoBC,EAAeC,GACjC,OAAQD,EAAQmB,cAAcpJ,OAAOkI,EAAQkB,gBAM/C,YAAAf,QAAA,WAEE,OAAQR,GAAkBS,KAM5B,YAAAG,QAAA,WACE,OAAO,IAAIZ,GAAU7M,EAAU,IAAIuO,GAAS,kBAAmBhH,MAQjE,YAAAmG,SAAA,SAASC,EAAqBnpB,GAC5B,IAAM0pB,EAAeH,GAAaJ,GAClC,OAAO,IAAId,GAAUroB,EAAM,IAAI+pB,GAAS,kBAAmBL,KAM7D,YAAAlR,SAAA,WACE,MAAO,aAEX,EA5DA,CAAmC9F,KGInC,cAcE,WACEyV,EACAgE,EACAC,EACQC,EACAC,QAAA,IAAAA,MAAA,MADA,KAAAD,aACA,KAAAC,mBAfF,KAAAC,WAA0D,GAkBhE,IADA,IAAIhM,EAAM,GACF4H,EAAKvI,WAQX,GAPAuI,EAAOA,EACP5H,EAAM4L,EAAWC,EAAWjE,EAAKpc,IAAKogB,GAAY,EAE9CE,IACF9L,IAAQ,GAGNA,EAAM,EAGN4H,EADE/V,KAAKia,WACAlE,EAAKhI,KAELgI,EAAK/H,UAET,IAAY,IAARG,EAAW,CAEpBnO,KAAKma,WAAWnX,KAAK+S,GACrB,MAGA/V,KAAKma,WAAWnX,KAAK+S,GAEnBA,EADE/V,KAAKia,WACAlE,EAAK/H,MAEL+H,EAAKhI,MAoDtB,OA9CE,YAAAqM,QAAA,WACE,GAA+B,IAA3Bpa,KAAKma,WAAWzsB,OAClB,OAAO,KAGT,IACIsJ,EADA+e,EAAO/V,KAAKma,WAAWpnB,MAQ3B,GALEiE,EADEgJ,KAAKka,iBACEla,KAAKka,iBAAiBnE,EAAKpc,IAAKoc,EAAKljB,OAEpC,CAAE8G,IAAKoc,EAAKpc,IAAK9G,MAAOkjB,EAAKljB,OAGrCmN,KAAKia,WAEP,IADAlE,EAAOA,EAAKhI,MACJgI,EAAKvI,WACXxN,KAAKma,WAAWnX,KAAK+S,GACrBA,EAAOA,EAAK/H,WAId,IADA+H,EAAOA,EAAK/H,OACJ+H,EAAKvI,WACXxN,KAAKma,WAAWnX,KAAK+S,GACrBA,EAAOA,EAAKhI,KAIhB,OAAO/W,GAGT,YAAAqjB,QAAA,WACE,OAAOra,KAAKma,WAAWzsB,OAAS,GAGlC,YAAA4sB,KAAA,WACE,GAA+B,IAA3Bta,KAAKma,WAAWzsB,OAClB,OAAO,KAGT,IAAMqoB,EAAO/V,KAAKma,WAAWna,KAAKma,WAAWzsB,OAAS,GACtD,OAAIsS,KAAKka,iBACAla,KAAKka,iBAAiBnE,EAAKpc,IAAKoc,EAAKljB,OAEpC,CAAE8G,IAAKoc,EAAKpc,IAAK9G,MAAOkjB,EAAKljB,QAG3C,EAnGA,GAwGA,cAaE,WACS8G,EACA9G,EACP0nB,EACAxM,EACAC,GAJO,KAAArU,MACA,KAAA9G,QAKPmN,KAAKua,MAAiB,MAATA,EAAgBA,EAAQC,EAASC,IAC9Cza,KAAK+N,KACK,MAARA,EAAeA,EAAQ2M,GAAU9C,WACnC5X,KAAKgO,MACM,MAATA,EAAgBA,EAAS0M,GAAU9C,WAyTzC,OAzSE,YAAA+C,KAAA,SACEhhB,EACA9G,EACA0nB,EACAxM,EACAC,GAEA,OAAO,IAAIwM,EACF,MAAP7gB,EAAcA,EAAMqG,KAAKrG,IAChB,MAAT9G,EAAgBA,EAAQmN,KAAKnN,MACpB,MAAT0nB,EAAgBA,EAAQva,KAAKua,MACrB,MAARxM,EAAeA,EAAO/N,KAAK+N,KAClB,MAATC,EAAgBA,EAAQhO,KAAKgO,QAOjC,YAAAnL,MAAA,WACE,OAAO7C,KAAK+N,KAAKlL,QAAU,EAAI7C,KAAKgO,MAAMnL,SAM5C,YAAA2K,QAAA,WACE,OAAO,GAYT,YAAAoN,iBAAA,SAAiBhnB,GACf,OACEoM,KAAK+N,KAAK6M,iBAAiBhnB,MACzBA,EAAOoM,KAAKrG,IAAKqG,KAAKnN,QACxBmN,KAAKgO,MAAM4M,iBAAiBhnB,IAYhC,YAAAinB,iBAAA,SAAiBjnB,GACf,OACEoM,KAAKgO,MAAM6M,iBAAiBjnB,IAC5BA,EAAOoM,KAAKrG,IAAKqG,KAAKnN,QACtBmN,KAAK+N,KAAK8M,iBAAiBjnB,IAQvB,YAAAknB,KAAR,WACE,OAAI9a,KAAK+N,KAAKP,UACLxN,KAECA,KAAK+N,KAAwB+M,QAOzC,YAAAC,OAAA,WACE,OAAO/a,KAAK8a,OAAOnhB,KAMrB,YAAAqhB,OAAA,WACE,OAAIhb,KAAKgO,MAAMR,UACNxN,KAAKrG,IAELqG,KAAKgO,MAAMgN,UAWtB,YAAAC,OAAA,SAAOthB,EAAQ9G,EAAUmnB,GACvB,IAAIkB,EAAoBlb,KAClBmO,EAAM6L,EAAWrgB,EAAKuhB,EAAEvhB,KAc9B,OAZEuhB,EADE/M,EAAM,EACJ+M,EAAEP,KAAK,KAAM,KAAM,KAAMO,EAAEnN,KAAKkN,OAAOthB,EAAK9G,EAAOmnB,GAAa,MACnD,IAAR7L,EACL+M,EAAEP,KAAK,KAAM9nB,EAAO,KAAM,KAAM,MAEhCqoB,EAAEP,KACJ,KACA,KACA,KACA,KACAO,EAAElN,MAAMiN,OAAOthB,EAAK9G,EAAOmnB,KAGtBmB,UAOH,YAAAC,WAAR,WACE,GAAIpb,KAAK+N,KAAKP,UACZ,OAAOkN,GAAU9C,WAEnB,IAAIsD,EAAoBlb,KAKxB,OAJKkb,EAAEnN,KAAKsN,UAAaH,EAAEnN,KAAKA,KAAKsN,WACnCH,EAAIA,EAAEI,iBAERJ,EAAIA,EAAEP,KAAK,KAAM,KAAM,KAAOO,EAAEnN,KAAwBqN,aAAc,OAC7DD,UAQX,YAAAnf,OAAA,SACErC,EACAqgB,GAEA,IAAIkB,EAAGK,EAEP,GAAIvB,EAAWrgB,GADfuhB,EAAIlb,MACkBrG,KAAO,EACtBuhB,EAAEnN,KAAKP,WAAc0N,EAAEnN,KAAKsN,UAAaH,EAAEnN,KAAKA,KAAKsN,WACxDH,EAAIA,EAAEI,gBAERJ,EAAIA,EAAEP,KAAK,KAAM,KAAM,KAAMO,EAAEnN,KAAK/R,OAAOrC,EAAKqgB,GAAa,UACxD,CAOL,GANIkB,EAAEnN,KAAKsN,WACTH,EAAIA,EAAEM,gBAEHN,EAAElN,MAAMR,WAAc0N,EAAElN,MAAMqN,UAAaH,EAAElN,MAAMD,KAAKsN,WAC3DH,EAAIA,EAAEO,iBAEuB,IAA3BzB,EAAWrgB,EAAKuhB,EAAEvhB,KAAY,CAChC,GAAIuhB,EAAElN,MAAMR,UACV,OAAOkN,GAAU9C,WAEjB2D,EAAYL,EAAElN,MAAyB8M,OACvCI,EAAIA,EAAEP,KACJY,EAAS5hB,IACT4hB,EAAS1oB,MACT,KACA,KACCqoB,EAAElN,MAAyBoN,cAIlCF,EAAIA,EAAEP,KAAK,KAAM,KAAM,KAAM,KAAMO,EAAElN,MAAMhS,OAAOrC,EAAKqgB,IAEzD,OAAOkB,EAAEC,UAOX,YAAAE,OAAA,WACE,OAAOrb,KAAKua,OAON,YAAAY,OAAR,WACE,IAAID,EAAoBlb,KAUxB,OATIkb,EAAElN,MAAMqN,WAAaH,EAAEnN,KAAKsN,WAC9BH,EAAIA,EAAEQ,eAEJR,EAAEnN,KAAKsN,UAAYH,EAAEnN,KAAKA,KAAKsN,WACjCH,EAAIA,EAAEM,gBAEJN,EAAEnN,KAAKsN,UAAYH,EAAElN,MAAMqN,WAC7BH,EAAIA,EAAES,cAEDT,GAOD,YAAAI,aAAR,WACE,IAAIJ,EAAIlb,KAAK2b,aAYb,OAXIT,EAAElN,MAAMD,KAAKsN,WASfH,GADAA,GAPAA,EAAIA,EAAEP,KACJ,KACA,KACA,KACA,KACCO,EAAElN,MAAyBwN,iBAExBE,eACAC,cAEDT,GAOD,YAAAO,cAAR,WACE,IAAIP,EAAIlb,KAAK2b,aAKb,OAJIT,EAAEnN,KAAKA,KAAKsN,WAEdH,GADAA,EAAIA,EAAEM,gBACAG,cAEDT,GAOD,YAAAQ,YAAR,WACE,IAAME,EAAK5b,KAAK2a,KAAK,KAAM,KAAMH,EAASC,IAAK,KAAMza,KAAKgO,MAAMD,MAChE,OAAO/N,KAAKgO,MAAM2M,KAAK,KAAM,KAAM3a,KAAKua,MAAOqB,EAAI,OAO7C,YAAAJ,aAAR,WACE,IAAMK,EAAK7b,KAAK2a,KAAK,KAAM,KAAMH,EAASC,IAAKza,KAAK+N,KAAKC,MAAO,MAChE,OAAOhO,KAAK+N,KAAK4M,KAAK,KAAM,KAAM3a,KAAKua,MAAO,KAAMsB,IAO9C,YAAAF,WAAR,WACE,IAAM5N,EAAO/N,KAAK+N,KAAK4M,KAAK,KAAM,MAAO3a,KAAK+N,KAAKwM,MAAO,KAAM,MAC1DvM,EAAQhO,KAAKgO,MAAM2M,KAAK,KAAM,MAAO3a,KAAKgO,MAAMuM,MAAO,KAAM,MACnE,OAAOva,KAAK2a,KAAK,KAAM,MAAO3a,KAAKua,MAAOxM,EAAMC,IAS1C,YAAA8N,eAAR,WACE,IAAMC,EAAa/b,KAAKgc,SACxB,OAAOjR,KAAKE,IAAI,EAAK8Q,IAAe/b,KAAK6C,QAAU,GAOrD,YAAAmZ,OAAA,WACE,GAAIhc,KAAKqb,UAAYrb,KAAK+N,KAAKsN,SAC7B,MAAM,IAAIvS,MACR,0BAA4B9I,KAAKrG,IAAM,IAAMqG,KAAKnN,MAAQ,KAG9D,GAAImN,KAAKgO,MAAMqN,SACb,MAAM,IAAIvS,MACR,mBAAqB9I,KAAKrG,IAAM,IAAMqG,KAAKnN,MAAQ,YAGvD,IAAMkpB,EAAa/b,KAAK+N,KAAKiO,SAC7B,GAAID,IAAe/b,KAAKgO,MAAMgO,SAC5B,MAAM,IAAIlT,MAAM,uBAEhB,OAAOiT,GAAc/b,KAAKqb,SAAW,EAAI,IAnTtC,EAAAZ,KAAM,EACN,EAAAwB,OAAQ,EAqTjB,EAjVA,GAsVA,4BAgHA,OApGE,YAAAtB,KAAA,SACEhhB,EACA9G,EACA0nB,EACAxM,EACAC,GAEA,OAAOhO,MAWT,YAAAib,OAAA,SAAOthB,EAAQ9G,EAAUmnB,GACvB,OAAO,IAAIQ,GAAS7gB,EAAK9G,EAAO,OAUlC,YAAAmJ,OAAA,SAAOrC,EAAQqgB,GACb,OAAOha,MAMT,YAAA6C,MAAA,WACE,OAAO,GAMT,YAAA2K,QAAA,WACE,OAAO,GAWT,YAAAoN,iBAAA,SAAiBhnB,GACf,OAAO,GAWT,YAAAinB,iBAAA,SAAiBjnB,GACf,OAAO,GAMT,YAAAmnB,OAAA,WACE,OAAO,MAMT,YAAAC,OAAA,WACE,OAAO,MAOT,YAAAgB,OAAA,WACE,OAAO,GAOT,YAAAX,OAAA,WACE,OAAO,GAEX,EAhHA,GAsHA,cAYE,WACUa,EACAC,QAAA,IAAAA,MAEkBzB,EAAU9C,YAH5B,KAAAsE,cACA,KAAAC,QA4MZ,OA/LE,YAAAlB,OAAA,SAAOthB,EAAQ9G,GACb,OAAO,IAAI6nB,EACT1a,KAAKkc,YACLlc,KAAKmc,MACFlB,OAAOthB,EAAK9G,EAAOmN,KAAKkc,aACxBvB,KAAK,KAAM,KAAMH,GAASyB,MAAO,KAAM,QAU9C,YAAAjgB,OAAA,SAAOrC,GACL,OAAO,IAAI+gB,EACT1a,KAAKkc,YACLlc,KAAKmc,MACFngB,OAAOrC,EAAKqG,KAAKkc,aACjBvB,KAAK,KAAM,KAAMH,GAASyB,MAAO,KAAM,QAW9C,YAAA9hB,IAAA,SAAIR,GAGF,IAFA,IAAIwU,EACA4H,EAAO/V,KAAKmc,OACRpG,EAAKvI,WAAW,CAEtB,GAAY,KADZW,EAAMnO,KAAKkc,YAAYviB,EAAKoc,EAAKpc,MAE/B,OAAOoc,EAAKljB,MACHsb,EAAM,EACf4H,EAAOA,EAAKhI,KACHI,EAAM,IACf4H,EAAOA,EAAK/H,OAGhB,OAAO,MAQT,YAAAoO,kBAAA,SAAkBziB,GAIhB,IAHA,IAAIwU,EACF4H,EAAO/V,KAAKmc,MACZE,EAAc,MACRtG,EAAKvI,WAAW,CAEtB,GAAY,KADZW,EAAMnO,KAAKkc,YAAYviB,EAAKoc,EAAKpc,MAClB,CACb,GAAKoc,EAAKhI,KAAKP,UAMR,OAAI6O,EACFA,EAAY1iB,IAEZ,KAPP,IADAoc,EAAOA,EAAKhI,MACJgI,EAAK/H,MAAMR,WACjBuI,EAAOA,EAAK/H,MAEd,OAAO+H,EAAKpc,IAMLwU,EAAM,EACf4H,EAAOA,EAAKhI,KACHI,EAAM,IACfkO,EAActG,EACdA,EAAOA,EAAK/H,OAIhB,MAAM,IAAIlF,MACR,0EAOJ,YAAA0E,QAAA,WACE,OAAOxN,KAAKmc,MAAM3O,WAMpB,YAAA3K,MAAA,WACE,OAAO7C,KAAKmc,MAAMtZ,SAMpB,YAAAkY,OAAA,WACE,OAAO/a,KAAKmc,MAAMpB,UAMpB,YAAAC,OAAA,WACE,OAAOhb,KAAKmc,MAAMnB,UAYpB,YAAAJ,iBAAA,SAAiBhnB,GACf,OAAOoM,KAAKmc,MAAMvB,iBAAiBhnB,IAWrC,YAAAinB,iBAAA,SAAiBjnB,GACf,OAAOoM,KAAKmc,MAAMtB,iBAAiBjnB,IASrC,YAAA0oB,YAAA,SACEC,GAEA,OAAO,IAAIC,GACTxc,KAAKmc,MACL,KACAnc,KAAKkc,aACL,EACAK,IAIJ,YAAAE,gBAAA,SACE9iB,EACA4iB,GAEA,OAAO,IAAIC,GACTxc,KAAKmc,MACLxiB,EACAqG,KAAKkc,aACL,EACAK,IAIJ,YAAAG,uBAAA,SACE/iB,EACA4iB,GAEA,OAAO,IAAIC,GACTxc,KAAKmc,MACLxiB,EACAqG,KAAKkc,aACL,EACAK,IAIJ,YAAAI,mBAAA,SACEJ,GAEA,OAAO,IAAIC,GACTxc,KAAKmc,MACL,KACAnc,KAAKkc,aACL,EACAK,IAlNG,EAAA3E,WAAa,IAAIgF,GAqN1B,EA1NA,GCzkBMC,GAAQ9R,KAAKtC,IAAI,GAKvB,cAQE,WAAY/a,GACV,IAAkBovB,EAIlB9c,KAAK6C,OAJaia,EAIIpvB,EAAS,EAF7Bie,SAAUZ,KAAKtC,IAAIqU,GAAOD,GAAe,KAG3C7c,KAAK+c,SAAW/c,KAAK6C,MAAQ,EAC7B,IAHiByI,EAGX0R,GAHW1R,EAGItL,KAAK6C,MAHQ8I,SAAS/M,MAAM0M,EAAO,GAAGE,KAAK,KAAM,IAItExL,KAAKid,MAASvvB,EAAS,EAAKsvB,EAYhC,OANE,YAAAE,aAAA,WAEE,IAAMlmB,IAAWgJ,KAAKid,MAAS,GAAOjd,KAAK+c,UAE3C,OADA/c,KAAK+c,WACE/lB,GAEX,EA5BA,GA6CammB,GAAgB,SAC3BC,EACAjP,EACAkP,EACAC,GAEAF,EAAUrT,KAAKoE,GAEf,IAAMoP,EAAoB,SAApBA,EACJC,EACAC,GAEA,IACIC,EACA/jB,EAFEjM,EAAS+vB,EAAOD,EAGtB,GAAe,IAAX9vB,EACF,OAAO,KACF,GAAe,IAAXA,EAGT,OAFAgwB,EAAYN,EAAUI,GACtB7jB,EAAM0jB,EAAQA,EAAMK,GAAeA,EAC5B,IAAIlD,GACT7gB,EACC+jB,EAAU3H,KACXyE,GAASyB,MACT,KACA,MAIF,IAAM0B,EAAShS,SAAUje,EAAS,EAAW,IAAM8vB,EAC7CzP,EAAOwP,EAAkBC,EAAKG,GAC9B3P,EAAQuP,EAAkBI,EAAS,EAAGF,GAG5C,OAFAC,EAAYN,EAAUO,GACtBhkB,EAAM0jB,EAAQA,EAAMK,GAAeA,EAC5B,IAAIlD,GACT7gB,EACC+jB,EAAU3H,KACXyE,GAASyB,MACTlO,EACAC,IAsDA9f,EAjDmB,SAAU0vB,GAiCjC,IAhCA,IAAI7H,EAAuB,KACvB7nB,EAAO,KACPqS,EAAQ6c,EAAU1vB,OAEhBmwB,EAAe,SAAUC,EAAmBvD,GAChD,IAAMiD,EAAMjd,EAAQud,EACdL,EAAOld,EACbA,GAASud,EACT,IAAMC,EAAYR,EAAkBC,EAAM,EAAGC,GACvCC,EAAYN,EAAUI,GACtB7jB,EAAS0jB,EAAQA,EAAMK,GAAeA,EAC5CM,EACE,IAAIxD,GACF7gB,EACC+jB,EAAU3H,KACXwE,EACA,KACAwD,KAKAC,EAAgB,SAAUC,GAC1BlI,GACFA,EAAKhI,KAAOkQ,EACZlI,EAAOkI,IAEP/vB,EAAO+vB,EACPlI,EAAOkI,IAIFpW,EAAI,EAAGA,EAAI+V,EAAO/a,QAASgF,EAAG,CACrC,IAAMqW,EAAQN,EAAOV,eAEfY,EAAY/S,KAAKE,IAAI,EAAG2S,EAAO/a,OAASgF,EAAI,IAC9CqW,EACFL,EAAaC,EAAWtD,GAASyB,QAGjC4B,EAAaC,EAAWtD,GAASyB,OACjC4B,EAAaC,EAAWtD,GAASC,MAGrC,OAAOvsB,EAIIiwB,CADE,IAAIC,GAAUhB,EAAU1vB,SAGvC,OAAO,IAAIgtB,GAAgB4C,GAAcnP,EAAajgB,IH1IlDmwB,GAAiB,GAEvB,cAkBE,WACUC,EAGAC,GAHA,KAAAD,WAGA,KAAAC,YAgIZ,OAlJE,sBAAW,YAAO,C,IAAlB,WAWE,OAVAlW,SACEgW,IAAkB1E,GAClB,uCAEFD,GACEA,IACA,IAAI8E,EACF,CAAE,YAAaH,IACf,CAAE,YAAa1E,M,gCAYrB,YAAAxf,IAAA,SAAIskB,GACF,IAAMC,EAAYC,UAAQ3e,KAAKse,SAAUG,GACzC,IAAKC,EACH,MAAM,IAAI5V,MAAM,wBAA0B2V,GAG5C,OAAIC,aAAqBhE,GAChBgE,EAIA,MAIX,YAAAE,SAAA,SAASC,GACP,OAAOtY,WAASvG,KAAKue,UAAWM,EAAgBzY,aAGlD,YAAA0Y,SAAA,SACED,EACAE,GAEA1W,SACEwW,IAAoB7H,GACpB,uEAMF,IAJA,IAUIgI,EAVE5B,EAAY,GACd6B,GAAkB,EAChBC,EAAOH,EAAiBzC,YAAYrG,GAAUD,MAChDmJ,EAAOD,EAAK9E,UACT+E,GACLF,EACEA,GAAmBJ,EAAgBlI,YAAYwI,EAAKpJ,MACtDqH,EAAUpa,KAAKmc,GACfA,EAAOD,EAAK9E,UAIZ4E,EADEC,EACS9B,GAAcC,EAAWyB,EAAgB3I,cAEzCmI,GAEb,IAAMe,EAAYP,EAAgBzY,WAC5BiZ,EAAc,EAAH,YAAQrf,KAAKue,WAC9Bc,EAAYD,GAAaP,EACzB,IAAMS,EAAa,EAAH,YAAQtf,KAAKse,UAE7B,OADAgB,EAAWF,GAAaJ,EACjB,IAAIR,EAASc,EAAYD,IAMlC,YAAAE,aAAA,SACE7B,EACAqB,GAFF,WAwCE,OAAO,IAAIP,EApCQgB,MACjBxf,KAAKse,UACL,SAACmB,EAA6CL,GAC5C,IAAM7e,EAAQoe,UAAQ,EAAKJ,UAAWa,GAEtC,GADA/W,SAAO9H,EAAO,oCAAsC6e,GAChDK,IAAoBpB,GAAgB,CAEtC,GAAI9d,EAAMoW,YAAY+G,EAAU3H,MAAO,CAKrC,IAHA,IAAMqH,EAAY,GACZ8B,EAAOH,EAAiBzC,YAAYrG,GAAUD,MAChDmJ,EAAOD,EAAK9E,UACT+E,GACDA,EAAKvxB,OAAS8vB,EAAU9vB,MAC1BwvB,EAAUpa,KAAKmc,GAEjBA,EAAOD,EAAK9E,UAGd,OADAgD,EAAUpa,KAAK0a,GACRP,GAAcC,EAAW7c,EAAM2V,cAGtC,OAAOmI,GAGT,IAAMqB,EAAeX,EAAiB5kB,IAAIujB,EAAU9vB,MAChD+xB,EAAcF,EAMlB,OALIC,IACFC,EAAcA,EAAY3jB,OACxB,IAAIia,GAAUyH,EAAU9vB,KAAM8xB,KAG3BC,EAAY1E,OAAOyC,EAAWA,EAAU3H,SAIrB/V,KAAKue,YAMvC,YAAAqB,kBAAA,SACElC,EACAqB,GAqBA,OAAO,IAAIP,EAnBQgB,MACjBxf,KAAKse,UACL,SAACmB,GACC,GAAIA,IAAoBpB,GAEtB,OAAOoB,EAEP,IAAMC,EAAeX,EAAiB5kB,IAAIujB,EAAU9vB,MACpD,OAAI8xB,EACKD,EAAgBzjB,OACrB,IAAIia,GAAUyH,EAAU9vB,KAAM8xB,IAIzBD,KAKiBzf,KAAKue,YAEzC,EAtJA,G,SIVgBsB,GAAqB9R,EAAiBC,GACpD,OAAO3E,EAAY0E,EAAKngB,KAAMogB,EAAMpgB,M,SAGtBkyB,GAAgB/R,EAAcC,GAC5C,OAAO3E,EAAY0E,EAAMC,GH6B3B,kBAqBE,WACmB+R,EACArI,EACTsI,GAFS,KAAAD,YACA,KAAArI,gBACT,KAAAsI,YAvBF,KAAAnI,UAA2B,KA8B7B7X,KAAK0X,eACPL,GAAqBrX,KAAK0X,eAGxB1X,KAAK+f,UAAUvS,WACjBnF,UACGrI,KAAK0X,eAAiB1X,KAAK0X,cAAclK,UAC1C,wCAqbR,OAxdE,sBAAW,eAAU,C,IAArB,WACE,OACEoK,KACCA,GAAa,IAAIqI,EAChB,IAAIvF,GAAwBoF,IAC5B,KACAtB,GAAS0B,W,gCAmCf,YAAA3I,WAAA,WACE,OAAO,GAIT,YAAAC,YAAA,WACE,OAAOxX,KAAK0X,eAAiBE,IAI/B,YAAAE,eAAA,SAAeC,GACb,OAAI/X,KAAK+f,UAAUvS,UAEVxN,KAEA,IAAIigB,EAAajgB,KAAK+f,UAAWhI,EAAiB/X,KAAKggB,YAKlE,YAAAhI,kBAAA,SAAkBC,GAEhB,GAAkB,cAAdA,EACF,OAAOjY,KAAKwX,cAEZ,IAAMnK,EAAQrN,KAAK+f,UAAU5lB,IAAI8d,GACjC,OAAiB,OAAV5K,EAAiBuK,GAAavK,GAKzC,YAAA6K,SAAA,SAASnU,GACP,IAAM0U,EAAQ1U,EAAK4I,WACnB,OAAc,OAAV8L,EACKzY,KAGFA,KAAKgY,kBAAkBS,GAAOP,SAASnU,EAAK8I,aAIrD,YAAAsL,SAAA,SAASF,GACP,OAAyC,OAAlCjY,KAAK+f,UAAU5lB,IAAI8d,IAI5B,YAAAK,qBAAA,SAAqBL,EAAmBM,GAEtC,GADAlQ,SAAOkQ,EAAc,8CACH,cAAdN,EACF,OAAOjY,KAAK8X,eAAeS,GAE3B,IAAMmF,EAAY,IAAIzH,GAAUgC,EAAWM,GACvCoH,OAAW,EAAEQ,OAAW,EACxB5H,EAAa/K,WACfmS,EAAc3f,KAAK+f,UAAU/jB,OAAOic,GACpCkI,EAAcngB,KAAKggB,UAAUJ,kBAC3BlC,EACA1d,KAAK+f,aAGPJ,EAAc3f,KAAK+f,UAAU9E,OAAOhD,EAAWM,GAC/C4H,EAAcngB,KAAKggB,UAAUT,aAAa7B,EAAW1d,KAAK+f,YAG5D,IAAMK,EAAcT,EAAYnS,UAC5BoK,GACA5X,KAAK0X,cACT,OAAO,IAAIuI,EAAaN,EAAaS,EAAaD,IAKtD,YAAA3H,YAAA,SAAYzU,EAAYwU,GACtB,IAAME,EAAQ1U,EAAK4I,WACnB,GAAc,OAAV8L,EACF,OAAOF,EAEPlQ,SACsB,cAApBtE,EAAK4I,YAAmD,IAArB5I,EAAK6I,YACxC,8CAEF,IAAMyT,EAAoBrgB,KAAKgY,kBAAkBS,GAAOD,YACtDzU,EAAK8I,WACL0L,GAEF,OAAOvY,KAAKsY,qBAAqBG,EAAO4H,IAK5C,YAAA7S,QAAA,WACE,OAAOxN,KAAK+f,UAAUvS,WAIxB,YAAAkL,YAAA,WACE,OAAO1Y,KAAK+f,UAAUld,SAUxB,YAAA5C,IAAA,SAAI2Y,GACF,GAAI5Y,KAAKwN,UACP,OAAO,KAGT,IAAMpO,EAAgC,GAClCkhB,EAAU,EACZtF,EAAS,EACTuF,GAAiB,EAYnB,GAXAvgB,KAAK2Y,aAAagB,IAAgB,SAAChgB,EAAa0e,GAC9CjZ,EAAIzF,GAAO0e,EAAUpY,IAAI2Y,GAEzB0H,IACIC,GAAkBN,EAAapU,gBAAgBxS,KAAKM,GACtDqhB,EAASjQ,KAAK0D,IAAIuM,EAAQ/lB,OAAO0E,IAEjC4mB,GAAiB,MAIhB3H,GAAgB2H,GAAkBvF,EAAS,EAAIsF,EAAS,CAE3D,IAAMvnB,EAAmB,GAEzB,IAAK,IAAMY,KAAOyF,EAChBrG,EAAOY,GAA6ByF,EAAIzF,GAG1C,OAAOZ,EAKP,OAHI6f,IAAiB5Y,KAAKwX,cAAchK,YACtCpO,EAAI,aAAeY,KAAKwX,cAAcvX,OAEjCb,GAKX,YAAA0Z,KAAA,WACE,GAAuB,OAAnB9Y,KAAK6X,UAAoB,CAC3B,IAAI,EAAS,GACR7X,KAAKwX,cAAchK,YACtB,GACE,YACA4J,GAAiBpX,KAAKwX,cAAcvX,OACpC,KAGJD,KAAK2Y,aAAagB,IAAgB,SAAChgB,EAAK0e,GACtC,IAAMmI,EAAYnI,EAAUS,OACV,KAAd0H,IACF,GAAU,IAAM7mB,EAAM,IAAM6mB,MAIhCxgB,KAAK6X,UAAuB,KAAX,EAAgB,GAAK1Q,EAAK,GAE7C,OAAOnH,KAAK6X,WAId,YAAAO,wBAAA,SACEH,EACAI,EACA9X,GAEA,IAAMkgB,EAAMzgB,KAAK0gB,cAAcngB,GAC/B,GAAIkgB,EAAK,CACP,IAAME,EAAcF,EAAIrE,kBACtB,IAAInG,GAAUgC,EAAWI,IAE3B,OAAOsI,EAAcA,EAAY/yB,KAAO,KAExC,OAAOoS,KAAK+f,UAAU3D,kBAAkBnE,IAQ5C,YAAA2I,kBAAA,SAAkB/B,GAChB,IAAM4B,EAAMzgB,KAAK0gB,cAAc7B,GAC/B,GAAI4B,EAAK,CACP,IAAM1F,EAAS0F,EAAI1F,SACnB,OAAOA,GAAUA,EAAOntB,KAExB,OAAOoS,KAAK+f,UAAUhF,UAQ1B,YAAA8F,cAAA,SAAchC,GACZ,IAAM9D,EAAS/a,KAAK4gB,kBAAkB/B,GACtC,OAAI9D,EACK,IAAI9E,GAAU8E,EAAQ/a,KAAK+f,UAAU5lB,IAAI4gB,IAEzC,MASX,YAAA+F,iBAAA,SAAiBjC,GACf,IAAM4B,EAAMzgB,KAAK0gB,cAAc7B,GAC/B,GAAI4B,EAAK,CACP,IAAMzF,EAASyF,EAAIzF,SACnB,OAAOA,GAAUA,EAAOptB,KAExB,OAAOoS,KAAK+f,UAAU/E,UAQ1B,YAAA+F,aAAA,SAAalC,GACX,IAAM7D,EAAShb,KAAK8gB,iBAAiBjC,GACrC,OAAI7D,EACK,IAAI/E,GAAU+E,EAAQhb,KAAK+f,UAAU5lB,IAAI6gB,IAEzC,MAOX,YAAArC,aAAA,SACEpY,EACA3M,GAEA,IAAM6sB,EAAMzgB,KAAK0gB,cAAcngB,GAC/B,OAAIkgB,EACKA,EAAI7F,kBAAiB,SAAAoG,GAC1B,OAAOptB,EAAOotB,EAAYpzB,KAAMozB,EAAYjL,SAGvC/V,KAAK+f,UAAUnF,iBAAiBhnB,IAQ3C,YAAA0oB,YAAA,SACEuC,GAEA,OAAO7e,KAAKyc,gBAAgBoC,EAAgBpI,UAAWoI,IASzD,YAAApC,gBAAA,SACEwE,EACApC,GAEA,IAAM4B,EAAMzgB,KAAK0gB,cAAc7B,GAC/B,GAAI4B,EACF,OAAOA,EAAIhE,gBAAgBwE,GAAW,SAAAtnB,GAAO,OAAAA,KAO7C,IALA,IAAMunB,EAAWlhB,KAAK+f,UAAUtD,gBAC9BwE,EAAUrzB,KACVqoB,GAAUD,MAERmJ,EAAO+B,EAAS5G,OACL,MAAR6E,GAAgBN,EAAgB1I,QAAQgJ,EAAM8B,GAAa,GAChEC,EAAS9G,UACT+E,EAAO+B,EAAS5G,OAElB,OAAO4G,GAQX,YAAAvE,mBAAA,SACEkC,GAEA,OAAO7e,KAAK0c,uBACVmC,EAAgBhI,UAChBgI,IASJ,YAAAnC,uBAAA,SACEyE,EACAtC,GAEA,IAAM4B,EAAMzgB,KAAK0gB,cAAc7B,GAC/B,GAAI4B,EACF,OAAOA,EAAI/D,uBAAuByE,GAAS,SAAAxnB,GACzC,OAAOA,KAQT,IALA,IAAMunB,EAAWlhB,KAAK+f,UAAUrD,uBAC9ByE,EAAQvzB,KACRqoB,GAAUD,MAERmJ,EAAO+B,EAAS5G,OACL,MAAR6E,GAAgBN,EAAgB1I,QAAQgJ,EAAMgC,GAAW,GAC9DD,EAAS9G,UACT+E,EAAO+B,EAAS5G,OAElB,OAAO4G,GAOX,YAAAlI,UAAA,SAAU7pB,GACR,OAAI6Q,KAAKwN,UACHre,EAAMqe,UACD,GAEC,EAEDre,EAAMooB,cAAgBpoB,EAAMqe,UAC9B,EACEre,IAAUwhB,IACX,EAGD,GAOX,YAAA6I,UAAA,SAAUqF,GACR,GACEA,IAAoB7H,IACpBhX,KAAKggB,UAAUpB,SAASC,GAExB,OAAO7e,KAEP,IAAMmgB,EAAcngB,KAAKggB,UAAUlB,SACjCD,EACA7e,KAAK+f,WAEP,OAAO,IAAIE,EAAajgB,KAAK+f,UAAW/f,KAAK0X,cAAeyI,IAOhE,YAAA1G,UAAA,SAAUlZ,GACR,OAAOA,IAAUyW,IAAahX,KAAKggB,UAAUpB,SAASre,IAMxD,YAAA6N,OAAA,SAAOjf,GACL,GAAIA,IAAU6Q,KACZ,OAAO,EACF,GAAI7Q,EAAMooB,aACf,OAAO,EAEP,IAAM6J,EAAoBjyB,EAC1B,GAAK6Q,KAAKwX,cAAcpJ,OAAOgT,EAAkB5J,eAE1C,IACLxX,KAAK+f,UAAUld,UAAYue,EAAkBrB,UAAUld,QACvD,CAKA,IAJA,IAAMwe,EAAWrhB,KAAKsc,YAAY3C,IAC5B2H,EAAYF,EAAkB9E,YAAY3C,IAC5C4H,EAAcF,EAASjH,UACvBoH,EAAeF,EAAUlH,UACtBmH,GAAeC,GAAc,CAClC,GACED,EAAY3zB,OAAS4zB,EAAa5zB,OACjC2zB,EAAYxL,KAAK3H,OAAOoT,EAAazL,MAEtC,OAAO,EAETwL,EAAcF,EAASjH,UACvBoH,EAAeF,EAAUlH,UAE3B,OAAuB,OAAhBmH,GAAyC,OAAjBC,EAE/B,OAAO,EApBP,OAAO,GAiCL,YAAAd,cAAR,SACE7B,GAEA,OAAIA,IAAoB7H,GACf,KAEAhX,KAAKggB,UAAU7lB,IAAI0kB,EAAgBzY,aArU/B,EAAAyF,gBAAkB,iBAwUnC,EA3dA,GA0gBa8E,GAAW,IAxCxB,YACE,a,OACE,YACE,IAAI+J,GAAwBoF,IAC5BG,GAAarI,WACb4G,GAAS0B,UACV,KA2BL,OAjC6B,iBAS3B,YAAAlH,UAAA,SAAU7pB,GACR,OAAIA,IAAU6Q,KACL,EAEA,GAIX,YAAAoO,OAAA,SAAOjf,GAEL,OAAOA,IAAU6Q,MAGnB,YAAAwX,YAAA,WACE,OAAOxX,MAGT,YAAAgY,kBAAA,SAAkBC,GAChB,OAAOgI,GAAarI,YAGtB,YAAApK,QAAA,WACE,OAAO,GAEX,EAjCA,CAA6ByS,KAoD7BnzB,OAAO20B,iBAAiBxL,GAAW,CACjCS,IAAK,CACH7jB,MAAO,IAAIojB,GAAU9M,EAAU8W,GAAarI,aAE9C8J,IAAK,CACH7uB,MAAO,IAAIojB,GAAU7M,EAAUuH,OAOnCsG,GAASvG,aAAeuP,GAAarI,WACrCD,GAAST,0BAA4B+I,GV/jBnCtP,EUgkBSA,G,SF7jBgB1Q,GACzB0Q,GAAW1Q,EE6jBb0hB,CAAmBhR,I,SIpjBHwG,GACd3hB,EACAqd,GAEA,QAFA,IAAAA,MAAA,MAEa,OAATrd,EACF,OAAOyqB,GAAarI,WAoBtB,GAjBoB,kBAATpiB,GAAqB,cAAeA,IAC7Cqd,EAAWrd,EAAK,cAGlB6S,SACe,OAAbwK,GACsB,kBAAbA,GACa,kBAAbA,GACc,kBAAbA,GAAyB,QAAUA,EAC7C,uCAAyCA,GAGvB,kBAATrd,GAAqB,WAAYA,GAA2B,OAAnBA,EAAK,YACvDA,EAAOA,EAAK,WAIM,kBAATA,GAAqB,QAASA,EAEvC,OAAO,IAAImiB,GADMniB,EACa2hB,GAAatE,IAG7C,GAAMrd,aAAgBoJ,MA8Cf,CACL,IAAI,EAAaqhB,GAAarI,WAa9B,OAZAtN,EAAK9U,GAAM,SAACmE,EAAaioB,GACvB,GAAIrb,WAAS/Q,EAAgBmE,IACC,MAAxBA,EAAI0Q,UAAU,EAAG,GAAY,CAE/B,IAAMgO,EAAYlB,GAAayK,IAC3BvJ,EAAUd,cAAiBc,EAAU7K,YACvC,EAAO,EAAK8K,qBAAqB3e,EAAK0e,QAMvC,EAAKP,eAAeX,GAAatE,IA3DxC,IAAM,EAAwB,GAC1B,GAAuB,EAc3B,GAZAvI,EADqB9U,GACF,SAACmE,EAAK0T,GACvB,GAA4B,MAAxB1T,EAAI0Q,UAAU,EAAG,GAAY,CAE/B,IAAMgO,EAAYlB,GAAa9J,GAC1BgL,EAAU7K,YACb,EACE,IAAyB6K,EAAUb,cAAchK,UACnD,EAASxK,KAAK,IAAIiT,GAAUtc,EAAK0e,SAKf,IAApB,EAAS3qB,OACX,OAAOuyB,GAAarI,WAGtB,IAAMiK,EAAW1E,GACf,EACA0C,IACA,SAAAnC,GAAa,OAAAA,EAAU9vB,OACvBkyB,IAEF,GAAI,EAAsB,CACxB,IAAMgC,EAAiB3E,GACrB,EACAxD,GAAezD,cAEjB,OAAO,IAAI+J,GACT4B,EACA1K,GAAatE,GACb,IAAI2L,GACF,CAAE,YAAasD,GACf,CAAE,YAAanI,MAInB,OAAO,IAAIsG,GACT4B,EACA1K,GAAatE,GACb2L,GAAS0B,U,SNvFejgB,GAC9BkX,GAAelX,EM2GjB8hB,CAAgB5K,IC1GhB,ICuBI6K,GDsCSC,GAAc,IA7D3B,yB,+CA2DA,OA3DgC,iBAI9B,YAAA9L,QAAA,SAAQ7M,EAAcC,GACpB,IAAMuQ,EAAWxQ,EAAEyM,KAAKiD,UAAUzP,EAAEwM,MACpC,OAAiB,IAAb+D,EACKzQ,EAAYC,EAAE1b,KAAM2b,EAAE3b,MAEtBksB,GAOX,YAAAnD,YAAA,SAAYZ,GACV,OAAO,GAMT,YAAAK,oBAAA,SAAoBC,EAAeC,GACjC,OAAQD,EAAQjI,OAAOkI,IAMzB,YAAAG,QAAA,WAEE,OAAQR,GAAkBS,KAM5B,YAAAG,QAAA,WAEE,OAAQZ,GAAkByL,KAQ5B,YAAA5K,SAAA,SAASC,EAAoBnpB,GAC3B,IAAMs0B,EAAY/K,GAAaJ,GAC/B,OAAO,IAAId,GAAUroB,EAAMs0B,IAM7B,YAAA9b,SAAA,WACE,MAAO,UAEX,EA3DA,CAAgC9F,KEGhC,eACE,WAAoB6hB,GAApB,MACE,cAAO,K,OADW,EAAAA,aAGlB9Z,UACG8Z,EAAW3U,WAAuC,cAA1B2U,EAAWxV,WACpC,2D,EA4DN,OAlE+B,iBAenB,YAAAyV,aAAV,SAAuBC,GACrB,OAAOA,EAAKnK,SAASlY,KAAKmiB,aAM5B,YAAAxL,YAAA,SAAYZ,GACV,OAAQA,EAAKmC,SAASlY,KAAKmiB,YAAY3U,WAMzC,YAAA2I,QAAA,SAAQ7M,EAAcC,GACpB,IAAM+Y,EAAStiB,KAAKoiB,aAAa9Y,EAAEyM,MAC7BwM,EAASviB,KAAKoiB,aAAa7Y,EAAEwM,MAC7B+D,EAAWwI,EAAOtJ,UAAUuJ,GAClC,OAAiB,IAAbzI,EACKzQ,EAAYC,EAAE1b,KAAM2b,EAAE3b,MAEtBksB,GAOX,YAAAhD,SAAA,SAASC,EAAoBnpB,GAC3B,IAAMs0B,EAAY/K,GAAaJ,GACzBhB,EAAOkK,GAAarI,WAAWY,YACnCxY,KAAKmiB,WACLD,GAEF,OAAO,IAAIjM,GAAUroB,EAAMmoB,IAM7B,YAAAc,QAAA,WACE,IAAMd,EAAOkK,GAAarI,WAAWY,YAAYxY,KAAKmiB,WAAYxR,IAClE,OAAO,IAAIsF,GAAU7M,EAAU2M,IAMjC,YAAA3P,SAAA,WACE,OAAOpG,KAAKmiB,WAAWrjB,QAAQ0M,KAAK,MAExC,EAlEA,CAA+BlL,I,cCM7B,WACmBkiB,EACAC,EACAC,GAFA,KAAAF,QACA,KAAAC,OACA,KAAAC,SA0JrB,OAjJE,YAAAziB,IAAA,WAEE,OADAuU,mBAAiB,mBAAoB,EAAG,EAAG/mB,UAAUC,QAC9CsS,KAAKwiB,MAAMviB,OAQpB,YAAA0iB,UAAA,WAEE,OADAnO,mBAAiB,yBAA0B,EAAG,EAAG/mB,UAAUC,QACpDsS,KAAKwiB,MAAMviB,KAAI,IAKxB,YAAAsV,OAAA,WAGE,OADAf,mBAAiB,sBAAuB,EAAG,EAAG/mB,UAAUC,QACjDsS,KAAK2iB,aAQd,YAAAC,OAAA,WAEE,OADApO,mBAAiB,sBAAuB,EAAG,EAAG/mB,UAAUC,SAChDsS,KAAKwiB,MAAMhV,WASrB,YAAAH,MAAA,SAAMwV,GACJrO,mBAAiB,qBAAsB,EAAG,EAAG/mB,UAAUC,QAEvDm1B,EAAkB5pB,OAAO4pB,GACzB/O,GAAmB,qBAAsB,EAAG+O,GAAiB,GAE7D,IAAMC,EAAY,IAAIpW,EAAKmW,GACrBE,EAAW/iB,KAAKyiB,KAAKpV,MAAMyV,GACjC,OAAO,IAAIE,EACThjB,KAAKwiB,MAAMtK,SAAS4K,GACpBC,EACApJ,KAUJ,YAAAxB,SAAA,SAAS0K,GACPrO,mBAAiB,wBAAyB,EAAG,EAAG/mB,UAAUC,QAC1DomB,GAAmB,wBAAyB,EAAG+O,GAAiB,GAEhE,IAAMC,EAAY,IAAIpW,EAAKmW,GAC3B,OAAQ7iB,KAAKwiB,MAAMtK,SAAS4K,GAAWtV,WAQzC,YAAAgK,YAAA,WAIE,OAHAhD,mBAAiB,2BAA4B,EAAG,EAAG/mB,UAAUC,QAGtDsS,KAAKwiB,MAAMhL,cAAcvX,OAWlC,YAAAjT,QAAA,SAAQ4G,GAAR,WAIE,GAHA4gB,mBAAiB,uBAAwB,EAAG,EAAG/mB,UAAUC,QACzD+mB,mBAAiB,uBAAwB,EAAG7gB,GAAQ,GAEhDoM,KAAKwiB,MAAMjL,aACb,OAAO,EAGT,IAAM0L,EAAejjB,KAAKwiB,MAE1B,QAASS,EAAatK,aAAa3Y,KAAK0iB,QAAQ,SAAC/oB,EAAKoc,GACpD,OAAOniB,EACL,IAAIovB,EAAajN,EAAM,EAAK0M,KAAKpV,MAAM1T,GAAMggB,SASnD,YAAAuJ,YAAA,WAGE,OAFA1O,mBAAiB,2BAA4B,EAAG,EAAG/mB,UAAUC,SAEzDsS,KAAKwiB,MAAMjL,eAGLvX,KAAKwiB,MAAMhV,WAIvB,sBAAI,kBAAG,C,IAAP,WACE,OAAOxN,KAAKyiB,KAAKnpB,U,gCAOnB,YAAAof,YAAA,WAGE,OAFAlE,mBAAiB,2BAA4B,EAAG,EAAG/mB,UAAUC,QAEtDsS,KAAKwiB,MAAM9J,eAMpB,YAAAyK,OAAA,WAGE,OAFA3O,mBAAiB,mBAAoB,EAAG,EAAG/mB,UAAUC,QAE9CsS,KAAKyiB,MAGd,sBAAI,kBAAG,C,IAAP,WACE,OAAOziB,KAAKmjB,U,gCAEhB,E,GCtIA,cAOE,WACSvP,EACAwP,EACA9N,EACA+N,GAHA,KAAAzP,YACA,KAAAwP,oBACA,KAAA9N,WACA,KAAA+N,WAyCX,OAnCE,YAAAvf,QAAA,WACE,IAAMlV,EAAMoR,KAAKsV,SAAS6N,SAC1B,MAAuB,UAAnBnjB,KAAK4T,UACAhlB,EAAImV,KAEJnV,EAAI00B,YAAYvf,MAO3B,YAAAwf,aAAA,WACE,OAAOvjB,KAAK4T,WAMd,YAAA4P,eAAA,WACE,OAAOxjB,KAAKojB,kBAAkBI,eAAexjB,OAM/C,YAAAoG,SAAA,WACE,OACEpG,KAAK8D,UAAUsC,WACf,IACApG,KAAK4T,UACL,IACAhc,YAAUoI,KAAKsV,SAASqN,cAG9B,EApDA,GAsDA,cAME,WACSS,EACAztB,EACAoO,GAFA,KAAAqf,oBACA,KAAAztB,QACA,KAAAoO,OA8BX,OAxBE,YAAAD,QAAA,WACE,OAAO9D,KAAK+D,MAMd,YAAAwf,aAAA,WACE,MAAO,UAMT,YAAAC,eAAA,WACE,OAAOxjB,KAAKojB,kBAAkBI,eAAexjB,OAM/C,YAAAoG,SAAA,WACE,OAAOpG,KAAK+D,KAAKqC,WAAa,WAElC,EAvCA,GC9BA,cAME,WACUqd,EACAC,EACAC,GAFA,KAAAF,YACA,KAAAC,kBACA,KAAAC,WA8EZ,OAxEE,YAAAC,WAAA,SAAWhQ,GACT,MAAqB,UAAdA,GAMT,YAAAiQ,YAAA,SAAYC,EAAgBlhB,GAC1B,IAAMrC,EAAQqC,EAAMmhB,iBAAiBC,WACrC,OAAO,IAAIC,GACT,QACAjkB,KACA,IAAIgjB,GAAac,EAAOI,aAActhB,EAAMugB,SAAU5iB,KAO1D,YAAAijB,eAAA,SAAeW,GACb,IAAMC,EAAMpkB,KAAK2jB,SACjB,GAAiC,WAA7BQ,EAAUZ,eAA6B,CACzClb,SACErI,KAAK0jB,gBACL,gEAEF,IAAM,EAAW1jB,KAAK0jB,gBACtB,OAAO,WAEL,EAAS3kB,KAAKqlB,EAAMD,EAA0BxuB,QAGhD,IAAM,EAAKqK,KAAKyjB,UAChB,OAAO,WACL,EAAG1kB,KAAKqlB,EAAMD,EAAwB7O,YAQ5C,YAAA+O,kBAAA,SAAkB1uB,EAAcoO,GAC9B,OAAI/D,KAAK0jB,gBACA,IAAIY,GAAYtkB,KAAMrK,EAAOoO,GAE7B,MAOX,YAAAwgB,QAAA,SAAQp1B,GACN,OAAMA,aAAiBq1B,KAEXr1B,EAAMs0B,YAAczjB,KAAKyjB,WAKjCt0B,EAAMs0B,YAAczjB,KAAKyjB,WAAat0B,EAAMw0B,WAAa3jB,KAAK2jB,WAQpE,YAAAc,eAAA,WACE,OAA0B,OAAnBzkB,KAAKyjB,WAEhB,EAvFA,GAkGA,cAME,WACUiB,EAGAhB,EACAC,GAJA,KAAAe,aAGA,KAAAhB,kBACA,KAAAC,WAiHZ,OA3GE,YAAAC,WAAA,SAAWhQ,GACT,IAAI+Q,EACY,mBAAd/Q,EAAiC,cAAgBA,EAGnD,OAFA+Q,EACmB,qBAAjBA,EAAsC,gBAAkBA,EACnDpe,WAASvG,KAAK0kB,WAAYC,IAMnC,YAAAN,kBAAA,SAAkB1uB,EAAcoO,GAC9B,OAAI/D,KAAK0jB,gBACA,IAAIY,GAAYtkB,KAAMrK,EAAOoO,GAE7B,MAOX,YAAA8f,YAAA,SAAYC,EAAgBlhB,GAC1ByF,SAA2B,MAApByb,EAAO7L,UAAmB,yCACjC,IAAMrpB,EAAMgU,EAAMugB,SAAS9V,MAA6ByW,EAAO7L,WACzD1X,EAAQqC,EAAMmhB,iBAAiBC,WACrC,OAAO,IAAIC,GACTH,EAAOzT,KACPrQ,KACA,IAAIgjB,GAAac,EAAOI,aAAct1B,EAAK2R,GAC3CujB,EAAOT,WAOX,YAAAG,eAAA,SAAeW,GACb,IAAMC,EAAMpkB,KAAK2jB,SACjB,GAAiC,WAA7BQ,EAAUZ,eAA6B,CACzClb,SACErI,KAAK0jB,gBACL,gEAEF,IAAM,EAAW1jB,KAAK0jB,gBACtB,OAAO,WAEL,EAAS3kB,KAAKqlB,EAAMD,EAA0BxuB,QAGhD,IAAM,EAAKqK,KAAK0kB,WAAYP,EAAwBvQ,WACpD,OAAO,WACL,EAAG7U,KACDqlB,EACCD,EAAwB7O,SACxB6O,EAAwBd,YASjC,YAAAkB,QAAA,SAAQp1B,GAAR,WACE,GAAIA,aAAiBy1B,EAAwB,CAC3C,IAAK5kB,KAAK0kB,aAAev1B,EAAMu1B,WAC7B,OAAO,EACF,GAAI1kB,KAAK2jB,WAAax0B,EAAMw0B,SAAU,CAC3C,IAAMkB,EAAY/3B,OAAOC,KAAKoC,EAAMu1B,YAC9BI,EAAWh4B,OAAOC,KAAKiT,KAAK0kB,YAC5BK,EAAaF,EAAUn3B,OAE7B,GAAIq3B,IADcD,EAASp3B,OACG,CAK5B,GAAmB,IAAfq3B,EAAkB,CACpB,IAAMC,EAAWH,EAAU,GACrBI,EAAUH,EAAS,GACzB,OACEG,IAAYD,KACV71B,EAAMu1B,WAAWM,KAChBhlB,KAAK0kB,WAAWO,IACjB91B,EAAMu1B,WAAWM,KAAchlB,KAAK0kB,WAAWO,IAInD,OAAOH,EAASI,OACd,SAAAtR,GACE,OAAAzkB,EAAMu1B,WAAW9Q,KAAe,EAAK8Q,WAAW9Q,QAO5D,OAAO,GAMT,YAAA6Q,eAAA,WACE,OAA2B,OAApBzkB,KAAK0kB,YAEhB,EA5HA,G,cJ7GE,WACSS,EACAphB,EACCqhB,EACAC,GAHD,KAAAF,OACA,KAAAphB,OACC,KAAAqhB,eACA,KAAAC,iBAslBZ,OAnmBE,sBAAW,2BAAsB,C,IAIjC,WAEE,OADAhd,SAAO2Z,GAAwB,oCACxBA,I,IANT,SAAkC/hB,GAChC+hB,GAAyB/hB,G,gCAoBZ,EAAAqlB,wBAAf,SAAuChV,GACrC,IAAIiV,EAAY,KACZC,EAAU,KAQd,GAPIlV,EAAOmV,aACTF,EAAYjV,EAAOoV,sBAEjBpV,EAAOqV,WACTH,EAAUlV,EAAOsV,oBAGftV,EAAO0T,aAAehN,GAAW,CACnC,IAAM6O,EACJ,mGAEIC,EACJ,wGAEF,GAAIxV,EAAOmV,WAAY,CAErB,GADkBnV,EAAOyV,sBACP5c,EAChB,MAAM,IAAIL,MAAM+c,GACX,GAAyB,kBAAdN,EAChB,MAAM,IAAIzc,MAAMgd,GAGpB,GAAIxV,EAAOqV,SAAU,CAEnB,GADgBrV,EAAO0V,oBACP5c,EACd,MAAM,IAAIN,MAAM+c,GACX,GAAuB,kBAAZL,EAChB,MAAM,IAAI1c,MAAMgd,SAGf,GAAIxV,EAAO0T,aAAerK,IAC/B,GACgB,MAAb4L,IAAsB3S,GAAgB2S,IAC3B,MAAXC,IAAoB5S,GAAgB4S,GAErC,MAAM,IAAI1c,MACR,sKAUJ,GALAT,SACEiI,EAAO0T,qBAAsBiC,IAC3B3V,EAAO0T,aAAe/B,GACxB,uBAGc,MAAbsD,GAA0C,kBAAdA,GACjB,MAAXC,GAAsC,kBAAZA,EAE3B,MAAM,IAAI1c,MACR,0FAYO,EAAAod,eAAf,SAA8B5V,GAC5B,GACEA,EAAOmV,YACPnV,EAAOqV,UACPrV,EAAO6V,aACN7V,EAAO8V,mBAER,MAAM,IAAItd,MACR,uGAUE,YAAAud,+BAAR,SAAuCtT,GACrC,IAA4B,IAAxB/S,KAAKqlB,eACP,MAAM,IAAIvc,MAAMiK,EAAS,gDAO7B,YAAAgR,eAAA,WACE,OAAO/jB,KAAKolB,cAMd,YAAAjC,OAAA,WAKE,OAJA3O,mBAAiB,YAAa,EAAG,EAAG/mB,UAAUC,QAIvC,IAAI44B,EAAMtE,uBAAuBhiB,KAAKmlB,KAAMnlB,KAAK+D,OAU1D,YAAAwiB,GAAA,SACE3S,EACAxZ,EACAosB,EACAh1B,GAEAgjB,mBAAiB,WAAY,EAAG,EAAG/mB,UAAUC,QAC7CimB,GAAkB,WAAY,EAAGC,GAAW,GAC5Ca,mBAAiB,WAAY,EAAGra,GAAU,GAE1C,IAAMqsB,EAAMH,EAAMI,yBAChB,WACAF,EACAh1B,GAGF,GAAkB,UAAdoiB,EACF5T,KAAK2mB,aAAavsB,EAAUqsB,EAAInS,OAAQmS,EAAIj1B,aACvC,CACL,IAAM0I,EAA8C,GACpDA,EAAU0Z,GAAaxZ,EACvB4F,KAAK4mB,aAAa1sB,EAAWusB,EAAInS,OAAQmS,EAAIj1B,SAE/C,OAAO4I,GASC,YAAAusB,aAAV,SACEvsB,EACAysB,EACAr1B,GAEA,IAAMsB,EAAY,IAAI0xB,GACpBpqB,EACAysB,GAAkB,KAClBr1B,GAAW,MAEbwO,KAAKmlB,KAAK2B,yBAAyB9mB,KAAMlN,IAS3C,YAAA8zB,aAAA,SACE1sB,EACA2sB,EACAr1B,GAEA,IAAMsB,EAAY,IAAI8xB,GACpB1qB,EACA2sB,EACAr1B,GAEFwO,KAAKmlB,KAAK2B,yBAAyB9mB,KAAMlN,IAQ3C,YAAAi0B,IAAA,SACEnT,EACAxZ,EACA5I,GAEAgjB,mBAAiB,YAAa,EAAG,EAAG/mB,UAAUC,QAC9CimB,GAAkB,YAAa,EAAGC,GAAW,GAC7Ca,mBAAiB,YAAa,EAAGra,GAAU,GAC3C4sB,wBAAsB,YAAa,EAAGx1B,GAAS,GAE/C,IAAIsB,EAAsC,KACtCoH,EAAqD,KACzD,GAAkB,UAAd0Z,EAAuB,CACzB,IAAMqT,EAAgB7sB,GAAY,KAClCtH,EAAY,IAAI0xB,GACdyC,EACA,KACAz1B,GAAW,WAEJoiB,IACLxZ,KACFF,EAAY,IACF0Z,GAAaxZ,GAEzBtH,EAAY,IAAI8xB,GAAuB1qB,EAAW,KAAM1I,GAAW,OAErEwO,KAAKmlB,KAAK+B,4BAA4BlnB,KAAMlN,IAW9C,YAAAq0B,KAAA,SACEvT,EACAwT,EACAC,EACA71B,GAJF,WAMEgjB,mBAAiB,aAAc,EAAG,EAAG/mB,UAAUC,QAC/CimB,GAAkB,aAAc,EAAGC,GAAW,GAC9Ca,mBAAiB,aAAc,EAAG2S,GAAc,GAEhD,IAAMX,EAAMH,EAAMI,yBAChB,aACAW,EACA71B,GAOE81B,GAAY,EACV5S,EAAW,IAAIC,WAGrBD,EAASI,QAAQtW,OAAM,eAEvB,IAAM+oB,EAAe,SAAfA,EAAgBjS,GAGhBgS,IACFA,GAAY,EACZ,EAAKP,IAAInT,EAAW2T,GAEhBH,GACFA,EAAa1e,KAAK+d,EAAIj1B,QAAtB41B,CAA+B9R,GAEjCZ,EAASrc,QAAQid,KAgBrB,OAZAtV,KAAKumB,GACH3S,EACA2T,GACY,SAAAC,GACV,EAAKT,IAAInT,EAAW2T,GAEhBd,EAAInS,QACNmS,EAAInS,OAAO5L,KAAK+d,EAAIj1B,QAApBi1B,CAA6Be,GAE/B9S,EAAShZ,OAAO8rB,MAGb9S,EAASI,SAQlB,YAAA2S,aAAA,SAAaC,GAEX,GADAlT,mBAAiB,qBAAsB,EAAG,EAAG/mB,UAAUC,QAEpC,kBAAVg6B,GACP3c,KAAKI,MAAMuc,KAAWA,GACtBA,GAAS,EAET,MAAM,IAAI5e,MACR,kEAGJ,GAAI9I,KAAKolB,aAAae,WACpB,MAAM,IAAIrd,MACR,uGAKJ,OAAO,IAAIwd,EACTtmB,KAAKmlB,KACLnlB,KAAK+D,KACL/D,KAAKolB,aAAaqC,aAAaC,GAC/B1nB,KAAKqlB,iBAST,YAAAsC,YAAA,SAAYD,GAEV,GADAlT,mBAAiB,oBAAqB,EAAG,EAAG/mB,UAAUC,QAEnC,kBAAVg6B,GACP3c,KAAKI,MAAMuc,KAAWA,GACtBA,GAAS,EAET,MAAM,IAAI5e,MACR,iEAGJ,GAAI9I,KAAKolB,aAAae,WACpB,MAAM,IAAIrd,MACR,sGAKJ,OAAO,IAAIwd,EACTtmB,KAAKmlB,KACLnlB,KAAK+D,KACL/D,KAAKolB,aAAauC,YAAYD,GAC9B1nB,KAAKqlB,iBAST,YAAAuC,aAAA,SAAa7jB,GAEX,GADAyQ,mBAAiB,qBAAsB,EAAG,EAAG/mB,UAAUC,QAC1C,SAATqW,EACF,MAAM,IAAI+E,MACR,2EAEG,GAAa,cAAT/E,EACT,MAAM,IAAI+E,MACR,qFAEG,GAAa,WAAT/E,EACT,MAAM,IAAI+E,MACR,+EAGJgL,GAAmB,qBAAsB,EAAG/P,GAAM,GAClD/D,KAAKqmB,+BAA+B,sBACpC,IAAMwB,EAAa,IAAInb,EAAK3I,GAC5B,GAAI8jB,EAAWra,UACb,MAAM,IAAI1E,MACR,qFAGJ,IAAMvI,EAAQ,IAAI0lB,GAAU4B,GACtBC,EAAY9nB,KAAKolB,aAAa2C,QAAQxnB,GAG5C,OAFA+lB,EAAMhB,wBAAwBwC,GAEvB,IAAIxB,EAAMtmB,KAAKmlB,KAAMnlB,KAAK+D,KAAM+jB,GAA8B,IAOvE,YAAAE,WAAA,WACExT,mBAAiB,mBAAoB,EAAG,EAAG/mB,UAAUC,QACrDsS,KAAKqmB,+BAA+B,oBACpC,IAAMyB,EAAY9nB,KAAKolB,aAAa2C,QAAQ/Q,IAE5C,OADAsP,EAAMhB,wBAAwBwC,GACvB,IAAIxB,EAAMtmB,KAAKmlB,KAAMnlB,KAAK+D,KAAM+jB,GAA8B,IAOvE,YAAAG,gBAAA,WACEzT,mBAAiB,wBAAyB,EAAG,EAAG/mB,UAAUC,QAC1DsS,KAAKqmB,+BAA+B,yBACpC,IAAMyB,EAAY9nB,KAAKolB,aAAa2C,QAAQpO,IAE5C,OADA2M,EAAMhB,wBAAwBwC,GACvB,IAAIxB,EAAMtmB,KAAKmlB,KAAMnlB,KAAK+D,KAAM+jB,GAA8B,IAOvE,YAAAI,aAAA,WACE1T,mBAAiB,qBAAsB,EAAG,EAAG/mB,UAAUC,QACvDsS,KAAKqmB,+BAA+B,sBACpC,IAAMyB,EAAY9nB,KAAKolB,aAAa2C,QAAQ9F,IAE5C,OADAqE,EAAMhB,wBAAwBwC,GACvB,IAAIxB,EAAMtmB,KAAKmlB,KAAMnlB,KAAK+D,KAAM+jB,GAA8B,IAQvE,YAAAK,QAAA,SACEt1B,EACAjF,QADA,IAAAiF,MAAA,MAGA2hB,mBAAiB,gBAAiB,EAAG,EAAG/mB,UAAUC,QAClDolB,GAAwB,gBAAiB,EAAGjgB,EAAOmN,KAAK+D,MAAM,GAC9D8P,GAAY,gBAAiB,EAAGjmB,GAAM,GAEtC,IAAMk6B,EAAY9nB,KAAKolB,aAAa+C,QAAQt1B,EAAOjF,GAGnD,GAFA04B,EAAMJ,eAAe4B,GACrBxB,EAAMhB,wBAAwBwC,GAC1B9nB,KAAKolB,aAAaK,WACpB,MAAM,IAAI3c,MACR,0FAUJ,YAJcnb,IAAVkF,IACFA,EAAQ,KACRjF,EAAO,MAEF,IAAI04B,EAAMtmB,KAAKmlB,KAAMnlB,KAAK+D,KAAM+jB,EAAW9nB,KAAKqlB,iBAQzD,YAAA+C,MAAA,SACEv1B,EACAjF,QADA,IAAAiF,MAAA,MAGA2hB,mBAAiB,cAAe,EAAG,EAAG/mB,UAAUC,QAChDolB,GAAwB,cAAe,EAAGjgB,EAAOmN,KAAK+D,MAAM,GAC5D8P,GAAY,cAAe,EAAGjmB,GAAM,GAEpC,IAAMk6B,EAAY9nB,KAAKolB,aAAagD,MAAMv1B,EAAOjF,GAGjD,GAFA04B,EAAMJ,eAAe4B,GACrBxB,EAAMhB,wBAAwBwC,GAC1B9nB,KAAKolB,aAAaO,SACpB,MAAM,IAAI7c,MACR,oFAKJ,OAAO,IAAIwd,EAAMtmB,KAAKmlB,KAAMnlB,KAAK+D,KAAM+jB,EAAW9nB,KAAKqlB,iBAUzD,YAAAgD,QAAA,SAAQx1B,EAAyCjF,GAI/C,GAHA4mB,mBAAiB,gBAAiB,EAAG,EAAG/mB,UAAUC,QAClDolB,GAAwB,gBAAiB,EAAGjgB,EAAOmN,KAAK+D,MAAM,GAC9D8P,GAAY,gBAAiB,EAAGjmB,GAAM,GAClCoS,KAAKolB,aAAaK,WACpB,MAAM,IAAI3c,MACR,0FAIJ,GAAI9I,KAAKolB,aAAaO,SACpB,MAAM,IAAI7c,MACR,sFAIJ,OAAO9I,KAAKmoB,QAAQt1B,EAAOjF,GAAMw6B,MAAMv1B,EAAOjF,IAMhD,YAAAwY,SAAA,WAGE,OAFAoO,mBAAiB,iBAAkB,EAAG,EAAG/mB,UAAUC,QAE5CsS,KAAKmlB,KAAK/e,WAAapG,KAAK+D,KAAKiJ,sBAK1C,YAAAuI,OAAA,WAGE,OADAf,mBAAiB,eAAgB,EAAG,EAAG/mB,UAAUC,QAC1CsS,KAAKoG,YAOd,YAAAkiB,YAAA,WACE,OAAOtoB,KAAKolB,aAAamD,kBAM3B,YAAAC,gBAAA,WACE,IAAMppB,EAAMY,KAAKsoB,cACXphB,EAAK2C,EAAkBzK,GAC7B,MAAc,OAAP8H,EAAc,UAAYA,GAQnC,YAAAuhB,QAAA,SAAQt5B,GAEN,GADAqlB,mBAAiB,gBAAiB,EAAG,EAAG/mB,UAAUC,UAC5CyB,aAAiBm3B,GAAQ,CAC7B,IAAM3wB,EACJ,uFACF,MAAM,IAAImT,MAAMnT,GAGlB,IAAM+yB,EAAW1oB,KAAKmlB,OAASh2B,EAAMg2B,KAC/BwD,EAAW3oB,KAAK+D,KAAKqK,OAAOjf,EAAM4U,MAClC6kB,EACJ5oB,KAAKwoB,oBAAsBr5B,EAAMq5B,kBAEnC,OAAOE,GAAYC,GAAYC,GAWlB,EAAAlC,yBAAf,SACE3T,EACA8V,EACAr3B,GAEA,IAAMi1B,EAGF,CAAEnS,OAAQ,KAAM9iB,QAAS,MAC7B,GAAIq3B,GAAmBr3B,EACrBi1B,EAAInS,OAASuU,EACbpU,mBAAiB1B,EAAQ,EAAG0T,EAAInS,QAAQ,GAExCmS,EAAIj1B,QAAUA,EACdw1B,wBAAsBjU,EAAQ,EAAG0T,EAAIj1B,SAAS,QACzC,GAAIq3B,EAET,GAA+B,kBAApBA,GAAoD,OAApBA,EAEzCpC,EAAIj1B,QAAUq3B,MACT,IAA+B,oBAApBA,EAGhB,MAAM,IAAI/f,MACRqK,cAAYJ,EAAQ,GAAG,GACrB,0DAJJ0T,EAAInS,OAASuU,EAQjB,OAAOpC,GAGT,sBAAI,kBAAG,C,IAAP,WACE,OAAOzmB,KAAKmjB,U,gCAEhB,E,GK1nBA,cACE,WAAqBX,GAAA,KAAAA,QAUvB,OARE,YAAAxK,kBAAA,SAAkBC,GAEhB,OAAO,IAAI6Q,EADG9oB,KAAKwiB,MAAMxK,kBAAkBC,KAI7C,YAAAlC,KAAA,WACE,OAAO/V,KAAKwiB,OAEhB,EAXA,GAaA,cAIE,WAAYuG,EAAoBhlB,GAC9B/D,KAAKgpB,UAAYD,EACjB/oB,KAAKoT,MAAQrP,EAWjB,OARE,YAAAiU,kBAAA,SAAkBC,GAChB,IAAM6K,EAAY9iB,KAAKoT,MAAM/F,MAAM4K,GACnC,OAAO,IAAIgR,EAAsBjpB,KAAKgpB,UAAWlG,IAGnD,YAAA/M,KAAA,WACE,OAAO/V,KAAKgpB,UAAUE,uBAAuBlpB,KAAKoT,QAEtD,EAjBA,GAyCa+V,GAA2B,SACtCt2B,EACAu2B,EACAC,GAEA,OAAKx2B,GAA0B,kBAAVA,GAGrBwV,SAAO,QAASxV,EAAO,6CAEK,kBAAjBA,EAAM,OACRy2B,GAA2Bz2B,EAAM,OAAQu2B,EAAaC,GAC5B,kBAAjBx2B,EAAM,OACf02B,GAA4B12B,EAAM,OAAQu2B,QAEjD/gB,UAAO,EAAO,4BAA8B1Q,KAAKC,UAAU/E,EAAO,KAAM,KATjEA,GAaLy2B,GAA6B,SACjCE,EACAC,EACAJ,GAEA,OAAQG,GACN,IAAK,YACH,OAAOH,EAAY,UACrB,QACEhhB,UAAO,EAAO,4BAA8BmhB,KAI5CD,GAA8B,SAClCC,EACAC,EACAC,GAEKF,EAAGjf,eAAe,cACrBlC,UAAO,EAAO,4BAA8B1Q,KAAKC,UAAU4xB,EAAI,KAAM,IAEvE,IAAMG,EAAQH,EAAE,UACK,kBAAVG,GACTthB,UAAO,EAAO,+BAAiCshB,GAGjD,IAAMC,EAAeH,EAAS1T,OAO9B,GANA1N,SACmB,OAAjBuhB,GAAiD,qBAAjBA,EAChC,+CAIGA,EAAarS,aAChB,OAAOoS,EAGT,IACMP,EADOQ,EACY/Q,WACzB,MAA2B,kBAAhBuQ,EACFO,EAIFP,EAAcO,GAYVE,GAA2B,SACtC9lB,EACAgS,EACAgT,EACAM,GAEA,OAAOS,GACL/T,EACA,IAAIkT,GAAsBF,EAAUhlB,GACpCslB,IAYSU,GAA+B,SAC1ChU,EACA0T,EACAJ,GAEA,OAAOS,GACL/T,EACA,IAAI+S,GAAsBW,GAC1BJ,IAIJ,SAASS,GACP/T,EACAqT,EACAC,GAEA,IAWI/S,EAXE0T,EAASjU,EAAKyB,cAAcvX,MAM5B4S,EAAWsW,GACfa,EACAZ,EAAYpR,kBAAkB,aAC9BqR,GAIF,GAAItT,EAAKwB,aAAc,CACrB,IAAM0S,EAAWlU,EACXljB,EAAQs2B,GACZc,EAASpR,WACTuQ,EACAC,GAEF,OACEx2B,IAAUo3B,EAASpR,YACnBhG,IAAaoX,EAASzS,cAAcvX,MAE7B,IAAI0X,GAAS9kB,EAAOskB,GAAatE,IAEjCkD,EAGT,IAAMkN,EAAelN,EAerB,OAdAO,EAAU2M,EACNpQ,IAAaoQ,EAAazL,cAAcvX,QAC1CqW,EAAUA,EAAQwB,eAAe,IAAIH,GAAS9E,KAEhDoQ,EAAatK,aAAagB,IAAgB,SAAC1B,EAAWI,GACpD,IAAME,EAAeuR,GACnBzR,EACA+Q,EAAYpR,kBAAkBC,GAC9BoR,GAEE9Q,IAAiBF,IACnB/B,EAAUA,EAAQgC,qBAAqBL,EAAWM,OAG/CjC,ECnOX,ICAY4T,GDAZ,2BACU,KAAAr3B,MAAqB,KAEZ,KAAAhE,SAA4C,IAAI4K,IA0HnE,OAlHE,YAAA0wB,KAAA,SAAKpmB,GACH,GAAkB,MAAd/D,KAAKnN,MACP,OAAOmN,KAAKnN,MAAMqlB,SAASnU,GACtB,IAAKA,EAAKyJ,WAAaxN,KAAKnR,SAAS6L,KAAO,EAAG,CACpD,IAAM0vB,EAAWrmB,EAAK4I,WAEtB,OADA5I,EAAOA,EAAK8I,WACR7M,KAAKnR,SAASw7B,IAAID,GACFpqB,KAAKnR,SAASsL,IAAIiwB,GACnBD,KAAKpmB,GAEf,KAGT,OAAO,MAWX,YAAAumB,SAAA,SAASvmB,EAAYtJ,GACnB,GAAIsJ,EAAKyJ,UACPxN,KAAKnN,MAAQ4H,EACbuF,KAAKnR,SAAS07B,aACT,GAAmB,OAAfvqB,KAAKnN,MACdmN,KAAKnN,MAAQmN,KAAKnN,MAAM2lB,YAAYzU,EAAMtJ,OACrC,CACL,IAAM2vB,EAAWrmB,EAAK4I,WACjB3M,KAAKnR,SAASw7B,IAAID,IACrBpqB,KAAKnR,SAASiN,IAAIsuB,EAAU,IAAII,GAGlC,IAAMnd,EAAQrN,KAAKnR,SAASsL,IAAIiwB,GAChCrmB,EAAOA,EAAK8I,WACZQ,EAAMid,SAASvmB,EAAMtJ,KAUzB,YAAAgwB,OAAA,SAAO1mB,GACL,GAAIA,EAAKyJ,UAGP,OAFAxN,KAAKnN,MAAQ,KACbmN,KAAKnR,SAAS07B,SACP,EAEP,GAAmB,OAAfvqB,KAAKnN,MAAgB,CACvB,GAAImN,KAAKnN,MAAM0kB,aAEb,OAAO,EAEP,IAAM1kB,EAAQmN,KAAKnN,MACnBmN,KAAKnN,MAAQ,KAEb,IAAM,EAAOmN,KAKb,OAJAnN,EAAM8lB,aAAagB,IAAgB,SAAChgB,EAAK+wB,GACvC,EAAKJ,SAAS,IAAI5d,EAAK/S,GAAM+wB,MAGxB1qB,KAAKyqB,OAAO1mB,GAEhB,GAAI/D,KAAKnR,SAAS6L,KAAO,EAAG,CACjC,IAAM0vB,EAAWrmB,EAAK4I,WAEtB,GADA5I,EAAOA,EAAK8I,WACR7M,KAAKnR,SAASw7B,IAAID,GACCpqB,KAAKnR,SAASsL,IAAIiwB,GAAUK,OAAO1mB,IAEtD/D,KAAKnR,SAASyP,OAAO8rB,GAIzB,OAA8B,IAAvBpqB,KAAKnR,SAAS6L,KAErB,OAAO,GAYb,YAAAiwB,YAAA,SAAYC,EAAkBC,GACT,OAAf7qB,KAAKnN,MACPg4B,EAAKD,EAAY5qB,KAAKnN,OAEtBmN,KAAK2Y,cAAa,SAAChf,EAAK+wB,GACtB,IAAM3mB,EAAO,IAAI2I,EAAKke,EAAWxkB,WAAa,IAAMzM,GACpD+wB,EAAKC,YAAY5mB,EAAM8mB,OAU7B,YAAAlS,aAAA,SAAakS,GACX7qB,KAAKnR,SAAS7B,SAAQ,SAAC09B,EAAM/wB,GAC3BkxB,EAAKlxB,EAAK+wB,OAGhB,EA7HA,ICAA,SAAYR,GACV,6BACA,qBACA,uCACA,yCAJF,CAAYA,QAAa,KAwCzB,IC3CIY,GCUA9I,GFiCJ,cACE,WACS+I,EACAC,EACAC,EACAC,GAHA,KAAAH,WACA,KAAAC,aACA,KAAAC,UACA,KAAAC,SAEP7iB,UAAQ6iB,GAAUF,EAAY,uCAoClC,OA9BS,EAAAG,KAAO,IAAIC,GACF,GACd,EACA,MACY,GAOP,EAAAC,OAAS,IAAID,GAClB,GACgB,EAChB,MACY,GAOP,EAAAE,qBAAuB,SAAUL,GACtC,OAAO,IAAIG,GACT,GACgB,EAChBH,GACY,IAGlB,EA3CA,GG1CA,cAaE,WAC4BlnB,EACAwnB,EACAC,GAFA,KAAAznB,OACA,KAAAwnB,eACA,KAAAC,SAd5B,KAAAnb,KAAO6Z,GAAcuB,eAGrB,KAAAC,OAASN,GAAgBD,KAwC3B,OAvBE,YAAAQ,kBAAA,SAAkB1T,GAChB,GAAKjY,KAAK+D,KAAKyJ,UAUR,IAA+B,MAA3BxN,KAAKurB,aAAa14B,MAM3B,OALAwV,SACErI,KAAKurB,aAAa18B,SAAS2e,UAC3B,4DAGKxN,KAEP,IAAM+d,EAAY/d,KAAKurB,aAAaK,QAAQ,IAAIlf,EAAKuL,IACrD,OAAO,IAAI4T,EAAanf,EAAKof,MAAO/N,EAAW/d,KAAKwrB,QAdpD,OAJAnjB,SACErI,KAAK+D,KAAK4I,aAAesL,EACzB,iDAEK,IAAI4T,EACT7rB,KAAK+D,KAAK8I,WACV7M,KAAKurB,aACLvrB,KAAKwrB,SAcb,EA7CA,GFmBA,cAsBE,WACkB34B,EACAhE,QAAA,IAAAA,IAnCbi8B,KACHA,GAAyB,IAAIpQ,GAC3B/Q,IAiCc9a,EA9BXi8B,IA6BW,KAAAj4B,QACA,KAAAhE,WA2UpB,OA1VS,EAAAk9B,WAAP,SAAqB3sB,GACnB,IAAIsrB,EAAyBsB,EAAcF,MAI3C,OAHAxhB,EAAKlL,GAAK,SAAC0jB,EAAmBmJ,GAC5BvB,EAAOA,EAAK5uB,IAAI,IAAI4Q,EAAKoW,GAAYmJ,MAEhCvB,GAoBT,YAAAld,QAAA,WACE,OAAsB,OAAfxN,KAAKnN,OAAkBmN,KAAKnR,SAAS2e,WAe9C,YAAA0e,iCAAA,SACEze,EACA0e,GAEA,GAAkB,MAAdnsB,KAAKnN,OAAiBs5B,EAAUnsB,KAAKnN,OACvC,MAAO,CAAEkR,KAAM2I,EAAKof,MAAOj5B,MAAOmN,KAAKnN,OAEvC,GAAI4a,EAAaD,UACf,OAAO,KAEP,IAAMiL,EAAQhL,EAAad,WACrBU,EAAQrN,KAAKnR,SAASsL,IAAIse,GAChC,GAAc,OAAVpL,EAAgB,CAClB,IAAM+e,EAA4B/e,EAAM6e,iCACtCze,EAAaZ,WACbsf,GAEF,OAAiC,MAA7BC,EAIK,CAAEroB,KAHQ,IAAI2I,EAAK+L,GAAOpL,MAC/B+e,EAA0BroB,MAEHlR,MAAOu5B,EAA0Bv5B,OAEnD,KAGT,OAAO,MAYf,YAAAw5B,yBAAA,SACE5e,GAEA,OAAOzN,KAAKksB,iCAAiCze,GAAc,WAAM,aAOnE,YAAAme,QAAA,SAAQne,GACN,GAAIA,EAAaD,UACf,OAAOxN,KAEP,IAAMyY,EAAQhL,EAAad,WACrBoR,EAAY/d,KAAKnR,SAASsL,IAAIse,GACpC,OAAkB,OAAdsF,EACKA,EAAU6N,QAAQne,EAAaZ,YAE/Bmf,EAAcF,OAY3B,YAAAhwB,IAAA,SAAI2R,EAAoB6e,GACtB,GAAI7e,EAAaD,UACf,OAAO,IAAIwe,EAAcM,EAAOtsB,KAAKnR,UAErC,IAAM4pB,EAAQhL,EAAad,WAErB4f,GADQvsB,KAAKnR,SAASsL,IAAIse,IAAUuT,EAAcF,OACjChwB,IAAI2R,EAAaZ,WAAYyf,GAC9C3M,EAAc3f,KAAKnR,SAASosB,OAAOxC,EAAO8T,GAChD,OAAO,IAAIP,EAAchsB,KAAKnN,MAAO8sB,IAUzC,YAAA3jB,OAAA,SAAOyR,GACL,GAAIA,EAAaD,UACf,OAAIxN,KAAKnR,SAAS2e,UACTwe,EAAcF,MAEd,IAAIE,EAAc,KAAMhsB,KAAKnR,UAGtC,IAAM4pB,EAAQhL,EAAad,WACrBU,EAAQrN,KAAKnR,SAASsL,IAAIse,GAChC,GAAIpL,EAAO,CACT,IAAMkf,EAAWlf,EAAMrR,OAAOyR,EAAaZ,YACvC8S,OAAW,EAMf,OAJEA,EADE4M,EAAS/e,UACGxN,KAAKnR,SAASmN,OAAOyc,GAErBzY,KAAKnR,SAASosB,OAAOxC,EAAO8T,GAEzB,OAAfvsB,KAAKnN,OAAkB8sB,EAAYnS,UAC9Bwe,EAAcF,MAEd,IAAIE,EAAchsB,KAAKnN,MAAO8sB,GAGvC,OAAO3f,MAWb,YAAA7F,IAAA,SAAIsT,GACF,GAAIA,EAAaD,UACf,OAAOxN,KAAKnN,MAEZ,IAAM4lB,EAAQhL,EAAad,WACrBU,EAAQrN,KAAKnR,SAASsL,IAAIse,GAChC,OAAIpL,EACKA,EAAMlT,IAAIsT,EAAaZ,YAEvB,MAYb,YAAA2f,QAAA,SAAQ/e,EAAoBgf,GAC1B,GAAIhf,EAAaD,UACf,OAAOif,EAEP,IAAMhU,EAAQhL,EAAad,WAErB4f,GADQvsB,KAAKnR,SAASsL,IAAIse,IAAUuT,EAAcF,OACjCU,QAAQ/e,EAAaZ,WAAY4f,GACpD9M,OAAW,EAMf,OAJEA,EADE4M,EAAS/e,UACGxN,KAAKnR,SAASmN,OAAOyc,GAErBzY,KAAKnR,SAASosB,OAAOxC,EAAO8T,GAErC,IAAIP,EAAchsB,KAAKnN,MAAO8sB,IAYzC,YAAA+M,KAAA,SAAQ31B,GACN,OAAOiJ,KAAK2sB,MAAMjgB,EAAKof,MAAO/0B,IAWxB,YAAA41B,MAAR,SACEC,EACA71B,GAEA,IAAM81B,EAA4B,GAMlC,OALA7sB,KAAKnR,SAAS+rB,kBACZ,SAACwP,EAAkBrM,GACjB8O,EAAMzC,GAAYrM,EAAU4O,MAAMC,EAAUvf,MAAM+c,GAAWrzB,MAG1DA,EAAG61B,EAAW5sB,KAAKnN,MAAOg6B,IAUnC,YAAAC,WAAA,SAAc/oB,EAAY4G,GACxB,OAAO3K,KAAK+sB,YAAYhpB,EAAM2I,EAAKof,MAAOnhB,IAGpC,YAAAoiB,YAAR,SACEC,EACAJ,EACAjiB,GAEA,IAAM3T,IAASgJ,KAAKnN,OAAQ8X,EAAEiiB,EAAW5sB,KAAKnN,OAC9C,GAAImE,EACF,OAAOA,EAEP,GAAIg2B,EAAaxf,UACf,OAAO,KAEP,IAAMiL,EAAQuU,EAAargB,WACrBsgB,EAAYjtB,KAAKnR,SAASsL,IAAIse,GACpC,OAAIwU,EACKA,EAAUF,YACfC,EAAangB,WACb+f,EAAUvf,MAAMoL,GAChB9N,GAGK,MAYf,YAAAuiB,cAAA,SACEnpB,EACA4G,GAEA,OAAO3K,KAAKmtB,eAAeppB,EAAM2I,EAAKof,MAAOnhB,IAGvC,YAAAwiB,eAAR,SACEH,EACAI,EACAziB,GAEA,GAAIqiB,EAAaxf,UACf,OAAOxN,KAEHA,KAAKnN,OACP8X,EAAEyiB,EAAqBptB,KAAKnN,OAE9B,IAAM4lB,EAAQuU,EAAargB,WACrBsgB,EAAYjtB,KAAKnR,SAASsL,IAAIse,GACpC,OAAIwU,EACKA,EAAUE,eACfH,EAAangB,WACbugB,EAAoB/f,MAAMoL,GAC1B9N,GAGKqhB,EAAcF,OAY3B,YAAAuB,QAAA,SAAQ1iB,GACN3K,KAAKstB,SAAS5gB,EAAKof,MAAOnhB,IAGpB,YAAA2iB,SAAR,SACEF,EACAziB,GAEA3K,KAAKnR,SAAS+rB,kBAAiB,SAAC3C,EAAW8F,GACzCA,EAAUuP,SAASF,EAAoB/f,MAAM4K,GAAYtN,MAEvD3K,KAAKnN,OACP8X,EAAEyiB,EAAqBptB,KAAKnN,QAQhC,YAAA06B,aAAA,SAAa5iB,GACX3K,KAAKnR,SAAS+rB,kBACZ,SAAC3C,EAAmB8F,GACdA,EAAUlrB,OACZ8X,EAAEsN,EAAW8F,EAAUlrB,WA5VxB,EAAAi5B,MAAQ,IAAIE,EAAmB,MAiWxC,EAnWA,GGfA,cAIE,WAAmBN,EAAgC3nB,GAAhC,KAAA2nB,SAAgC,KAAA3nB,OAFnD,KAAAsM,KAAO6Z,GAAcsD,gBAWvB,OAPE,YAAA7B,kBAAA,SAAkB1T,GAChB,OAAIjY,KAAK+D,KAAKyJ,UACL,IAAIigB,EAAeztB,KAAK0rB,OAAQhf,EAAKof,OAErC,IAAI2B,EAAeztB,KAAK0rB,OAAQ1rB,KAAK+D,KAAK8I,aAGvD,EAbA,GCEA,cAIE,WACS6e,EACA3nB,EACAse,GAFA,KAAAqJ,SACA,KAAA3nB,OACA,KAAAse,OALT,KAAAhS,KAAO6Z,GAAcwD,UAmBvB,OAXE,YAAA/B,kBAAA,SAAkB1T,GAChB,OAAIjY,KAAK+D,KAAKyJ,UACL,IAAImgB,EACT3tB,KAAK0rB,OACLhf,EAAKof,MACL9rB,KAAKqiB,KAAKrK,kBAAkBC,IAGvB,IAAI0V,EAAU3tB,KAAK0rB,OAAQ1rB,KAAK+D,KAAK8I,WAAY7M,KAAKqiB,OAGnE,EArBA,GCGA,cAIE,WAC4BqJ,EACA3nB,EACAlV,GAFA,KAAA68B,SACA,KAAA3nB,OACA,KAAAlV,WAL5B,KAAAwhB,KAAO6Z,GAAc0D,MA+CvB,OApCE,YAAAjC,kBAAA,SAAkB1T,GAChB,GAAIjY,KAAK+D,KAAKyJ,UAAW,CACvB,IAAMuQ,EAAY/d,KAAKnR,SAAS+8B,QAAQ,IAAIlf,EAAKuL,IACjD,OAAI8F,EAAUvQ,UAEL,KACEuQ,EAAUlrB,MAEZ,IAAI86B,GAAU3tB,KAAK0rB,OAAQhf,EAAKof,MAAO/N,EAAUlrB,OAGjD,IAAIg7B,EAAM7tB,KAAK0rB,OAAQhf,EAAKof,MAAO/N,GAO5C,OAJA1V,SACErI,KAAK+D,KAAK4I,aAAesL,EACzB,kEAEK,IAAI4V,EAAM7tB,KAAK0rB,OAAQ1rB,KAAK+D,KAAK8I,WAAY7M,KAAKnR,WAO7D,YAAAuX,SAAA,WACE,MACE,aACApG,KAAK+D,KACL,KACA/D,KAAK0rB,OAAOtlB,WACZ,WACApG,KAAKnR,SAASuX,WACd,KAGN,EAjDA,GCLA,cAME,WACUoc,EACAsL,EACAC,GAFA,KAAAvL,QACA,KAAAsL,oBACA,KAAAC,YAgDZ,OAzCE,YAAAC,mBAAA,WACE,OAAOhuB,KAAK8tB,mBAOd,YAAAG,WAAA,WACE,OAAOjuB,KAAK+tB,WAOd,YAAAG,kBAAA,SAAkBnqB,GAChB,GAAIA,EAAKyJ,UACP,OAAOxN,KAAKguB,uBAAyBhuB,KAAK+tB,UAG5C,IAAM3D,EAAWrmB,EAAK4I,WACtB,OAAO3M,KAAKmuB,mBAAmB/D,IAOjC,YAAA+D,mBAAA,SAAmBx0B,GACjB,OACGqG,KAAKguB,uBAAyBhuB,KAAK+tB,WAAc/tB,KAAKwiB,MAAMrK,SAASxe,IAO1E,YAAAy0B,QAAA,WACE,OAAOpuB,KAAKwiB,OAEhB,EAzDA,GCEA,cAME,WACmB6L,EACAC,GADA,KAAAD,cACA,KAAAC,eAqFrB,OA3DE,YAAAC,gBAAA,SACEC,EACAttB,EACAutB,GAEA,OAAO,IAAIC,EACT,IAAIC,GAAUH,EAAWttB,EAAUutB,GACnCzuB,KAAKsuB,eAUT,YAAAM,iBAAA,SACEC,EACA3tB,EACAutB,GAEA,OAAO,IAAIC,EACT1uB,KAAKquB,YACL,IAAIM,GAAUE,EAAY3tB,EAAUutB,KAOxC,YAAAK,cAAA,WACE,OAAO9uB,KAAKquB,aAMd,YAAAU,qBAAA,WACE,OAAO/uB,KAAKquB,YAAYL,qBACpBhuB,KAAKquB,YAAYD,UACjB,MAMN,YAAAY,eAAA,WACE,OAAOhvB,KAAKsuB,cAMd,YAAAW,sBAAA,WACE,OAAOjvB,KAAKsuB,aAAaN,qBACrBhuB,KAAKsuB,aAAaF,UAClB,MA5EC,EAAAtC,MAAQ,IAAI4C,EACjB,IAAIC,GACF1O,GAAarI,YACS,GACR,GAEhB,IAAI+W,GACF1O,GAAarI,YACS,GACR,IAqEpB,EA7FA,GCAA,cACE,WACSvH,EACA6T,EACAjM,EACAiX,EACA7L,GAJA,KAAAhT,OACA,KAAA6T,eACA,KAAAjM,YACA,KAAAiX,UACA,KAAA7L,WAmEX,OA5DS,EAAA8L,YAAP,SAAmB7Z,GACjB,OAAO,IAAI8Z,EAAOA,EAAOC,MAAO/Z,IAQ3B,EAAAga,iBAAP,SAAwBlF,EAAkB9U,GACxC,OAAO,IAAI8Z,EAAOA,EAAOG,YAAaja,EAAU8U,IAQ3C,EAAAoF,mBAAP,SAA0BpF,EAAkB9U,GAC1C,OAAO,IAAI8Z,EAAOA,EAAOK,cAAena,EAAU8U,IAS7C,EAAAsF,mBAAP,SACEtF,EACAuF,EACAC,GAEA,OAAO,IAAIR,EAAOA,EAAOS,cAAeF,EAAavF,EAAUwF,IAQ1D,EAAAE,iBAAP,SAAwB1F,EAAkB9U,GACxC,OAAO,IAAI8Z,EAAOA,EAAOW,YAAaza,EAAU8U,IAK3C,EAAAmF,YAAc,cAGd,EAAAE,cAAgB,gBAGhB,EAAAI,cAAgB,gBAGhB,EAAAE,YAAc,cAGd,EAAAV,MAAQ,QACjB,EAzEA,GCOA,cACE,WAA6B3M,GAAA,KAAAA,SAkI/B,OAhIE,YAAAlK,YAAA,SACE6J,EACA1oB,EACA4yB,EACAyD,EACAtE,EACAuE,GAEA5nB,SACEga,EAAK5I,UAAUzZ,KAAK0iB,QACpB,qDAEF,IAAMwN,EAAW7N,EAAKrK,kBAAkBre,GAExC,OACEu2B,EAAShY,SAAS8X,GAAc5hB,OAAOme,EAASrU,SAAS8X,KAKrDE,EAAS1iB,YAAc+e,EAAS/e,UAK3B6U,GAIiB,MAAxB4N,IACE1D,EAAS/e,UACP6U,EAAKlK,SAASxe,GAChBs2B,EAAqBE,iBACnBf,GAAOI,mBAAmB71B,EAAKu2B,IAGjC7nB,SACEga,EAAK9K,aACL,uEAGK2Y,EAAS1iB,UAClByiB,EAAqBE,iBACnBf,GAAOE,iBAAiB31B,EAAK4yB,IAG/B0D,EAAqBE,iBACnBf,GAAOM,mBAAmB/1B,EAAK4yB,EAAU2D,KAI3C7N,EAAK9K,cAAgBgV,EAAS/e,UACzB6U,EAGAA,EAAK/J,qBAAqB3e,EAAK4yB,GAAU/S,UAAUxZ,KAAK0iB,UAOnE,YAAA0N,eAAA,SACElB,EACAmB,EACAJ,GA6BA,OA3B4B,MAAxBA,IACGf,EAAQ3X,cACX2X,EAAQvW,aAAagB,IAAgB,SAAChgB,EAAK0e,GACpCgY,EAAQlY,SAASxe,IACpBs2B,EAAqBE,iBACnBf,GAAOI,mBAAmB71B,EAAK0e,OAKlCgY,EAAQ9Y,cACX8Y,EAAQ1X,aAAagB,IAAgB,SAAChgB,EAAK0e,GACzC,GAAI6W,EAAQ/W,SAASxe,GAAM,CACzB,IAAMu2B,EAAWhB,EAAQlX,kBAAkBre,GACtCu2B,EAAS9hB,OAAOiK,IACnB4X,EAAqBE,iBACnBf,GAAOM,mBAAmB/1B,EAAK0e,EAAW6X,SAI9CD,EAAqBE,iBACnBf,GAAOE,iBAAiB31B,EAAK0e,QAMhCgY,EAAQ7W,UAAUxZ,KAAK0iB,SAMhC,YAAA5K,eAAA,SAAeoX,EAAe9O,GAC5B,OAAI8O,EAAQ1hB,UACHyS,GAAarI,WAEbsX,EAAQpX,eAAesI,IAOlC,YAAAkQ,aAAA,WACE,OAAO,GAMT,YAAAC,iBAAA,WACE,OAAOvwB,MAMT,YAAAgkB,SAAA,WACE,OAAOhkB,KAAK0iB,QAEhB,EAnIA,GCfA,2BACmB,KAAA8N,UAAiC,IAAI/2B,IA4ExD,OA1EE,YAAA02B,iBAAA,SAAiBrM,GACf,IAAMzT,EAAOyT,EAAOzT,KACd+Z,EAAWtG,EAAO7L,UACxB5P,SACEgI,IAAS+e,GAAOG,aACdlf,IAAS+e,GAAOS,eAChBxf,IAAS+e,GAAOK,cAClB,6CAEFpnB,SACe,cAAb+hB,EACA,mDAEF,IAAMqG,EAAYzwB,KAAKwwB,UAAUr2B,IAAIiwB,GACrC,GAAIqG,EAAW,CACb,IAAMC,EAAUD,EAAUpgB,KAC1B,GAAIA,IAAS+e,GAAOG,aAAemB,IAAYtB,GAAOK,cACpDzvB,KAAKwwB,UAAU10B,IACbsuB,EACAgF,GAAOM,mBACLtF,EACAtG,EAAOI,aACPuM,EAAUvM,oBAGT,GACL7T,IAAS+e,GAAOK,eAChBiB,IAAYtB,GAAOG,YAEnBvvB,KAAKwwB,UAAUlyB,OAAO8rB,QACjB,GACL/Z,IAAS+e,GAAOK,eAChBiB,IAAYtB,GAAOS,cAEnB7vB,KAAKwwB,UAAU10B,IACbsuB,EACAgF,GAAOI,mBAAmBpF,EAAUqG,EAAUvB,eAE3C,GACL7e,IAAS+e,GAAOS,eAChBa,IAAYtB,GAAOG,YAEnBvvB,KAAKwwB,UAAU10B,IACbsuB,EACAgF,GAAOE,iBAAiBlF,EAAUtG,EAAOI,mBAEtC,IACL7T,IAAS+e,GAAOS,eAChBa,IAAYtB,GAAOS,cAWnB,MAAMjZ,iBACJ,mCACEkN,EACA,mBACA2M,GAbJzwB,KAAKwwB,UAAU10B,IACbsuB,EACAgF,GAAOM,mBACLtF,EACAtG,EAAOI,aACPuM,EAAUvB,gBAYhBlvB,KAAKwwB,UAAU10B,IAAIsuB,EAAUtG,IAIjC,YAAA6M,WAAA,WACE,OAAO/xB,MAAMgyB,KAAK5wB,KAAKwwB,UAAUK,WAErC,EA7EA,GCgEaC,GAA2B,IAzBxC,yBAkBA,OAdE,YAAAC,iBAAA,SAAiB3G,GACf,OAAO,MAMT,YAAA4G,mBAAA,SACEzwB,EACA8M,EACA9B,GAEA,OAAO,MAEX,EAlBA,IAkCA,cAME,WACU0lB,EACAC,EACAC,QAAA,IAAAA,MAAA,MAFA,KAAAF,UACA,KAAAC,aACA,KAAAC,0BA4CZ,OAtCE,YAAAJ,iBAAA,SAAiB3G,GACf,IAAMrU,EAAO/V,KAAKkxB,WAAWpC,gBAC7B,GAAI/Y,EAAKoY,mBAAmB/D,GAC1B,OAAOrU,EAAKqY,UAAUpW,kBAAkBoS,GAExC,IAAMgH,EAC4B,MAAhCpxB,KAAKmxB,wBACD,IAAIxC,GAAU3uB,KAAKmxB,yBAAyB,GAAM,GAClDnxB,KAAKkxB,WAAWlC,iBACtB,OAAOhvB,KAAKixB,QAAQI,kBAAkBjH,EAAUgH,IAOpD,YAAAJ,mBAAA,SACEzwB,EACA8M,EACA9B,GAEA,IAAM+lB,EAC4B,MAAhCtxB,KAAKmxB,wBACDnxB,KAAKmxB,wBACLnxB,KAAKkxB,WAAWjC,wBAChBsC,EAAQvxB,KAAKixB,QAAQO,iBACzBF,EACAjkB,EACA,EACA9B,EACAhL,GAEF,OAAqB,IAAjBgxB,EAAM7jC,OACD,KAEA6jC,EAAM,IAGnB,EArDA,GCnDA,GAKE,SACkBE,EACAC,GADA,KAAAD,YACA,KAAAC,WAOpB,cAIE,WAA6BC,GAAA,KAAAA,UA41B/B,OAv1BE,YAAAC,cAAA,SAAcH,GACZppB,SACEopB,EAAU3C,gBAAgBV,UAAU3U,UAAUzZ,KAAK2xB,QAAQ3N,YAC3D,0BAEF3b,SACEopB,EAAUzC,iBAAiBZ,UAAU3U,UAAUzZ,KAAK2xB,QAAQ3N,YAC5D,4BAWJ,YAAA6N,eAAA,SACEC,EACAC,EACAC,EACAC,GAEA,IACIC,EAAcC,EADZC,EAAc,IAAIC,GAExB,GAAIN,EAAU1hB,OAAS6Z,GAAcwD,UAAW,CAC9C,IAAM4E,EAAYP,EACdO,EAAU5G,OAAOX,SACnBmH,EAAelyB,KAAKuyB,oBAClBT,EACAQ,EAAUvuB,KACVuuB,EAAUjQ,KACV2P,EACAC,EACAG,IAGF/pB,SAAOiqB,EAAU5G,OAAOV,WAAY,mBAIpCmH,EACEG,EAAU5G,OAAOR,QAChB4G,EAAa9C,iBAAiBf,eAC5BqE,EAAUvuB,KAAKyJ,UACpB0kB,EAAelyB,KAAKwyB,sBAClBV,EACAQ,EAAUvuB,KACVuuB,EAAUjQ,KACV2P,EACAC,EACAE,EACAC,SAGC,GAAIL,EAAU1hB,OAAS6Z,GAAc0D,MAAO,CACjD,IAAMtqB,EAAQyuB,EACVzuB,EAAMooB,OAAOX,SACfmH,EAAelyB,KAAKyyB,gBAClBX,EACAxuB,EAAMS,KACNT,EAAMzU,SACNmjC,EACAC,EACAG,IAGF/pB,SAAO/E,EAAMooB,OAAOV,WAAY,mBAEhCmH,EACE7uB,EAAMooB,OAAOR,QAAU4G,EAAa9C,iBAAiBf,aACvDiE,EAAelyB,KAAK0yB,kBAClBZ,EACAxuB,EAAMS,KACNT,EAAMzU,SACNmjC,EACAC,EACAE,EACAC,SAGC,GAAIL,EAAU1hB,OAAS6Z,GAAcuB,eAAgB,CAC1D,IAAMkH,EAAeZ,EAWnBG,EAVGS,EAAanH,OAUDxrB,KAAK4yB,iBAClBd,EACAa,EAAa5uB,KACbiuB,EACAC,EACAG,GAdapyB,KAAK6yB,cAClBf,EACAa,EAAa5uB,KACb4uB,EAAapH,aACbyG,EACAC,EACAG,OAWC,IAAIL,EAAU1hB,OAAS6Z,GAAcsD,gBAQ1C,MAAM5W,iBAAe,2BAA6Bmb,EAAU1hB,MAP5D6hB,EAAelyB,KAAK8yB,gBAClBhB,EACAC,EAAUhuB,KACViuB,EACAI,GAKJ,IAAMV,EAAUU,EAAYzB,aAE5B,OADAoC,EAAcC,oBAAoBlB,EAAcI,EAAcR,GACvD,IAAIuB,GAAgBf,EAAcR,IAS5B,EAAAsB,oBAAf,SACElB,EACAI,EACAE,GAEA,IAAM5D,EAAY0D,EAAapD,gBAC/B,GAAIN,EAAUR,qBAAsB,CAClC,IAAMkF,EACJ1E,EAAUJ,UAAU7W,cAAgBiX,EAAUJ,UAAU5gB,UACpD2lB,EAAkBrB,EAAa/C,wBAEnCqD,EAAY1kC,OAAS,IACpBokC,EAAahD,gBAAgBd,sBAC7BkF,IACE1E,EAAUJ,UAAUhgB,OAA4B+kB,KAClD3E,EAAUJ,UAAU5W,cAAcpJ,OAAO+kB,EAAgB3b,iBAE1D4a,EAAYpvB,KACVosB,GAAOD,YACgB+C,EAAanD,2BAgBpC,YAAAqE,oCAAR,SACE3B,EACA4B,EACArB,EACAtG,EACA0G,GAEA,IAAMkB,EAAe7B,EAAU3C,gBAC/B,GAA8C,MAA1CkD,EAAYuB,eAAeF,GAE7B,OAAO5B,EAEP,IAAI+B,OAAa,EAAEpC,OAAU,EAC7B,GAAIiC,EAAW7lB,UAMb,GAJAnF,SACEopB,EAAUzC,iBAAiBhB,qBAC3B,8DAEEyD,EAAUzC,iBAAiBf,aAAc,CAI3C,IAAMwF,EAAchC,EAAUxC,wBACxByE,EACJD,aAAuBxT,GACnBwT,EACAxT,GAAarI,WACb+b,EAAwB3B,EAAY4B,0BACxCF,GAEFF,EAAgBxzB,KAAK2xB,QAAQvB,eAC3BqB,EAAU3C,gBAAgBV,UAC1BuF,EACAvB,OAEG,CACL,IAAMyB,EAAe7B,EAAY9I,uBAC/BuI,EAAUxC,yBAEZuE,EAAgBxzB,KAAK2xB,QAAQvB,eAC3BqB,EAAU3C,gBAAgBV,UAC1ByF,EACAzB,OAGC,CACL,IAAMhI,EAAWiJ,EAAW1mB,WAC5B,GAAiB,cAAbyd,EAA0B,CAC5B/hB,SAC6B,IAA3BgrB,EAAWzmB,YACX,yDAEF,IAAMknB,EAAeR,EAAalF,UAClCgD,EAAaK,EAAUzC,iBAAiBZ,UAExC,IAAM2F,EAAkB/B,EAAYgC,mCAClCX,EACAS,EACA1C,GAGAoC,EADqB,MAAnBO,EACc/zB,KAAK2xB,QAAQ7Z,eAC3Bgc,EACAC,GAIcT,EAAalF,cAE1B,CACL,IAAM6F,EAAkBZ,EAAWxmB,WAE/BqnB,OAAa,EACjB,GAAIZ,EAAanF,mBAAmB/D,GAAW,CAC7CgH,EAAaK,EAAUzC,iBAAiBZ,UACxC,IAAM+F,EAAmBnC,EAAYgC,mCACnCX,EACAC,EAAalF,UACbgD,GAGA8C,EADsB,MAApBC,EACcb,EACblF,UACApW,kBAAkBoS,GAClB5R,YAAYyb,EAAiBE,GAGhBb,EACblF,UACApW,kBAAkBoS,QAGvB8J,EAAgBlC,EAAYX,kBAC1BjH,EACAqH,EAAUzC,kBAIZwE,EADmB,MAAjBU,EACcl0B,KAAK2xB,QAAQnZ,YAC3B8a,EAAalF,UACbhE,EACA8J,EACAD,EACAvI,EACA0G,GAIckB,EAAalF,WAInC,OAAOqD,EAAUlD,gBACfiF,EACAF,EAAatF,sBAAwBqF,EAAW7lB,UAChDxN,KAAK2xB,QAAQrB,iBAgBnB,YAAAkC,sBAAA,SACEV,EACAuB,EACAe,EACApC,EACAC,EACAE,EACAC,GAEA,IACIiC,EADEC,EAAgBxC,EAAa9C,iBAE7BuF,EAAepC,EACjBnyB,KAAK2xB,QACL3xB,KAAK2xB,QAAQpB,mBACjB,GAAI8C,EAAW7lB,UACb6mB,EAAiBE,EAAanE,eAC5BkE,EAAclG,UACdgG,EACA,WAEG,GAAIG,EAAajE,iBAAmBgE,EAAcrG,aAAc,CAErE,IAAMuG,EAAgBF,EACnBlG,UACA5V,YAAY6a,EAAYe,GAC3BC,EAAiBE,EAAanE,eAC5BkE,EAAclG,UACdoG,EACA,UAEG,CACL,IAAMpK,EAAWiJ,EAAW1mB,WAC5B,IACG2nB,EAAcpG,kBAAkBmF,IACjCA,EAAWzmB,YAAc,EAGzB,OAAOklB,EAET,IAAMmC,EAAkBZ,EAAWxmB,WAE7B0L,EADY+b,EAAclG,UAAUpW,kBAAkBoS,GAC7B5R,YAAYyb,EAAiBG,GAE1DC,EADe,cAAbjK,EACemK,EAAazc,eAC5Bwc,EAAclG,UACd7V,GAGegc,EAAa/b,YAC5B8b,EAAclG,UACdhE,EACA7R,EACA0b,EACAnD,GACA,MAIN,IAAMoB,EAAeJ,EAAalD,iBAChCyF,EACAC,EAActG,sBAAwBqF,EAAW7lB,UACjD+mB,EAAajE,gBAET5E,EAAS,IAAI+I,GACjBzC,EACAE,EACAD,GAEF,OAAOjyB,KAAKozB,oCACVlB,EACAmB,EACArB,EACAtG,EACA0G,IAcJ,YAAAG,oBAAA,SACET,EACAuB,EACAe,EACApC,EACAC,EACAG,GAEA,IACIF,EAAcsB,EADZF,EAAexB,EAAahD,gBAE5BpD,EAAS,IAAI+I,GACjBzC,EACAF,EACAG,GAEF,GAAIoB,EAAW7lB,UACbgmB,EAAgBxzB,KAAK2xB,QAAQvB,eAC3B0B,EAAahD,gBAAgBV,UAC7BgG,EACAhC,GAEFF,EAAeJ,EAAavD,gBAC1BiF,GACA,EACAxzB,KAAK2xB,QAAQrB,oBAEV,CACL,IAAMlG,EAAWiJ,EAAW1mB,WAC5B,GAAiB,cAAbyd,EACFoJ,EAAgBxzB,KAAK2xB,QAAQ7Z,eAC3Bga,EAAahD,gBAAgBV,UAC7BgG,GAEFlC,EAAeJ,EAAavD,gBAC1BiF,EACAF,EAAatF,qBACbsF,EAAarF,kBAEV,CACL,IAAMgG,EAAkBZ,EAAWxmB,WAC7BqjB,EAAWoD,EAAalF,UAAUpW,kBAAkBoS,GACtDmC,OAAQ,EACZ,GAAI0H,EAAgBzmB,UAElB+e,EAAW6H,MACN,CACL,IAAM/b,EAAYqT,EAAOqF,iBAAiB3G,GAQtCmC,EAPa,MAAblU,EAE8B,cAA9B4b,EAAgBnnB,WAChBuL,EAAUH,SAAS+b,EAAgB9mB,UAAUK,UAIlC6K,EAEAA,EAAUG,YAAYyb,EAAiBG,GAIzCnU,GAAarI,WAG5B,GAAKsY,EAAS9hB,OAAOme,GAenB2F,EAAeJ,MAfe,CAC9B,IAAM4C,EAAe10B,KAAK2xB,QAAQnZ,YAChC8a,EAAalF,UACbhE,EACAmC,EACA0H,EACAvI,EACA0G,GAEFF,EAAeJ,EAAavD,gBAC1BmG,EACApB,EAAatF,qBACbhuB,KAAK2xB,QAAQrB,kBAOrB,OAAO4B,GASM,EAAAyC,eAAf,SACElD,EACArH,GAEA,OAAOqH,EAAU3C,gBAAgBX,mBAAmB/D,IAa9C,YAAAqI,gBAAR,SACEhB,EACA1tB,EACA6wB,EACA5C,EACAyB,EACArB,GANF,WAcMyC,EAAepD,EA6BnB,OA5BAmD,EAAgBvH,SAAQ,SAAC5f,EAAc4K,GACrC,IAAMyc,EAAY/wB,EAAKsJ,MAAMI,GACzBslB,EAAc4B,eAAelD,EAAWqD,EAAUnoB,cACpDkoB,EAAe,EAAKtC,oBAClBsC,EACAC,EACAzc,EACA2Z,EACAyB,EACArB,OAKNwC,EAAgBvH,SAAQ,SAAC5f,EAAc4K,GACrC,IAAMyc,EAAY/wB,EAAKsJ,MAAMI,GACxBslB,EAAc4B,eAAelD,EAAWqD,EAAUnoB,cACrDkoB,EAAe,EAAKtC,oBAClBsC,EACAC,EACAzc,EACA2Z,EACAyB,EACArB,OAKCyC,GASD,YAAAE,YAAR,SAAoBhf,EAAYzS,GAI9B,OAHAA,EAAM+pB,SAAQ,SAAC5f,EAAc4K,GAC3BtC,EAAOA,EAAKyC,YAAY/K,EAAc4K,MAEjCtC,GAcD,YAAA2c,kBAAR,SACEjB,EACA1tB,EACA6wB,EACA5C,EACAyB,EACAtB,EACAC,GAPF,WAWE,GACEX,EAAUzC,iBAAiBZ,UAAU5gB,YACpCikB,EAAUzC,iBAAiBhB,qBAE5B,OAAOyD,EAST,IACIuD,EADAH,EAAepD,EAGjBuD,EADEjxB,EAAKyJ,UACSonB,EAEA5I,GAAcF,MAAMU,QAAQzoB,EAAM6wB,GAEpD,IAAMxD,EAAaK,EAAUzC,iBAAiBZ,UAyC9C,OAxCA4G,EAAcnmC,SAAS+rB,kBAAiB,SAACwP,EAAUrM,GACjD,GAAIqT,EAAWjZ,SAASiS,GAAW,CACjC,IAAM6K,EAAcxD,EACjBzC,iBACAZ,UACApW,kBAAkBoS,GACfmC,EAAW,EAAKwI,YAAYE,EAAalX,GAC/C8W,EAAe,EAAKrC,sBAClBqC,EACA,IAAInoB,EAAK0d,GACTmC,EACAyF,EACAyB,EACAtB,EACAC,OAIN4C,EAAcnmC,SAAS+rB,kBAAiB,SAACwP,EAAU8K,GACjD,IAAMC,GACH1D,EAAUzC,iBAAiBb,mBAAmB/D,IACvB,MAAxB8K,EAAeriC,MACjB,IAAKu+B,EAAWjZ,SAASiS,KAAc+K,EAAoB,CACzD,IAAMF,EAAcxD,EACjBzC,iBACAZ,UACApW,kBAAkBoS,GACfmC,EAAW,EAAKwI,YAAYE,EAAaC,GAC/CL,EAAe,EAAKrC,sBAClBqC,EACA,IAAInoB,EAAK0d,GACTmC,EACAyF,EACAyB,EACAtB,EACAC,OAKCyC,GAaD,YAAAhC,cAAR,SACEpB,EACA2D,EACA7J,EACAyG,EACAC,EACAG,GAEA,GAA2C,MAAvCJ,EAAYuB,eAAe6B,GAC7B,OAAO3D,EAIT,IAAMU,EAAmBV,EAAUzC,iBAAiBf,aAI9CwF,EAAchC,EAAUzC,iBAC9B,GAA0B,MAAtBzD,EAAa14B,MAAe,CAE9B,GACGuiC,EAAQ5nB,WAAaimB,EAAYzF,sBAClCyF,EAAYvF,kBAAkBkH,GAE9B,OAAOp1B,KAAKwyB,sBACVf,EACA2D,EACA3B,EAAYrF,UAAUlW,SAASkd,GAC/BpD,EACAC,EACAE,EACAC,GAEG,GAAIgD,EAAQ5nB,UAAW,CAG5B,IAAI,EAAkBwe,GAAcF,MAIpC,OAHA2H,EAAYrF,UAAUzV,aAAa3B,IAAW,SAACppB,EAAMmoB,GACnD,EAAkB,EAAgBja,IAAI,IAAI4Q,EAAK9e,GAAOmoB,MAEjD/V,KAAK0yB,kBACVjB,EACA2D,EACA,EACApD,EACAC,EACAE,EACAC,GAGF,OAAOX,EAIT,IAAI,EAAkBzF,GAAcF,MAUpC,OATAP,EAAa8B,SAAQ,SAACgI,EAAWxiC,GAC/B,IAAMyiC,EAAkBF,EAAQ/nB,MAAMgoB,GAClC5B,EAAYvF,kBAAkBoH,KAChC,EAAkB,EAAgBx5B,IAChCu5B,EACA5B,EAAYrF,UAAUlW,SAASod,QAI9Bt1B,KAAK0yB,kBACVjB,EACA2D,EACA,EACApD,EACAC,EACAE,EACAC,IAaE,YAAAU,gBAAR,SACErB,EACA1tB,EACAiuB,EACAI,GAEA,IAAMmD,EAAgB9D,EAAUzC,iBAC1BkD,EAAeT,EAAU7C,iBAC7B2G,EAAcnH,UACdmH,EAAcvH,sBAAwBjqB,EAAKyJ,UAC3C+nB,EAActH,cAEhB,OAAOjuB,KAAKozB,oCACVlB,EACAnuB,EACAiuB,EACAlB,GACAsB,IAaI,YAAAQ,iBAAR,SACEnB,EACA1tB,EACAiuB,EACAwD,EACApD,GAEA,IAAIlxB,EACJ,GAAwC,MAApC8wB,EAAYuB,eAAexvB,GAC7B,OAAO0tB,EAEP,IAAM/F,EAAS,IAAI+I,GACjBzC,EACAP,EACA+D,GAEIC,EAAgBhE,EAAU3C,gBAAgBV,UAC5CoF,OAAa,EACjB,GAAIzvB,EAAKyJ,WAAiC,cAApBzJ,EAAK4I,WAA4B,CACrD,IAAI2J,OAAO,EACX,GAAImb,EAAUzC,iBAAiBhB,qBAC7B1X,EAAU0b,EAAY9I,uBACpBuI,EAAUxC,6BAEP,CACL,IAAMyG,EAAiBjE,EAAUzC,iBAAiBZ,UAClD/lB,SACEqtB,aAA0BzV,GAC1B,iDAEF3J,EAAU0b,EAAY4B,0BACpB8B,GAGJpf,EAAUA,EACVkd,EAAgBxzB,KAAK2xB,QAAQvB,eAC3BqF,EACAnf,EACA8b,OAEG,CACL,IAAMhI,EAAWrmB,EAAK4I,WAClB4f,EAAWyF,EAAYX,kBACzBjH,EACAqH,EAAUzC,kBAGE,MAAZzC,GACAkF,EAAUzC,iBAAiBb,mBAAmB/D,KAE9CmC,EAAWkJ,EAAczd,kBAAkBoS,KAG3CoJ,EADc,MAAZjH,EACcvsB,KAAK2xB,QAAQnZ,YAC3Bid,EACArL,EACAmC,EACAxoB,EAAK8I,WACL6e,EACA0G,GAEOX,EAAU3C,gBAAgBV,UAAUjW,SAASiS,GAEtCpqB,KAAK2xB,QAAQnZ,YAC3Bid,EACArL,EACAnK,GAAarI,WACb7T,EAAK8I,WACL6e,EACA0G,GAGcqD,GAGFjoB,WACdikB,EAAUzC,iBAAiBhB,uBAG3B9sB,EAAW8wB,EAAY9I,uBACrBuI,EAAUxC,0BAEC1X,eACXic,EAAgBxzB,KAAK2xB,QAAQvB,eAC3BoD,EACAtyB,EACAkxB,IAQR,OAHAlxB,EACEuwB,EAAUzC,iBAAiBhB,sBACe,MAA1CgE,EAAYuB,eAAe7mB,EAAKof,OAC3B2F,EAAUlD,gBACfiF,EACAtyB,EACAlB,KAAK2xB,QAAQrB,iBAIrB,EAh2BA,GCxBA,cAOE,WAAoBqF,GAAA,KAAAA,SAKlB31B,KAAK0iB,OAAS1iB,KAAK21B,OAAO5R,iBAAiBC,WAsJ/C,OArIE,YAAA4R,yBAAA,SACElE,EACAmE,EACAC,GAHF,WAKQC,EAAkB,GAClBC,EAAkB,GAuDxB,OArDAtE,EAAQ1kC,SAAQ,SAAA82B,GAEZA,EAAOzT,OAAS+e,GAAOS,eACvB,EAAKnN,OAAOtM,oBACV0N,EAAOoL,QACPpL,EAAOI,eAGT8R,EAAMhzB,KACJosB,GAAOU,iBACLhM,EAAO7L,UACP6L,EAAOI,kBAMflkB,KAAKi2B,uBACHF,EACA3G,GAAOK,cACPiC,EACAoE,EACAD,GAEF71B,KAAKi2B,uBACHF,EACA3G,GAAOG,YACPmC,EACAoE,EACAD,GAEF71B,KAAKi2B,uBACHF,EACA3G,GAAOW,YACPiG,EACAF,EACAD,GAEF71B,KAAKi2B,uBACHF,EACA3G,GAAOS,cACP6B,EACAoE,EACAD,GAEF71B,KAAKi2B,uBACHF,EACA3G,GAAOC,MACPqC,EACAoE,EACAD,GAGKE,GAaD,YAAAE,uBAAR,SACEF,EACAniB,EACA8d,EACAwE,EACAL,GALF,WAOQM,EAAkBzE,EAAQ0E,QAAO,SAAAtS,GAAU,OAAAA,EAAOzT,OAASuD,KAEjEuiB,EAAgBpsB,KAAK/J,KAAKq2B,gBAAgB3tB,KAAK1I,OAC/Cm2B,EAAgBnpC,SAAQ,SAAA82B,GACtB,IAAMwS,EAAqB,EAAKC,yBAC9BzS,EACA+R,GAEFK,EAAclpC,SAAQ,SAAAwpC,GAChBA,EAAa5S,WAAWE,EAAOzT,OACjC0lB,EAAO/yB,KACLwzB,EAAa3S,YAAYyS,EAAoB,EAAKX,gBAapD,YAAAY,yBAAR,SAAiCzS,EAAgB+R,GAC/C,MAAoB,UAAhB/R,EAAOzT,MAAoC,kBAAhByT,EAAOzT,OAGpCyT,EAAOT,SAAWwS,EAAWzd,wBAE3B0L,EAAO7L,UACP6L,EAAOI,aACPlkB,KAAK0iB,SANAoB,GAkBH,YAAAuS,gBAAR,SAAwB/sB,EAAWC,GACjC,GAAmB,MAAfD,EAAE2O,WAAoC,MAAf1O,EAAE0O,UAC3B,MAAMrB,iBAAe,sCAEvB,IAAM6f,EAAW,IAAIxgB,GAAU3M,EAAE2O,UAAW3O,EAAE4a,cACxCwS,EAAW,IAAIzgB,GAAU1M,EAAE0O,UAAW1O,EAAE2a,cAC9C,OAAOlkB,KAAK0iB,OAAOvM,QAAQsgB,EAAUC,IAEzC,EAlKA,GCYA,cAWE,WAAoBf,EAAegB,GAAf,KAAAhB,SARZ,KAAAiB,oBAA2C,GASjD,IAAMtmB,EAAStQ,KAAK21B,OAAO5R,iBAErB8S,EAAc,IAAIC,GAAcxmB,EAAO0T,YACvCoS,EAAS9lB,EAAOymB,gBAMtB/2B,KAAKg3B,WAAa,IAAIjE,GAAcqD,GAEpC,IAAMa,EAAqBN,EAAiB3H,iBACtCkI,EAAoBP,EAAiB7H,gBAGrCD,EAAagI,EAAYzG,eAC7BnQ,GAAarI,WACbqf,EAAmB7I,UACnB,MAEII,EAAY4H,EAAOhG,eACvBnQ,GAAarI,WACbsf,EAAkB9I,UAClB,MAEIiG,EAAiB,IAAI1F,GACzBE,EACAoI,EAAmBjJ,qBACnB6I,EAAYvG,gBAERkD,EAAgB,IAAI7E,GACxBH,EACA0I,EAAkBlJ,qBAClBoI,EAAO9F,gBAOTtwB,KAAKkxB,WAAa,IAAIxC,GAAU8E,EAAea,GAM/Cr0B,KAAKm3B,gBAAkB,IAAIC,GAAep3B,KAAK21B,QA6LnD,OAvLE,YAAA0B,SAAA,WACE,OAAOr3B,KAAK21B,QAMd,YAAA3G,eAAA,WACE,OAAOhvB,KAAKkxB,WAAWlC,iBAAiBZ,WAO1C,YAAAkJ,uBAAA,SAAuBvzB,GACrB,IAAMwzB,EAAQv3B,KAAKkxB,WAAWjC,wBAC9B,OAAIsI,IAIAv3B,KAAK21B,OAAO5R,iBAAiByT,iBAC3BzzB,EAAKyJ,YAAc+pB,EAAMvf,kBAAkBjU,EAAK4I,YAAYa,WAEvD+pB,EAAMrf,SAASnU,GAGnB,MAMT,YAAAyJ,QAAA,WACE,OAA2C,IAApCxN,KAAK42B,oBAAoBlpC,QAMlC,YAAA+pC,qBAAA,SAAqBrU,GACnBpjB,KAAK42B,oBAAoB5zB,KAAKogB,IAQhC,YAAAsU,wBAAA,SACEtU,EACAuU,GAEA,IAAMC,EAA8B,GACpC,GAAID,EAAa,CACftvB,SACuB,MAArB+a,EACA,mDAEF,IAAM,EAAOpjB,KAAK21B,OAAO5xB,KACzB/D,KAAK42B,oBAAoB5pC,SAAQ,SAAAwpC,GAC/BmB,EAAoCA,EACpC,IAAME,EAAarB,EAAanS,kBAAkBsT,EAAa,GAC3DE,GACFD,EAAa50B,KAAK60B,MAKxB,GAAIzU,EAAmB,CAErB,IADA,IAAI0U,EAAY,GACPjwB,EAAI,EAAGA,EAAI7H,KAAK42B,oBAAoBlpC,SAAUma,EAAG,CACxD,IAAM4hB,EAAWzpB,KAAK42B,oBAAoB/uB,GAC1C,GAAK4hB,EAASlF,QAAQnB,IAEf,GAAIA,EAAkBqB,iBAAkB,CAE7CqT,EAAYA,EAAU/jC,OAAOiM,KAAK42B,oBAAoB93B,MAAM+I,EAAI,IAChE,YAJAiwB,EAAU90B,KAAKymB,GAOnBzpB,KAAK42B,oBAAsBkB,OAE3B93B,KAAK42B,oBAAsB,GAE7B,OAAOgB,GAWT,YAAA/F,eAAA,SACEE,EACAC,EACAwD,GAGEzD,EAAU1hB,OAAS6Z,GAAc0D,OACJ,OAA7BmE,EAAUrG,OAAOT,UAEjB5iB,SACErI,KAAKkxB,WAAWjC,wBAChB,6DAEF5mB,SACErI,KAAKkxB,WAAWnC,uBAChB,4DAIJ,IAAM+C,EAAe9xB,KAAKkxB,WACpBl6B,EAASgJ,KAAKg3B,WAAWnF,eAC7BC,EACAC,EACAC,EACAwD,GAYF,OAVAx1B,KAAKg3B,WAAWpF,cAAc56B,EAAOy6B,WAErCppB,SACErR,EAAOy6B,UAAUzC,iBAAiBhB,uBAC/B8D,EAAa9C,iBAAiBhB,qBACjC,2DAGFhuB,KAAKkxB,WAAal6B,EAAOy6B,UAElBzxB,KAAK+3B,0BACV/gC,EAAO06B,QACP16B,EAAOy6B,UAAU3C,gBAAgBV,UACjC,OAQJ,YAAA4J,iBAAA,SAAiBxB,GACf,IAAMhI,EAAYxuB,KAAKkxB,WAAWpC,gBAC5BmJ,EAA2B,GAC5BzJ,EAAUJ,UAAU7W,cACLiX,EAAUJ,UAClBzV,aAAagB,IAAgB,SAAChgB,EAAK0e,GAC3C4f,EAAej1B,KAAKosB,GAAOE,iBAAiB31B,EAAK0e,OAMrD,OAHImW,EAAUR,sBACZiK,EAAej1B,KAAKosB,GAAOD,YAAYX,EAAUJ,YAE5CpuB,KAAK+3B,0BACVE,EACAzJ,EAAUJ,UACVoI,IAWJ,YAAAuB,0BAAA,SACErG,EACAmE,EACAzS,GAEA,IAAM8S,EAAgB9S,EAClB,CAACA,GACDpjB,KAAK42B,oBACT,OAAO52B,KAAKm3B,gBAAgBvB,yBAC1BlE,EACAmE,EACAK,IAGN,EAvPA,GbDA,2BAoBmB,KAAAgC,MAA2B,IAAIz+B,IAuMlD,OA1NE,sBAAW,2BAAsB,C,IAQjC,WAEE,OADA4O,SAAO2Z,GAAwB,oCACxBA,I,IAVT,SAAkC/hB,GAChCoI,UACG2Z,GACD,mDAEFA,GAAyB/hB,G,gCAgB3B,YAAAuN,QAAA,WACE,OAA2B,IAApBxN,KAAKk4B,MAAMx9B,MAGpB,YAAAm3B,eAAA,SACEE,EACAC,EACAmG,G,QAEMlN,EAAU8G,EAAUrG,OAAOT,QACjC,GAAgB,OAAZA,EAAkB,CACpB,IAAMmN,EAAOp4B,KAAKk4B,MAAM/9B,IAAI8wB,GAE5B,OADA5iB,SAAe,MAAR+vB,EAAc,gDACdA,EAAKvG,eACVE,EACAC,EACAmG,GAGF,IAAIpC,EAAkB,G,IAEtB,IAAmB,iBAAA/1B,KAAKk4B,MAAMrH,UAAQ,8BAAE,CAA7BuH,EAAI,QACbrC,EAASA,EAAOhiC,OACdqkC,EAAKvG,eAAeE,EAAWC,EAAamG,K,iGAIhD,OAAOpC,GAcX,YAAA0B,qBAAA,SACE70B,EACAwgB,EACA4O,EACAyB,EACA4E,GAEA,IAAMpN,EAAUroB,EAAM4lB,kBAClB4P,EAAOp4B,KAAKk4B,MAAM/9B,IAAI8wB,GAC1B,IAAKmN,EAAM,CAET,IAAIvC,EAAa7D,EAAY9I,uBAC3BmP,EAAsB5E,EAAc,MAElC6E,GAAqB,EACrBzC,EACFyC,GAAqB,EACZ7E,aAAuBxT,IAChC4V,EAAa7D,EAAY4B,0BAA0BH,GACnD6E,GAAqB,IAErBzC,EAAa5V,GAAarI,WAC1B0gB,GAAqB,GAEvB,IAAM7G,EAAY,IAAI/C,GACpB,IAAIC,GACmBkH,EACrByC,GACA,GAEF,IAAI3J,GACmB8E,EACrB4E,GACA,IAGJD,EAAO,IAAIG,GAAK31B,EAAO6uB,GACvBzxB,KAAKk4B,MAAMp8B,IAAImvB,EAASmN,GAK1B,OADAA,EAAKX,qBAAqBrU,GACnBgV,EAAKJ,iBAAiB5U,IAc/B,YAAAsU,wBAAA,SACE90B,EACAwgB,EACAuU,G,QAEM1M,EAAUroB,EAAM4lB,kBAChBgQ,EAAmB,GACrBZ,EAAwB,GACtBa,EAAkBz4B,KAAK04B,kBAC7B,GAAgB,YAAZzN,E,IAEF,IAAkC,iBAAAjrB,KAAKk4B,MAAMS,WAAS,8BAAE,CAA7C,0BAACC,EAAW,KAAER,EAAI,KAC3BR,EAAeA,EAAa7jC,OAC1BqkC,EAAKV,wBAAwBtU,EAAmBuU,IAE9CS,EAAK5qB,YACPxN,KAAKk4B,MAAM55B,OAAOs6B,GAGbR,EAAKf,WAAWtT,iBAAiByT,gBACpCgB,EAAQx1B,KAAKo1B,EAAKf,c,sGAMlBe,EAAOp4B,KAAKk4B,MAAM/9B,IAAI8wB,MAE1B2M,EAAeA,EAAa7jC,OAC1BqkC,EAAKV,wBAAwBtU,EAAmBuU,IAE9CS,EAAK5qB,YACPxN,KAAKk4B,MAAM55B,OAAO2sB,GAGbmN,EAAKf,WAAWtT,iBAAiByT,gBACpCgB,EAAQx1B,KAAKo1B,EAAKf,cAa1B,OAPIoB,IAAoBz4B,KAAK04B,mBAE3BF,EAAQx1B,KACN,IAAI61B,EAAU7W,uBAAuBpf,EAAMuiB,KAAMviB,EAAMmB,OAIpD,CAAEy0B,QAAO,EAAEzC,OAAQ6B,IAG5B,YAAAkB,cAAA,W,QACQ9hC,EAAS,G,IACf,IAAmB,iBAAAgJ,KAAKk4B,MAAMrH,UAAQ,8BAAE,CAAnC,IAAMuH,EAAI,QACRA,EAAKf,WAAWtT,iBAAiByT,gBACpCxgC,EAAOgM,KAAKo1B,I,iGAGhB,OAAOphC,GAOT,YAAAsgC,uBAAA,SAAuBvzB,G,QACjB0vB,EAA2B,K,IAC/B,IAAmB,iBAAAzzB,KAAKk4B,MAAMrH,UAAQ,8BAAE,CAAnC,IAAMuH,EAAI,QACb3E,EAAcA,GAAe2E,EAAKd,uBAAuBvzB,I,iGAE3D,OAAO0vB,GAGT,YAAAsF,aAAA,SAAan2B,GAEX,GADeA,EAAMmhB,iBACVyT,eACT,OAAOx3B,KAAKg5B,kBAEZ,IAAM/N,EAAUroB,EAAM4lB,kBACtB,OAAOxoB,KAAKk4B,MAAM/9B,IAAI8wB,IAI1B,YAAAgO,mBAAA,SAAmBr2B,GACjB,OAAmC,MAA5B5C,KAAK+4B,aAAan2B,IAG3B,YAAA81B,gBAAA,WACE,OAAiC,MAA1B14B,KAAKg5B,mBAGd,YAAAA,gBAAA,W,YACE,IAAmB,iBAAAh5B,KAAKk4B,MAAMrH,UAAQ,8BAAE,CAAnC,IAAMuH,EAAI,QACb,GAAIA,EAAKf,WAAWtT,iBAAiByT,eACnC,OAAOY,G,iGAGX,OAAO,MAEX,EA3NA,GcZA,cACE,WAAoBc,GAAA,KAAAA,aAsItB,OAlIE,YAAAC,SAAA,SAASp1B,EAAYgS,GACnB,GAAIhS,EAAKyJ,UACP,OAAO,IAAI4rB,EAAc,IAAIpN,GAAcjW,IAE3C,IAAMsjB,EAAWr5B,KAAKk5B,WAAW7M,yBAAyBtoB,GAC1D,GAAgB,MAAZs1B,EAAkB,CACpB,IAAMC,EAAeD,EAASt1B,KAC1BlR,EAAQwmC,EAASxmC,MACf4a,EAAef,EAAKe,aAAa6rB,EAAcv1B,GAErD,OADAlR,EAAQA,EAAM2lB,YAAY/K,EAAcsI,GACjC,IAAIqjB,EAAcp5B,KAAKk5B,WAAWp9B,IAAIw9B,EAAczmC,IAE3D,IAAM+4B,EAAU,IAAII,GAAcjW,GAElC,OAAO,IAAIqjB,EADUp5B,KAAKk5B,WAAW1M,QAAQzoB,EAAM6nB,KAMzD,YAAA2N,UAAA,SAAUx1B,EAAYy1B,GACpB,IAAIC,EAAWz5B,KAIf,OAHAsK,EAAKkvB,GAAS,SAACpP,EAAkBrU,GAC/B0jB,EAAWA,EAASN,SAASp1B,EAAKsJ,MAAM+c,GAAWrU,MAE9C0jB,GAUT,YAAAC,YAAA,SAAY31B,GACV,OAAIA,EAAKyJ,UACA4rB,EAActN,MAGd,IAAIsN,EADUp5B,KAAKk5B,WAAW1M,QAAQzoB,EAAMioB,GAAcF,SAYrE,YAAA6N,iBAAA,SAAiB51B,GACf,OAAqC,MAA9B/D,KAAK45B,gBAAgB71B,IAU9B,YAAA61B,gBAAA,SAAgB71B,GACd,IAAMs1B,EAAWr5B,KAAKk5B,WAAW7M,yBAAyBtoB,GAC1D,OAAgB,MAAZs1B,EACKr5B,KAAKk5B,WACT/+B,IAAIk/B,EAASt1B,MACbmU,SAASxL,EAAKe,aAAa4rB,EAASt1B,KAAMA,IAEtC,MASX,YAAA81B,oBAAA,WACE,IAAMhrC,EAAwB,GACxBknB,EAAO/V,KAAKk5B,WAAWrmC,MAkB7B,OAjBY,MAARkjB,EAEGA,EAAKwB,cACPxB,EAAsB4C,aACrBgB,IACA,SAAC1B,EAAWI,GACVxpB,EAASmU,KAAK,IAAIiT,GAAUgC,EAAWI,OAK7CrY,KAAKk5B,WAAWrqC,SAAS+rB,kBAAiB,SAAC3C,EAAW8F,GAC7B,MAAnBA,EAAUlrB,OACZhE,EAASmU,KAAK,IAAIiT,GAAUgC,EAAW8F,EAAUlrB,WAIhDhE,GAGT,YAAAirC,mBAAA,SAAmB/1B,GACjB,GAAIA,EAAKyJ,UACP,OAAOxN,KAEP,IAAM+5B,EAAgB/5B,KAAK45B,gBAAgB71B,GAC3C,OACS,IAAIq1B,EADQ,MAAjBW,EACuB,IAAI/N,GAAc+N,GAElB/5B,KAAKk5B,WAAWtN,QAAQ7nB,KASvD,YAAAyJ,QAAA,WACE,OAAOxN,KAAKk5B,WAAW1rB,WASzB,YAAAjO,MAAA,SAAMwW,GACJ,OAAOikB,GAAkBttB,EAAKof,MAAO9rB,KAAKk5B,WAAYnjB,IAlIjD,EAAA+V,MAAQ,IAAIsN,EAAc,IAAIpN,GAAc,OAoIrD,EAvIA,GAyIA,SAASgO,GACPvsB,EACAwsB,EACAlkB,GAEA,GAAuB,MAAnBkkB,EAAUpnC,MAEZ,OAAOkjB,EAAKyC,YAAY/K,EAAcwsB,EAAUpnC,OAEhD,IAAI,EAAgB,KAkBpB,OAjBAonC,EAAUprC,SAAS+rB,kBAAiB,SAACwP,EAAUrM,GAC5B,cAAbqM,GAGF/hB,SACsB,OAApB0V,EAAUlrB,MACV,6CAEF,EAAgBkrB,EAAUlrB,OAE1BkjB,EAAOikB,GAAkBvsB,EAAaJ,MAAM+c,GAAWrM,EAAWhI,MAIjEA,EAAKmC,SAASzK,GAAcD,WAA+B,OAAlB,IAC5CuI,EAAOA,EAAKyC,YAAY/K,EAAaJ,MAAM,aAAc,IAEpD0I,ECpJX,+BAQU,KAAAmkB,eAAgCd,GAActN,MAU9C,KAAAqO,WAA4B,GAE5B,KAAAC,cAAgB,EAghB1B,OAxgBE,YAAAC,YAAA,SAAYt2B,GACV,OAAO,IAAIu2B,GAAav2B,EAAM/D,OAWhC,YAAAu6B,aAAA,SAAax2B,EAAYse,EAAYmY,EAAiBC,GACpDpyB,SACEmyB,EAAUx6B,KAAKo6B,aACf,qDAEczsC,IAAZ8sC,IACFA,GAAU,GAEZz6B,KAAKm6B,WAAWn3B,KAAK,CACnBe,KAAI,EACJse,KAAI,EACJmY,QAAO,EACPC,QAAO,IAGLA,IACFz6B,KAAKk6B,eAAiBl6B,KAAKk6B,eAAef,SAASp1B,EAAMse,IAE3DriB,KAAKo6B,aAAeI,GAUtB,YAAAE,SAAA,SACE32B,EACA6wB,EACA4F,GAEAnyB,SACEmyB,EAAUx6B,KAAKo6B,aACf,gDAEFp6B,KAAKm6B,WAAWn3B,KAAK,CACnBe,KAAI,EACJlV,SAAU+lC,EACV4F,QAAO,EACPC,SAAS,IAGXz6B,KAAKk6B,eAAiBl6B,KAAKk6B,eAAeX,UAAUx1B,EAAM6wB,GAC1D50B,KAAKo6B,aAAeI,GAOtB,YAAAG,SAAA,SAASH,GACP,IAAK,IAAI3yB,EAAI,EAAGA,EAAI7H,KAAKm6B,WAAWzsC,OAAQma,IAAK,CAC/C,IAAM+yB,EAAS56B,KAAKm6B,WAAWtyB,GAC/B,GAAI+yB,EAAOJ,UAAYA,EACrB,OAAOI,EAGX,OAAO,MAWT,YAAAlB,YAAA,SAAYc,GAAZ,WAMQ/Z,EAAMzgB,KAAKm6B,WAAWU,WAAU,SAAAnwB,GACpC,OAAOA,EAAE8vB,UAAYA,KAEvBnyB,SAAOoY,GAAO,EAAG,gDACjB,IAAMqa,EAAgB96B,KAAKm6B,WAAW1Z,GACtCzgB,KAAKm6B,WAAWY,OAAOta,EAAK,GAO5B,IALA,IAAIua,EAAyBF,EAAcL,QACvCQ,GAAsC,EAEtCpzB,EAAI7H,KAAKm6B,WAAWzsC,OAAS,EAE1BstC,GAA0BnzB,GAAK,GAAG,CACvC,IAAMqzB,EAAel7B,KAAKm6B,WAAWtyB,GACjCqzB,EAAaT,UAEb5yB,GAAK4Y,GACLzgB,KAAKm7B,oBAAoBD,EAAcJ,EAAc/2B,MAGrDi3B,GAAyB,EAChBF,EAAc/2B,KAAKwC,SAAS20B,EAAan3B,QAElDk3B,GAAsC,IAG1CpzB,IAGF,GAAKmzB,EAEE,IAAIC,EAGT,OADAj7B,KAAKo7B,cACE,EAGHN,EAAczY,KAChBriB,KAAKk6B,eAAiBl6B,KAAKk6B,eAAeR,YACxCoB,EAAc/2B,MAIhBuG,EADiBwwB,EAAcjsC,UAChB,SAACopB,GACd,EAAKiiB,eAAiB,EAAKA,eAAeR,YACxCoB,EAAc/2B,KAAKsJ,MAAM4K,OAI/B,OAAO,EAnBP,OAAO,GA8BX,YAAAojB,qBAAA,SAAqBt3B,GACnB,OAAO/D,KAAKk6B,eAAeN,gBAAgB71B,IAa7C,YAAAmlB,uBAAA,SACEoS,EACA9F,EACA+F,EACAC,GAEA,GAAKD,GAAsBC,EAmBpB,CACL,IAAMl4B,EAAQtD,KAAKk6B,eAAeJ,mBAAmBwB,GACrD,IAAKE,GAAuBl4B,EAAMkK,UAChC,OAAOgoB,EAGP,GACGgG,GACsB,MAAvBhG,GACClyB,EAAMq2B,iBAAiBjtB,EAAKof,OAGxB,CACL,IAQM2P,EAAcC,EAAUC,WAC5B37B,KAAKm6B,YATQ,SAAUyB,GACvB,OACGA,EAAMnB,SAAWe,MAChBD,KACEA,EAAkBruC,QAAQ0uC,EAAMpB,YACnCoB,EAAM73B,KAAKwC,SAAS+0B,IAAaA,EAAS/0B,SAASq1B,EAAM73B,SAM5Du3B,GAEIO,EAAerG,GAAuBvV,GAAarI,WACzD,OAAO6jB,EAAYl8B,MAAMs8B,GAhBzB,OAAO,KA7BX,IAAM9B,EAAgB/5B,KAAKk6B,eAAeN,gBAAgB0B,GAC1D,GAAqB,MAAjBvB,EACF,OAAOA,EAEP,IAAM+B,EAAW97B,KAAKk6B,eAAeJ,mBAAmBwB,GACxD,GAAIQ,EAAStuB,UACX,OAAOgoB,EACF,GACkB,MAAvBA,GACCsG,EAASnC,iBAAiBjtB,EAAKof,OAI3B,CACL,IAAM+P,EAAerG,GAAuBvV,GAAarI,WACzD,OAAOkkB,EAASv8B,MAAMs8B,GAHtB,OAAO,MA+Cf,YAAAjI,0BAAA,SACE0H,EACAS,GAEA,IAAIrI,EAAmBzT,GAAarI,WAC9BokB,EAAch8B,KAAKk6B,eAAeN,gBAAgB0B,GACxD,GAAIU,EAUF,OATKA,EAAYzkB,cAEfykB,EAAYrjB,aAAagB,IAAgB,SAAC1B,EAAWgU,GACnDyH,EAAmBA,EAAiBpb,qBAClCL,EACAgU,MAICyH,EACF,GAAIqI,EAAwB,CAGjC,IAAM,EAAQ/7B,KAAKk6B,eAAeJ,mBAAmBwB,GAoBrD,OAnBAS,EAAuBpjB,aACrBgB,IACA,SAAC1B,EAAWI,GACV,IAAMtC,EAAO,EACV+jB,mBAAmB,IAAIptB,EAAKuL,IAC5B1Y,MAAM8Y,GACTqb,EAAmBA,EAAiBpb,qBAClCL,EACAlC,MAKN,EAAM8jB,sBAAsB7sC,SAAQ,SAAA0wB,GAClCgW,EAAmBA,EAAiBpb,qBAClCoF,EAAU9vB,KACV8vB,EAAU3H,SAGP2d,EAWP,OAPc1zB,KAAKk6B,eAAeJ,mBAAmBwB,GAC/CzB,sBAAsB7sC,SAAQ,SAAA0wB,GAClCgW,EAAmBA,EAAiBpb,qBAClCoF,EAAU9vB,KACV8vB,EAAU3H,SAGP2d,GAwBX,YAAAM,mCAAA,SACEsH,EACAxY,EACAmZ,EACAC,GAEA7zB,SACE4zB,GAAqBC,EACrB,6DAEF,IAAMn4B,EAAOu3B,EAASjuB,MAAMyV,GAC5B,GAAI9iB,KAAKk6B,eAAeP,iBAAiB51B,GAGvC,OAAO,KAGP,IAAMo4B,EAAan8B,KAAKk6B,eAAeJ,mBAAmB/1B,GAC1D,OAAIo4B,EAAW3uB,UAEN0uB,EAAmBhkB,SAAS4K,GAQ5BqZ,EAAW58B,MAAM28B,EAAmBhkB,SAAS4K,KAc1D,YAAAuO,kBAAA,SACEiK,EACAlR,EACA8R,GAEA,IAAMn4B,EAAOu3B,EAASjuB,MAAM+c,GACtB2P,EAAgB/5B,KAAKk6B,eAAeN,gBAAgB71B,GAC1D,OAAqB,MAAjBg2B,EACKA,EAEHmC,EAAmB/N,mBAAmB/D,GACrBpqB,KAAKk6B,eAAeJ,mBAAmB/1B,GACxCxE,MAChB28B,EAAmB9N,UAAUpW,kBAAkBoS,IAG1C,MAUb,YAAAmJ,eAAA,SAAexvB,GACb,OAAO/D,KAAKk6B,eAAeN,gBAAgB71B,IAO7C,YAAAytB,iBAAA,SACE8J,EACAhK,EACArQ,EACApe,EACA0I,EACAhL,GAEA,IAAI67B,EACE94B,EAAQtD,KAAKk6B,eAAeJ,mBAAmBwB,GAC/CvB,EAAgBz2B,EAAMs2B,gBAAgBltB,EAAKof,OACjD,GAAqB,MAAjBiO,EACFqC,EAAYrC,MACP,IAA0B,MAAtBzI,EAIT,MAAO,GAHP8K,EAAY94B,EAAM/D,MAAM+xB,GAM1B,IADA8K,EAAYA,EAAU5iB,UAAUjZ,IACjBiN,WAAc4uB,EAAU7kB,aAerC,MAAO,GARP,IANA,IAAMga,EAAQ,GACRpjB,EAAM5N,EAAM2V,aACZgJ,EAAO3T,EACR6wB,EAA2B1f,uBAAuBuE,EAAW1gB,GAC7D67B,EAA2B3f,gBAAgBwE,EAAW1gB,GACvD4e,EAAOD,EAAK9E,UACT+E,GAAQoS,EAAM7jC,OAASmV,GACC,IAAzBsL,EAAIgR,EAAM8B,IACZsQ,EAAMvuB,KAAKmc,GAEbA,EAAOD,EAAK9E,UAEd,OAAOmX,GAMH,YAAA4J,oBAAR,SAA4BkB,EAA0Bt4B,GACpD,GAAIs4B,EAAYha,KACd,OAAOga,EAAYt4B,KAAKwC,SAASxC,GAEjC,IAAK,IAAMkU,KAAaokB,EAAYxtC,SAClC,GACEwtC,EAAYxtC,SAAS0b,eAAe0N,IACpCokB,EAAYt4B,KAAKsJ,MAAM4K,GAAW1R,SAASxC,GAE3C,OAAO,EAGX,OAAO,GAOH,YAAAq3B,WAAR,WACEp7B,KAAKk6B,eAAiBwB,EAAUC,WAC9B37B,KAAKm6B,WACLuB,EAAUY,eACV5vB,EAAKof,OAEH9rB,KAAKm6B,WAAWzsC,OAAS,EAC3BsS,KAAKo6B,aAAep6B,KAAKm6B,WAAWn6B,KAAKm6B,WAAWzsC,OAAS,GAAG8sC,QAEhEx6B,KAAKo6B,cAAgB,GAOV,EAAAkC,eAAf,SAA8BV,GAC5B,OAAOA,EAAMnB,SAOA,EAAAkB,WAAf,SACEY,EACAnG,EACAoG,GAGA,IADA,IAAIC,EAAgBrD,GAActN,MACzBjkB,EAAI,EAAGA,EAAI00B,EAAO7uC,SAAUma,EAAG,CACtC,IAAM+zB,EAAQW,EAAO10B,GAIrB,GAAIuuB,EAAOwF,GAAQ,CACjB,IAAM9G,EAAY8G,EAAM73B,KACpB0J,OAAY,EAChB,GAAImuB,EAAMvZ,KACJma,EAASj2B,SAASuuB,IACpBrnB,EAAef,EAAKe,aAAa+uB,EAAU1H,GAC3C2H,EAAgBA,EAActD,SAAS1rB,EAAcmuB,EAAMvZ,OAClDyS,EAAUvuB,SAASi2B,KAC5B/uB,EAAef,EAAKe,aAAaqnB,EAAW0H,GAC5CC,EAAgBA,EAActD,SAC5BzsB,EAAKof,MACL8P,EAAMvZ,KAAKnK,SAASzK,SAKnB,KAAImuB,EAAM/sC,SA0Bf,MAAM+nB,iBAAe,8CAzBrB,GAAI4lB,EAASj2B,SAASuuB,GACpBrnB,EAAef,EAAKe,aAAa+uB,EAAU1H,GAC3C2H,EAAgBA,EAAclD,UAC5B9rB,EACAmuB,EAAM/sC,eAEH,GAAIimC,EAAUvuB,SAASi2B,GAE5B,IADA/uB,EAAef,EAAKe,aAAaqnB,EAAW0H,IAC3BhvB,UACfivB,EAAgBA,EAAclD,UAC5B7sB,EAAKof,MACL8P,EAAM/sC,cAEH,CACL,IAAMwe,EAAQsR,UAAQid,EAAM/sC,SAAU4e,EAAad,YACnD,GAAIU,EAAO,CAET,IAAMqvB,EAAWrvB,EAAM6K,SAASzK,EAAaZ,YAC7C4vB,EAAgBA,EAActD,SAASzsB,EAAKof,MAAO4Q,OAW/D,OAAOD,GAEX,EApiBA,GA4iBA,cA4BE,WAAY14B,EAAYk2B,GACtBj6B,KAAK28B,UAAY54B,EACjB/D,KAAKk5B,WAAae,EA8ItB,OAjIE,YAAA/Q,uBAAA,SACEsM,EACA+F,EACAC,GAEA,OAAOx7B,KAAKk5B,WAAWhQ,uBACrBlpB,KAAK28B,UACLnH,EACA+F,EACAC,IAWJ,YAAA5H,0BAAA,SACEmI,GAEA,OAAO/7B,KAAKk5B,WAAWtF,0BACrB5zB,KAAK28B,UACLZ,IAuBJ,YAAA/H,mCAAA,SACEjwB,EACAk4B,EACAC,GAEA,OAAOl8B,KAAKk5B,WAAWlF,mCACrBh0B,KAAK28B,UACL54B,EACAk4B,EACAC,IAYJ,YAAA3I,eAAA,SAAexvB,GACb,OAAO/D,KAAKk5B,WAAW3F,eAAevzB,KAAK28B,UAAUtvB,MAAMtJ,KAc7D,YAAAytB,iBAAA,SACEF,EACArQ,EACApe,EACA0I,EACAhL,GAEA,OAAOP,KAAKk5B,WAAW1H,iBACrBxxB,KAAK28B,UACLrL,EACArQ,EACApe,EACA0I,EACAhL,IAYJ,YAAA8wB,kBAAA,SACEjH,EACAwS,GAEA,OAAO58B,KAAKk5B,WAAW7H,kBACrBrxB,KAAK28B,UACLvS,EACAwS,IAUJ,YAAAvvB,MAAA,SAAM4K,GACJ,OAAO,IAAIqiB,EAAat6B,KAAK28B,UAAUtvB,MAAM4K,GAAYjY,KAAKk5B,aAElE,EA5KA,GC3gBA,cAkBE,WAAoB2D,GAAA,KAAAA,kBAdZ,KAAAC,eAA2C9Q,GAAcF,MAKzD,KAAAiR,kBAAoB,IAAIrB,GAEf,KAAAsB,cAAqC,IAAIvjC,IACzC,KAAAwjC,cAAqC,IAAIxjC,IAivB5D,OApuBE,YAAAyjC,mBAAA,SACEn5B,EACAo5B,EACA3C,EACAC,GAKA,OAFAz6B,KAAK+8B,kBAAkBxC,aAAax2B,EAAMo5B,EAAS3C,EAASC,GAEvDA,EAGIz6B,KAAKo9B,4BACV,IAAIzP,GAAUvC,GAAgBD,KAAMpnB,EAAMo5B,IAHrC,IAaX,YAAAE,eAAA,SACEt5B,EACA6wB,EACA4F,GAGAx6B,KAAK+8B,kBAAkBrC,SAAS32B,EAAM6wB,EAAiB4F,GAEvD,IAAM8C,EAAatR,GAAcD,WAAW6I,GAE5C,OAAO50B,KAAKo9B,4BACV,IAAIvP,GAAMzC,GAAgBD,KAAMpnB,EAAMu5B,KAU1C,YAAA3K,aAAA,SAAa6H,EAAiBhP,QAAA,IAAAA,OAAA,GAC5B,IAAMoQ,EAAQ57B,KAAK+8B,kBAAkBpC,SAASH,GAE9C,GADyBx6B,KAAK+8B,kBAAkBrD,YAAYc,GAGrD,CACL,IAAI,EAAexO,GAAcF,MASjC,OARkB,MAAd8P,EAAMvZ,KAER,EAAe,EAAavmB,IAAI4Q,EAAKof,OAAO,GAE5CxhB,EAAKsxB,EAAM/sC,UAAU,SAACke,EAAoBgJ,GACxC,EAAe,EAAaja,IAAI,IAAI4Q,EAAKK,GAAagJ,MAGnD/V,KAAKo9B,4BACV,IAAIvR,GAAa+P,EAAM73B,KAAM,EAAcynB,IAZ7C,MAAO,IAsBX,YAAA+R,qBAAA,SAAqBx5B,EAAYo5B,GAC/B,OAAOn9B,KAAKo9B,4BACV,IAAIzP,GAAUvC,GAAgBC,OAAQtnB,EAAMo5B,KAShD,YAAAK,iBAAA,SACEz5B,EACA6wB,GAEA,IAAM0I,EAAatR,GAAcD,WAAW6I,GAE5C,OAAO50B,KAAKo9B,4BACV,IAAIvP,GAAMzC,GAAgBC,OAAQtnB,EAAMu5B,KAS5C,YAAAG,oBAAA,SAAoB15B,GAClB,OAAO/D,KAAKo9B,4BACV,IAAI3P,GAAerC,GAAgBC,OAAQtnB,KAS/C,YAAA25B,0BAAA,SAA0B35B,EAAYse,EAAYsb,GAChD,IAAMC,EAAW59B,KAAK69B,gBAAgBF,GACtC,GAAgB,MAAZC,EAAkB,CACpB,IAAME,EAAIC,EAASC,eAAeJ,GAC5BK,EAAYH,EAAE/5B,KAClBknB,EAAU6S,EAAE7S,QACRxd,EAAef,EAAKe,aAAawwB,EAAWl6B,GAC5CylB,EAAK,IAAImE,GACbvC,GAAgBE,qBAAqBL,GACrCxd,EACA4U,GAEF,OAAOriB,KAAKk+B,sBAAsBD,EAAWzU,GAG7C,MAAO,IASX,YAAA2U,sBAAA,SACEp6B,EACA6wB,EACA+I,GAEA,IAAMC,EAAW59B,KAAK69B,gBAAgBF,GACtC,GAAIC,EAAU,CACZ,IAAME,EAAIC,EAASC,eAAeJ,GAC5BK,EAAYH,EAAE/5B,KAClBknB,EAAU6S,EAAE7S,QACRxd,EAAef,EAAKe,aAAawwB,EAAWl6B,GAC5Cu5B,EAAatR,GAAcD,WAAW6I,GACtCpL,EAAK,IAAIqE,GACbzC,GAAgBE,qBAAqBL,GACrCxd,EACA6vB,GAEF,OAAOt9B,KAAKk+B,sBAAsBD,EAAWzU,GAG7C,MAAO,IASX,YAAA4U,0BAAA,SAA0Br6B,EAAY45B,GACpC,IAAMC,EAAW59B,KAAK69B,gBAAgBF,GACtC,GAAIC,EAAU,CACZ,IAAME,EAAIC,EAASC,eAAeJ,GAC5BK,EAAYH,EAAE/5B,KAClBknB,EAAU6S,EAAE7S,QACRxd,EAAef,EAAKe,aAAawwB,EAAWl6B,GAC5CylB,EAAK,IAAIiE,GACbrC,GAAgBE,qBAAqBL,GACrCxd,GAEF,OAAOzN,KAAKk+B,sBAAsBD,EAAWzU,GAG7C,MAAO,IASX,YAAAiO,qBAAA,SACE70B,EACAwgB,GAEA,IAAMrf,EAAOnB,EAAMmB,KAEf0vB,EAA2B,KAC3B4K,GAA2B,EAG/Br+B,KAAK88B,eAAe5P,cAAcnpB,GAAM,SAACu6B,EAAiBC,GACxD,IAAM9wB,EAAef,EAAKe,aAAa6wB,EAAiBv6B,GACxD0vB,EAAcA,GAAe8K,EAAGjH,uBAAuB7pB,GACvD4wB,EACEA,GAA4BE,EAAG7F,qBAEnC,IAUIL,EAVAmG,EAAYx+B,KAAK88B,eAAe3iC,IAAI4J,IACnCy6B,GAIHH,EACEA,GAA4BG,EAAU9F,kBACxCjF,EAAcA,GAAe+K,EAAUlH,uBAAuB5qB,EAAKof,SALnE0S,EAAY,IAAI3F,GAChB74B,KAAK88B,eAAiB98B,KAAK88B,eAAehhC,IAAIiI,EAAMy6B,IAQnC,MAAf/K,GACF4E,GAAsB,GAEtBA,GAAsB,EACtB5E,EAAcxT,GAAarI,WACX5X,KAAK88B,eAAelR,QAAQ7nB,GACpCwpB,cAAa,SAACtV,EAAWwmB,GAC/B,IAAMxM,EAAgBwM,EAAenH,uBAAuB5qB,EAAKof,OAC7DmG,IACFwB,EAAcA,EAAYnb,qBACxBL,EACAga,QAMR,IAAMyM,EAAoBF,EAAUvF,mBAAmBr2B,GACvD,IAAK87B,IAAsB97B,EAAMmhB,iBAAiByT,eAAgB,CAEhE,IAAMoG,EAAWG,EAASY,cAAc/7B,GACxCyF,UACGrI,KAAKi9B,cAAc5S,IAAIuT,GACxB,0CAEF,IAAMD,EAAMI,EAASa,mBACrB5+B,KAAKi9B,cAAcnhC,IAAI8hC,EAAUD,GACjC39B,KAAKg9B,cAAclhC,IAAI6hC,EAAKC,GAE9B,IAAM5L,EAAchyB,KAAK+8B,kBAAkB1C,YAAYt2B,GACnDgyB,EAASyI,EAAU/G,qBACrB70B,EACAwgB,EACA4O,EACAyB,EACA4E,GAEF,IAAKqG,IAAsBL,EAA0B,CACnD,IAAMjG,EAA0BoG,EAAUzF,aAAan2B,GACvDmzB,EAASA,EAAOhiC,OAAOiM,KAAK6+B,eAAej8B,EAAOw1B,IAEpD,OAAOrC,GAaT,YAAA2B,wBAAA,SACE90B,EACAwgB,EACAuU,GAHF,WAMQ5zB,EAAOnB,EAAMmB,KACb+6B,EAAiB9+B,KAAK88B,eAAe3iC,IAAI4J,GAC3C6zB,EAAwB,GAI5B,GACEkH,IAC6B,YAA5Bl8B,EAAM4lB,mBACLsW,EAAe7F,mBAAmBr2B,IACpC,CAIA,IAAMm8B,EAAmBD,EAAepH,wBACtC90B,EACAwgB,EACAuU,GAEEmH,EAAetxB,YACjBxN,KAAK88B,eAAiB98B,KAAK88B,eAAe9gC,OAAO+H,IAEnD,IAAMy0B,EAAUuG,EAAiBvG,QACjCZ,EAAemH,EAAiBhJ,OAOhC,IAAMiJ,GACH,IACDxG,EAAQqC,WAAU,SAAAj4B,GAChB,OAAOA,EAAMmhB,iBAAiByT,kBAE5ByH,EAAUj/B,KAAK88B,eAAehQ,WAClC/oB,GACA,SAAC0J,EAAcyxB,GACb,OAAOA,EAAgBxG,qBAI3B,GAAIsG,IAAoBC,EAAS,CAC/B,IAAMrT,EAAU5rB,KAAK88B,eAAelR,QAAQ7nB,GAG5C,IAAK6nB,EAAQpe,UAKX,IAHA,IAAM2xB,EAAWn/B,KAAKo/B,gCAAgCxT,GAG7C/jB,EAAI,EAAGA,EAAIs3B,EAASzxC,SAAUma,EAAG,CACxC,IAAMuwB,EAAO+G,EAASt3B,GACpBw3B,EAAWjH,EAAKf,WACZiI,EAAWt/B,KAAKu/B,uBAAuBnH,GAC7Cp4B,KAAK68B,gBAAgB2C,eACnBzB,EAAS0B,mBAAmBJ,GAC5Br/B,KAAK0/B,aAAaL,GAClBC,EAASK,OACTL,EAAS/qB,aAUjB,IAAK0qB,GAAWzG,EAAQ9qC,OAAS,IAAMiqC,EAGrC,GAAIqH,EAAiB,CAGnBh/B,KAAK68B,gBAAgB+C,cACnB7B,EAAS0B,mBAAmB78B,GAFI,WAMlC41B,EAAQxrC,SAAQ,SAAC6yC,GACf,IAAMC,EAAc,EAAK7C,cAAc9iC,IACrC4jC,EAASY,cAAckB,IAEzB,EAAKhD,gBAAgB+C,cACnB7B,EAAS0B,mBAAmBI,GAC5BC,MAMR9/B,KAAK+/B,YAAYvH,GAInB,OAAOZ,GAcT,YAAA1O,uBAAA,SAAuBnlB,EAAYw3B,GACjC,IACMtB,EAAYj6B,KAAK+8B,kBACjBtJ,EAAczzB,KAAK88B,eAAehQ,WACtC/oB,GACA,SAAC6oB,EAAW4R,GACV,IAAM/wB,EAAef,EAAKe,aAAamf,EAAW7oB,GAC5C0vB,EAAc+K,EAAUlH,uBAAuB7pB,GACrD,GAAIgmB,EACF,OAAOA,KAIb,OAAOwG,EAAU/Q,uBACfnlB,EACA0vB,EACA8H,GAfwB,IAwBpB,YAAA6D,gCAAR,SACExT,GAEA,OAAOA,EAAQc,MACb,SAACjf,EAAcuyB,EAAqBC,GAClC,GAAID,GAAuBA,EAAoBtH,kBAE7C,MAAO,CADcsH,EAAoBhH,mBAIzC,IAAI,EAAgB,GAOpB,OANIgH,IACF,EAAQA,EAAoBlH,iBAE9BxuB,EAAK21B,GAAU,SAACt8B,EAAcu8B,GAC5B,EAAQ,EAAMnsC,OAAOmsC,MAEhB,MAMP,YAAAH,YAAR,SAAoBI,GAClB,IAAK,IAAI9xB,EAAI,EAAGA,EAAI8xB,EAAQzyC,SAAU2gB,EAAG,CACvC,IAAM+xB,EAAeD,EAAQ9xB,GAC7B,IAAK+xB,EAAarc,iBAAiByT,eAAgB,CAEjD,IAAM6I,EAAkBtC,EAASY,cAAcyB,GACzCE,EAAkBtgC,KAAKi9B,cAAc9iC,IAAIkmC,GAC/CrgC,KAAKi9B,cAAc3+B,OAAO+hC,GAC1BrgC,KAAKg9B,cAAc1+B,OAAOgiC,MAUjB,EAAAb,mBAAf,SAAkC78B,GAChC,OACEA,EAAMmhB,iBAAiByT,iBACtB50B,EAAMmhB,iBAAiBwc,YAKjB39B,EAAMugB,SAENvgB,GASH,YAAAi8B,eAAR,SAAuBj8B,EAAcw1B,GACnC,IAAMr0B,EAAOnB,EAAMmB,KACb45B,EAAM39B,KAAK0/B,aAAa98B,GACxB08B,EAAWt/B,KAAKu/B,uBAAuBnH,GAEvCrC,EAAS/1B,KAAK68B,gBAAgB2C,eAClCzB,EAAS0B,mBAAmB78B,GAC5B+6B,EACA2B,EAASK,OACTL,EAAS/qB,YAGLqX,EAAU5rB,KAAK88B,eAAelR,QAAQ7nB,GAG5C,GAAI45B,EACFt1B,UACGujB,EAAQ/4B,MAAM6lC,kBACf,0DA2BF,IAvBA,IAAM8H,EAAgB5U,EAAQc,MAC5B,SAACjf,EAAcuyB,EAAqBC,GAClC,IACGxyB,EAAaD,WACdwyB,GACAA,EAAoBtH,kBAEpB,MAAO,CAACsH,EAAoBhH,kBAAkB3B,YAG9C,IAAI,EAAmB,GASvB,OARI2I,IACF,EAAU,EAAQjsC,OAChBisC,EAAoBlH,gBAAgBtZ,KAAI,SAAA4Y,GAAQ,OAAAA,EAAKf,gBAGzD/sB,EAAK21B,GAAU,SAACt8B,EAAc88B,GAC5B,EAAU,EAAQ1sC,OAAO0sC,MAEpB,KAIJ54B,EAAI,EAAGA,EAAI24B,EAAc9yC,SAAUma,EAAG,CAC7C,IAAM64B,EAAcF,EAAc34B,GAClC7H,KAAK68B,gBAAgB+C,cACnB7B,EAAS0B,mBAAmBiB,GAC5B1gC,KAAK0/B,aAAagB,IAIxB,OAAO3K,GAGD,YAAAwJ,uBAAR,SACEnH,GADF,WAGQx1B,EAAQw1B,EAAKf,WACbsG,EAAM39B,KAAK0/B,aAAa98B,GAE9B,MAAO,CACL+8B,OAAQ,WAEN,OADcvH,EAAKpJ,kBAAoB/O,GAAarI,YACvCkB,QAEfvE,WAAY,SAACre,GACX,GAAe,OAAXA,EACF,OAAIynC,EACK,EAAKS,0BAA0Bx7B,EAAMmB,KAAM45B,GAE3C,EAAKF,oBAAoB76B,EAAMmB,MAKxC,IAAMpO,E/C1HkB,SAAUG,EAAc8M,GACxD,IAAI+9B,EAAS,gBACA,YAAT7qC,EACF6qC,EACE,0FAEgB,sBAAT7qC,EACT6qC,EAAS,6DACS,gBAAT7qC,IACT6qC,EAAS,8BAGX,IAAMhrC,EAAQ,IAAImT,MAChBhT,EAAO,OAAS8M,EAAMmB,KAAKqC,WAAa,KAAOu6B,GAIjD,OADChrC,EAAcG,KAAOA,EAAK8qC,cACpBjrC,E+CyGekrC,CAAmB3qC,EAAQ0M,GACzC,OAAO,EAAK80B,wBACV90B,EACsB,KACtBjN,MAUK,EAAAgpC,cAAf,SAA6B/7B,GAC3B,OAAOA,EAAMmB,KAAKqC,WAAa,IAAMxD,EAAM4lB,mBAM9B,EAAAwV,eAAf,SACEJ,GAEA,IAAMkD,EAAalD,EAAS1wC,QAAQ,KAKpC,OAJAmb,UACkB,IAAhBy4B,GAAqBA,EAAalD,EAASlwC,OAAS,EACpD,iBAEK,CACLu9B,QAAS2S,EAASzkC,OAAO2nC,EAAa,GACtC/8B,KAAM,IAAI2I,EAAKkxB,EAASzkC,OAAO,EAAG2nC,MAO9B,YAAAjD,gBAAR,SAAwBF,GACtB,OAAO39B,KAAKg9B,cAAc7iC,IAAIwjC,IAMxB,YAAA+B,aAAR,SAAqB98B,GACnB,IAAMg7B,EAAWG,EAASY,cAAc/7B,GACxC,OAAO5C,KAAKi9B,cAAc9iC,IAAIyjC,IAWjB,EAAAgB,iBAAf,WACE,OAAOb,EAASgD,iBAMV,YAAA7C,sBAAR,SACED,EACAlM,GAEA,IAAMyM,EAAYx+B,KAAK88B,eAAe3iC,IAAI8jC,GAC1C51B,SAAOm2B,EAAW,wDAClB,IAAMxM,EAAchyB,KAAK+8B,kBAAkB1C,YAAY4D,GACvD,OAAOO,EAAU3M,eACfE,EACAC,EACiB,OAiBb,YAAAoL,4BAAR,SAAoCrL,GAClC,OAAO/xB,KAAKghC,sBACVjP,EACA/xB,KAAK88B,eACY,KACjB98B,KAAK+8B,kBAAkB1C,YAAY3tB,EAAKof,SAOpC,YAAAkV,sBAAR,SACEjP,EACAkP,EACAxN,EACAzB,GAEA,GAAID,EAAUhuB,KAAKyJ,UACjB,OAAOxN,KAAKkhC,iCACVnP,EACAkP,EACAxN,EACAzB,GAGF,IAAMwM,EAAYyC,EAAc9mC,IAAIuS,EAAKof,OAGtB,MAAf2H,GAAoC,MAAb+K,IACzB/K,EAAc+K,EAAUlH,uBAAuB5qB,EAAKof,QAGtD,IAAIiK,EAAkB,GAChB9d,EAAY8Z,EAAUhuB,KAAK4I,WAC3Bw0B,EAAiBpP,EAAUpG,kBAAkB1T,GAC7C8F,EAAYkjB,EAAcpyC,SAASsL,IAAI8d,GAC7C,GAAI8F,GAAaojB,EAAgB,CAC/B,IAAMC,EAAmB3N,EACrBA,EAAYzb,kBAAkBC,GAC9B,KACEopB,EAAmBrP,EAAY3kB,MAAM4K,GAC3C8d,EAASA,EAAOhiC,OACdiM,KAAKghC,sBACHG,EACApjB,EACAqjB,EACAC,IAWN,OANI7C,IACFzI,EAASA,EAAOhiC,OACdyqC,EAAU3M,eAAeE,EAAWC,EAAayB,KAI9CsC,GAOH,YAAAmL,iCAAR,SACEnP,EACAkP,EACAxN,EACAzB,GAJF,WAMQwM,EAAYyC,EAAc9mC,IAAIuS,EAAKof,OAGtB,MAAf2H,GAAoC,MAAb+K,IACzB/K,EAAc+K,EAAUlH,uBAAuB5qB,EAAKof,QAGtD,IAAIiK,EAAkB,GAyBtB,OAxBAkL,EAAcpyC,SAAS+rB,kBAAiB,SAAC3C,EAAW8F,GAClD,IAAMqjB,EAAmB3N,EACrBA,EAAYzb,kBAAkBC,GAC9B,KACEopB,EAAmBrP,EAAY3kB,MAAM4K,GACrCkpB,EAAiBpP,EAAUpG,kBAAkB1T,GAC/CkpB,IACFpL,EAASA,EAAOhiC,OACd,EAAKmtC,iCACHC,EACApjB,EACAqjB,EACAC,QAMJ7C,IACFzI,EAASA,EAAOhiC,OACdyqC,EAAU3M,eAAeE,EAAWC,EAAayB,KAI9CsC,GA9IM,EAAAgL,cAAgB,EAgJjC,EA7vBA,GCtDA,2BACU,KAAAO,UAAkBrhB,GAAarI,WASzC,OAPE,YAAAwW,QAAA,SAAQrqB,GACN,OAAO/D,KAAKshC,UAAUppB,SAASnU,IAGjC,YAAAw9B,eAAA,SAAex9B,EAAYy9B,GACzBxhC,KAAKshC,UAAYthC,KAAKshC,UAAU9oB,YAAYzU,EAAMy9B,IAEtD,EAVA,GCFA,2BACU,KAAAC,UAAqC,GAa/C,OAXE,YAAAC,iBAAA,SAAiB9zC,EAAc+zC,QAAA,IAAAA,MAAA,GACxBp7B,WAASvG,KAAKyhC,UAAW7zC,KAC5BoS,KAAKyhC,UAAU7zC,GAAQ,GAGzBoS,KAAKyhC,UAAU7zC,IAAS+zC,GAG1B,YAAAxnC,IAAA,WACE,OAAOynC,WAAS5hC,KAAKyhC,YAEzB,EAdA,GCJA,4BA0BA,OAtBS,EAAAI,cAAP,SAAqB1wB,GACnB,IAAM2wB,EAAa3wB,EAAS/K,WAM5B,OAJKpG,KAAK+hC,aAAaD,KACrB9hC,KAAK+hC,aAAaD,GAAc,IAAIE,IAG/BhiC,KAAK+hC,aAAaD,IAGpB,EAAAG,oBAAP,SACE9wB,EACA+wB,GAEA,IAAMJ,EAAa3wB,EAAS/K,WAM5B,OAJKpG,KAAKmiC,WAAWL,KACnB9hC,KAAKmiC,WAAWL,GAAcI,KAGzBliC,KAAKmiC,WAAWL,IAvBV,EAAAC,aAAiD,GACjD,EAAAI,WAAuC,GAwBxD,EA1BA,GCMA,cAGE,WAAoBC,GAAA,KAAAA,cAFZ,KAAAC,MAAwC,KAiBlD,OAbE,YAAAloC,IAAA,WACE,IAAMmoC,EAAWtiC,KAAKoiC,YAAYjoC,MAE5BwvB,EAAQ,EAAH,YAAQ2Y,GAQnB,OAPItiC,KAAKqiC,OACP/3B,EAAKtK,KAAKqiC,OAAO,SAACE,EAAc1vC,GAC9B82B,EAAM4Y,GAAQ5Y,EAAM4Y,GAAQ1vC,KAGhCmN,KAAKqiC,MAAQC,EAEN3Y,GAEX,EAlBA,GCSA,cAQE,WAAY6Y,EAAqCC,GAAA,KAAAA,UANzC,KAAAC,eAA2C,GAOjD1iC,KAAK2iC,eAAiB,IAAIC,GAAcJ,GAExC,IAAMp2B,EApBmB,IAsBvB,IAAgDrB,KAAK+K,SACvD5J,EAAsBlM,KAAK6iC,aAAan6B,KAAK1I,MAAO+K,KAAKI,MAAMiB,IA6BnE,OA1BE,YAAA02B,YAAA,SAAYP,GACVviC,KAAK0iC,eAAeH,IAAQ,GAGtB,YAAAM,aAAR,sBACQE,EAAQ/iC,KAAK2iC,eAAexoC,MAC5B6oC,EAA8B,GAChCC,GAAoB,EAExB34B,EAAKy4B,GAAO,SAACR,EAAc1vC,GACrBA,EAAQ,GAAK0T,WAAS,EAAKm8B,eAAgBH,KAC7CS,EAAcT,GAAQ1vC,EACtBowC,GAAoB,MAIpBA,GACFjjC,KAAKyiC,QAAQS,YAAYF,GAI3B92B,EACElM,KAAK6iC,aAAan6B,KAAK1I,MACvB+K,KAAKI,MAAsB,EAAhBJ,KAAK+K,SA7CQ,OAgD9B,EA3CA,GCAA,2BAKU,KAAAqtB,YAA2B,GAO3B,KAAAC,gBAAkB,EAyF5B,OApFE,YAAAC,YAAA,SAAYC,GAGV,IADA,IAAIC,EAAW,KACN17B,EAAI,EAAGA,EAAIy7B,EAAc51C,OAAQma,IAAK,CAC7C,IAAMsc,EAAYmf,EAAcz7B,GAC1B27B,EAAYrf,EAAUrgB,UACX,OAAby/B,GAAsBC,EAAUp1B,OAAOm1B,EAASz/B,aAClD9D,KAAKmjC,YAAYngC,KAAKugC,GACtBA,EAAW,MAGI,OAAbA,IACFA,EAAW,IAAIE,GAAUD,IAG3BD,EAASnlC,IAAI+lB,GAEXof,GACFvjC,KAAKmjC,YAAYngC,KAAKugC,IAa1B,YAAAG,kBAAA,SAAkB3/B,EAAYu/B,GAC5BtjC,KAAKqjC,YAAYC,GACjBtjC,KAAK2jC,qCAAoC,SAACH,GACxC,OAAAA,EAAUp1B,OAAOrK,OAarB,YAAA6/B,0BAAA,SAA0BC,EAAmBP,GAC3CtjC,KAAKqjC,YAAYC,GAEjBtjC,KAAK2jC,qCAAoC,SAACH,GACxC,OAAOA,EAAUj9B,SAASs9B,IAAgBA,EAAYt9B,SAASi9B,OAQ3D,YAAAG,oCAAR,SACExX,GAEAnsB,KAAKojC,kBAGL,IADA,IAAIU,GAAU,EACLj8B,EAAI,EAAGA,EAAI7H,KAAKmjC,YAAYz1C,OAAQma,IAAK,CAChD,IAAMk8B,EAAY/jC,KAAKmjC,YAAYt7B,GACnC,GAAIk8B,EAEE5X,EADc4X,EAAUjgC,YAE1B9D,KAAKmjC,YAAYt7B,GAAGm8B,QACpBhkC,KAAKmjC,YAAYt7B,GAAK,MAEtBi8B,GAAU,EAKZA,IACF9jC,KAAKmjC,YAAc,IAGrBnjC,KAAKojC,mBAET,EArGA,GA2GA,cAOE,WAA6BhwB,GAAA,KAAAA,QAFrB,KAAA6wB,QAAmB,GAkC7B,OA3BE,YAAA7lC,IAAA,SAAI+lB,GACFnkB,KAAKikC,QAAQjhC,KAAKmhB,IAMpB,YAAA6f,MAAA,WACE,IAAK,IAAIn8B,EAAI,EAAGA,EAAI7H,KAAKikC,QAAQv2C,OAAQma,IAAK,CAC5C,IAAMsc,EAAYnkB,KAAKikC,QAAQp8B,GAC/B,GAAkB,OAAdsc,EAAoB,CACtBnkB,KAAKikC,QAAQp8B,GAAK,KAClB,IAAMq8B,EAAU/f,EAAUX,iBACtBxb,GACFS,EAAI,UAAY0b,EAAU/d,YAE5B4F,EAAek4B,MAQrB,YAAApgC,QAAA,WACE,OAAO9D,KAAKoT,OAEhB,EAvCA,GCvHA,cAWE,WAAoB+wB,GAAA,KAAAA,iBAVZ,KAAAC,WAKJ,GAMF/7B,SACEzJ,MAAM8F,QAAQy/B,IAAmBA,EAAez2C,OAAS,EACzD,8BA8DN,OA5CY,YAAA22C,QAAV,SAAkBzwB,G,IAAmB,wDACnC,GAAIhV,MAAM8F,QAAQ1E,KAAKokC,WAAWxwB,IAIhC,IAFA,IAAM0wB,EAAY,EAAH,SAAOtkC,KAAKokC,WAAWxwB,IAE7B/L,EAAI,EAAGA,EAAIy8B,EAAU52C,OAAQma,IACpCy8B,EAAUz8B,GAAGzN,SAASmF,MAAM+kC,EAAUz8B,GAAGrW,QAASsW,IAKxD,YAAAye,GAAA,SAAG3S,EAAmBxZ,EAAgC5I,GACpDwO,KAAKukC,mBAAmB3wB,GACxB5T,KAAKokC,WAAWxwB,GAAa5T,KAAKokC,WAAWxwB,IAAc,GAC3D5T,KAAKokC,WAAWxwB,GAAW5Q,KAAK,CAAE5I,SAAQ,EAAE5I,QAAO,IAEnD,IAAM2yB,EAAYnkB,KAAKwkC,gBAAgB5wB,GACnCuQ,GACF/pB,EAASmF,MAAM/N,EAAS2yB,IAI5B,YAAA4C,IAAA,SAAInT,EAAmBxZ,EAAgC5I,GACrDwO,KAAKukC,mBAAmB3wB,GAExB,IADA,IAAM0wB,EAAYtkC,KAAKokC,WAAWxwB,IAAc,GACvC/L,EAAI,EAAGA,EAAIy8B,EAAU52C,OAAQma,IACpC,GACEy8B,EAAUz8B,GAAGzN,WAAaA,KACxB5I,GAAWA,IAAY8yC,EAAUz8B,GAAGrW,SAGtC,YADA8yC,EAAUvJ,OAAOlzB,EAAG,IAMlB,YAAA08B,mBAAR,SAA2B3wB,GACzBvL,SACErI,KAAKmkC,eAAeha,MAAK,SAAAsa,GACvB,OAAOA,IAAO7wB,KAEhB,kBAAoBA,IAG1B,EA5EA,GCEA,eAOE,iBAEM8wB,EACAC,EAHN,EACE,YAAM,CAAC,aAAW,K,MAII,qBAAbC,UAC8B,qBAA9BA,SAASC,mBAEkB,qBAAvBD,SAAQ,QAEjBD,EAAmB,mBACnBD,EAAS,UACiC,qBAA1BE,SAAQ,WACxBD,EAAmB,sBACnBD,EAAS,aACgC,qBAAzBE,SAAQ,UACxBD,EAAmB,qBACnBD,EAAS,YACoC,qBAA7BE,SAAQ,eACxBD,EAAmB,yBACnBD,EAAS,iBAQb,EAAKI,UAAW,EAEZH,GACFC,SAASC,iBACPF,GACA,WACE,IAAMlK,GAAWmK,SAASF,GACtBjK,IAAY,EAAKqK,WACnB,EAAKA,SAAWrK,EAChB,EAAK4J,QAAQ,UAAW5J,OAG5B,G,EAaR,OA5DuC,iBAG9B,EAAAsK,YAAP,WACE,OAAO,IAAIC,GAoDb,YAAAR,gBAAA,SAAgB5wB,GAEd,OADAvL,SAAqB,YAAduL,EAAyB,uBAAyBA,GAClD,CAAC5T,KAAK8kC,WAEjB,EA5DA,CAAuCG,ICIvC,eAOE,mBACE,YAAM,CAAC,YAAU,K,OAPX,EAAAC,SAAU,EAcI,qBAAXp1C,QAC4B,qBAA5BA,OAAO+0C,kBACbM,sBAEDr1C,OAAO+0C,iBACL,UACA,WACO,EAAKK,UACR,EAAKA,SAAU,EACf,EAAKb,QAAQ,UAAU,OAG3B,GAGFv0C,OAAO+0C,iBACL,WACA,WACM,EAAKK,UACP,EAAKA,SAAU,EACf,EAAKb,QAAQ,UAAU,OAG3B,I,EAoBR,OA1DmC,iBAG1B,EAAAU,YAAP,WACE,OAAO,IAAIK,GA2Cb,YAAAZ,gBAAA,SAAgB5wB,GAEd,OADAvL,SAAqB,WAAduL,EAAwB,uBAAyBA,GACjD,CAAC5T,KAAKklC,UAMf,YAAAG,gBAAA,WACE,OAAOrlC,KAAKklC,SAEhB,EA1DA,CAAmCD,ICLnC,cASE,WAAoBK,GAAA,KAAAA,aARpB,KAAAC,iBAA8B,GAC9B,KAAAC,mBAAqB,EACrB,KAAAC,oBAAsB,EACtB,KAAAC,QAA+B,KA+CjC,OAxCE,YAAAC,WAAA,SAAWC,EAAqBxrC,GAC9B4F,KAAKylC,mBAAqBG,EAC1B5lC,KAAK0lC,QAAUtrC,EACX4F,KAAKylC,mBAAqBzlC,KAAKwlC,qBACjCxlC,KAAK0lC,UACL1lC,KAAK0lC,QAAU,OAWnB,YAAAG,eAAA,SAAeC,EAAoBrrC,GAAnC,WACEuF,KAAKulC,iBAAiBO,GAAcrrC,EACpC,I,iBACE,IAAMsrC,EAAY,EAAKR,iBACrB,EAAKC,2BAEA,EAAKD,iBAAiB,EAAKC,oBAClC,I,eAAS39B,GACHk+B,EAAUl+B,IACZmE,GAAe,WACb,EAAKs5B,WAAWS,EAAUl+B,QAHvBA,EAAI,EAAGA,EAAIk+B,EAAUr4C,SAAUma,E,EAA/BA,GAOT,GAAI,EAAK29B,qBAAuB,EAAKC,mB,OAC/B,EAAKC,UACP,EAAKA,UACL,EAAKA,QAAU,M,QAInB,EAAKF,sB,OAnBAxlC,KAAKulC,iBAAiBvlC,KAAKwlC,qBAAmB,C,yBAsBzD,EAnDA,GCsBaQ,GAAgC,QAChCC,GAAkC,QA0C/C,cA0BE,WACSC,EACA/0B,EACCg1B,EACDC,EACAC,GAJA,KAAAH,SACA,KAAA/0B,WACC,KAAAg1B,gBACD,KAAAC,qBACA,KAAAC,gBA9BT,KAAAC,UAAY,EACZ,KAAAC,cAAgB,EAUR,KAAAC,gBAAiB,EAqBvBxmC,KAAKymC,KAAO99B,EAAWu9B,GACvBlmC,KAAK0mC,OAASC,GAAa9E,cAAc1wB,GACzCnR,KAAK4mC,MAAQ,SAACt2B,GACZ,OAAAa,EAASf,cAAchB,EAAckB,IAmR3C,OA3QE,YAAAu2B,KAAA,SAAKC,EAA8BC,GAAnC,WACE/mC,KAAKgnC,cAAgB,EACrBhnC,KAAKinC,cAAgBF,EACrB/mC,KAAKknC,gBAAkB,IAAIC,GAAeL,GAC1C9mC,KAAKonC,WAAY,EAEjBpnC,KAAKqnC,qBAAuB/uC,YAAW,WACrC,EAAKmuC,KAAK,gCAEV,EAAKa,YACL,EAAKD,qBAAuB,OAE3Bt8B,KAAKI,MAhEe,M1DoJQ,SAAUpU,GAC3C,GAAIwwC,eAAuC,aAAxB3C,SAAS4C,WAC1BzwC,QACK,CAIL,IAAI,GAAS,EACP,EAAY,SAAZ,IACC6tC,SAASxtC,KAKT,IACH,GAAS,EACTL,KANAuB,WAAW,EAAWyS,KAAKI,MAAM,MAUjCy5B,SAASC,kBACXD,SAASC,iBAAiB,mBAAoB,GAAW,GAEzD/0C,OAAO+0C,iBAAiB,OAAQ,GAAW,IAEjCD,SAAiB6C,cAG1B7C,SAAiB6C,YAAY,sBAAsB,WACtB,aAAxB7C,SAAS4C,YACX,OAKH13C,OAAe23C,YAAY,SAAU,K0DpHxCC,EAAoB,WAClB,IAAI,EAAKN,UAAT,CAKA,EAAKO,gBAAkB,IAAIC,IACzB,W,IAAC,sDACO,eAAoCvoC,EAAI,GAAvCwoC,EAAO,KAAEC,EAAI,KAAEC,EAAI,KAAM,KAAM,KAEtC,GADA,EAAKC,wBAAwB3oC,GACxB,EAAKsoC,gBASV,GALI,EAAKN,uBACPY,aAAa,EAAKZ,sBAClB,EAAKA,qBAAuB,MAE9B,EAAKb,gBAAiB,EAClBqB,IAAY7B,GACd,EAAK9+B,GAAK4gC,EACV,EAAKI,SAAWH,MACX,IAAIF,IAAY5B,GAgBrB,MAAM,IAAIn9B,MAAM,kCAAoC++B,GAdhDC,GAGF,EAAKH,gBAAgBQ,cAAe,EAIpC,EAAKjB,gBAAgBvB,WAAWmC,GAAgB,WAC9C,EAAKR,gBAGP,EAAKA,gBAMX,W,IAAC,sDACO,eAAajoC,EAAI,GAAhB+oC,EAAE,KAAE3tC,EAAI,KACf,EAAKutC,wBAAwB3oC,GAC7B,EAAK6nC,gBAAgBrB,eAAeuC,EAAc3tC,MAEpD,WACE,EAAK6sC,cAEP,EAAKV,OAKP,IAAMyB,EAA8C,CACpD,MAA2C,KAC3CA,EAAS,IAAmCt9B,KAAKI,MAC/B,IAAhBJ,KAAK+K,UAEH,EAAK6xB,gBAAgBW,2BACvBD,EAAS,GAEL,EAAKV,gBAAgBW,0BAE3BD,EAAS,EAAkBp5B,EACvB,EAAKm3B,qBACPiC,EAAS,EAA4B,EAAKjC,oBAExC,EAAKC,gBACPgC,EAAS,GAAuB,EAAKhC,eAEnC,EAAKF,gBACPkC,EAAS,EAAyB,EAAKlC,eAGnB,qBAAbn1B,UACPA,SAASu3B,OACgC,IAAzCv3B,SAASu3B,KAAKr7C,QAAQgiB,KAEtBm5B,EAAS,ExD1MQ,KwD4MnB,IAAMG,EAAa,EAAK5B,MAAMyB,GAC9B,EAAK5B,KAAK,+BAAiC+B,GAC3C,EAAKb,gBAAgBc,OAAOD,GAAY,oBAS5C,YAAAE,MAAA,WACE1oC,KAAK2nC,gBAAgBgB,cAAc3oC,KAAKkH,GAAIlH,KAAKkoC,UACjDloC,KAAK4oC,uBAAuB5oC,KAAKkH,GAAIlH,KAAKkoC,WAQrC,EAAAW,WAAP,WACEC,EAAsBC,aAAc,GAQ/B,EAAAC,cAAP,WACEF,EAAsBG,gBAAiB,GAIlC,EAAAC,YAAP,WACE,OAAI3B,kBAEOuB,EAAsBC,cAM5BD,EAAsBG,gBACH,qBAAbrE,UACmB,MAA1BA,SAASn1C,iB1DqOK,kBAAXK,QACPA,OAAM,QACNA,OAAM,OAAN,YACC,UAAUuJ,KAAKvJ,OAAOkhB,SAASu3B,UAUR,kBAAZY,SAA8C,kBAAfA,QAAQC,M0DxOrD,YAAAC,sBAAA,aAMQ,YAAAC,UAAR,WACEtpC,KAAKonC,WAAY,EAEbpnC,KAAK2nC,kBACP3nC,KAAK2nC,gBAAgBhtC,QACrBqF,KAAK2nC,gBAAkB,MAIrB3nC,KAAKupC,iBACP3E,SAASxtC,KAAKoyC,YAAYxpC,KAAKupC,gBAC/BvpC,KAAKupC,eAAiB,MAGpBvpC,KAAKqnC,uBACPY,aAAajoC,KAAKqnC,sBAClBrnC,KAAKqnC,qBAAuB,OAQxB,YAAAC,UAAR,WACOtnC,KAAKonC,YACRpnC,KAAKymC,KAAK,8BACVzmC,KAAKspC,YAEDtpC,KAAKinC,gBACPjnC,KAAKinC,cAAcjnC,KAAKwmC,gBACxBxmC,KAAKinC,cAAgB,QAS3B,YAAAtsC,MAAA,WACOqF,KAAKonC,YACRpnC,KAAKymC,KAAK,6BACVzmC,KAAKspC,cAST,YAAAG,KAAA,SAAKhvC,GACH,IAAMivC,EAAU9xC,YAAU6C,GAC1BuF,KAAKsmC,WAAaoD,EAAQh8C,OAC1BsS,KAAK0mC,OAAOhF,iBAAiB,aAAcgI,EAAQh8C,QAWnD,IARA,IAAMi8C,EAAaC,eAAaF,GAI1Bv/B,EAAWH,EAAkB2/B,EAhSdE,MAoSZhiC,EAAI,EAAGA,EAAIsC,EAASzc,OAAQma,IACnC7H,KAAK2nC,gBAAgBmC,eACnB9pC,KAAKgnC,cACL78B,EAASzc,OACTyc,EAAStC,IAEX7H,KAAKgnC,iBAWT,YAAA4B,uBAAA,SAAuB1hC,EAAY6iC,GACjC,IAAIxC,cAAJ,CAGAvnC,KAAKupC,eAAiB3E,SAASn1C,cAAc,UAC7C,IAAM44C,EAAqC,CAC3C,OAA2D,KAC3DA,EAAS,GAA+BnhC,EACxCmhC,EAAS,GAA+B0B,EACxC/pC,KAAKupC,eAAeS,IAAMhqC,KAAK4mC,MAAMyB,GACrCroC,KAAKupC,eAAej8C,MAAM2F,QAAU,OAEpC2xC,SAASxtC,KAAK6yC,YAAYjqC,KAAKupC,kBAQzB,YAAAvB,wBAAR,SAAgC3oC,GAE9B,IAAMknC,EAAgB3uC,YAAUyH,GAAM3R,OACtCsS,KAAKumC,eAAiBA,EACtBvmC,KAAK0mC,OAAOhF,iBAAiB,iBAAkB6E,IAEnD,EAvTA,GAkUA,cAiCE,WACE2D,EACAC,EACOpD,EACAH,GAEP,GAHO,KAAAG,eACA,KAAAH,QAlCT,KAAAwD,oBAAsB,IAAIjsC,IAG1B,KAAAksC,YAA8D,GAO9D,KAAAC,cAAgBv/B,KAAKI,MAAsB,IAAhBJ,KAAK+K,UAIhC,KAAAqyB,cAAe,EAsBRZ,cAwCHvnC,KAAKkqC,UAAYA,EACjBlqC,KAAKmqC,YAAcA,MAzCH,CAKhBnqC,KAAKsoC,yBAA2BrhC,IAChCnX,OAxZ2C,aAyZLkQ,KAAKsoC,0BACvC4B,EACJp6C,OA1ZwC,UA2ZLkQ,KAAKsoC,0BACpC6B,EAGJnqC,KAAKuqC,SAAW3C,EAA2B4C,gBAG3C,IAAIC,EAAS,GAGb,GACEzqC,KAAKuqC,SAASP,KACwC,gBAAtDhqC,KAAKuqC,SAASP,IAAI7wC,OAAO,EAAG,cAAczL,QAG1C+8C,EAAS,4BADa7F,SAASh1B,OACwB,eAEzD,IAAM86B,EAAiB,eAAiBD,EAAS,iBACjD,IACEzqC,KAAKuqC,SAASI,IAAI9D,OAClB7mC,KAAKuqC,SAASI,IAAI/O,MAAM8O,GACxB1qC,KAAKuqC,SAASI,IAAIhwC,QAClB,MAAOH,GACPiO,EAAI,2BACAjO,EAAEyR,OACJxD,EAAIjO,EAAEyR,OAERxD,EAAIjO,KAwQZ,OA1PiB,EAAAgwC,cAAf,WACE,IAAMI,EAAShG,SAASn1C,cAAc,UAItC,GAHAm7C,EAAOt9C,MAAM2F,QAAU,QAGnB2xC,SAASxtC,KAqBX,KAAM,oGApBNwtC,SAASxtC,KAAK6yC,YAAYW,GAC1B,IAIYA,EAAOC,cAAcjG,UAG7Bn8B,EAAI,iCAEN,MAAOjO,GACP,IAAMoV,EAASg1B,SAASh1B,OACxBg7B,EAAOZ,IACL,gEACAp6B,EACA,2BAmBN,OAVIg7B,EAAOE,gBACTF,EAAOD,IAAMC,EAAOE,gBACXF,EAAOC,cAChBD,EAAOD,IAAMC,EAAOC,cAAcjG,SAExBgG,EAAehG,WAEzBgG,EAAOD,IAAOC,EAAehG,UAGxBgG,GAMT,YAAAjwC,MAAA,sBAEEqF,KAAK+qC,OAAQ,EAET/qC,KAAKuqC,WAIPvqC,KAAKuqC,SAASI,IAAIvzC,KAAK4zC,UAAY,GACnC1yC,YAAW,WACa,OAAlB,EAAKiyC,WACP3F,SAASxtC,KAAKoyC,YAAY,EAAKe,UAC/B,EAAKA,SAAW,QAEjBx/B,KAAKI,MAAM,KAIhB,IAAM47B,EAAe/mC,KAAK+mC,aACtBA,IACF/mC,KAAK+mC,aAAe,KACpBA,MASJ,YAAA4B,cAAA,SAAczhC,EAAY6iC,GAMxB,IALA/pC,KAAKirC,KAAO/jC,EACZlH,KAAKkrC,KAAOnB,EACZ/pC,KAAK+qC,OAAQ,EAGN/qC,KAAKmrC,kBAUN,YAAAA,YAAR,WAIE,GACEnrC,KAAK+qC,OACL/qC,KAAKmoC,cACLnoC,KAAKoqC,oBAAoB1vC,MAAQsF,KAAKqqC,YAAY38C,OAAS,EAAI,EAAI,GACnE,CAEAsS,KAAKsqC,gBACL,IAAMjC,EAA8C,GACpDA,EAAS,GAA+BroC,KAAKirC,KAC7C5C,EAAS,GAA+BroC,KAAKkrC,KAC7C7C,EAAS,IAAmCroC,KAAKsqC,cAMjD,IALA,IAAIc,EAASprC,KAAK4mC,MAAMyB,GAEpBgD,EAAgB,GAChBxjC,EAAI,EAED7H,KAAKqqC,YAAY38C,OAAS,GAAG,CAGlC,KADgBsS,KAAKqqC,YAAY,GAEtBiB,EAAgB59C,OAziBX,GA2iBZ29C,EAAc39C,QA5iBA,MAokBhB,MApBA,IAAM69C,EAASvrC,KAAKqqC,YAAYmB,QAChCH,EACEA,SAGAxjC,EACA,IACA0jC,EAAOE,IALPJ,MAQAxjC,EACA,IACA0jC,EAAOG,GAVPL,KAaAxjC,EACA,IACA0jC,EAAOD,EACTzjC,IASJ,OAHAujC,GAAkBC,EAClBrrC,KAAK2rC,gBAAgBP,EAAQprC,KAAKsqC,gBAE3B,EAEP,OAAO,GAUX,YAAAR,eAAA,SAAe8B,EAAgBC,EAAmBpxC,GAEhDuF,KAAKqqC,YAAYrnC,KAAK,CAAEyoC,IAAKG,EAAQF,GAAIG,EAAWP,EAAG7wC,IAInDuF,KAAK+qC,OACP/qC,KAAKmrC,eAUD,YAAAQ,gBAAR,SAAwBG,EAAaC,GAArC,WAEE/rC,KAAKoqC,oBAAoBhsC,IAAI2tC,GAE7B,IAAMC,EAAe,WACnB,EAAK5B,oBAAoB9rC,OAAOytC,GAChC,EAAKZ,eAKDc,EAAmB3zC,WACvB0zC,EACAjhC,KAAKI,MA1mBwB,OAqnB/BnL,KAAKyoC,OAAOqD,GARS,WAEnB7D,aAAagE,GAGbD,QAWJ,YAAAvD,OAAA,SAAOqD,EAAaI,GAApB,WACM3E,cAEDvnC,KAAamsC,eAAeL,EAAKI,GAElC5zC,YAAW,WACT,IAEE,IAAK,EAAK6vC,aACR,OAEF,IAAM,EAAY,EAAKoC,SAASI,IAAIl7C,cAAc,UAClD,EAAU4gB,KAAO,kBACjB,EAAU+7B,OAAQ,EAClB,EAAUpC,IAAM8B,EAEhB,EAAUO,OAAU,EAAkBC,mBAAqB,WAEzD,IAAMC,EAAU,EAAkB/E,WAC7B+E,GAAqB,WAAXA,GAAkC,aAAXA,IAEpC,EAAUF,OAAU,EAAkBC,mBAAqB,KACvD,EAAUE,YACZ,EAAUA,WAAWhD,YAAY,GAEnC0C,MAGJ,EAAUhtC,QAAU,WAClBuJ,EAAI,oCAAsCqjC,GAC1C,EAAK3D,cAAe,EACpB,EAAKxtC,SAEP,EAAK4vC,SAASI,IAAIvzC,KAAK6yC,YAAY,GACnC,MAAOzvC,OAGRuQ,KAAKI,MAAM,KAGpB,EApVA,GCzYWshC,GAAc,GC2BzB,IAGIC,GAAgB,KACQ,qBAAjBC,aACTD,GAAgBC,aACc,qBAAdC,YAChBF,GAAgBE,WAYlB,kBAwBE,WACS1G,EACP/0B,EACQg1B,EACRC,EACAC,GAJO,KAAAH,SAEC,KAAAC,gBA1BV,KAAA0G,eAAgC,KAChC,KAAAC,OAA0B,KAC1B,KAAAC,YAAc,EACd,KAAAzG,UAAY,EACZ,KAAAC,cAAgB,EA0BdvmC,KAAKymC,KAAO99B,EAAW3I,KAAKkmC,QAC5BlmC,KAAK0mC,OAASC,GAAa9E,cAAc1wB,GACzCnR,KAAKuQ,QAAUy8B,EAAoBC,eACjC97B,EACAi1B,EACAC,GAEFrmC,KAAKyP,UAAY0B,EAAS1B,UA0V9B,OA/UiB,EAAAw9B,eAAf,SACE97B,EACAi1B,EACAC,GAEA,IAAMgC,EAAqC,GAiB3C,OAhBAA,EAAS,EAAkBp5B,GAGxBs4B,eACmB,qBAAbv2B,UACPA,SAASu3B,OACgC,IAAzCv3B,SAASu3B,KAAKr7C,QAAQgiB,KAEtBm5B,EAAS,E1DtGU,K0DwGjBjC,IACFiC,EAAS,EAA4BjC,GAEnCC,IACFgC,EAAS,GAAuBhC,GAE3Bl1B,EAASf,cAAcjB,EAAWk5B,IAQ3C,YAAAxB,KAAA,SAAKC,EAA8BC,GAAnC,WACE/mC,KAAK+mC,aAAeA,EACpB/mC,KAAK8mC,UAAYA,EAEjB9mC,KAAKymC,KAAK,2BAA6BzmC,KAAKuQ,SAE5CvQ,KAAKwmC,gBAAiB,EAEtB3/B,EAAkB/K,IAAI,8BAA8B,GAEpD,IACE,GAAIyrC,cAAa,CACf,IAAM2F,EAASltC,KAAKyP,UAAY,YAAc,OAExCjiB,EAAmC,CACvCkJ,QAAS,CACP,aAAc,cAAgC+1C,GAAW,IAAIU,EAAQC,SAAQ,IAAIF,EACjF,mBAAoBltC,KAAKmmC,eAAiB,KAKxCkH,EAAM,mIACNC,EAC+B,IAAnCttC,KAAKuQ,QAAQrjB,QAAQ,UACjBmgD,EAAG,aAAmBA,EAAG,YACzBA,EAAG,YAAkBA,EAAG,WAE1BC,IACF9/C,EAAO,MAAY,CAAE+/C,OAAQD,IAG/BttC,KAAKwtC,OAAS,IAAId,GAAc1sC,KAAKuQ,QAAS,GAAI/iB,OAC7C,CACCA,EAAmC,CACvCkJ,QAAS,CACP,mBAAoBsJ,KAAKmmC,eAAiB,KAG9CnmC,KAAKwtC,OAAS,IAAId,GAAc1sC,KAAKuQ,QAAS,GAAI/iB,IAEpD,MAAOgN,GACPwF,KAAKymC,KAAK,kCACV,IAAM9wC,EAAQ6E,EAAExE,SAAWwE,EAAEC,KAK7B,OAJI9E,GACFqK,KAAKymC,KAAK9wC,QAEZqK,KAAKsnC,YAIPtnC,KAAKwtC,OAAOC,OAAS,WACnB,EAAKhH,KAAK,wBACV,EAAKD,gBAAiB,GAGxBxmC,KAAKwtC,OAAOE,QAAU,WACpB,EAAKjH,KAAK,0CACV,EAAK+G,OAAS,KACd,EAAKlG,aAGPtnC,KAAKwtC,OAAOjzC,UAAY,SAAAozC,GACtB,EAAKC,oBAAoBD,IAG3B3tC,KAAKwtC,OAAOtuC,QAAU,SAAA1E,GACpB,EAAKisC,KAAK,yCAEV,IAAM9wC,EAAS6E,EAAUxE,SAAYwE,EAAUC,KAC3C9E,GACF,EAAK8wC,KAAK9wC,GAEZ,EAAK2xC,cAOT,YAAAoB,MAAA,aAIO,EAAAM,cAAP,WACEgE,EAAoB/D,gBAAiB,GAGhC,EAAAC,YAAP,WACE,IAAI2E,GAAe,EACnB,GAAyB,qBAAdtyC,WAA6BA,UAAUuyC,UAAW,CAC3D,IACMC,EAAkBxyC,UAAUuyC,UAAUE,MADpB,kCAEpBD,GAAmBA,EAAgBrgD,OAAS,GAC1CugD,WAAWF,EAAgB,IAAM,MACnCF,GAAe,GAKrB,OACGA,GACiB,OAAlBnB,KACCM,EAAoB/D,gBAoBlB,EAAAiF,iBAAP,WAGE,OACErnC,EAAkBP,oBACsC,IAAxDO,EAAkB1M,IAAI,+BAI1B,YAAAkvC,sBAAA,WACExiC,EAAkB7K,OAAO,+BAGnB,YAAAmyC,aAAR,SAAqB1zC,GAEnB,GADAuF,KAAK8sC,OAAO9pC,KAAKvI,GACbuF,KAAK8sC,OAAOp/C,SAAWsS,KAAK+sC,YAAa,CAC3C,IAAMqB,EAAWpuC,KAAK8sC,OAAOthC,KAAK,IAClCxL,KAAK8sC,OAAS,KACd,IAAMuB,EAAWloC,WAASioC,GAG1BpuC,KAAK8mC,UAAUuH,KAQX,YAAAC,qBAAR,SAA6BC,GAC3BvuC,KAAK+sC,YAAcwB,EACnBvuC,KAAK8sC,OAAS,IASR,YAAA0B,mBAAR,SAA2B/zC,GAIzB,GAHA4N,SAAuB,OAAhBrI,KAAK8sC,OAAiB,kCAGzBryC,EAAK/M,QAAU,EAAG,CACpB,IAAM6gD,EAAat5C,OAAOwF,GAC1B,IAAKg0C,MAAMF,GAET,OADAvuC,KAAKsuC,qBAAqBC,GACnB,KAIX,OADAvuC,KAAKsuC,qBAAqB,GACnB7zC,GAOT,YAAAmzC,oBAAA,SAAoBc,GAClB,GAAoB,OAAhB1uC,KAAKwtC,OAAT,CAGA,IAAM/yC,EAAOi0C,EAAI,KAMjB,GALA1uC,KAAKumC,eAAiB9rC,EAAK/M,OAC3BsS,KAAK0mC,OAAOhF,iBAAiB,iBAAkBjnC,EAAK/M,QAEpDsS,KAAK2uC,iBAEe,OAAhB3uC,KAAK8sC,OAEP9sC,KAAKmuC,aAAa1zC,OACb,CAEL,IAAMm0C,EAAgB5uC,KAAKwuC,mBAAmB/zC,GACxB,OAAlBm0C,GACF5uC,KAAKmuC,aAAaS,MASxB,YAAAnF,KAAA,SAAKhvC,GACHuF,KAAK2uC,iBAEL,IAAMjF,EAAU9xC,YAAU6C,GAC1BuF,KAAKsmC,WAAaoD,EAAQh8C,OAC1BsS,KAAK0mC,OAAOhF,iBAAiB,aAAcgI,EAAQh8C,QAKnD,IAAMyc,EAAWH,EAAkB0/B,EA5TN,OA+TzBv/B,EAASzc,OAAS,GACpBsS,KAAK6uC,YAAY51C,OAAOkR,EAASzc,SAInC,IAAK,IAAIma,EAAI,EAAGA,EAAIsC,EAASzc,OAAQma,IACnC7H,KAAK6uC,YAAY1kC,EAAStC,KAItB,YAAAyhC,UAAR,WACEtpC,KAAKonC,WAAY,EACbpnC,KAAK6sC,iBACPiC,cAAc9uC,KAAK6sC,gBACnB7sC,KAAK6sC,eAAiB,MAGpB7sC,KAAKwtC,SACPxtC,KAAKwtC,OAAO7yC,QACZqF,KAAKwtC,OAAS,OAIV,YAAAlG,UAAR,WACOtnC,KAAKonC,YACRpnC,KAAKymC,KAAK,+BACVzmC,KAAKspC,YAGDtpC,KAAK+mC,eACP/mC,KAAK+mC,aAAa/mC,KAAKwmC,gBACvBxmC,KAAK+mC,aAAe,QAS1B,YAAApsC,MAAA,WACOqF,KAAKonC,YACRpnC,KAAKymC,KAAK,6BACVzmC,KAAKspC,cAQT,YAAAqF,eAAA,sBACEG,cAAc9uC,KAAK6sC,gBACnB7sC,KAAK6sC,eAAiBkC,aAAY,WAE5B,EAAKvB,QACP,EAAKqB,YAAY,KAEnB,EAAKF,mBAEJ5jC,KAAKI,MA1XyB,QAmY3B,YAAA0jC,YAAR,SAAoBznC,GAIlB,IACEpH,KAAKwtC,OAAO/D,KAAKriC,GACjB,MAAO5M,GACPwF,KAAKymC,KACH,0CACAjsC,EAAExE,SAAWwE,EAAEC,KACf,uBAEFnC,WAAW0H,KAAKsnC,UAAU5+B,KAAK1I,MAAO,KA/LnC,EAAAgvC,6BAA+B,EAM/B,EAAAC,eAAiB,IA4L1B,EAhYA,GCjCA,cAcE,WAAY99B,GACVnR,KAAKkvC,gBAAgB/9B,GA0DzB,OAlEE,sBAAW,mBAAc,C,IAAzB,WACE,MAAO,CAAC23B,GAAuBkE,K,gCAczB,YAAAkC,gBAAR,SAAwB/9B,G,QAChBg+B,EACJnC,IAAuBA,GAAmB,cACxCoC,EACFD,IAA0BnC,GAAoBkB,mBAYhD,GAVI/8B,EAAS3B,gBACN2/B,GACHpmC,EACE,mFAIJqmC,GAAuB,GAGrBA,EACFpvC,KAAKqvC,YAAc,CAACrC,QACf,CACL,IAAMsC,EAActvC,KAAKqvC,YAAc,G,IACvC,IAAwB,iBAAAE,EAAiBC,gBAAc,8BAAE,CAApD,IAAMC,EAAS,QACdA,GAAaA,EAAS,eACxBH,EAAWtsC,KAAKysC,I,oGAUxB,YAAAC,iBAAA,WACE,GAAI1vC,KAAKqvC,YAAY3hD,OAAS,EAC5B,OAAOsS,KAAKqvC,YAAY,GAExB,MAAM,IAAIvmC,MAAM,4BAQpB,YAAA6mC,iBAAA,WACE,OAAI3vC,KAAKqvC,YAAY3hD,OAAS,EACrBsS,KAAKqvC,YAAY,GAEjB,MAGb,EAzEA,GCqCA,cA2BE,WACSnoC,EACC0oC,EACAC,EACAvK,EACAwK,EACA7I,EACA8I,EACD1J,GAPA,KAAAn/B,KACC,KAAA0oC,YACA,KAAAC,iBACA,KAAAvK,aACA,KAAAwK,WACA,KAAA7I,gBACA,KAAA8I,UACD,KAAA1J,gBAlCT,KAAA2J,gBAAkB,EAClB,KAAAC,oBAAiC,GAWzB,KAAAC,OAAM,EAwBZlwC,KAAKymC,KAAO99B,EAAW,KAAO3I,KAAKkH,GAAK,KACxClH,KAAKmwC,kBAAoB,IAAIZ,GAAiBK,GAC9C5vC,KAAKymC,KAAK,sBACVzmC,KAAKowC,SAwdT,OAjdU,YAAAA,OAAR,sBACQC,EAAOrwC,KAAKmwC,kBAAkBT,mBACpC1vC,KAAKswC,MAAQ,IAAID,EACfrwC,KAAKuwC,mBACLvwC,KAAK4vC,UACL5vC,KAAK6vC,oBACLliD,EACAqS,KAAKqmC,eAKPrmC,KAAKwwC,0BAA4BH,EAAI,8BAAoC,EAEzE,IAAMI,EAAoBzwC,KAAK0wC,cAAc1wC,KAAKswC,OAC5CK,EAAmB3wC,KAAK4wC,iBAAiB5wC,KAAKswC,OACpDtwC,KAAK6wC,IAAM7wC,KAAKswC,MAChBtwC,KAAK8wC,IAAM9wC,KAAKswC,MAChBtwC,KAAK+wC,eAAiB,KACtB/wC,KAAKgxC,YAAa,EAQlB14C,YAAW,WAET,EAAKg4C,OAAS,EAAKA,MAAMzJ,KAAK4J,EAAmBE,KAChD5lC,KAAKI,MAAM,IAEd,IAAM8lC,EAAmBZ,EAAI,gBAAsB,EAC/CY,EAAmB,IACrBjxC,KAAKkxC,gBAAkBhlC,GAAsB,WAC3C,EAAKglC,gBAAkB,KAClB,EAAKF,aAEN,EAAKV,OACL,EAAKA,MAAM/J,cAhHiB,QAkH5B,EAAKE,KACH,wDACE,EAAK6J,MAAM/J,cACX,wCAEJ,EAAKyK,YAAa,EAClB,EAAKV,MAAMjH,yBAEX,EAAKiH,OACL,EAAKA,MAAMhK,UA5Ha,MA8HxB,EAAKG,KACH,oDACE,EAAK6J,MAAMhK,UACX,uCAKJ,EAAKG,KAAK,+CACV,EAAK9rC,YAIRoQ,KAAKI,MAAM8lC,MAQV,YAAAV,iBAAR,WACE,MAAO,KAAOvwC,KAAKkH,GAAK,IAAMlH,KAAKgwC,mBAG7B,YAAAY,iBAAR,SAAyBP,GAAzB,WACE,OAAO,SAAAc,GACDd,IAAS,EAAKC,MAChB,EAAKc,kBAAkBD,GACdd,IAAS,EAAKU,gBACvB,EAAKtK,KAAK,8BACV,EAAK4K,8BAEL,EAAK5K,KAAK,+BAKR,YAAAiK,cAAR,SAAsBL,GAAtB,WACE,OAAO,SAACr6C,GACS,IAAX,EAAKk6C,SACHG,IAAS,EAAKS,IAChB,EAAKQ,0BAA0Bt7C,GACtBq6C,IAAS,EAAKU,eACvB,EAAKQ,4BAA4Bv7C,GAEjC,EAAKywC,KAAK,gCAUlB,YAAA+K,YAAA,SAAYC,GAEV,IAAMC,EAAM,CAAEC,EAAG,IAAKrG,EAAGmG,GACzBzxC,KAAK4xC,UAAUF,IAGjB,YAAAG,qBAAA,WACM7xC,KAAK6wC,MAAQ7wC,KAAK+wC,gBAAkB/wC,KAAK8wC,MAAQ9wC,KAAK+wC,iBACxD/wC,KAAKymC,KACH,2CAA6CzmC,KAAK+wC,eAAe7K,QAEnElmC,KAAKswC,MAAQtwC,KAAK+wC,eAClB/wC,KAAK+wC,eAAiB,OAKlB,YAAAe,oBAAR,SAA4BC,GAC1B,GA/LiB,MA+LGA,EAAa,CAC/B,IAAMC,EAAMD,EAAW,EA1LV,MA2LTC,EACFhyC,KAAKiyC,6BA/LS,MAgMLD,GAEThyC,KAAKymC,KAAK,wCACVzmC,KAAK+wC,eAAep2C,QAGlBqF,KAAK6wC,MAAQ7wC,KAAK+wC,gBAClB/wC,KAAK8wC,MAAQ9wC,KAAK+wC,gBAElB/wC,KAAKrF,SAvMM,MAyMJq3C,IACThyC,KAAKymC,KAAK,0BACVzmC,KAAKkyC,8BACLlyC,KAAKiyC,gCAKH,YAAAV,4BAAR,SAAoCY,GAClC,IAAMC,EAAgBxoC,EAAW,IAAKuoC,GAChC13C,EAAgBmP,EAAW,IAAKuoC,GACtC,GAAc,MAAVC,EACFpyC,KAAK8xC,oBAAoBr3C,OACpB,IAAc,MAAV23C,EAIT,MAAM,IAAItpC,MAAM,2BAA6BspC,GAF7CpyC,KAAKiwC,oBAAoBjtC,KAAKvI,KAM1B,YAAAw3C,2BAAR,WACMjyC,KAAKkyC,6BAA+B,GACtClyC,KAAKymC,KAAK,oCACVzmC,KAAKgxC,YAAa,EAClBhxC,KAAK+wC,eAAe1H,wBACpBrpC,KAAKqyC,wBAGLryC,KAAKymC,KAAK,8BACVzmC,KAAK+wC,eAAetH,KAAK,CAAEkI,EAAG,IAAKrG,EAAG,CAAEqG,EApOjC,IAoO0CrG,EAAG,QAIhD,YAAA+G,oBAAR,WAEEryC,KAAK+wC,eAAerI,QAEpB1oC,KAAKymC,KAAK,mCACVzmC,KAAK+wC,eAAetH,KAAK,CAAEkI,EAAG,IAAKrG,EAAG,CAAEqG,EA/OzB,IA+OwCrG,EAAG,MAI1DtrC,KAAKymC,KAAK,kCACVzmC,KAAKswC,MAAM7G,KAAK,CAAEkI,EAAG,IAAKrG,EAAG,CAAEqG,EAnPV,IAmP+BrG,EAAG,MACvDtrC,KAAK6wC,IAAM7wC,KAAK+wC,eAEhB/wC,KAAK6xC,wBAGC,YAAAP,0BAAR,SAAkCa,GAEhC,IAAMC,EAAgBxoC,EAAW,IAAKuoC,GAChC13C,EAAgBmP,EAAW,IAAKuoC,GACxB,MAAVC,EACFpyC,KAAKsyC,WAAW73C,GACG,MAAV23C,GACTpyC,KAAKuyC,eAAe93C,IAIhB,YAAA83C,eAAR,SAAuBv8C,GACrBgK,KAAKwyC,qBAGLxyC,KAAKslC,WAAWtvC,IAGV,YAAAw8C,mBAAR,WACOxyC,KAAKgxC,aACRhxC,KAAKwwC,4BACDxwC,KAAKwwC,2BAA6B,IACpCxwC,KAAKymC,KAAK,kCACVzmC,KAAKgxC,YAAa,EAClBhxC,KAAKswC,MAAMjH,2BAKT,YAAAiJ,WAAR,SAAmBP,GACjB,IAAMC,EAAcpoC,EA9RH,IA8R4BmoC,GAC7C,GA9RiB,MA8RGA,EAAa,CAC/B,IAAMU,EAAUV,EAAW,EAC3B,GAvRe,MAuRXC,EACFhyC,KAAK0yC,aACHD,QAOG,GAnSY,MAmSRT,EAA0B,CACnChyC,KAAKymC,KAAK,qCACVzmC,KAAK8wC,IAAM9wC,KAAK+wC,eAChB,IAAK,IAAIlpC,EAAI,EAAGA,EAAI7H,KAAKiwC,oBAAoBviD,SAAUma,EACrD7H,KAAKuyC,eAAevyC,KAAKiwC,oBAAoBpoC,IAE/C7H,KAAKiwC,oBAAsB,GAC3BjwC,KAAK6xC,2BA/SY,MAgTRG,EAGThyC,KAAK2yC,sBAAsBF,GAlTb,MAmTLT,EAEThyC,KAAK4yC,SAASH,GApTA,MAqTLT,EACTr8C,EAAM,iBAAmB88C,GArTZ,MAsTJT,GACThyC,KAAKymC,KAAK,wBACVzmC,KAAKwyC,qBACLxyC,KAAK6yC,iCAELl9C,EAAM,mCAAqCq8C,KAUzC,YAAAU,aAAR,SAAqBI,GAMnB,IAAMC,EAAYD,EAAUpH,GACtB/pC,EAAUmxC,EAAUroC,EACpB4E,EAAOyjC,EAAUE,EACvBhzC,KAAKizC,UAAYH,EAAUpoC,EAC3B1K,KAAK4vC,UAAU1/B,WAAWb,GAEX,IAAXrP,KAAKkwC,SACPlwC,KAAKswC,MAAM5H,QACX1oC,KAAKkzC,yBAAyBlzC,KAAKswC,MAAOyC,GACtC9jC,IAAqBtN,GACvBoH,EAAK,sCAGP/I,KAAKmzC,qBAID,YAAAA,iBAAR,WACE,IAAM9C,EAAOrwC,KAAKmwC,kBAAkBR,mBAChCU,GACFrwC,KAAKozC,cAAc/C,IAIf,YAAA+C,cAAR,SAAsB/C,GAAtB,WACErwC,KAAK+wC,eAAiB,IAAIV,EACxBrwC,KAAKuwC,mBACLvwC,KAAK4vC,UACL5vC,KAAK6vC,eACL7vC,KAAKizC,WAIPjzC,KAAKkyC,4BACH7B,EAAI,8BAAoC,EAE1C,IAAMvJ,EAAY9mC,KAAK0wC,cAAc1wC,KAAK+wC,gBACpChK,EAAe/mC,KAAK4wC,iBAAiB5wC,KAAK+wC,gBAChD/wC,KAAK+wC,eAAelK,KAAKC,EAAWC,GAGpC76B,GAAsB,WAChB,EAAK6kC,iBACP,EAAKtK,KAAK,gCACV,EAAKsK,eAAep2C,WAErBoQ,KAAKI,MAhZY,OAmZd,YAAAynC,SAAR,SAAiBvjC,GACfrP,KAAKymC,KAAK,qCAAuCp3B,GACjDrP,KAAK4vC,UAAU1/B,WAAWb,GAGX,IAAXrP,KAAKkwC,OACPlwC,KAAKrF,SAGLqF,KAAKqzC,oBACLrzC,KAAKowC,WAID,YAAA8C,yBAAR,SAAiC7C,EAAiB0C,GAAlD,WACE/yC,KAAKymC,KAAK,oCACVzmC,KAAKswC,MAAQD,EACbrwC,KAAKkwC,OAAM,EAEPlwC,KAAK8vC,WACP9vC,KAAK8vC,SAASiD,EAAW/yC,KAAKizC,WAC9BjzC,KAAK8vC,SAAW,MAKqB,IAAnC9vC,KAAKwwC,2BACPxwC,KAAKymC,KAAK,kCACVzmC,KAAKgxC,YAAa,GAElB9kC,GAAsB,WACpB,EAAK2mC,kCACJ9nC,KAAKI,MA/a8B,OAmblC,YAAA0nC,8BAAR,WAEO7yC,KAAKgxC,YAAyB,IAAXhxC,KAAKkwC,SAC3BlwC,KAAKymC,KAAK,4BACVzmC,KAAK4xC,UAAU,CAAED,EAAG,IAAKrG,EAAG,CAAEqG,EAjavB,IAiagCrG,EAAG,QAItC,YAAA+F,2BAAR,WACE,IAAMhB,EAAOrwC,KAAK+wC,eAClB/wC,KAAK+wC,eAAiB,KAClB/wC,KAAK6wC,MAAQR,GAAQrwC,KAAK8wC,MAAQT,GAEpCrwC,KAAKrF,SAUD,YAAAy2C,kBAAR,SAA0BD,GACxBnxC,KAAKswC,MAAQ,KAIRa,GAA4B,IAAXnxC,KAAKkwC,OAQL,IAAXlwC,KAAKkwC,QACdlwC,KAAKymC,KAAK,8BARVzmC,KAAKymC,KAAK,+BAENzmC,KAAK4vC,UAAU5/B,oBACjBnJ,EAAkB7K,OAAO,QAAUgE,KAAK4vC,UAAUvgC,MAElDrP,KAAK4vC,UAAU//B,aAAe7P,KAAK4vC,UAAUvgC,OAMjDrP,KAAKrF,SAQC,YAAAg4C,sBAAR,SAA8BhS,GAC5B3gC,KAAKymC,KAAK,0DAENzmC,KAAK+vC,UACP/vC,KAAK+vC,QAAQpP,GACb3gC,KAAK+vC,QAAU,MAKjB/vC,KAAKinC,cAAgB,KAErBjnC,KAAKrF,SAGC,YAAAi3C,UAAR,SAAkBn3C,GAChB,GAAe,IAAXuF,KAAKkwC,OACP,KAAM,8BAENlwC,KAAK6wC,IAAIpH,KAAKhvC,IAOlB,YAAAE,MAAA,WACiB,IAAXqF,KAAKkwC,SACPlwC,KAAKymC,KAAK,gCACVzmC,KAAKkwC,OAAM,EAEXlwC,KAAKqzC,oBAEDrzC,KAAKinC,gBACPjnC,KAAKinC,gBACLjnC,KAAKinC,cAAgB,QASnB,YAAAoM,kBAAR,WACErzC,KAAKymC,KAAK,iCACNzmC,KAAKswC,QACPtwC,KAAKswC,MAAM31C,QACXqF,KAAKswC,MAAQ,MAGXtwC,KAAK+wC,iBACP/wC,KAAK+wC,eAAep2C,QACpBqF,KAAK+wC,eAAiB,MAGpB/wC,KAAKkxC,kBACPjJ,aAAajoC,KAAKkxC,iBAClBlxC,KAAKkxC,gBAAkB,OAG7B,EAhgBA,GC3CA,4BAyFA,OA7DE,YAAAoC,IAAA,SACEvmC,EACAtS,EACA8Z,EACAuE,KASF,YAAAxV,MAAA,SACEyJ,EACAtS,EACA8Z,EACAuE,KAOF,YAAA/b,iBAAA,SAAiBlI,KAOjB,YAAA0+C,gBAAA,SACExmC,EACAtS,EACA8Z,KAQF,YAAAi/B,kBAAA,SACEzmC,EACAtS,EACA8Z,KAOF,YAAAK,mBAAA,SACE7H,EACAwH,KAMF,YAAA2uB,YAAA,SAAYH,KACd,EAzFA,GCmBM0Q,GAAsB,IAuC5B,eAsDE,WACU7D,EACAC,EACA6D,EAMAC,EACAC,EACAC,EACAC,GAZV,MAcE,cAAO,KAEP,GAfQ,EAAAlE,YACA,EAAAC,iBACA,EAAA6D,gBAMA,EAAAC,mBACA,EAAAC,sBACA,EAAAC,qBACA,EAAAC,gBAhEV,EAAA5sC,GAAK6sC,EAAqBC,8BAClB,EAAAvN,KAAO99B,EAAW,KAAO,EAAKzB,GAAK,KAEnC,EAAA+sC,kBAAmD,GAE1C,EAAAC,QAGb,IAAIz6C,IACA,EAAA06C,iBAAqC,GACrC,EAAAC,qBAAuB,EACvB,EAAAC,0BAAmD,GACnD,EAAAC,YAAa,EACb,EAAAC,gBAAkBd,GAClB,EAAAe,mBAtD0B,IAuD1B,EAAAC,uBAAuD,KAC/D,EAAApO,cAA+B,KAEvB,EAAAqO,0BAA2C,KAE3C,EAAA5P,UAAoB,EAGpB,EAAA6P,eAAwD,GACxD,EAAAC,eAAiB,EAEjB,EAAAC,UAGG,KAEH,EAAAC,WAA4B,KAC5B,EAAAC,oBAAqB,EACrB,EAAAC,uBAAyB,EAEzB,EAAAC,kBAAmB,EACnB,EAAAC,2BAA4C,KAC5C,EAAAC,+BAAgD,KA+BlDrB,IAAkBvM,cACpB,MAAM,IAAIz+B,MACR,kF,OAGJ,EAAKssC,iBAAiB,GAEtBpQ,GAAkBD,cAAcxe,GAAG,UAAW,EAAK8uB,WAAY,IAEpB,IAAvCzF,EAAUvgC,KAAKniB,QAAQ,YACzBk4C,GAAcL,cAAcxe,GAAG,SAAU,EAAK+uB,UAAW,G,EAozB/D,OAp4B0C,iBAoF9B,YAAA9D,YAAV,SACE59C,EACAwD,EACAm+C,GAEA,IAAMC,IAAcx1C,KAAK40C,eAEnBlD,EAAM,CAAE5T,EAAG0X,EAAWlsC,EAAG1V,EAAQ2V,EAAGnS,GAC1C4I,KAAKymC,KAAK7uC,YAAU85C,IACpBrpC,SACErI,KAAKs0C,WACL,0DAEFt0C,KAAK60C,UAAUrD,YAAYE,GACvB6D,IACFv1C,KAAK20C,eAAea,GAAaD,IAOrC,YAAAE,OAAA,SACE7yC,EACA8yC,EACA/X,EACAppB,GAEA,IAAM0W,EAAUroB,EAAM4lB,kBAChBzb,EAAanK,EAAMmB,KAAKqC,WAC9BpG,KAAKymC,KAAK,qBAAuB15B,EAAa,IAAMke,GAC/CjrB,KAAKk0C,QAAQ7pB,IAAItd,IACpB/M,KAAKk0C,QAAQp4C,IAAIiR,EAAY,IAAItT,KAEnC4O,SACEzF,EAAMmhB,iBAAiBwc,cACpB39B,EAAMmhB,iBAAiByT,eAC1B,sDAEFnvB,UACGrI,KAAKk0C,QAAQ/5C,IAAI4S,GAAasd,IAAIY,GACnC,gDAEF,IAAM0qB,EAAyB,CAC7BphC,WAAU,EACVorB,OAAQ+V,EACR9yC,MAAK,EACL+6B,IAAG,GAEL39B,KAAKk0C,QAAQ/5C,IAAI4S,GAAajR,IAAImvB,EAAS0qB,GAEvC31C,KAAKs0C,YACPt0C,KAAK41C,YAAYD,IAIb,YAAAC,YAAR,SAAoBD,GAApB,WACQ/yC,EAAQ+yC,EAAW/yC,MACnBmK,EAAanK,EAAMmB,KAAKqC,WACxB6kB,EAAUroB,EAAM4lB,kBACtBxoB,KAAKymC,KAAK,aAAe15B,EAAa,QAAUke,GAChD,IAAM4qB,EAAgC,CAAWv2C,EAAGyN,GAKhD4oC,EAAWhY,MACbkY,EAAG,EAAQjzC,EAAM0lB,cACjButB,EAAG,EAAQF,EAAWhY,KAGxBkY,EAAG,EAAiBF,EAAWhW,SAE/B3/B,KAAKwxC,YAVU,IAUUqE,GAAK,SAAC7/C,GAC7B,IAAMy8C,EAAmBz8C,EAAO,EAC1BE,EAASF,EAAO,EAGtB+9C,EAAqB+B,sBAAsBrD,EAAS7vC,IAGlD,EAAKsxC,QAAQ/5C,IAAI4S,IACjB,EAAKmnC,QAAQ/5C,IAAI4S,GAAa5S,IAAI8wB,MAEV0qB,IACxB,EAAKlP,KAAK,kBAAmBzwC,GAEd,OAAXE,GACF,EAAK6/C,cAAchpC,EAAYke,GAG7B0qB,EAAWphC,YACbohC,EAAWphC,WAAWre,EAAQu8C,QAMvB,EAAAqD,sBAAf,SAAqCrD,EAAkB7vC,GACrD,GAAI6vC,GAA8B,kBAAZA,GAAwBlsC,WAASksC,EAAS,KAAM,CAEpE,IAAMuD,EAAWr3B,UAAQ8zB,EAAgB,KACzC,GAAI7zC,MAAM8F,QAAQsxC,KAAcA,EAAS9oD,QAAQ,YAAa,CAC5D,IAAM+oD,EACJ,gBAAkBrzC,EAAMmhB,iBAAiBC,WAAW5d,WAAa,IAC7D8vC,EAAYtzC,EAAMmB,KAAKqC,WAC7B2C,EACE,wGAC6CktC,EAAS,OACjDC,EAAS,sDAStB,YAAAn5C,iBAAA,SAAiBlI,GACfmL,KAAK80C,WAAajgD,EAClBmL,KAAKymC,KAAK,wBACNzmC,KAAK80C,WACP90C,KAAKm2C,UAIDn2C,KAAKs0C,YACPt0C,KAAKwxC,YAAY,SAAU,IAAI,eAInCxxC,KAAKo2C,uCAAuCvhD,IAGtC,YAAAuhD,uCAAR,SAA+CC,IAGpBA,GAAoC,KAAtBA,EAAW3oD,QAC1B4oD,UAAQD,MAC9Br2C,KAAKymC,KACH,iEAEFzmC,KAAKw0C,mBAvQ4B,MA+QrC,YAAA2B,QAAA,sBACE,GAAIn2C,KAAKs0C,YAAct0C,KAAK80C,WAAY,CACtC,IAAM,EAAQ90C,KAAK80C,WACbyB,EAAaC,gBAAc,GAAS,OAAS,QAC7CC,EAAwC,CAAEC,KAAM,GAC3B,OAAvB12C,KAAK8zC,cACP2C,EAAW,QAAa,EACe,kBAAvBz2C,KAAK8zC,gBACrB2C,EAAW,QAAcz2C,KAAK8zC,eAEhC9zC,KAAKwxC,YACH+E,EACAE,GACA,SAACE,GACC,IAAMzgD,EAASygD,EAAG,EACZl8C,EAAQk8C,EAAG,GAA6B,QAE1C,EAAK7B,aAAe,IACP,OAAX5+C,EACF,EAAK8+C,uBAAyB,EAG9B,EAAK4B,eAAe1gD,EAAQuE,SAWxC,YAAAo8C,SAAA,SAASj0C,EAAc+6B,GACrB,IAAM5wB,EAAanK,EAAMmB,KAAKqC,WACxB6kB,EAAUroB,EAAM4lB,kBAEtBxoB,KAAKymC,KAAK,uBAAyB15B,EAAa,IAAMke,GAEtD5iB,SACEzF,EAAMmhB,iBAAiBwc,cACpB39B,EAAMmhB,iBAAiByT,eAC1B,wDAEax3B,KAAK+1C,cAAchpC,EAAYke,IAChCjrB,KAAKs0C,YACjBt0C,KAAK82C,cAAc/pC,EAAYke,EAASroB,EAAM0lB,cAAeqV,IAIzD,YAAAmZ,cAAR,SACE/pC,EACAke,EACA8rB,EACApZ,GAEA39B,KAAKymC,KAAK,eAAiB15B,EAAa,QAAUke,GAElD,IAAM4qB,EAAgC,CAAWv2C,EAAGyN,GAGhD4wB,IACFkY,EAAG,EAAQkB,EACXlB,EAAG,EAAQlY,GAGb39B,KAAKwxC,YAPU,IAOUqE,IAM3B,YAAAtC,gBAAA,SACExmC,EACAtS,EACA8Z,GAEIvU,KAAKs0C,WACPt0C,KAAKg3C,kBAAkB,IAAKjqC,EAAYtS,EAAM8Z,GAE9CvU,KAAKq0C,0BAA0BrxC,KAAK,CAClC+J,WAAU,EACVnZ,OAAQ,IACR6G,KAAI,EACJ8Z,WAAU,KAQhB,YAAAi/B,kBAAA,SACEzmC,EACAtS,EACA8Z,GAEIvU,KAAKs0C,WACPt0C,KAAKg3C,kBAAkB,KAAMjqC,EAAYtS,EAAM8Z,GAE/CvU,KAAKq0C,0BAA0BrxC,KAAK,CAClC+J,WAAU,EACVnZ,OAAQ,KACR6G,KAAI,EACJ8Z,WAAU,KAQhB,YAAAK,mBAAA,SACE7H,EACAwH,GAEIvU,KAAKs0C,WACPt0C,KAAKg3C,kBAAkB,KAAMjqC,EAAY,KAAMwH,GAE/CvU,KAAKq0C,0BAA0BrxC,KAAK,CAClC+J,WAAU,EACVnZ,OAAQ,KACR6G,KAAM,KACN8Z,WAAU,KAKR,YAAAyiC,kBAAR,SACEpjD,EACAmZ,EACAtS,EACA8Z,GAEA,IAAM9c,EAAU,CAAW6H,EAAGyN,EAAqBu+B,EAAG7wC,GACtDuF,KAAKymC,KAAK,gBAAkB7yC,EAAQ6D,GACpCuI,KAAKwxC,YAAY59C,EAAQ6D,GAAS,SAAC7C,GAC7B2f,GACFjc,YAAW,WACTic,EACE3f,EAAQ,EACRA,EAAQ,KAETmW,KAAKI,MAAM,QAQpB,YAAAmoC,IAAA,SACEvmC,EACAtS,EACA8Z,EACAuE,GAEA9Y,KAAKi3C,YAAY,IAAKlqC,EAAYtS,EAAM8Z,EAAYuE,IAMtD,YAAAxV,MAAA,SACEyJ,EACAtS,EACA8Z,EACAuE,GAEA9Y,KAAKi3C,YAAY,IAAKlqC,EAAYtS,EAAM8Z,EAAYuE,IAGtD,YAAAm+B,YAAA,SACErjD,EACAmZ,EACAtS,EACA8Z,EACAuE,GAEA,IAAMrhB,EAAoC,CAC/B6H,EAAGyN,EACHu+B,EAAG7wC,QAGD9M,IAATmrB,IACFrhB,EAAO,EAAiBqhB,GAI1B9Y,KAAKm0C,iBAAiBnxC,KAAK,CACzBpP,OAAM,EACN6D,QAAO,EACP8c,WAAU,IAGZvU,KAAKo0C,uBACL,IAAM7zC,EAAQP,KAAKm0C,iBAAiBzmD,OAAS,EAEzCsS,KAAKs0C,WACPt0C,KAAKk3C,SAAS32C,GAEdP,KAAKymC,KAAK,kBAAoB15B,IAI1B,YAAAmqC,SAAR,SAAiB32C,GAAjB,WACQ3M,EAASoM,KAAKm0C,iBAAiB5zC,GAAO3M,OACtC6D,EAAUuI,KAAKm0C,iBAAiB5zC,GAAO9I,QACvC8c,EAAavU,KAAKm0C,iBAAiB5zC,GAAOgU,WAChDvU,KAAKm0C,iBAAiB5zC,GAAO42C,OAASn3C,KAAKs0C,WAE3Ct0C,KAAKwxC,YAAY59C,EAAQ6D,GAAS,SAACzB,GACjC,EAAKywC,KAAK7yC,EAAS,YAAaoC,UAEzB,EAAKm+C,iBAAiB5zC,GAC7B,EAAK6zC,uBAG6B,IAA9B,EAAKA,uBACP,EAAKD,iBAAmB,IAGtB5/B,GACFA,EACEve,EAAO,EACPA,EAAO,OASf,YAAAktC,YAAA,SAAYH,GAAZ,WAEE,GAAI/iC,KAAKs0C,WAAY,CACnB,IAAM78C,EAAU,CAAe2S,EAAG24B,GAClC/iC,KAAKymC,KAAK,cAAehvC,GAEzBuI,KAAKwxC,YAAsB,IAAK/5C,GAAS,SAAAT,GAEvC,GAAe,OADAA,EAAM,EACA,CACnB,IAAMogD,EAAcpgD,EAAM,EAC1B,EAAKyvC,KAAK,cAAe,wBAA0B2Q,SAMnD,YAAA7E,eAAR,SAAuBv8C,GACrB,GAAI,MAAOA,EAAS,CAElBgK,KAAKymC,KAAK,gBAAkB7uC,YAAU5B,IACtC,IAAMqhD,EAASrhD,EAAO,EAChBu/C,EAAav1C,KAAK20C,eAAe0C,GACnC9B,WACKv1C,KAAK20C,eAAe0C,GAC3B9B,EAAWv/C,EAAO,QAEf,IAAI,UAAWA,EACpB,KAAM,qCAAuCA,EAAO,MAC3C,MAAOA,GAEhBgK,KAAKs3C,YAAYthD,EAAO,EAAiBA,EAAO,KAI5C,YAAAshD,YAAR,SAAoB1jD,EAAgBwD,GAClC4I,KAAKymC,KAAK,sBAAuB7yC,EAAQwD,GAC1B,MAAXxD,EACFoM,KAAK0zC,cACHt8C,EAAI,EACJA,EAAI,GACQ,EACZA,EAAI,GAEc,MAAXxD,EACToM,KAAK0zC,cACHt8C,EAAI,EACJA,EAAI,GACS,EACbA,EAAI,GAEc,MAAXxD,EACToM,KAAKu3C,iBACHngD,EAAI,EACJA,EAAI,GAEc,OAAXxD,EACToM,KAAK42C,eACHx/C,EAAI,EACJA,EAAI,GAEc,OAAXxD,EACToM,KAAKw3C,uBAAuBpgD,GAE5BzB,EACE,6CACEiC,YAAUhE,GACV,uCAKA,YAAAk8C,SAAR,SAAiBiD,EAAmBE,GAClCjzC,KAAKymC,KAAK,oBACVzmC,KAAKs0C,YAAa,EAClBt0C,KAAKm1C,gCAAiC,IAAI//C,MAAOqiD,UACjDz3C,KAAK03C,iBAAiB3E,GACtB/yC,KAAKqmC,cAAgB4M,EACjBjzC,KAAKi1C,kBACPj1C,KAAK23C,oBAEP33C,KAAK43C,gBACL53C,KAAKi1C,kBAAmB,EACxBj1C,KAAK2zC,kBAAiB,IAGhB,YAAAyB,iBAAR,SAAyBhpC,GAAzB,WACE/D,UACGrI,KAAK60C,UACN,0DAGE70C,KAAK00C,2BACPzM,aAAajoC,KAAK00C,2BAMpB10C,KAAK00C,0BAA4Bp8C,YAAW,WAC1C,EAAKo8C,0BAA4B,KACjC,EAAKmD,yBAEJ9sC,KAAKI,MAAMiB,KAGR,YAAAipC,WAAR,SAAmB5a,GAGfA,IACCz6B,KAAK8kC,UACN9kC,KAAKu0C,kBAAoBv0C,KAAKw0C,qBAE9Bx0C,KAAKymC,KAAK,2CACVzmC,KAAKu0C,gBAAkBd,GAElBzzC,KAAK60C,WACR70C,KAAKo1C,iBAAiB,IAG1Bp1C,KAAK8kC,SAAWrK,GAGV,YAAA6a,UAAR,SAAkBwC,GACZA,GACF93C,KAAKymC,KAAK,wBACVzmC,KAAKu0C,gBAAkBd,GAClBzzC,KAAK60C,WACR70C,KAAKo1C,iBAAiB,KAGxBp1C,KAAKymC,KAAK,8CACNzmC,KAAK60C,WACP70C,KAAK60C,UAAUl6C,UAKb,YAAAo9C,sBAAR,WAWE,GAVA/3C,KAAKymC,KAAK,4BACVzmC,KAAKs0C,YAAa,EAClBt0C,KAAK60C,UAAY,KAGjB70C,KAAKg4C,0BAGLh4C,KAAK20C,eAAiB,GAElB30C,KAAKi4C,mBAAoB,CAC3B,GAAKj4C,KAAK8kC,UAIH,GAAI9kC,KAAKm1C,+BAAgC,EAG5C,IAAI//C,MAAOqiD,UAAYz3C,KAAKm1C,+BAnpBA,MAqpB5Bn1C,KAAKu0C,gBAAkBd,IAEzBzzC,KAAKm1C,+BAAiC,WAVtCn1C,KAAKymC,KAAK,8CACVzmC,KAAKu0C,gBAAkBv0C,KAAKw0C,mBAC5Bx0C,KAAKk1C,4BAA6B,IAAI9/C,MAAOqiD,UAW/C,IAAMS,GACJ,IAAI9iD,MAAOqiD,UAAYz3C,KAAKk1C,2BAC1BiD,EAAiBptC,KAAK0D,IACxB,EACAzO,KAAKu0C,gBAAkB2D,GAEzBC,EAAiBptC,KAAK+K,SAAWqiC,EAEjCn4C,KAAKymC,KAAK,0BAA4B0R,EAAiB,MACvDn4C,KAAKo1C,iBAAiB+C,GAGtBn4C,KAAKu0C,gBAAkBxpC,KAAKG,IAC1BlL,KAAKw0C,mBAxqBsB,IAyqB3Bx0C,KAAKu0C,iBAGTv0C,KAAK2zC,kBAAiB,IAGhB,YAAAkE,qBAAR,sBACE,GAAI73C,KAAKi4C,mBAAoB,CAC3Bj4C,KAAKymC,KAAK,+BACVzmC,KAAKk1C,4BAA6B,IAAI9/C,MAAOqiD,UAC7Cz3C,KAAKm1C,+BAAiC,KACtC,IAAM,EAAgBn1C,KAAKuyC,eAAe7pC,KAAK1I,MACzC,EAAUA,KAAK8vC,SAASpnC,KAAK1I,MAC7B,EAAeA,KAAK+3C,sBAAsBrvC,KAAK1I,MAC/C,EAASA,KAAKkH,GAAK,IAAM6sC,EAAqBqE,oBAC9C,EAAOp4C,KACP,EAAgBA,KAAKqmC,cACvB,GAAW,EACX,EAAgC,KAC9B,EAAU,WACV,EACF,EAAW1rC,SAEX,GAAW,EACX,MAWJqF,KAAK60C,UAAY,CACfl6C,MAAO,EACP62C,YAVoB,SAAUE,GAC9BrpC,SACE,EACA,0DAEF,EAAWmpC,YAAYE,KAQzB,IAAMz0C,EAAe+C,KAAK+0C,mBAC1B/0C,KAAK+0C,oBAAqB,EAG1B/0C,KAAK6zC,mBACFwE,SAASp7C,GACTuC,MAAK,SAAAxI,GACC,EAiBHyR,EAAI,0CAhBJA,EAAI,8CACJ,EAAKqsC,WAAa99C,GAAUA,EAAOshD,YACnC,EAAa,IAAIC,GACf,EACA,EAAK3I,UACL,EAAKC,eACL,EACA,EACA,GACc,SAAAlP,GACZ53B,EAAK43B,EAAS,KAAO,EAAKiP,UAAUxpC,WAAa,KACjD,EAAKoyC,UAluBgB,iBAouBvB,OAMLh5C,KAAK,MAAM,SAAA7J,GACV,EAAK8wC,KAAK,wBAA0B9wC,GAC/B,IACC,EAAKi6C,UAAUngC,WAIjB1G,EAAKpT,GAEP,UAMV,YAAA6iD,UAAA,SAAU7X,GACRl4B,EAAI,uCAAyCk4B,GAC7C3gC,KAAKi0C,kBAAkBtT,IAAU,EAC7B3gC,KAAK60C,UACP70C,KAAK60C,UAAUl6C,SAEXqF,KAAK00C,4BACPzM,aAAajoC,KAAK00C,2BAClB10C,KAAK00C,0BAA4B,MAE/B10C,KAAKs0C,YACPt0C,KAAK+3C,0BAKX,YAAAU,OAAA,SAAO9X,GACLl4B,EAAI,mCAAqCk4B,UAClC3gC,KAAKi0C,kBAAkBtT,GAC1BnzB,UAAQxN,KAAKi0C,qBACfj0C,KAAKu0C,gBAAkBd,GAClBzzC,KAAK60C,WACR70C,KAAKo1C,iBAAiB,KAKpB,YAAAsC,iBAAR,SAAyB3E,GACvB,IAAMppB,EAAQopB,GAAY,IAAI39C,MAAOqiD,UACrCz3C,KAAK4zC,oBAAoB,CAAE8E,iBAAkB/uB,KAGvC,YAAAquB,wBAAR,WACE,IAAK,IAAInwC,EAAI,EAAGA,EAAI7H,KAAKm0C,iBAAiBzmD,OAAQma,IAAK,CACrD,IAAMyrC,EAAMtzC,KAAKm0C,iBAAiBtsC,GAC9ByrC,GAAgB,MAAOA,EAAI77C,SAAW67C,EAAI6D,SACxC7D,EAAI/+B,YACN++B,EAAI/+B,WAAW,qBAGVvU,KAAKm0C,iBAAiBtsC,GAC7B7H,KAAKo0C,wBAKyB,IAA9Bp0C,KAAKo0C,uBACPp0C,KAAKm0C,iBAAmB,KAIpB,YAAAoD,iBAAR,SAAyBxqC,EAAoBnK,GAE3C,IAAIqoB,EAIFA,EAHGroB,EAGOA,EAAM4c,KAAI,SAAAm5B,GAAK,OAAA9uC,EAAkB8uC,MAAIntC,KAAK,KAF1C,UAIZ,IAAMiqC,EAASz1C,KAAK+1C,cAAchpC,EAAYke,GAC1CwqB,GAAUA,EAAOlhC,YACnBkhC,EAAOlhC,WAAW,sBAId,YAAAwhC,cAAR,SAAsBhpC,EAAoBke,GACxC,IACIwqB,EADEmD,EAAuB,IAAIlsC,EAAKK,GAAY3G,WAElD,GAAIpG,KAAKk0C,QAAQ7pB,IAAIuuB,GAAuB,CAC1C,IAAMp5B,EAAMxf,KAAKk0C,QAAQ/5C,IAAIy+C,GAC7BnD,EAASj2B,EAAIrlB,IAAI8wB,GACjBzL,EAAIlhB,OAAO2sB,GACM,IAAbzL,EAAI9kB,MACNsF,KAAKk0C,QAAQ51C,OAAOs6C,QAItBnD,OAAS9nD,EAEX,OAAO8nD,GAGD,YAAAmB,eAAR,SAAuBiC,EAAoBC,GACzCrwC,EAAI,uBAAyBowC,EAAa,IAAMC,GAChD94C,KAAK80C,WAAa,KAClB90C,KAAK+0C,oBAAqB,EAC1B/0C,KAAK60C,UAAUl6C,QACI,kBAAfk+C,GAAiD,sBAAfA,IAIpC74C,KAAKg1C,yBACDh1C,KAAKg1C,wBAl1BsB,IAo1B7Bh1C,KAAKu0C,gBA11B0B,IA81B/Bv0C,KAAK6zC,mBAAmBkF,2BAKtB,YAAAvB,uBAAR,SAA+BpgD,GACzB4I,KAAKy0C,uBACPz0C,KAAKy0C,uBAAuBr9C,GAExB,QAASA,GACXqH,QAAQgK,IACN,aAAgBrR,EAAI,IAAmBlC,QAAQ,KAAM,kBAMrD,YAAA0iD,cAAR,W,YAEE53C,KAAKm2C,U,IAIL,IAAsB,iBAAAn2C,KAAKk0C,QAAQrjB,UAAQ,8BAAE,CAAxC,IAAMsP,EAAO,Q,IAChB,IAAyB,2BAAAA,EAAQtP,WAAQ,8BAAE,CAAtC,IAAM8kB,EAAU,QACnB31C,KAAK41C,YAAYD,I,oMAIrB,IAAK,IAAI9tC,EAAI,EAAGA,EAAI7H,KAAKm0C,iBAAiBzmD,OAAQma,IAC5C7H,KAAKm0C,iBAAiBtsC,IACxB7H,KAAKk3C,SAASrvC,GAIlB,KAAO7H,KAAKq0C,0BAA0B3mD,QAAQ,CAC5C,IAAM+J,EAAUuI,KAAKq0C,0BAA0B7I,QAC/CxrC,KAAKg3C,kBACHv/C,EAAQ7D,OACR6D,EAAQsV,WACRtV,EAAQgD,KACRhD,EAAQ8c,cAQN,YAAAojC,kBAAR,WACE,IAAM5U,EAAiC,GAEnCiW,EAAa,KACbzR,gBAEAyR,EADEh5C,KAAK4vC,UAAUngC,UACJ,aAEA,QAIjBszB,EAAM,OAASiW,EAAa,IAAMvM,GAAYv3C,QAAQ,MAAO,MAAQ,EAEjEiwC,oBACFpC,EAAM,qBAAuB,EACpBkW,oBACTlW,EAAM,yBAA2B,GAEnC/iC,KAAKkjC,YAAYH,IAGX,YAAAkV,iBAAR,WACE,IAAMH,EAAS1S,GAAcL,cAAcM,kBAC3C,OAAO73B,UAAQxN,KAAKi0C,oBAAsB6D,GAz1B7B,EAAA9D,4BAA8B,EAK9B,EAAAoE,kBAAoB,EAs1BrC,EAp4BA,CAA0Cc,ICrD1C,eAwCE,WACUtJ,EACA8D,EAMAG,GARV,MAUE,cAAO,K,OATC,EAAAjE,YACA,EAAA8D,gBAMA,EAAAG,qBA1CF,EAAApN,KAAqC99B,EAAW,WAQhD,EAAAwwC,SAAoC,G,EAkL9C,OAhMwC,iBACtC,YAAAjW,YAAA,SAAYH,GACV,MAAM,IAAIj6B,MAAM,4BAoBX,EAAAswC,aAAP,SAAoBx2C,EAAc+6B,GAChC,YAAYhwC,IAARgwC,EACK,OAASA,GAEhBt1B,SACEzF,EAAMmhB,iBAAiBwc,YACvB,kDAEK39B,EAAMmB,KAAKqC,aAwBtB,YAAAqvC,OAAA,SACE7yC,EACA8yC,EACA/X,EACAppB,GAJF,WAMQxH,EAAanK,EAAMmB,KAAKqC,WAC9BpG,KAAKymC,KACH,qBAAuB15B,EAAa,IAAMnK,EAAM4lB,mBAIlD,IAAM6wB,EAAWC,EAAmBF,aAAax2C,EAAO+6B,GAClD4b,EAAa,GACnBv5C,KAAKm5C,SAASE,GAAYE,EAE1B,IAAMC,EAAwB52C,EAC3BmhB,iBACA01B,8BAEHz5C,KAAK05C,aACH3sC,EAAa,QACbysC,GACA,SAAC7jD,EAAOqB,GACN,IAAIyD,EAAOzD,GAEG,MAAVrB,IACF8E,EAAO,KACP9E,EAAQ,MAGI,OAAVA,GACF,EAAK+9C,cAAc3mC,EAAYtS,GAAmB,EAAOkjC,GAGvDhf,UAAQ,EAAKw6B,SAAUE,KAAcE,IAUvChlC,EARK5e,EAEgB,MAAVA,EACA,oBAEA,cAAgBA,EAJhB,KAOQ,UAO3B,YAAAkhD,SAAA,SAASj0C,EAAc+6B,GACrB,IAAM0b,EAAWC,EAAmBF,aAAax2C,EAAO+6B,UACjD39B,KAAKm5C,SAASE,IAIvB,YAAAt8C,iBAAA,SAAiBlI,KAaT,YAAA6kD,aAAR,SACE3sC,EACAysC,EACAp/C,GAHF,gBAEE,IAAAo/C,MAAA,IAGAA,EAAqB,OAAa,SAElCx5C,KAAK6zC,mBACFwE,UAA2B,GAC3B74C,MAAK,SAAAm6C,GACJ,IAAM1hD,EAAY0hD,GAAiBA,EAAcrB,YAC7CrgD,IACFuhD,EAAqB,KAAWvhD,GAGlC,IAAM6zC,GACH,EAAK8D,UAAUtgC,OAAS,WAAa,WACtC,EAAKsgC,UAAUvgC,KACftC,EAFA,OAKA,EAAK6iC,UAAUrgC,UACfqqC,cAAYJ,GAEd,EAAK/S,KAAK,4BAA8BqF,GACxC,IAAM+N,EAAM,IAAIC,eAChBD,EAAIvN,mBAAqB,WACvB,GAAIlyC,GAA+B,IAAnBy/C,EAAIrS,WAAkB,CACpC,EAAKf,KACH,qBAAuBqF,EAAM,qBAC7B+N,EAAI3jD,OACJ,YACA2jD,EAAIE,cAEN,IAAIpD,EAAM,KACV,GAAIkD,EAAI3jD,QAAU,KAAO2jD,EAAI3jD,OAAS,IAAK,CACzC,IACEygD,EAAMxwC,WAAS0zC,EAAIE,cACnB,MAAOv/C,GACPuO,EACE,qCACE+iC,EACA,KACA+N,EAAIE,cAGV3/C,EAAS,KAAMu8C,QAGI,MAAfkD,EAAI3jD,QAAiC,MAAf2jD,EAAI3jD,QAC5B6S,EACE,sCACE+iC,EACA,YACA+N,EAAI3jD,QAGVkE,EAASy/C,EAAI3jD,QAEfkE,EAAW,OAIfy/C,EAAIhT,KAAK,MAAOiF,GAAuB,GACvC+N,EAAIpQ,WAGZ,EAhMA,CAAwCyP,ICoBlCc,GAAmB,iBAKzB,cA0BE,WACSpK,EACPqK,EACOC,EACPC,GAJF,WAQE,GAPO,KAAAvK,YAEA,KAAAsK,MA5BT,KAAAE,gBAAkB,EAKV,KAAAzX,eAAuC,KACvC,KAAA0X,YAAc,IAAIC,GAClB,KAAAC,aAAe,EAOf,KAAAC,6BAEG,KAIH,KAAAvT,cAAgB,IAAIzc,GAG5B,KAAAiwB,sBAAqD,KAQnDz6C,KAAK0mC,OAASC,GAAa9E,cAAc+N,GAErCqK,IlE0hBe,kBAAXnqD,QACNA,OAAM,WACNA,OAAM,UAAN,WACF,IAOU4qD,OACR,6FACG,EkEriBH16C,KAAKyiC,QAAU,IAAI6W,GACjBt5C,KAAK4vC,UACL5vC,KAAK0zC,cAAchrC,KAAK1I,MACxBm6C,GAIF7hD,WAAW0H,KAAK2zC,iBAAiBjrC,KAAK1I,MAAM,GAAO,OAC9C,CACL,IAAM26C,EAAeT,EAAI1sD,QAAJ,6BAErB,GAA4B,qBAAjBmtD,GAAiD,OAAjBA,EAAuB,CAChE,GAA4B,kBAAjBA,EACT,MAAM,IAAI7xC,MACR,sEAGJ,IACElR,YAAU+iD,GACV,MAAOngD,GACP,MAAM,IAAIsO,MAAM,kCAAoCtO,IAIxDwF,KAAKy6C,sBAAwB,IAAI1G,GAC/B/zC,KAAK4vC,UACLsK,EAAI1sD,QAAQ8J,MACZ0I,KAAK0zC,cAAchrC,KAAK1I,MACxBA,KAAK2zC,iBAAiBjrC,KAAK1I,MAC3BA,KAAK4zC,oBAAoBlrC,KAAK1I,MAC9Bm6C,EACAQ,GAGF36C,KAAKyiC,QAAUziC,KAAKy6C,sBAGtBN,EAAkBS,wBAAuB,SAAA/lD,GACvC,EAAK4tC,QAAQ1lC,iBAAiBlI,MAKhCmL,KAAK66C,eAAiBlU,GAAa1E,oBACjC2N,GACA,WAAM,WAAIkL,GAAc,EAAKpU,OAAQ,EAAKjE,YAG5CziC,KAAK+6C,oBAGL/6C,KAAKg7C,UAAY,IAAIC,GACrBj7C,KAAKk7C,cAAgB,IAAInd,GAAS,CAChCyB,eAAgB,SAAC58B,EAAO+6B,EAAK+X,EAAenhC,GAC1C,IAAI4mC,EAAsB,GACpBplC,EAAO,EAAKilC,UAAU5sB,QAAQxrB,EAAMmB,MAY1C,OATKgS,EAAKvI,YACR2tC,EAAa,EAAKD,cAAc3d,qBAC9B36B,EAAMmB,KACNgS,GAEFzd,YAAW,WACTic,EAAW,QACV,IAEE4mC,GAETvb,cAAe,eAEjB5/B,KAAKo7C,YAAY,aAAa,GAE9Bp7C,KAAKq7C,gBAAkB,IAAItd,GAAS,CAClCyB,eAAgB,SAAC58B,EAAO+6B,EAAK+X,EAAenhC,GAM1C,OALA,EAAKkuB,QAAQgT,OAAO7yC,EAAO8yC,EAAe/X,GAAK,SAACznC,EAAQuE,GACtD,IAAMs7B,EAASxhB,EAAWre,EAAQuE,GAClC,EAAK4/C,YAAYzW,0BAA0BhhC,EAAMmB,KAAMgyB,MAGlD,IAET6J,cAAe,SAACh9B,EAAO+6B,GACrB,EAAK8E,QAAQoU,SAASj0C,EAAO+6B,MAsdrC,OA9cE,YAAAv3B,SAAA,WACE,OACGpG,KAAK4vC,UAAUtgC,OAAS,WAAa,WAAatP,KAAK4vC,UAAUvgC,MAOtE,YAAAzhB,KAAA,WACE,OAAOoS,KAAK4vC,UAAUrgC,WAMxB,YAAA+rC,WAAA,WACE,IAGMC,EAHav7C,KAAKg7C,UAAU5sB,QAChC,IAAI1hB,EAAK,2BAEgBzM,OAAoB,EAC/C,OAAO,IAAI7K,MAAOqiD,UAAY8D,GAMhC,YAAAC,qBAAA,WACE,OvC/HF3qB,GAJAA,EuCmI4B,CACxBkiB,UAAW/yC,KAAKs7C,gBvChID,IACb,UAAgBzqB,EAAM,YAAiB,IAAIz7B,MAAOqiD,UACjD5mB,EAPyB,IAChCA,GuC2IQ,YAAA6iB,cAAR,SACE3mC,EACAtS,EACAghD,EACA9d,GAGA39B,KAAKo6C,kBACL,IAAMr2C,EAAO,IAAI2I,EAAKK,GACtBtS,EAAOuF,KAAKw6C,6BACRx6C,KAAKw6C,6BAA6BztC,EAAYtS,GAC9CA,EACJ,IAAIs7B,EAAS,GACb,GAAI4H,EACF,GAAI8d,EAAS,CACX,IAAMC,EAAiBl8B,MACrB/kB,GACA,SAACkhD,GAAiB,UAAaA,MAEjC5lB,EAAS/1B,KAAKq7C,gBAAgBld,sBAC5Bp6B,EACA23C,EACA/d,OAEG,CACL,IAAMie,EAAazkC,GAAa1c,GAChCs7B,EAAS/1B,KAAKq7C,gBAAgB3d,0BAC5B35B,EACA63C,EACAje,QAGC,GAAI8d,EAAS,CAClB,IAAM7mB,EAAkBpV,MACtB/kB,GACA,SAACkhD,GAAiB,UAAaA,MAEjC5lB,EAAS/1B,KAAKq7C,gBAAgB7d,iBAAiBz5B,EAAM6wB,OAChD,CACL,IAAMvS,EAAOlL,GAAa1c,GAC1Bs7B,EAAS/1B,KAAKq7C,gBAAgB9d,qBAAqBx5B,EAAMse,GAE3D,IAAI2N,EAAejsB,EACfgyB,EAAOroC,OAAS,IAGlBsiC,EAAehwB,KAAK67C,mBAAmB93C,IAEzC/D,KAAKq6C,YAAYzW,0BAA0B5T,EAAc+F,IAI3D,YAAA+lB,qBAAA,SAAqB1hD,GACnB4F,KAAKw6C,6BAA+BpgD,GAG9B,YAAAu5C,iBAAR,SAAyBoI,GACvB/7C,KAAKo7C,YAAY,YAAaW,IACR,IAAlBA,GACF/7C,KAAKg8C,0BAID,YAAApI,oBAAR,SAA4Bpa,GAA5B,WACElvB,EAAKkvB,GAAS,SAAC7/B,EAAa9G,GAC1B,EAAKuoD,YAAYzhD,EAAK9G,OAIlB,YAAAuoD,YAAR,SAAoBruC,EAAoBla,GACtC,IAAMkR,EAAO,IAAI2I,EAAK,UAAYK,GAC5BuJ,EAAUa,GAAatkB,GAC7BmN,KAAKg7C,UAAUzZ,eAAex9B,EAAMuS,GACpC,IAAMyf,EAAS/1B,KAAKk7C,cAAc3d,qBAAqBx5B,EAAMuS,GAC7DtW,KAAKq6C,YAAYzW,0BAA0B7/B,EAAMgyB,IAG3C,YAAAkmB,gBAAR,WACE,OAAOj8C,KAAKu6C,gBAGd,YAAAvlC,gBAAA,SACEjR,EACAm4C,EACA97B,EACA7L,GAJF,WAMEvU,KAAKymC,KAAK,MAAO,CACf1iC,KAAMA,EAAKqC,WACXvT,MAAOqpD,EACPrpC,SAAUuN,IAKZ,IAAMiJ,EAAerpB,KAAKw7C,uBACpBW,EAAoBhlC,GAAa+kC,EAAQ97B,GACzCqJ,EAAWzpB,KAAKq7C,gBAAgBnyB,uBAAuBnlB,GACvDuS,EAAUyT,GACdoyB,EACA1yB,EACAJ,GAGImR,EAAUx6B,KAAKi8C,kBACflmB,EAAS/1B,KAAKq7C,gBAAgBne,mBAClCn5B,EACAuS,EACAkkB,GACA,GAEFx6B,KAAKq6C,YAAYhX,YAAYtN,GAC7B/1B,KAAKyiC,QAAQ6Q,IACXvvC,EAAKqC,WACL+1C,EAAkBl8C,KAAgB,IAClC,SAAC/J,EAAQkhD,GACP,IAAMgF,EAAqB,OAAXlmD,EACXkmD,GACHrzC,EAAK,UAAYhF,EAAO,YAAc7N,GAGxC,IAAMmmD,EAAc,EAAKhB,gBAAgB1oB,aACvC6H,GACC4hB,GAEH,EAAK/B,YAAYzW,0BAA0B7/B,EAAMs4C,GACjD,EAAKC,uBAAuB/nC,EAAYre,EAAQkhD,MAGpD,IAAMpnB,EAAehwB,KAAKu8C,mBAAmBx4C,GAC7C/D,KAAK67C,mBAAmB7rB,GAExBhwB,KAAKq6C,YAAYzW,0BAA0B5T,EAAc,KAG3D,YAAA/0B,OAAA,SACE8I,EACAy4C,EACAjoC,GAHF,WAKEvU,KAAKymC,KAAK,SAAU,CAAE1iC,KAAMA,EAAKqC,WAAYvT,MAAO2pD,IAGpD,IAAIC,GAAQ,EACNpzB,EAAerpB,KAAKw7C,uBACpB5mB,EAAyC,GAW/C,GAVAtqB,EAAKkyC,GAAiB,SAACE,EAAoBC,GACzCF,GAAQ,EACR7nB,EAAgB8nB,GAAc7yB,GAC5B9lB,EAAKsJ,MAAMqvC,GACXvlC,GAAawlC,GACb,EAAKtB,gBACLhyB,MAICozB,EAoCHh0C,EAAI,wDACJzI,KAAKs8C,uBAAuB/nC,EAAY,UArC9B,CACV,IAAM,EAAUvU,KAAKi8C,kBACflmB,EAAS/1B,KAAKq7C,gBAAgBhe,eAClCt5B,EACA6wB,EACA,GAEF50B,KAAKq6C,YAAYhX,YAAYtN,GAC7B/1B,KAAKyiC,QAAQn/B,MACXS,EAAKqC,WACLo2C,GACA,SAACtmD,EAAQkhD,GACP,IAAMgF,EAAqB,OAAXlmD,EACXkmD,GACHrzC,EAAK,aAAehF,EAAO,YAAc7N,GAG3C,IAAMmmD,EAAc,EAAKhB,gBAAgB1oB,aACvC,GACCypB,GAEGpsB,EACJqsB,EAAY3uD,OAAS,EAAI,EAAKmuD,mBAAmB93C,GAAQA,EAC3D,EAAKs2C,YAAYzW,0BAA0B5T,EAAcqsB,GACzD,EAAKC,uBAAuB/nC,EAAYre,EAAQkhD,MAIpD9sC,EAAKkyC,GAAiB,SAAC3Y,GACrB,IAAM7T,EAAe,EAAKusB,mBAAmBx4C,EAAKsJ,MAAMw2B,IACxD,EAAKgY,mBAAmB7rB,MAI1BhwB,KAAKq6C,YAAYzW,0BAA0B7/B,EAAM,MAU7C,YAAAi4C,uBAAR,sBACEh8C,KAAKymC,KAAK,sBAEV,IAAMpd,EAAerpB,KAAKw7C,uBACpBoB,EAA2B,IAAIpyB,GACrCxqB,KAAKinC,cAActc,YAAYje,EAAKof,OAAO,SAAC/nB,EAAMgS,GAChD,IAAM8mC,EAAWhzB,GACf9lB,EACAgS,EACA,EAAKslC,gBACLhyB,GAEFuzB,EAAyBtyB,SAASvmB,EAAM84C,MAE1C,IAAI9mB,EAAkB,GAEtB6mB,EAAyBjyB,YAAYje,EAAKof,OAAO,SAAC/nB,EAAMse,GACtD0T,EAASA,EAAOhiC,OACd,EAAKsnD,gBAAgB9d,qBAAqBx5B,EAAMse,IAElD,IAAM2N,EAAe,EAAKusB,mBAAmBx4C,GAC7C,EAAK83C,mBAAmB7rB,MAG1BhwB,KAAKinC,cAAgB,IAAIzc,GACzBxqB,KAAKq6C,YAAYzW,0BAA0Bl3B,EAAKof,MAAOiK,IAGzD,YAAAnhB,mBAAA,SACE7Q,EACAwQ,GAFF,WAIEvU,KAAKyiC,QAAQ7tB,mBAAmB7Q,EAAKqC,YAAY,SAAClQ,EAAQkhD,GACzC,OAAXlhD,GACF,EAAK+wC,cAAcxc,OAAO1mB,GAE5B,EAAKu4C,uBAAuB/nC,EAAYre,EAAQkhD,OAIpD,YAAAriC,gBAAA,SACEhR,EACAlR,EACA0hB,GAHF,WAKQ+B,EAAUa,GAAatkB,GAC7BmN,KAAKyiC,QAAQ8Q,gBACXxvC,EAAKqC,WACLkQ,EAAQrW,KAAgB,IACxB,SAAC/J,EAAQkhD,GACQ,OAAXlhD,GACF,EAAK+wC,cAAc3c,SAASvmB,EAAMuS,GAEpC,EAAKgmC,uBAAuB/nC,EAAYre,EAAQkhD,OAKtD,YAAAniC,4BAAA,SACElR,EACAlR,EACAggB,EACA0B,GAJF,WAMQ+B,EAAUa,GAAatkB,EAAOggB,GACpC7S,KAAKyiC,QAAQ8Q,gBACXxvC,EAAKqC,WACLkQ,EAAQrW,KAAgB,IACxB,SAAC/J,EAAQkhD,GACQ,OAAXlhD,GACF,EAAK+wC,cAAc3c,SAASvmB,EAAMuS,GAEpC,EAAKgmC,uBAAuB/nC,EAAYre,EAAQkhD,OAKtD,YAAAhiC,mBAAA,SACErR,EACAy4C,EACAjoC,GAHF,WAKE,GAAI/G,UAAQgvC,GAKV,OAJA/zC,EACE,4EAEFzI,KAAKs8C,uBAAuB/nC,EAAY,MAI1CvU,KAAKyiC,QAAQ+Q,kBACXzvC,EAAKqC,WACLo2C,GACA,SAACtmD,EAAQkhD,GACQ,OAAXlhD,GACFoU,EAAKkyC,GAAiB,SAACvkC,EAAmBI,GACxC,IAAME,EAAepB,GAAakB,GAClC,EAAK4uB,cAAc3c,SAASvmB,EAAKsJ,MAAM4K,GAAYM,MAGvD,EAAK+jC,uBAAuB/nC,EAAYre,EAAQkhD,OAKtD,YAAAtwB,yBAAA,SAAyBlkB,EAAcwgB,GACrC,IAAI2S,EAEFA,EAD4B,UAA1BnzB,EAAMmB,KAAK4I,WACJ3M,KAAKk7C,cAAczjB,qBAC1B70B,EACAwgB,GAGOpjB,KAAKq7C,gBAAgB5jB,qBAC5B70B,EACAwgB,GAGJpjB,KAAKq6C,YAAY3W,kBAAkB9gC,EAAMmB,KAAMgyB,IAGjD,YAAA7O,4BAAA,SACEtkB,EACAwgB,GAIA,IAAI2S,EAEFA,EAD4B,UAA1BnzB,EAAMmB,KAAK4I,WACJ3M,KAAKk7C,cAAcxjB,wBAC1B90B,EACAwgB,GAGOpjB,KAAKq7C,gBAAgB3jB,wBAC5B90B,EACAwgB,GAGJpjB,KAAKq6C,YAAY3W,kBAAkB9gC,EAAMmB,KAAMgyB,IAGjD,YAAAyiB,UAAA,WACMx4C,KAAKy6C,uBACPz6C,KAAKy6C,sBAAsBjC,UAAUwB,KAIzC,YAAAvB,OAAA,WACMz4C,KAAKy6C,uBACPz6C,KAAKy6C,sBAAsBhC,OAAOuB,KAItC,YAAAjX,MAAA,SAAM+Z,GACJ,QADI,IAAAA,OAAA,GACmB,qBAAZr+C,QAAX,CAIA,IAAIskC,EACA+Z,GACG98C,KAAK2iC,iBACR3iC,KAAK2iC,eAAiB,IAAIC,GAAc5iC,KAAK0mC,SAE/C3D,EAAQ/iC,KAAK2iC,eAAexoC,OAE5B4oC,EAAQ/iC,KAAK0mC,OAAOvsC,MAGtB,IAAM4iD,EAAcjwD,OAAOC,KAAKg2C,GAAOn/B,QACrC,SAACo5C,EAAeC,GACd,OAAAlyC,KAAK0D,IAAIwuC,EAAavvD,OAAQsvD,KAChC,GAGF1yC,EAAKy4B,GAAO,SAACR,EAAc1vC,GAGzB,IAFA,IAAIqqD,EAAa3a,EAER16B,EAAI06B,EAAK70C,OAAQma,EAAIk1C,EAAc,EAAGl1C,IAC7Cq1C,GAAc,IAEhBz+C,QAAQgK,IAAIy0C,EAAarqD,QAI7B,YAAAsqD,sBAAA,SAAsBC,GACpBp9C,KAAK0mC,OAAOhF,iBAAiB0b,GAC7Bp9C,KAAK66C,eAAe/X,YAAYsa,IAG1B,YAAA3W,KAAR,W,IAAa,sDACX,IAAI79B,EAAS,GACT5I,KAAKy6C,wBACP7xC,EAAS5I,KAAKy6C,sBAAsBvzC,GAAK,KAE3CuB,EAAG,yBAACG,GAAWd,KAGjB,YAAAw0C,uBAAA,SACEliD,EACAlE,EACAkhD,GAEIh9C,GACF4R,GAAe,WACb,GAAe,OAAX9V,EACFkE,EAAS,UACJ,CACL,IAAMtE,GAAQI,GAAU,SAAS0qC,cAC7B5qC,EAAUF,EACVshD,IACFphD,GAAW,KAAOohD,GAGpB,IAAMzhD,EAAQ,IAAImT,MAAM9S,GAEvBL,EAAcG,KAAOA,EACtBsE,EAASzE,QAMjB,sBAAI,uBAAQ,C,IAAZ,WACE,OAAOqK,KAAKq9C,aAAer9C,KAAKq9C,WAAa,IAAIC,GAASt9C,Q,gCAE9D,EA5kBA,GCrBA,cAgCE,WAAYsQ,GACVtQ,KAAKu9C,eAAiB,IAAIzmB,GAAcxmB,EAAO0T,YAC/ChkB,KAAK0iB,OAASpS,EAAO0T,WACrBhkB,KAAKw9C,WAAaC,EAAaC,cAAcptC,GAC7CtQ,KAAK29C,SAAWF,EAAaG,YAAYttC,GAwI7C,OAlIE,YAAAutC,aAAA,WACE,OAAO79C,KAAKw9C,YAMd,YAAAM,WAAA,WACE,OAAO99C,KAAK29C,UAOd,YAAAp5B,QAAA,SAAQxO,GACN,OACE/V,KAAK0iB,OAAOvM,QAAQnW,KAAK69C,eAAgB9nC,IAAS,GAClD/V,KAAK0iB,OAAOvM,QAAQJ,EAAM/V,KAAK89C,eAAiB,GAOpD,YAAAtlC,YAAA,SACE6J,EACA1oB,EACA4yB,EACAyD,EACAtE,EACAuE,GAKA,OAHKjwB,KAAKukB,QAAQ,IAAItO,GAAUtc,EAAK4yB,MACnCA,EAAWtM,GAAarI,YAEnB5X,KAAKu9C,eAAe/kC,YACzB6J,EACA1oB,EACA4yB,EACAyD,EACAtE,EACAuE,IAOJ,YAAAG,eAAA,SACElB,EACAmB,EACAJ,GAEII,EAAQ9Y,eAEV8Y,EAAUpQ,GAAarI,YAEzB,IAAI6W,EAAW4B,EAAQ7W,UAAUxZ,KAAK0iB,QAEtC+L,EAAWA,EAAS3W,eAAemI,GAAarI,YAChD,IAAMjf,EAAOqH,KAMb,OALAqwB,EAAQ1X,aAAagB,IAAgB,SAAChgB,EAAK0e,GACpC1f,EAAK4rB,QAAQ,IAAItO,GAAUtc,EAAK0e,MACnCoW,EAAWA,EAASnW,qBAAqB3e,EAAKsmB,GAAarI,gBAGxD5X,KAAKu9C,eAAentB,eACzBlB,EACAT,EACAwB,IAOJ,YAAAnY,eAAA,SAAeoX,EAAe9O,GAE5B,OAAO8O,GAMT,YAAAoB,aAAA,WACE,OAAO,GAMT,YAAAC,iBAAA,WACE,OAAOvwB,KAAKu9C,gBAMd,YAAAv5B,SAAA,WACE,OAAOhkB,KAAK0iB,QAQC,EAAAg7B,cAAf,SAA6BptC,GAC3B,GAAIA,EAAOmV,WAAY,CACrB,IAAMs4B,EAAYztC,EAAOyV,oBACzB,OAAOzV,EAAO0T,WAAWlN,SAASxG,EAAOoV,qBAAsBq4B,GAE/D,OAAOztC,EAAO0T,WAAWvN,WASd,EAAAmnC,YAAf,SAA2BttC,GACzB,GAAIA,EAAOqV,SAAU,CACnB,IAAMq4B,EAAU1tC,EAAO0V,kBACvB,OAAO1V,EAAO0T,WAAWlN,SAASxG,EAAOsV,mBAAoBo4B,GAE7D,OAAO1tC,EAAO0T,WAAWnN,WAG/B,EA5KA,GCEA,cAgCE,WAAYvG,GACVtQ,KAAKi+C,cAAgB,IAAIR,GAAantC,GACtCtQ,KAAK0iB,OAASpS,EAAO0T,WACrBhkB,KAAKk+C,OAAS5tC,EAAO6tC,WACrBn+C,KAAKo+C,UAAY9tC,EAAO+tC,iBA2R5B,OArRE,YAAA7lC,YAAA,SACE6J,EACA1oB,EACA4yB,EACAyD,EACAtE,EACAuE,GAKA,OAHKjwB,KAAKi+C,cAAc15B,QAAQ,IAAItO,GAAUtc,EAAK4yB,MACjDA,EAAWtM,GAAarI,YAEtByK,EAAKrK,kBAAkBre,GAAKyU,OAAOme,GAE9BlK,EACEA,EAAK3J,cAAgB1Y,KAAKk+C,OAC5Bl+C,KAAKi+C,cACT1tB,mBACA/X,YACC6J,EACA1oB,EACA4yB,EACAyD,EACAtE,EACAuE,GAGGjwB,KAAKs+C,sBACVj8B,EACA1oB,EACA4yB,EACAb,EACAuE,IAQN,YAAAG,eAAA,SACElB,EACAmB,EACAJ,GAEA,IAAIxB,EACJ,GAAI4B,EAAQ9Y,cAAgB8Y,EAAQ7iB,UAElCihB,EAAWxO,GAAarI,WAAW4B,UAAUxZ,KAAK0iB,aAElD,GACgB,EAAd1iB,KAAKk+C,OAAa7tB,EAAQ3X,eAC1B2X,EAAQ5W,UAAUzZ,KAAK0iB,QACvB,CAEA+L,EAAWxO,GAAarI,WAAW4B,UAAUxZ,KAAK0iB,QAElD,IAAIxB,OAAQ,EAEVA,EADElhB,KAAKo+C,SACK/tB,EAAyB3T,uBACnC1c,KAAKi+C,cAAcH,aACnB99C,KAAK0iB,QAGK2N,EAAyB5T,gBACnCzc,KAAKi+C,cAAcJ,eACnB79C,KAAK0iB,QAIT,IADA,IAAI7f,EAAQ,EACLqe,EAAS7G,WAAaxX,EAAQ7C,KAAKk+C,QAAQ,CAChD,IAAM/+B,EAAO+B,EAAS9G,UAStB,KAPIpa,KAAKo+C,SAELp+C,KAAK0iB,OAAOvM,QAAQnW,KAAKi+C,cAAcJ,eAAgB1+B,IAAS,EAGhEnf,KAAK0iB,OAAOvM,QAAQgJ,EAAMnf,KAAKi+C,cAAcH,eAAiB,GAOhE,MAJArvB,EAAWA,EAASnW,qBAAqB6G,EAAKvxB,KAAMuxB,EAAKpJ,MACzDlT,SAMC,CAIL4rB,GAFAA,EAAW4B,EAAQ7W,UAAUxZ,KAAK0iB,SAEd5K,eAClBmI,GAAarI,YAEf,IAAIqJ,OAAS,EACTE,OAAO,EACPhT,OAAG,EACH+S,OAAQ,EACZ,GAAIlhB,KAAKo+C,SAAU,CACjBl9B,EAAWuN,EAAS9R,mBAAmB3c,KAAK0iB,QAC5CzB,EAAYjhB,KAAKi+C,cAAcH,aAC/B38B,EAAUnhB,KAAKi+C,cAAcJ,eAC7B,IAAM,EAAe79C,KAAK0iB,OAAOxM,aACjC/H,EAAM,SAAC7E,EAAcC,GAAiB,SAAaA,EAAGD,SAEtD4X,EAAWuN,EAASnS,YAAYtc,KAAK0iB,QACrCzB,EAAYjhB,KAAKi+C,cAAcJ,eAC/B18B,EAAUnhB,KAAKi+C,cAAcH,aAC7B3vC,EAAMnO,KAAK0iB,OAAOxM,aAGhBrT,EAAQ,EAEZ,IAFA,IACI07C,GAAiB,EACdr9B,EAAS7G,WAAW,CACnB8E,EAAO+B,EAAS9G,WACjBmkC,GAAkBpwC,EAAI8S,EAAW9B,IAAS,IAE7Co/B,GAAiB,GAGjBA,GAAkB17C,EAAQ7C,KAAKk+C,QAAU/vC,EAAIgR,EAAMgC,IAAY,EAE/Dte,IAEA4rB,EAAWA,EAASnW,qBAClB6G,EAAKvxB,KACLqyB,GAAarI,aAMvB,OAAO5X,KAAKi+C,cACT1tB,mBACAH,eAAelB,EAAST,EAAUwB,IAMvC,YAAAnY,eAAA,SAAeoX,EAAe9O,GAE5B,OAAO8O,GAMT,YAAAoB,aAAA,WACE,OAAO,GAMT,YAAAC,iBAAA,WACE,OAAOvwB,KAAKi+C,cAAc1tB,oBAM5B,YAAAvM,SAAA,WACE,OAAOhkB,KAAK0iB,QAYN,YAAA47B,sBAAR,SACEj8B,EACA+H,EACA6B,EACAP,EACA8yB,GAGA,IAAIrwC,EACJ,GAAInO,KAAKo+C,SAAU,CACjB,IAAM,EAAWp+C,KAAK0iB,OAAOxM,aAC7B/H,EAAM,SAAC7E,EAAcC,GAAiB,SAASA,EAAGD,SAElD6E,EAAMnO,KAAK0iB,OAAOxM,aAEpB,IAAMuf,EAAgBpT,EACtBha,SAAOotB,EAAc/c,gBAAkB1Y,KAAKk+C,OAAQ,IACpD,IAAMO,EAAoB,IAAIxoC,GAAUmU,EAAU6B,GAC5CyyB,EAAiB1+C,KAAKo+C,SACxB3oB,EAAc5U,cAAc7gB,KAAK0iB,QAChC+S,EAAc1U,aAAa/gB,KAAK0iB,QAC/Bi8B,EAAU3+C,KAAKi+C,cAAc15B,QAAQk6B,GAC3C,GAAIhpB,EAActd,SAASiS,GAAW,CAOpC,IANA,IAAMw0B,EAAenpB,EAAczd,kBAAkBoS,GACjD6C,EAAYvB,EAAOsF,mBACrBhxB,KAAK0iB,OACLg8B,EACA1+C,KAAKo+C,UAGQ,MAAbnxB,IACCA,EAAUr/B,OAASw8B,GAAYqL,EAActd,SAAS8U,EAAUr/B,QAKjEq/B,EAAYvB,EAAOsF,mBACjBhxB,KAAK0iB,OACLuK,EACAjtB,KAAKo+C,UAGT,IAAMS,EACS,MAAb5xB,EAAoB,EAAI9e,EAAI8e,EAAWwxB,GAGzC,GADEE,IAAY1yB,EAAUze,WAAaqxC,GAAe,EAOlD,OALyB,MAArBL,GACFA,EAAkBruB,iBAChBf,GAAOM,mBAAmBtF,EAAU6B,EAAW2yB,IAG5CnpB,EAAcnd,qBAAqB8R,EAAU6B,GAE3B,MAArBuyB,GACFA,EAAkBruB,iBAChBf,GAAOI,mBAAmBpF,EAAUw0B,IAGxC,IAAMprB,EAAgBiC,EAAcnd,qBAClC8R,EACAnK,GAAarI,YAIf,OADe,MAAbqV,GAAqBjtB,KAAKi+C,cAAc15B,QAAQ0I,IAEvB,MAArBuxB,GACFA,EAAkBruB,iBAChBf,GAAOE,iBAAiBrC,EAAUr/B,KAAMq/B,EAAUlX,OAG/Cyd,EAAclb,qBACnB2U,EAAUr/B,KACVq/B,EAAUlX,OAGLyd,EAGN,OAAIvH,EAAUze,UAEZ6U,EACEs8B,GACLxwC,EAAIuwC,EAAgBD,IAAsB,GACnB,MAArBD,IACFA,EAAkBruB,iBAChBf,GAAOI,mBAAmBkvB,EAAe9wD,KAAM8wD,EAAe3oC,OAEhEyoC,EAAkBruB,iBAChBf,GAAOE,iBAAiBlF,EAAU6B,KAG/BwJ,EACJnd,qBAAqB8R,EAAU6B,GAC/B3T,qBAAqBomC,EAAe9wD,KAAMqyB,GAAarI,aAKrDyK,GAGb,EA/TA,GCDA,2BACU,KAAAy8B,WAAY,EACZ,KAAAC,WAAY,EACZ,KAAAC,eAAgB,EAChB,KAAAC,SAAU,EACV,KAAAC,aAAc,EAEd,KAAAhB,OAAS,EACT,KAAAiB,UAAY,GACZ,KAAAC,iBAAmC,KACnC,KAAAC,gBAAkB,GAClB,KAAAC,eAAiC,KACjC,KAAAC,cAAgB,GAEhB,KAAA78B,OAAS/I,GAwXnB,OAzUE,YAAA8L,SAAA,WACE,OAAOzlB,KAAK++C,WAMd,YAAAV,eAAA,WACE,MAAuB,KAAnBr+C,KAAKm/C,UAKAn/C,KAAK++C,UAGV/+C,KAAKm/C,YAAcK,EAAYC,yBAAyBC,gBAS9D,YAAAh6B,mBAAA,WAEE,OADArd,SAAOrI,KAAK++C,UAAW,oCAChB/+C,KAAKo/C,kBAQd,YAAAr5B,kBAAA,WAEE,OADA1d,SAAOrI,KAAK++C,UAAW,oCACnB/+C,KAAKg/C,cACAh/C,KAAKq/C,gBAELl2C,GAOX,YAAAwc,OAAA,WACE,OAAO3lB,KAAKi/C,SAOd,YAAAr5B,iBAAA,WAEE,OADAvd,SAAOrI,KAAKi/C,QAAS,kCACdj/C,KAAKs/C,gBAQd,YAAAt5B,gBAAA,WAEE,OADA3d,SAAOrI,KAAKi/C,QAAS,kCACjBj/C,KAAKk/C,YACAl/C,KAAKu/C,cAELn2C,GAOX,YAAA+c,SAAA,WACE,OAAOnmB,KAAK8+C,WAMd,YAAA14B,iBAAA,WACE,OAAOpmB,KAAK8+C,WAAgC,KAAnB9+C,KAAKm/C,WAOhC,YAAAhB,SAAA,WAEE,OADA91C,SAAOrI,KAAK8+C,UAAW,oCAChB9+C,KAAKk+C,QAMd,YAAAl6B,SAAA,WACE,OAAOhkB,KAAK0iB,QAON,YAAAi9B,MAAR,WACE,IAAMhlC,EAAO,IAAI6kC,EAajB,OAZA7kC,EAAKmkC,UAAY9+C,KAAK8+C,UACtBnkC,EAAKujC,OAASl+C,KAAKk+C,OACnBvjC,EAAKokC,UAAY/+C,KAAK++C,UACtBpkC,EAAKykC,iBAAmBp/C,KAAKo/C,iBAC7BzkC,EAAKqkC,cAAgBh/C,KAAKg/C,cAC1BrkC,EAAK0kC,gBAAkBr/C,KAAKq/C,gBAC5B1kC,EAAKskC,QAAUj/C,KAAKi/C,QACpBtkC,EAAK2kC,eAAiBt/C,KAAKs/C,eAC3B3kC,EAAKukC,YAAcl/C,KAAKk/C,YACxBvkC,EAAK4kC,cAAgBv/C,KAAKu/C,cAC1B5kC,EAAK+H,OAAS1iB,KAAK0iB,OACnB/H,EAAKwkC,UAAYn/C,KAAKm/C,UACfxkC,GAOT,YAAA+M,MAAA,SAAMk4B,GACJ,IAAM93B,EAAY9nB,KAAK2/C,QAIvB,OAHA73B,EAAUg3B,WAAY,EACtBh3B,EAAUo2B,OAAS0B,EACnB93B,EAAUq3B,UAAY,GACfr3B,GAOT,YAAAL,aAAA,SAAam4B,GACX,IAAM93B,EAAY9nB,KAAK2/C,QAIvB,OAHA73B,EAAUg3B,WAAY,EACtBh3B,EAAUo2B,OAAS0B,EACnB93B,EAAUq3B,UAAYK,EAAYC,yBAAyBC,eACpD53B,GAOT,YAAAH,YAAA,SAAYi4B,GACV,IAAM93B,EAAY9nB,KAAK2/C,QAIvB,OAHA73B,EAAUg3B,WAAY,EACtBh3B,EAAUo2B,OAAS0B,EACnB93B,EAAUq3B,UAAYK,EAAYC,yBAAyBI,gBACpD/3B,GAQT,YAAAK,QAAA,SAAQpR,EAAqBpd,GAC3B,IAAMmuB,EAAY9nB,KAAK2/C,QAavB,OAZA73B,EAAUi3B,WAAY,OACHpxD,IAAfopB,IACFA,EAAa,MAEf+Q,EAAUs3B,iBAAmBroC,EAClB,MAAPpd,GACFmuB,EAAUk3B,eAAgB,EAC1Bl3B,EAAUu3B,gBAAkB1lD,IAE5BmuB,EAAUk3B,eAAgB,EAC1Bl3B,EAAUu3B,gBAAkB,IAEvBv3B,GAQT,YAAAM,MAAA,SAAMrR,EAAqBpd,GACzB,IAAMmuB,EAAY9nB,KAAK2/C,QAavB,OAZA73B,EAAUm3B,SAAU,OACDtxD,IAAfopB,IACFA,EAAa,MAEf+Q,EAAUw3B,eAAiBvoC,OACfppB,IAARgM,GACFmuB,EAAUo3B,aAAc,EACxBp3B,EAAUy3B,cAAgB5lD,IAE1BmuB,EAAUo3B,aAAc,EACxBp3B,EAAUy3B,cAAgB,IAErBz3B,GAOT,YAAAC,QAAA,SAAQxnB,GACN,IAAMunB,EAAY9nB,KAAK2/C,QAEvB,OADA73B,EAAUpF,OAASniB,EACZunB,GAMT,YAAAS,eAAA,WACE,IAAMu3B,EAA0BN,EAAYC,yBACtCrgD,EAAgC,GAatC,GAZIY,KAAK++C,YACP3/C,EAAI0gD,EAAwBC,mBAAqB//C,KAAKo/C,iBAClDp/C,KAAKg/C,gBACP5/C,EAAI0gD,EAAwBE,kBAAoBhgD,KAAKq/C,kBAGrDr/C,KAAKi/C,UACP7/C,EAAI0gD,EAAwBG,iBAAmBjgD,KAAKs/C,eAChDt/C,KAAKk/C,cACP9/C,EAAI0gD,EAAwBI,gBAAkBlgD,KAAKu/C,gBAGnDv/C,KAAK8+C,UAAW,CAClB1/C,EAAI0gD,EAAwBK,OAASngD,KAAKk+C,OAC1C,IAAIkC,EAAWpgD,KAAKm/C,UACH,KAAbiB,IAEAA,EADEpgD,KAAKq+C,iBACIyB,EAAwBJ,eAExBI,EAAwBD,iBAGvCzgD,EAAI0gD,EAAwBO,WAAaD,EAM3C,OAHIpgD,KAAK0iB,SAAW/I,KAClBva,EAAI0gD,EAAwBQ,OAAStgD,KAAK0iB,OAAOtc,YAE5ChH,GAMT,YAAAo4B,aAAA,WACE,QAASx3B,KAAK++C,WAAa/+C,KAAKi/C,SAAWj/C,KAAK8+C,YAMlD,YAAAve,UAAA,WACE,OAAOvgC,KAAKw3B,gBAAkBx3B,KAAK0iB,SAAW/I,IAMhD,YAAAod,cAAA,WACE,OAAI/2B,KAAKw3B,eACA,IAAIV,GAAc92B,KAAKgkB,YACrBhkB,KAAKmmB,WACP,IAAIo6B,GAAcvgD,MAElB,IAAIy9C,GAAaz9C,OAS5B,YAAAy5C,4BAAA,WACE,IAOI1xB,EAPEy4B,EAAiBhB,EAAYiB,sBAC7BC,EAAuC,GAE7C,OAAI1gD,KAAKugC,cAKLvgC,KAAK0iB,SAAW/I,GAClBoO,EAAUy4B,EAAe7mC,eAChB3Z,KAAK0iB,SAAWT,GACzB8F,EAAUy4B,EAAev+B,YAChBjiB,KAAK0iB,SAAW1L,GACzB+Q,EAAUy4B,EAAexpC,WAEzB3O,SAAOrI,KAAK0iB,kBAAkBuD,GAAW,4BACzC8B,EAAU/nB,KAAK0iB,OAAOtc,YAExBs6C,EAAGF,EAAeG,UAAY/oD,YAAUmwB,GAEpC/nB,KAAK++C,YACP2B,EAAGF,EAAeI,UAAYhpD,YAAUoI,KAAKo/C,kBACzCp/C,KAAKg/C,gBACP0B,EAAGF,EAAeI,WAAa,IAAMhpD,YAAUoI,KAAKq/C,mBAIpDr/C,KAAKi/C,UACPyB,EAAGF,EAAeK,QAAUjpD,YAAUoI,KAAKs/C,gBACvCt/C,KAAKk/C,cACPwB,EAAGF,EAAeK,SAAW,IAAMjpD,YAAUoI,KAAKu/C,iBAIlDv/C,KAAK8+C,YACH9+C,KAAKq+C,iBACPqC,EAAGF,EAAeM,gBAAkB9gD,KAAKk+C,OAEzCwC,EAAGF,EAAeO,eAAiB/gD,KAAKk+C,SAlCnCwC,GAxUa,EAAAjB,yBAA2B,CACjDM,kBAAmB,KACnBC,iBAAkB,KAClBC,gBAAiB,KACjBC,eAAgB,KAChBC,MAAO,IACPE,UAAW,KACXX,eAAgB,IAChBG,gBAAiB,IACjBS,MAAO,KASe,EAAAG,sBAAwB,CAC9CE,SAAU,UACVhnC,eAAgB,YAChBsI,YAAa,SACbjL,UAAW,OACX4pC,SAAU,UACVC,OAAQ,QACRC,eAAgB,eAChBC,cAAe,eAQD,EAAAC,QAAU,IAAIxB,EA8UhC,EAtYA,G,eCyBE,WAAYr6B,EAAYphB,GACtB,KAAMohB,aAAgB87B,IACpB,MAAM,IAAIn4C,MACR,6D,OAKJ,YAAMqc,EAAMphB,EAAMy7C,GAAYwB,SAAS,IAAM,KAkUjD,OAzV+B,iBA2B7B,YAAA1nD,OAAA,WAGE,OAFAkb,mBAAiB,gBAAiB,EAAG,EAAG/mB,UAAUC,QAE9CsS,KAAK+D,KAAKyJ,UACL,KAEAxN,KAAK+D,KAAK+I,WAQrB,YAAAO,MAAA,SAAMN,GAYJ,OAXAyH,mBAAiB,kBAAmB,EAAG,EAAG/mB,UAAUC,QAC1B,kBAAfqf,EACTA,EAAa9T,OAAO8T,GACTA,aAAsBL,IACJ,OAAzB1M,KAAK+D,KAAK4I,WACZoH,GAAuB,kBAAmB,EAAGhH,GAAY,GAEzD+G,GAAmB,kBAAmB,EAAG/G,GAAY,IAIlD,IAAIm0C,EAAUlhD,KAAKmlB,KAAMnlB,KAAK+D,KAAKsJ,MAAMN,KAIlD,YAAAuW,UAAA,WACE9O,mBAAiB,mBAAoB,EAAG,EAAG/mB,UAAUC,QAErD,IAAMyzD,EAAanhD,KAAK+D,KAAKoJ,SAC7B,OAAsB,OAAfg0C,EAAsB,KAAO,IAAID,EAAUlhD,KAAKmlB,KAAMg8B,IAI/D,YAAAC,QAAA,WACE5sC,mBAAiB,iBAAkB,EAAG,EAAG/mB,UAAUC,QAGnD,IADA,IAAIkB,EAAiBoR,KACM,OAApBpR,EAAI00B,aACT10B,EAAMA,EAAI00B,YAEZ,OAAO10B,GAIT,YAAAyyD,aAAA,WACE,OAAOrhD,KAAKmlB,KAAKm8B,UAQnB,YAAAxlD,IAAA,SACEogD,EACA3nC,GAEAC,mBAAiB,gBAAiB,EAAG,EAAG/mB,UAAUC,QAClDsmB,GAAqB,gBAAiBhU,KAAK+D,MAC3C+O,GAAwB,gBAAiB,EAAGopC,EAAQl8C,KAAK+D,MAAM,GAC/D0Q,mBAAiB,gBAAiB,EAAGF,GAAY,GAEjD,IAAMG,EAAW,IAAIC,WAOrB,OANA3U,KAAKmlB,KAAKnQ,gBACRhV,KAAK+D,KACLm4C,EACc,KACdxnC,EAASG,aAAaN,IAEjBG,EAASI,SAQlB,YAAA7Z,OAAA,SACEia,EACAX,GAKA,GAHAC,mBAAiB,mBAAoB,EAAG,EAAG/mB,UAAUC,QACrDsmB,GAAqB,mBAAoBhU,KAAK+D,MAE1CnF,MAAM8F,QAAQwQ,GAAgB,CAEhC,IADA,IAAMC,EAA6C,GAC1CtN,EAAI,EAAGA,EAAIqN,EAAcxnB,SAAUma,EAC1CsN,EAAiB,GAAKtN,GAAKqN,EAAcrN,GAE3CqN,EAAgBC,EAChBpM,EACE,wMAMJsK,GACE,mBACA,EACA6B,EACAlV,KAAK+D,MACL,GAEF0Q,mBAAiB,mBAAoB,EAAGF,GAAY,GACpD,IAAMG,EAAW,IAAIC,WAMrB,OALA3U,KAAKmlB,KAAKlqB,OACR+E,KAAK+D,KACLmR,EACAR,EAASG,aAAaN,IAEjBG,EAASI,SASlB,YAAAE,gBAAA,SACEknC,EACA97B,EACA7L,GAcA,GAZAC,mBAAiB,4BAA6B,EAAG,EAAG/mB,UAAUC,QAC9DsmB,GAAqB,4BAA6BhU,KAAK+D,MACvD+O,GACE,4BACA,EACAopC,EACAl8C,KAAK+D,MACL,GAEF2P,GAAiB,4BAA6B,EAAG0M,GAAa,GAC9D3L,mBAAiB,4BAA6B,EAAGF,GAAY,GAEvC,YAAlBvU,KAAK1G,UAA4C,UAAlB0G,KAAK1G,SACtC,KACE,qCACA0G,KAAK1G,SACL,0BAIJ,IAAMob,EAAW,IAAIC,WAOrB,OANA3U,KAAKmlB,KAAKnQ,gBACRhV,KAAK+D,KACLm4C,EACA97B,EACA1L,EAASG,aAAaN,IAEjBG,EAASI,SAOlB,YAAA9Y,OAAA,SAAOuY,GAKL,OAJAC,mBAAiB,mBAAoB,EAAG,EAAG/mB,UAAUC,QACrDsmB,GAAqB,mBAAoBhU,KAAK+D,MAC9C0Q,mBAAiB,mBAAoB,EAAGF,GAAY,GAE7CvU,KAAKlE,IAAI,KAAMyY,IASxB,YAAAhT,YAAA,SACEggD,EACAhtC,EACAitC,GAUA,GARAhtC,mBAAiB,wBAAyB,EAAG,EAAG/mB,UAAUC,QAC1DsmB,GAAqB,wBAAyBhU,KAAK+D,MACnD0Q,mBAAiB,wBAAyB,EAAG8sC,GAAmB,GAChE9sC,mBAAiB,wBAAyB,EAAGF,GAAY,GAGzDJ,GAAgB,wBAAyB,EAAGqtC,GAAc,GAEpC,YAAlBxhD,KAAK1G,UAA4C,UAAlB0G,KAAK1G,SACtC,KACE,iCACA0G,KAAK1G,SACL,+BAIiB3L,IAAjB6zD,IACFA,GAAe,GAGjB,IAAM9sC,EAAW,IAAIC,WACK,oBAAfJ,GACTG,EAASI,QAAQtW,OAAM,eAGzB,IAAMijD,EAAkB,SACtB9rD,EACA0f,EACAC,GAEI3f,EACF+e,EAAShZ,OAAO/F,GAEhB+e,EAASrc,QAAQ,IAAIqpD,GAAkBrsC,EAAWC,IAE1B,oBAAff,GACTA,EAAW5e,EAAO0f,EAAWC,IAUjC,OAPAtV,KAAKmlB,KAAKw8B,iBACR3hD,KAAK+D,KACLw9C,EACAE,EACAD,GAGK9sC,EAASI,SAQlB,YAAA8sC,YAAA,SACE/uC,EACA0B,GAEAC,mBAAiB,wBAAyB,EAAG,EAAG/mB,UAAUC,QAC1DsmB,GAAqB,wBAAyBhU,KAAK+D,MACnD2P,GAAiB,wBAAyB,EAAGb,GAAU,GACvD4B,mBAAiB,wBAAyB,EAAGF,GAAY,GAEzD,IAAMG,EAAW,IAAIC,WAOrB,OANA3U,KAAKmlB,KAAKnQ,gBACRhV,KAAK+D,KAAKsJ,MAAM,aAChBwF,EACA,KACA6B,EAASG,aAAaN,IAEjBG,EAASI,SAQlB,YAAA9R,KAAA,SAAKnQ,EAAiB0hB,GACpBC,mBAAiB,iBAAkB,EAAG,EAAG/mB,UAAUC,QACnDsmB,GAAqB,iBAAkBhU,KAAK+D,MAC5C+O,GAAwB,iBAAkB,EAAGjgB,EAAOmN,KAAK+D,MAAM,GAC/D0Q,mBAAiB,iBAAkB,EAAGF,GAAY,GAElD,IAWIO,EAXEzf,EAAM2K,KAAKmlB,KAAKm2B,aAChB1tD,EAAO4nB,GAAWngB,GAOlBwsD,EAAmB7hD,KAAKqN,MAAMzf,GAC9Bk0D,EAAU9hD,KAAKqN,MAAMzf,GAgB3B,OAZEknB,EADW,MAATjiB,EACQgvD,EAAiB/lD,IAAIjJ,EAAO0hB,GAAY/U,MAAK,WAAM,OAAAsiD,KAEnD1pD,QAAQC,QAAQypD,GAG5BD,EAAiBriD,KAAOsV,EAAQtV,KAAKkJ,KAAKoM,GAC1C+sC,EAAiBrjD,MAAQsW,EAAQtV,KAAKkJ,KAAKoM,OAASnnB,GAE1B,oBAAf4mB,GACTO,EAAQtW,OAAM,eAGTqjD,GAMT,YAAA9a,aAAA,WAEE,OADA/yB,GAAqB,yBAA0BhU,KAAK+D,MAC7C,IAAIg+C,GAAa/hD,KAAKmlB,KAAMnlB,KAAK+D,OAG1C,sBAAI,uBAAQ,C,IAAZ,WACE,OAAO/D,KAAKqhD,gB,gCAGd,sBAAI,kBAAG,C,IAAP,WACE,OAAOrhD,KAAK1G,U,gCAGd,sBAAI,qBAAM,C,IAAV,WACE,OAAO0G,KAAKsjB,a,gCAGd,sBAAI,mBAAI,C,IAAR,WACE,OAAOtjB,KAAKohD,W,gCAEhB,E,CAzV+B96B,IAiW/BA,GAAMtE,uBAAyBk/B,GAC/BroB,GAAU7W,uBAAyBk/B,GCtXnC,ICgBYc,GDhBZ,cAGE,KAAAnzD,SAA4C,GAC5C,KAAAozD,WAAa,EACb,KAAApvD,MAAkB,MAQpB,cAOE,WACUqvD,EACAC,EACA3/B,QAFA,IAAA0/B,MAAA,SACA,IAAAC,MAAA,WACA,IAAA3/B,MAAA,IAAyB4/B,IAFzB,KAAAF,QACA,KAAAC,UACA,KAAA3/B,QAyMZ,OAhME,YAAA6/B,QAAA,SAAQC,GAKN,IAHA,IAAIv+C,EAAOu+C,aAAmB51C,EAAO41C,EAAU,IAAI51C,EAAK41C,GACpDj1C,EAAQrN,KACVmf,EAAOpb,EAAK4I,WACE,OAATwS,GAAe,CAEpB9R,EAAQ,IAAIk1C,EAAKpjC,EAAM9R,EADLsR,UAAQtR,EAAMmV,MAAM3zB,SAAUswB,IAAS,IAAIijC,IAG7DjjC,GADApb,EAAOA,EAAK8I,YACAF,WAGd,OAAOU,GAQT,YAAAwL,SAAA,WACE,OAAO7Y,KAAKwiB,MAAM3vB,OAQpB,YAAA2vD,SAAA,SAAS3vD,GACPwV,SAAwB,qBAAVxV,EAAuB,iCACrCmN,KAAKwiB,MAAM3vB,MAAQA,EACnBmN,KAAKyiD,kBAMP,YAAAl4B,MAAA,WACEvqB,KAAKwiB,MAAM3vB,MAAQ,KACnBmN,KAAKwiB,MAAM3zB,SAAW,GACtBmR,KAAKwiB,MAAMy/B,WAAa,EACxBjiD,KAAKyiD,kBAMP,YAAAv/B,YAAA,WACE,OAAOljB,KAAKwiB,MAAMy/B,WAAa,GAMjC,YAAAz0C,QAAA,WACE,OAA2B,OAApBxN,KAAK6Y,aAAwB7Y,KAAKkjB,eAQ3C,YAAAvK,aAAA,SAAa/kB,GAAb,WACE0W,EAAKtK,KAAKwiB,MAAM3zB,UAAU,SAACwe,EAAe0Q,GACxCnqB,EAAO,IAAI2uD,EAAQl1C,EAAO,EAAM0Q,QAapC,YAAA2kC,kBAAA,SACE9uD,EACA+uD,EACAC,GAEID,IAAgBC,GAClBhvD,EAAOoM,MAGTA,KAAK2Y,cAAa,SAAAtL,GAChBA,EAAMq1C,kBAAkB9uD,GAAyB,EAAMgvD,MAGrDD,GAAeC,GACjBhvD,EAAOoM,OAYX,YAAA6iD,gBAAA,SACEjvD,EACA+uD,GAGA,IADA,IAAI5sC,EAAO4sC,EAAc3iD,KAAOA,KAAKmN,SACrB,OAAT4I,GAAe,CACpB,GAAIniB,EAAOmiB,GACT,OAAO,EAETA,EAAOA,EAAK5I,SAEd,OAAO,GAUT,YAAA21C,oCAAA,SAAoClvD,GAClCoM,KAAK2Y,cAAa,SAAAtL,GACS,OAArBA,EAAMwL,WACRjlB,EAAOyZ,GAEPA,EAAMy1C,oCAAoClvD,OAQhD,YAAAmQ,KAAA,WACE,OAAO,IAAI2I,EACQ,OAAjB1M,KAAKmiD,QACDniD,KAAKkiD,MACLliD,KAAKmiD,QAAQp+C,OAAS,IAAM/D,KAAKkiD,QAOzC,YAAAt0D,KAAA,WACE,OAAOoS,KAAKkiD,OAMd,YAAA/0C,OAAA,WACE,OAAOnN,KAAKmiD,SAQN,YAAAM,eAAR,WACuB,OAAjBziD,KAAKmiD,SACPniD,KAAKmiD,QAAQY,aAAa/iD,KAAKkiD,MAAOliD,OAWlC,YAAA+iD,aAAR,SAAqB9qC,EAAmB5K,GACtC,IAAM21C,EAAa31C,EAAMG,UACnBy1C,EAAc18C,WAASvG,KAAKwiB,MAAM3zB,SAAUopB,GAC9C+qC,GAAcC,UACTjjD,KAAKwiB,MAAM3zB,SAASopB,GAC3BjY,KAAKwiB,MAAMy/B,aACXjiD,KAAKyiD,kBACKO,GAAeC,IACzBjjD,KAAKwiB,MAAM3zB,SAASopB,GAAa5K,EAAMmV,MACvCxiB,KAAKwiB,MAAMy/B,aACXjiD,KAAKyiD,mBAGX,EAnNA,ICGA,SAAYT,GAIV,iBAIA,mBAIA,6BAIA,2CAGA,iCAnBF,CAAYA,QAAiB,KA8B5Bf,GAAaiC,yBAA2B,GAwCxCjC,GAAKpiD,UAAkBk8C,kBAAoB,WAO1C/6C,KAAKmjD,sBAAwB,IAAIZ,IAsBnCtB,GAAKpiD,UAAU8iD,iBAAmB,SAChC59C,EACAw9C,EACAhtC,EACAitC,GAEAxhD,KAAKymC,KAAK,kBAAoB1iC,GAG9B,IAAMkjB,EAAgB,aAChBm8B,EAAW,IAAIlC,GAAUlhD,KAAM+D,GACrCq/C,EAAS78B,GAAG,QAASU,GACrB,IAKM1lB,EAA2B,CAC/BwC,KAAI,EACJ9I,OAAQsmD,EACRhtC,WAAU,EAGVre,OAAQ,KAGRmtD,MAAOp8C,IAGPu6C,aAAY,EAGZ8B,WAAY,EAGZC,UAvBgB,WAChBH,EAASr8B,IAAI,QAASE,IAyBtBu8B,YAAa,KAEbC,eAAgB,KAEhBC,qBAAsB,KAEtBC,yBAA0B,KAE1BC,8BAA+B,MAI3BC,EAAe7jD,KAAK8jD,gBAAgB//C,GAC1CxC,EAAYmiD,qBAAuBG,EACnC,IAAM3H,EAAS36C,EAAYtG,OAAO4oD,EAAa5jD,OAC/C,QAAetS,IAAXuuD,GAKF,GAHA36C,EAAYgiD,YACZhiD,EAAYoiD,yBAA2B,KACvCpiD,EAAYqiD,8BAAgC,KACxCriD,EAAYgT,WAAY,CAE1B,IAAMe,EAAW,IAAI0N,GACnBzhB,EAAYmiD,qBACZ,IAAIxC,GAAUlhD,KAAMuB,EAAYwC,MAChC4V,IAEFpY,EAAYgT,WAAW,MAAM,EAAOe,QAEjC,CACLrC,GACE,qCACAipC,EACA36C,EAAYwC,MAIdxC,EAAYrL,OAAS8rD,GAAkB+B,IACvC,IAAMC,EAAYhkD,KAAKmjD,sBAAsBd,QAAQt+C,GAC/CkgD,EAAYD,EAAUnrC,YAAc,GAC1CorC,EAAUjhD,KAAKzB,GAEfyiD,EAAUxB,SAASyB,GAKnB,IAAIC,OAAe,EACnB,GACoB,kBAAXhI,GACI,OAAXA,GACA31C,WAAS21C,EAAQ,aAGjBgI,EAAkBvlC,UAAQu9B,EAAe,aACzC7zC,SACEuK,GAAgBsxC,GAChB,yHAOFA,GAFElkD,KAAKq7C,gBAAgBnyB,uBAAuBnlB,IAC5Ckc,GAAarI,YACeJ,cAAcvX,MAE9CikD,EAAoDA,EAEpD,IAAM76B,EAAerpB,KAAKw7C,uBACpBW,EAAoBhlC,GAAa+kC,EAAQgI,GACzC5tC,EAAUyT,GACdoyB,EACA0H,EACAx6B,GAEF9nB,EAAYoiD,yBAA2BxH,EACvC56C,EAAYqiD,8BAAgCttC,EAC5C/U,EAAYkiD,eAAiBzjD,KAAKi8C,kBAElC,IAAMlmB,EAAS/1B,KAAKq7C,gBAAgBne,mBAClCn5B,EACAuS,EACA/U,EAAYkiD,eACZliD,EAAYigD,cAEdxhD,KAAKq6C,YAAYzW,0BAA0B7/B,EAAMgyB,GAEjD/1B,KAAKmkD,2BAWRlD,GAAKpiD,UAAkBilD,gBAAkB,SACxC//C,EACAqgD,GAEA,OACEpkD,KAAKq7C,gBAAgBnyB,uBAAuBnlB,EAAMqgD,IAClDnkC,GAAarI,YAehBqpC,GAAKpiD,UAAkBslD,uBAAyB,SAC/CpuC,GAD+C,WAQ/C,QAPA,IAAAA,MAA4B/V,KAAKmjD,uBAG5BptC,GACH/V,KAAKqkD,qCAAqCtuC,GAGpB,OAApBA,EAAK8C,WAAqB,CAC5B,IAAMyrC,EAAQtkD,KAAKukD,uBAAuBxuC,GAC1C1N,SAAOi8C,EAAM52D,OAAS,EAAG,yCAEV42D,EAAMp/B,OACnB,SAAC3jB,GAA6B,OAAAA,EAAYrL,SAAW8rD,GAAkB+B,QAKvE/jD,KAAKwkD,sBAAsBzuC,EAAKhS,OAAQugD,QAEjCvuC,EAAKmN,eACdnN,EAAK4C,cAAa,SAAAN,GAChB,EAAK8rC,uBAAuB9rC,OAajC4oC,GAAKpiD,UAAkB2lD,sBAAwB,SAC9CzgD,EACAugD,GASA,IAX8C,WAKxCG,EAAeH,EAAM9kC,KAAI,SAAAklC,GAC7B,OAAOA,EAAIjB,kBAEPkB,EAAc3kD,KAAK8jD,gBAAgB//C,EAAM0gD,GAC3CG,EAAaD,EACXE,EAAaF,EAAY7rC,OACtBjR,EAAI,EAAGA,EAAIy8C,EAAM52D,OAAQma,IAAK,CACrC,IAAM68C,EAAMJ,EAAMz8C,GAClBQ,SACEq8C,EAAIxuD,SAAW8rD,GAAkB+B,IACjC,iEAEFW,EAAIxuD,OAAS8rD,GAAkB8C,KAC/BJ,EAAIpB,aACJ,IAAM71C,EAAef,EAAKe,aAAa1J,EAAM2gD,EAAI3gD,MAEjD6gD,EAAaA,EAAWpsC,YACtB/K,EACAi3C,EAAIf,0BAIR,IAAMoB,EAAaH,EAAW3kD,KAAI,GAC5B+kD,EAAajhD,EAGnB/D,KAAKyiC,QAAQ6Q,IACX0R,EAAW5+C,WACX2+C,GACA,SAAC7uD,GACC,EAAKuwC,KAAK,2BAA4B,CACpC1iC,KAAMihD,EAAW5+C,WACjBlQ,OAAM,IAGR,IAAI6/B,EAAkB,GACtB,GAAe,OAAX7/B,EAAiB,CAInB,IADA,IAAMgE,EAAY,GACT2N,EAAI,EAAGA,EAAIy8C,EAAM52D,OAAQma,IAAK,CAKrC,GAJAy8C,EAAMz8C,GAAG3R,OAAS8rD,GAAkBiD,UACpClvB,EAASA,EAAOhiC,OACd,EAAKsnD,gBAAgB1oB,aAAa2xB,EAAMz8C,GAAG47C,iBAEzCa,EAAMz8C,GAAG0M,WAAY,CAEvB,IAAMwB,EAAOuuC,EAAMz8C,GAAG+7C,8BAChBh1D,EAAM,IAAIsyD,GAAU,EAAMoD,EAAMz8C,GAAG9D,MACnCuR,EAAW,IAAI0N,GAAajN,EAAMnnB,EAAK+qB,IAC7Czf,EAAU8I,KACRshD,EAAMz8C,GAAG0M,WAAW7L,KAAK,KAAM,MAAM,EAAM4M,IAG/CgvC,EAAMz8C,GAAG07C,YAIX,EAAKc,qCACH,EAAKlB,sBAAsBd,QAAQt+C,IAGrC,EAAKogD,yBAEL,EAAK9J,YAAYzW,0BAA0B7/B,EAAMgyB,GAGjD,IAASluB,EAAI,EAAGA,EAAI3N,EAAUxM,OAAQma,IACpCmE,EAAe9R,EAAU2N,QAEtB,CAEL,GAAe,cAAX3R,EACF,IAAS2R,EAAI,EAAGA,EAAIy8C,EAAM52D,OAAQma,IAC5By8C,EAAMz8C,GAAG3R,SAAW8rD,GAAkBkD,iBACxCZ,EAAMz8C,GAAG3R,OAAS8rD,GAAkBmD,YAEpCb,EAAMz8C,GAAG3R,OAAS8rD,GAAkB+B,QAGnC,CACLh7C,EACE,kBAAoBi8C,EAAW5+C,WAAa,YAAclQ,GAE5D,IAAS2R,EAAI,EAAGA,EAAIy8C,EAAM52D,OAAQma,IAChCy8C,EAAMz8C,GAAG3R,OAAS8rD,GAAkBmD,YACpCb,EAAMz8C,GAAG27C,YAActtD,EAI3B,EAAK2lD,mBAAmB93C,MAG5B8gD,IAiBH5D,GAAKpiD,UAAkBg9C,mBAAqB,SAC3ChY,GAEA,IAAMuhB,EAA0BplD,KAAKqlD,4BAA4BxhB,GAC3D9/B,EAAOqhD,EAAwBrhD,OAE/BugD,EAAQtkD,KAAKukD,uBAAuBa,GAG1C,OAFAplD,KAAKslD,uBAAuBhB,EAAOvgD,GAE5BA,GAWRk9C,GAAKpiD,UAAkBymD,uBAAyB,SAC/ChB,EACAvgD,GAEA,GAAqB,IAAjBugD,EAAM52D,OAAV,CAeA,IATA,IAkGe61D,EAlGTrpD,EAAY,GACd67B,EAAkB,GAKhB0uB,EAHcH,EAAMluB,QAAO,SAAAuiB,GAC/B,OAAOA,EAAEziD,SAAW8rD,GAAkB+B,OAEPvkC,KAAI,SAAAm5B,GACnC,OAAOA,EAAE8K,kBAEF57C,EAAI,EAAGA,EAAIy8C,EAAM52D,OAAQma,IAAK,CACrC,IAAMtG,EAAc+iD,EAAMz8C,GACpB4F,EAAef,EAAKe,aAAa1J,EAAMxC,EAAYwC,MACrDwhD,GAAmB,EACrB/B,OAAW,EAMb,GALAn7C,SACmB,OAAjBoF,EACA,iEAGElM,EAAYrL,SAAW8rD,GAAkBmD,YAC3CI,GAAmB,EACnB/B,EAAcjiD,EAAYiiD,YAC1BztB,EAASA,EAAOhiC,OACdiM,KAAKq7C,gBAAgB1oB,aAAapxB,EAAYkiD,gBAAgB,SAE3D,GAAIliD,EAAYrL,SAAW8rD,GAAkB+B,IAElD,GAAIxiD,EAAY+hD,YAAerC,GAAaiC,yBAC1CqC,GAAmB,EACnB/B,EAAc,WACdztB,EAASA,EAAOhiC,OACdiM,KAAKq7C,gBAAgB1oB,aAAapxB,EAAYkiD,gBAAgB,QAE3D,CAEL,IAAM+B,EAAcxlD,KAAK8jD,gBACvBviD,EAAYwC,KACZ0gD,GAEFljD,EAAYmiD,qBAAuB8B,EACnC,IAAMroB,EAAUmnB,EAAMz8C,GAAG5M,OAAOuqD,EAAYvlD,OAC5C,QAAgBtS,IAAZwvC,EAAuB,CACzBlqB,GACE,qCACAkqB,EACA57B,EAAYwC,MAEd,IAAI0hD,EAActuC,GAAagmB,GAEV,kBAAZA,GACI,MAAXA,GACA52B,WAAS42B,EAAS,eAGlBsoB,EAAcA,EAAY3tC,eAAe0tC,EAAYhuC,gBAGvD,IAAMkuC,EAAankD,EAAYkiD,eACzBp6B,EAAerpB,KAAKw7C,uBACpBmK,EAAkB57B,GACtB07B,EACAD,EACAn8B,GAGF9nB,EAAYoiD,yBAA2B8B,EACvClkD,EAAYqiD,8BAAgC+B,EAC5CpkD,EAAYkiD,eAAiBzjD,KAAKi8C,kBAElCwI,EAAa1pB,OAAO0pB,EAAav3D,QAAQw4D,GAAa,GAStD3vB,GARAA,EAASA,EAAOhiC,OACdiM,KAAKq7C,gBAAgBne,mBACnB37B,EAAYwC,KACZ4hD,EACApkD,EAAYkiD,eACZliD,EAAYigD,gBAGAztD,OACdiM,KAAKq7C,gBAAgB1oB,aAAa+yB,GAAY,SAGhDH,GAAmB,EACnB/B,EAAc,SACdztB,EAASA,EAAOhiC,OACdiM,KAAKq7C,gBAAgB1oB,aAAapxB,EAAYkiD,gBAAgB,IAOtE,GAFAzjD,KAAKq6C,YAAYzW,0BAA0B7/B,EAAMgyB,GACjDA,EAAS,GACLwvB,IAEFjB,EAAMz8C,GAAG3R,OAAS8rD,GAAkBiD,UAIzB1B,EAERe,EAAMz8C,GAAG07C,UADVjrD,WAAWirD,EAAWx4C,KAAKI,MAAM,IAG/Bm5C,EAAMz8C,GAAG0M,YACX,GAAoB,WAAhBivC,EAA0B,CAC5B,IAAM50D,EAAM,IAAIsyD,GAAUlhD,KAAMskD,EAAMz8C,GAAG9D,MAEnC6hD,EAAiCtB,EAAMz8C,GAAG67C,qBAC1CpuC,EAAW,IAAI0N,GAAa4iC,EAAWh3D,EAAK+qB,IAClDzf,EAAU8I,KAAKshD,EAAMz8C,GAAG0M,WAAW7L,KAAK,KAAM,MAAM,EAAO4M,SAE3Dpb,EAAU8I,KACRshD,EAAMz8C,GAAG0M,WAAW7L,KAAK,KAAM,IAAII,MAAM06C,IAAc,EAAO,OAQxExjD,KAAKqkD,qCAAqCrkD,KAAKmjD,uBAG/C,IAASt7C,EAAI,EAAGA,EAAI3N,EAAUxM,OAAQma,IACpCmE,EAAe9R,EAAU2N,IAI3B7H,KAAKmkD,2BAYNlD,GAAKpiD,UAAkBwmD,4BAA8B,SACpDthD,GAEA,IAAI0U,EAGAotC,EAAkB7lD,KAAKmjD,sBAE3B,IADA1qC,EAAQ1U,EAAK4I,WACI,OAAV8L,GAAiD,OAA/BotC,EAAgBhtC,YACvCgtC,EAAkBA,EAAgBxD,QAAQ5pC,GAE1CA,GADA1U,EAAOA,EAAK8I,YACCF,WAGf,OAAOk5C,GAWR5E,GAAKpiD,UAAkB0lD,uBAAyB,SAC/CsB,GAGA,IAAMC,EAAkC,GAQxC,OAPA9lD,KAAK+lD,mCAAmCF,EAAiBC,GAGzDA,EAAiB/7C,MAAK,SAACT,EAAGC,GACxB,OAAOD,EAAE+5C,MAAQ95C,EAAE85C,SAGdyC,GASR7E,GAAKpiD,UAAkBknD,mCAAqC,SAC3DhwC,EACAuuC,GAF2D,WAIrDL,EAAYluC,EAAK8C,WACvB,GAAkB,OAAdorC,EACF,IAAK,IAAIp8C,EAAI,EAAGA,EAAIo8C,EAAUv2D,OAAQma,IACpCy8C,EAAMthD,KAAKihD,EAAUp8C,IAIzBkO,EAAK4C,cAAa,SAAAtL,GAChB,EAAK04C,mCAAmC14C,EAAOi3C,OAWlDrD,GAAKpiD,UAAkBwlD,qCAAuC,SAC7DtuC,GAD6D,WAGvDuuC,EAAQvuC,EAAK8C,WACnB,GAAIyrC,EAAO,CAET,IADA,IAAI0B,EAAK,EACAp1B,EAAO,EAAGA,EAAO0zB,EAAM52D,OAAQkjC,IAClC0zB,EAAM1zB,GAAM16B,SAAW8rD,GAAkBiD,YAC3CX,EAAM0B,GAAM1B,EAAM1zB,GAClBo1B,KAGJ1B,EAAM52D,OAASs4D,EACfjwC,EAAKysC,SAAS8B,EAAM52D,OAAS,EAAI42D,EAAQ,MAG3CvuC,EAAK4C,cAAa,SAAAN,GAChB,EAAKgsC,qCAAqChsC,OAa7C4oC,GAAKpiD,UAAkB09C,mBAAqB,SAAUx4C,GAAV,WACrCisB,EAAehwB,KAAKqlD,4BAA4BthD,GAAMA,OAEtD8hD,EAAkB7lD,KAAKmjD,sBAAsBd,QAAQt+C,GAY3D,OAVA8hD,EAAgBhD,iBAAgB,SAAC9sC,GAC/B,EAAKkwC,yBAAyBlwC,MAGhC/V,KAAKimD,yBAAyBJ,GAE9BA,EAAgBnD,mBAAkB,SAAC3sC,GACjC,EAAKkwC,yBAAyBlwC,MAGzBia,GAURixB,GAAKpiD,UAAkBonD,yBAA2B,SACjDlwC,GAEA,IAAMuuC,EAAQvuC,EAAK8C,WACnB,GAAc,OAAVyrC,EAAgB,CASlB,IANA,IAAMpqD,EAAY,GAId67B,EAAkB,GAClBmwB,GAAY,EACPr+C,EAAI,EAAGA,EAAIy8C,EAAM52D,OAAQma,IAChC,GAAIy8C,EAAMz8C,GAAG3R,SAAW8rD,GAAkBkD,uBAEnC,GAAIZ,EAAMz8C,GAAG3R,SAAW8rD,GAAkB8C,KAC/Cz8C,SACE69C,IAAar+C,EAAI,EACjB,mDAEFq+C,EAAWr+C,EAEXy8C,EAAMz8C,GAAG3R,OAAS8rD,GAAkBkD,iBACpCZ,EAAMz8C,GAAG27C,YAAc,WAWvB,GATAn7C,SACEi8C,EAAMz8C,GAAG3R,SAAW8rD,GAAkB+B,IACtC,0CAGFO,EAAMz8C,GAAG07C,YACTxtB,EAASA,EAAOhiC,OACdiM,KAAKq7C,gBAAgB1oB,aAAa2xB,EAAMz8C,GAAG47C,gBAAgB,IAEzDa,EAAMz8C,GAAG0M,WAAY,CAEvBra,EAAU8I,KACRshD,EAAMz8C,GAAG0M,WAAW7L,KAAK,KAAM,IAAII,MAAM,QAAQ,EAFb,QAO1B,IAAdo9C,EAEFnwC,EAAKysC,SAAS,MAGd8B,EAAM52D,OAASw4D,EAAW,EAI5BlmD,KAAKq6C,YAAYzW,0BAA0B7tB,EAAKhS,OAAQgyB,GACxD,IAASluB,EAAI,EAAGA,EAAI3N,EAAUxM,OAAQma,IACpCmE,EAAe9R,EAAU2N,MCtvB/B,ICQIs+C,GDRJ,cAEE,WACUC,EACAC,GAFV,WACU,KAAAD,OACA,KAAAC,gBAHF,KAAAC,MAAqC,KAK3CtmD,KAAKsmD,MAAQD,EAAc1pD,aAAa,CAAEC,UAAU,IAC/CoD,KAAKsmD,OACRD,EAAclsD,MAAMqF,MAAK,SAAA+mD,GAAQ,OAAC,EAAKD,MAAQC,KAoErD,OA5DE,YAAAlO,SAAA,SAASp7C,GACP,OAAK+C,KAAKsmD,MAIHtmD,KAAKsmD,MAAMjO,SAASp7C,GAAcuB,OAAM,SAAA7I,GAG7C,OAAIA,GAAwB,+BAAfA,EAAMG,MACjB2S,EAAI,kEACG,MAEArQ,QAAQsD,OAAO/F,MAVjByC,QAAQC,QAAQ,OAe3B,YAAAuiD,uBAAA,SAAuBtb,GAGjBt/B,KAAKsmD,MACPtmD,KAAKsmD,MAAME,qBAAqBlnB,IAEhChnC,YAAW,WAAM,OAAAgnC,EAAS,QAAO,GACjCt/B,KAAKqmD,cACFlsD,MACAqF,MAAK,SAAA+mD,GAAQ,OAAAA,EAAKC,qBAAqBlnB,QAI9C,YAAAmnB,0BAAA,SAA0BnnB,GACxBt/B,KAAKqmD,cACFlsD,MACAqF,MAAK,SAAA+mD,GAAQ,OAAAA,EAAKG,wBAAwBpnB,OAG/C,YAAAyZ,sBAAA,WACE,IAAI4N,EACF,0DACA3mD,KAAKomD,KAAKx4D,KADV,iFAIE,eAAgBoS,KAAKomD,KAAK54D,QAC5Bm5D,GACE,uJAGO,mBAAoB3mD,KAAKomD,KAAK54D,QACvCm5D,GACE,2JAIFA,GACE,kKAIJ59C,EAAK49C,IAET,EA5EA,GA+EA,4BAkBA,OAfE,YAAAtO,SAAA,SAASp7C,GACP,OAAO7E,QAAQC,QAAQ,CACrBigD,YAAasO,EAA2BC,uBAI5C,YAAAjM,uBAAA,SAAuBtb,GAGrBA,EAASsnB,EAA2BC,sBAGtC,YAAAJ,0BAAA,SAA0BnnB,KAE1B,YAAAyZ,sBAAA,aAhBe,EAAA8N,oBAAsB,QAiBvC,EAlBA,GClEA,2BAIU,KAAAC,OAIJ,GAMI,KAAAC,gBAA0B,EAgJpC,OA9IS,EAAAhiB,YAAP,WAIE,OAHKohB,KACHA,GAAkB,IAAIa,GAEjBb,IAIT,YAAA3N,UAAA,W,gBACE,IAAsB,iBAAA1rD,OAAOC,KAAKiT,KAAK8mD,SAAO,8BAAE,CAA3C,IAAMvtD,EAAO,Q,IAChB,IAAoB,2BAAAzM,OAAOC,KAAKiT,KAAK8mD,OAAOvtD,MAAS,8BAAE,CAAlD,IAAM0tD,EAAK,QACdjnD,KAAK8mD,OAAOvtD,GAAS0tD,GAAOzO,a,sMAKlC,YAAAC,OAAA,W,gBACE,IAAsB,iBAAA3rD,OAAOC,KAAKiT,KAAK8mD,SAAO,8BAAE,CAA3C,IAAMvtD,EAAO,Q,IAChB,IAAoB,2BAAAzM,OAAOC,KAAKiT,KAAK8mD,OAAOvtD,MAAS,8BAAE,CAAlD,IAAM0tD,EAAK,QACdjnD,KAAK8mD,OAAOvtD,GAAS0tD,GAAOxO,U,sMAWlC,YAAAyO,gBAAA,SACEhN,EACAiN,EACArb,EACAr8B,GAEA,IAAIw3C,EAA4Bnb,GAAOoO,EAAI1sD,QAAQ45D,iBACrCz5D,IAAVs5D,IACG/M,EAAI1sD,QAAQ65D,WACfx+C,EACE,kHAKJJ,EAAI,kCAAmCyxC,EAAI1sD,QAAQ65D,WACnDJ,EAAW/M,EAAI1sD,QAAQ65D,UAAS,gCAGlC,IAGIC,EAHAx2C,EAAYF,EAAcq2C,EAAOx3C,GACjC0B,EAAWL,EAAUK,SAIrBo2C,OAAqC55D,EAClB,qBAAZw/C,IACToa,EAAiB,oKAGfA,GACFD,GAAa,EACbL,EAAQ,UAAUM,EAAc,OAAOp2C,EAAS5B,UAEhD4B,GADAL,EAAYF,EAAcq2C,EAAOx3C,IACZ0B,UAErBm2C,GAAcx2C,EAAUK,SAAS7B,OAGnC,IAAM6qC,EACJ1qC,GAAa63C,EACT,IAAIV,GACJ,IAAIY,GAA0BtN,EAAKiN,GAYzC,OAVAlzC,GAAY,gCAAiC,EAAGnD,GAC3CA,EAAU/M,KAAKyJ,WAClB3E,EACE,4FAKS7I,KAAKynD,WAAWt2C,EAAU+oC,EAAKC,GAEhCmH,UAQd,YAAAoG,WAAA,SAAWviC,GACT,IAAMwiC,EAAWhpC,UAAQ3e,KAAK8mD,OAAQ3hC,EAAK+0B,IAAItsD,MAE1C+5D,GAAYhpC,UAAQgpC,EAAUxiC,EAAKyqB,UAAUn/B,iBAAmB0U,GACnEtc,EACE,YAAYsc,EAAK+0B,IAAItsD,KAAI,IAAIu3B,EAAKyqB,UAAS,+BAG/CzqB,EAAKqzB,mBACEmP,EAASxiC,EAAKyqB,UAAUn/B,gBAWjC,YAAAg3C,WAAA,SACEt2C,EACA+oC,EACAC,GAEA,IAAIwN,EAAWhpC,UAAQ3e,KAAK8mD,OAAQ5M,EAAItsD,MAEnC+5D,IACHA,EAAW,GACX3nD,KAAK8mD,OAAO5M,EAAItsD,MAAQ+5D,GAG1B,IAAIxiC,EAAOxG,UAAQgpC,EAAUx2C,EAASV,eAStC,OARI0U,GACFtc,EACE,2HAGJsc,EAAO,IAAI87B,GAAK9vC,EAAUnR,KAAK+mD,eAAgB7M,EAAKC,GACpDwN,EAASx2C,EAASV,eAAiB0U,EAE5BA,GAOT,YAAA80B,gBAAA,SAAgBA,GACdj6C,KAAK+mD,eAAiB9M,GAE1B,EA9JA,G,cCME,WAAoB5lC,GAAA,KAAAA,QACZA,aAAiB4sC,IACrBp4C,EACE,wEAKJ7I,KAAKmc,MAAQ,IAAI+kC,GAAU7sC,EAAO3H,EAAKof,OAEvC9rB,KAAK4nD,SAAW,IAAIC,GAAkB7nD,MAkF1C,OA/EE,sBAAI,kBAAG,C,IAAP,WACE,OAAOA,KAAKqU,MAAM6lC,K,gCAepB,YAAAtrD,IAAA,SAAImV,GAIF,OAHA/D,KAAK8nD,cAAc,OACnBtzC,mBAAiB,eAAgB,EAAG,EAAG/mB,UAAUC,QAE7CqW,aAAgBm9C,GACXlhD,KAAK+nD,WAAWhkD,EAAKqC,iBAGdzY,IAAToW,EAAqB/D,KAAKmc,MAAM9O,MAAMtJ,GAAQ/D,KAAKmc,OAU5D,YAAA4rC,WAAA,SAAWjc,GAET,IAAMkc,EAAU,sBAChBhoD,KAAK8nD,cAAcE,GACnBxzC,mBAAiBwzC,EAAS,EAAG,EAAGv6D,UAAUC,QAC1C,IAAMu6D,EAAYr3C,EAAck7B,EAAK9rC,KAAKqU,MAAMu7B,UAAUngC,WAC1DwE,GAAY+zC,EAAS,EAAGC,GAExB,IAAM92C,EAAW82C,EAAU92C,SAa3B,OAZIA,EAAS9B,OAASrP,KAAKqU,MAAMu7B,UAAUvgC,MACzCxG,EACEm/C,6DAGE72C,EAAS9B,KACT,iBACCrP,KAAKqU,MAAMu7B,UAAuBvgC,KACnC,KAICrP,KAAKpR,IAAIq5D,EAAUlkD,KAAKqC,aAMzB,YAAA0hD,cAAR,SAAsBE,GACD,OAAfhoD,KAAKqU,OACPxL,EAAM,eAAiBm/C,EAAU,4BAKrC,YAAAE,UAAA,WACE1zC,mBAAiB,qBAAsB,EAAG,EAAG/mB,UAAUC,QACvDsS,KAAK8nD,cAAc,aACnB9nD,KAAKqU,MAAMmkC,aAGb,YAAA2P,SAAA,WACE3zC,mBAAiB,oBAAqB,EAAG,EAAG/mB,UAAUC,QACtDsS,KAAK8nD,cAAc,YACnB9nD,KAAKqU,MAAMokC,UA3GG,EAAA2P,YAAc,CAC5BC,UAAW,CACT,MAAO,aAETC,UAAW,SAAC3+B,GACV,MAAO,CACL,MAAO,CACL,UAAaA,MAsGvB,E,GAEA,cAEE,WAAmB23B,GAAA,KAAAA,WAerB,OAZQ,YAAAhjD,OAAN,W,gGAEG0B,KAAKshD,SAAiBwG,cAAc,UAErCd,GAAYjiB,cAAc2iB,WAAY1nD,KAAKshD,SAAiBjtC,OAE3DrU,KAAKshD,SAAiBjtC,MAAQ,KAE9BrU,KAAKshD,SAAiBnlC,MAAQ,KAC/Bnc,KAAKshD,SAASsG,SAAW,KACzB5nD,KAAKshD,SAAW,K,WAEpB,EAjBA,G,kDCxHgC,WAC9BtU,GAAoBhE,gBACpBF,GAAsBD,c,gBAGO,WAC7BC,GAAsBE,iB,sBAIa,WACnC,OAAOgE,GAAmB,e,yBAGY,SACtCp+C,EACAwL,GAGCxL,EAAIu2B,KAAKs1B,sBAA8BhG,uBAAyBr6C,G,MAG9C,SAAUxL,EAAgBkuD,GAC7CluD,EAAIu2B,KAAK4d,MAAM+Z,I,sBAGoB,SAAUluD,EAAgBwuD,GAC7DxuD,EAAIu2B,KAAKg4B,sBAAsBC,I,gBAGF,SAAUxuD,GACvC,OAAOA,EAAIu2B,KAAKi1B,iB,oBAGiB,SACjCxrD,EACAwL,GAEA,OAAOxL,EAAIu2B,KAAK22B,qBAAqB1hD,MC5C1BmuD,GAAiBxU,GAO7BA,GAAqBl1C,UAAkB2pD,aAAe,SACrDz7C,EACAwH,GAEAvU,KAAKwxC,YAAY,IAAK,CAAElyC,EAAGyN,GAAcwH,IAQ1Cw/B,GAAqBl1C,UAAkB4pD,KAAO,SAC7ChuD,EACAiuD,GAEA1oD,KAAKwxC,YAAY,OAAQ,CAAElG,EAAG7wC,GAAQiuD,IAIjC,IAAMC,GAAqBpQ,GA2BrBqQ,GAAmBx3C,E,oFArBN,SAAUy3C,GAClC,IAAMC,EAAS/U,GAAqBl1C,UAAUy0C,IAY9C,OAXAS,GAAqBl1C,UAAUy0C,IAAM,SACnCvmC,EACAtS,EACA8Z,EACAuE,QAEanrB,IAATmrB,IACFA,EAAO+vC,KAETC,EAAO/pD,KAAKiB,KAAM+M,EAAYtS,EAAM8Z,EAAYuE,IAE3C,WACLi7B,GAAqBl1C,UAAUy0C,IAAMwV,I,oCAaV,SAAUlmD,GACvC,OAAOA,EAAM4lB,mB,gBAQgB,SAAU,GACvCw+B,GAAYjiB,cAAckV,gBAAgB,MC1DtC,GAAc,GAAS,Y,SAEb,GAAiB,I,SnBhBHt4C,GAC5B8qC,GAAc9qC,EmBiBd,CAAc,EAAS,aAGrB,IAAI,EAAa,EAAgC,SAAS,kBAC1D,IAAIvU,YACF,YACA,SAAC,EAAW,GAGV,IAAM,EAAM,EAAU,YAAY,OAAO,eACnC,EAAe,EAAU,YAAY,iBAE3C,OAAO,GAAY,cAAc,gBAC/B,EACA,EACA,KAEH,UAGA,gBAEC,CACE,UAAS,GACT,MAAK,GACL,SAAQ,GACR,aAAY,GACZ,cAAa,EACb,SAAQ,GACR,YAAW,GACX,YAAW,KAGd,sBAAqB,IAGxB,EAAO,gB,+BAELm6C,gBACF,EAAO,QAAU,GAIrB,GAAiB/6C,W,8SCtDXu8D,EAAuD,CAC3DC,GAAI,KACJC,UAAW,YACXC,QAAS,UACTC,iBAAkB,mBAClBC,kBAAmB,oBACnBC,UAAW,YACXC,eAAgB,iBAChBC,kBAAmB,oBACnBC,gBAAiB,kBACjBC,mBAAoB,qBACpBC,oBAAqB,sBACrBC,QAAS,UACTC,aAAc,eACdC,cAAe,gBACfjC,SAAU,WACVkC,YAAa,cACbC,UAAW,aAOb,cAYE,WAAYj0D,EAA0BE,EAAkBg0D,GAAxD,MACE,YAAMh0D,IAAQ,K,OAKdlJ,OAAOm9D,eAAe,EAAMC,EAAerrD,WAE3C,EAAK/I,KAAOA,EACZ,EAAKk0D,QAAUA,E,EAEnB,OAvBoC,iBAuBpC,EAvBA,CAAoClhD,OCdpC,iBAGE,WACEq+C,EACAgD,GAFF,WAFQ,KAAA5D,KAAoC,KACpC,KAAA6D,UAAsC,KAK5CpqD,KAAKumD,KAAOY,EAAaxqD,aAAa,CAAEC,UAAU,IAClDoD,KAAKoqD,UAAYD,EAAkBxtD,aAAa,CAC9CC,UAAU,IAGPoD,KAAKumD,MACRY,EAAahtD,MAAMqF,MACjB,SAAA+mD,GAAQ,OAAC,EAAKA,KAAOA,KACrB,eAMCvmD,KAAKoqD,WACRD,EAAkBhwD,MAAMqF,MACtB,SAAA4qD,GAAa,OAAC,EAAKA,UAAYA,KAC/B,eAiDR,OA1CQ,YAAAC,aAAN,W,sHACE,IAAKrqD,KAAKumD,KACR,cAAO54D,G,iBAIO,O,sBAAA,GAAMqS,KAAKumD,KAAKlO,Y,OAC9B,OADMxjD,EAAQ,UAId,GAAOA,EAAMyjD,aAFX,QAAO3qD,G,OAKT,O,SAAA,QAAOA,G,yBAIL,YAAA28D,mBAAN,W,yFACE,IACGtqD,KAAKoqD,aACJ,iBAAkBzxD,OACQ,YAA5B4xD,aAAaC,WAEb,cAAO78D,GAGT,IACE,SAAOqS,KAAKoqD,UAAU/R,YACtB,MAAO79C,GAKP,cAAO7M,G,iBAIL,YAAA88D,WAAN,W,wHACoB,SAAMzqD,KAAKqqD,gB,OACL,OADlBpyD,EAAY,SACM,GAAM+H,KAAKsqD,sB,OACnC,OADMI,EAAkB,SACxB,GAAO,CAAEzyD,UAAS,EAAEyyD,gBAAe,YAEvC,EAzEA,GClBA,SAASC,EAGPC,EACAjgD,GAEA,IAAM3T,EAAqC,GAC3C,IAAK,IAAM2C,KAAOixD,EACZA,EAAErgD,eAAe5Q,KACnB3C,EAAO2C,GAAOgR,EAAEigD,EAAEjxD,KAGtB,OAAO3C,EAGT,+BAiEA,OA9DE,YAAAoC,OAAA,SAAOqB,GAAP,WACE,GAAY,MAARA,EACF,OAAO,KAKT,GAHIA,aAAgBxF,SAClBwF,EAAOA,EAAKowD,WAEM,kBAATpwD,GAAqBqwD,SAASrwD,GAGvC,OAAOA,EAET,IAAa,IAATA,IAA0B,IAATA,EACnB,OAAOA,EAET,GAA6C,oBAAzC3N,OAAO+R,UAAUuH,SAASrH,KAAKtE,GACjC,OAAOA,EAET,GAAImE,MAAM8F,QAAQjK,GAChB,OAAOA,EAAK+kB,KAAI,SAAAurC,GAAK,SAAK3xD,OAAO2xD,MAEnC,GAAoB,oBAATtwD,GAAuC,kBAATA,EACvC,OAAOkwD,EAAUlwD,GAAO,SAAAswD,GAAK,SAAK3xD,OAAO2xD,MAG3C,MAAM,IAAIjiD,MAAM,mCAAqCrO,IAKvD,YAAAuwD,OAAA,SAAOx1D,GAAP,WACE,GAAY,MAARA,EACF,OAAOA,EAET,GAAKA,EAAoC,SACvC,OAASA,EAAoC,UAC3C,IAzDU,iDA2DV,IA1DmB,kDA8DjB,IAAM3C,EAAQoC,OAAQO,EAAmC,OACzD,GAAIi5C,MAAM57C,GACR,MAAM,IAAIiW,MAAM,qCAAuCtT,GAEzD,OAAO3C,EAET,QACE,MAAM,IAAIiW,MAAM,qCAAuCtT,GAI7D,OAAIoJ,MAAM8F,QAAQlP,GACTA,EAAKgqB,KAAI,SAAAurC,GAAK,SAAKC,OAAOD,MAEf,oBAATv1D,GAAuC,kBAATA,EAChCm1D,EAAUn1D,GAAO,SAAAu1D,GAAK,SAAKC,OAAOD,MAGpCv1D,GAEX,EAjEA,GC+CA,iBAgBE,WACU4wD,EACRe,EACAgD,EACAc,EACSC,GALX,gBAIE,IAAAD,MAAA,eAHQ,KAAA7E,OAIC,KAAA8E,YAnBM,KAAAC,WAAa,IAAIC,EAC1B,KAAAC,eAAgC,KA2CxC,KAAAzD,SAAW,CACTtpD,OAAQ,WACN,OAAOlG,QAAQC,QAAQ,EAAKizD,mBAzB9BtrD,KAAKurD,gBAAkB,IAAIC,EAAgBrE,EAAcgD,GAEzDnqD,KAAKyrD,kBAAoB,IAAIrzD,SAAQ,SAAAC,GACnC,EAAKizD,cAAgB,WACnB,OAAOjzD,QAKX,IACE,IAAMyzC,EAAM,IAAI4f,IAAIT,GACpBjrD,KAAK2rD,aAAe7f,EAAIyB,OACxBvtC,KAAK4rD,OAAS,cACd,MAAOpxD,GACPwF,KAAK2rD,aAAe,KACpB3rD,KAAK4rD,OAASX,GA8KpB,OA1KE,sBAAI,kBAAG,C,IAAP,WACE,OAAOjrD,KAAKomD,M,gCAad,YAAAyF,KAAA,SAAKj+D,GACH,IAAMy5D,EAAYrnD,KAAKomD,KAAK54D,QAAQ65D,UACpC,OAA4B,OAAxBrnD,KAAKqrD,eACQrrD,KAAKqrD,eACJ,IAAIhE,EAAS,IAAIrnD,KAAK4rD,OAAM,IAAIh+D,EAGxB,OAAtBoS,KAAK2rD,aACG3rD,KAAK2rD,aAAY,IAAI/9D,EAG1B,WAAWoS,KAAK4rD,OAAM,IAAIvE,EAAS,uBAAuBz5D,GAUnE,YAAAk+D,qBAAA,SAAqBve,GACnBvtC,KAAKqrD,eAAiB9d,GAOxB,YAAAwe,cAAA,SAAcn+D,EAAcJ,GAA5B,WACE,OAAO,SAAAiN,GACL,OAAO,EAAKsE,KAAKnR,EAAM6M,EAAMjN,GAAW,MAW9B,YAAAw+D,SAAd,SACElgB,EACA10C,EACAV,G,wHAEAA,EAAQ,gBAAkB,mB,iBAIb,O,sBAAA,GAAMsJ,KAAKkrD,UAAUpf,EAAK,CACnCp0C,OAAQ,OACRN,KAAMO,KAAKC,UAAUR,GACrBV,QAAO,K,cAHT9B,EAAW,S,aAUX,O,SAAA,GAAO,CACLsB,OAAQ,EACRV,KAAM,O,OAGNA,EAAgC,K,iBAE3B,O,sBAAA,GAAMZ,EAASY,Q,cAAtBA,EAAO,S,0CAIT,SAAO,CACLU,OAAQtB,EAASsB,OACjBV,KAAI,YASM,YAAAuJ,KAAd,SACEnR,EACA6M,EACAjN,G,0IAUgB,OARVs+C,EAAM9rC,KAAK6rD,KAAKj+D,GAGtB6M,EAAOuF,KAAKmrD,WAAW/xD,OAAOqB,GACxBrD,EAAO,CAAEqD,KAAI,GAGb/D,EAAqC,GAC3B,GAAMsJ,KAAKurD,gBAAgBd,c,OAa1B,OAbXj5D,EAAU,UACJyG,YACVvB,EAAO,cAAoB,UAAYlF,EAAQyG,WAE7CzG,EAAQk5D,kBACVh0D,EAAQ,8BAAgClF,EAAQk5D,iBAI5Ct+C,EAAU5e,EAAQ4e,SAAW,IAE7B,EAzLV,SACE6/C,GAKA,IAAIC,EACEp3C,EAAU,IAAI1c,SAAe,SAAC+zD,EAAGzwD,GACrCwwD,EAAQ5zD,YAAW,WACjBoD,EAAO,IAAIwuD,EAAe,oBAAqB,wBAC9C+B,MAGL,MAAO,CACLC,MAAK,EACLp3C,QAAO,GA0KsCs3C,CAAUhgD,GAA/C8/C,EAAK,QAAWG,EAAgB,UAEvB,GAAMj0D,QAAQk0D,KAAK,CAClCC,EAAoBL,EAAOlsD,KAAKgsD,SAASlgB,EAAK10C,EAAMV,IACpD21D,EACAE,EAAoBL,EAAOlsD,KAAKyrD,sB,OAIlC,KAPM72D,EAAW,UAQf,MAAM,IAAIs1D,EACR,YACA,4CAUJ,GALMv0D,E,SHzIRO,EACAs2D,EACArB,GAEA,IAAIr1D,EA5CN,SAA2BI,GAEzB,GAAIA,GAAU,KAAOA,EAAS,IAC5B,MAAO,KAET,OAAQA,GACN,KAAK,EAEH,MAAO,WACT,KAAK,IACH,MAAO,mBACT,KAAK,IACH,MAAO,kBACT,KAAK,IACH,MAAO,oBACT,KAAK,IACH,MAAO,YACT,KAAK,IACH,MAAO,UACT,KAAK,IACH,MAAO,qBACT,KAAK,IACH,MAAO,YACT,KAAK,IACH,MAAO,WACT,KAAK,IACH,MAAO,gBACT,KAAK,IACH,MAAO,cACT,KAAK,IACH,MAAO,oBAGX,MAAO,UAWIu2D,CAAkBv2D,GAGzBw2D,EAAsB52D,EAEtBk0D,OAAmBr8D,EAGvB,IACE,IAAMg/D,EAAYH,GAAYA,EAAS72D,MACvC,GAAIg3D,EAAW,CACb,IAAM,EAASA,EAAUz2D,OACzB,GAAsB,kBAAX,EAAqB,CAC9B,IAAK6yD,EAAa,GAEhB,OAAO,IAAImB,EAAe,WAAY,YAExCp0D,EAAOizD,EAAa,GAIpB2D,EAAc,EAGhB,IAAM12D,EAAU22D,EAAU32D,QACH,kBAAZA,IACT02D,EAAc12D,QAIArI,KADhBq8D,EAAU2C,EAAU3C,WAElBA,EAAUmB,EAAWH,OAAOhB,KAGhC,MAAOxvD,IAIT,MAAa,OAAT1E,EAIK,KAGF,IAAIo0D,EAAep0D,EAAM42D,EAAa1C,GGwF7B4C,CACZh4D,EAASsB,OACTtB,EAASY,KACTwK,KAAKmrD,YAGL,MAAMx1D,EAGR,IAAKf,EAASY,KACZ,MAAM,IAAI00D,EACR,WACA,sCAUJ,GAH4B,qBAHxB2C,EAAej4D,EAASY,KAAKiF,QAI/BoyD,EAAej4D,EAASY,KAAKwB,QAEH,qBAAjB61D,EAET,MAAM,IAAI3C,EAAe,WAAY,mCAMvC,SAAO,CAAEzvD,KAFWuF,KAAKmrD,WAAWH,OAAO6B,aAI/C,EApNA,GAsNA,SAAeN,EACbL,EACAp3C,G,sHAEe,SAAMA,G,OAGrB,OAHM9d,EAAS,SAEfixC,aAAaikB,GACb,GAAOl1D,W,SChRP9E,EACAg5D,GAEA,IAAM4B,EAAmB,CAEvBC,UAAWC,GAqBb96D,EAAS01D,SAASqF,kBAChB,IAAI7/D,YA9Be,aAWrB,SACE0F,EACAo6D,GAGA,IAAMhT,EAAMpnD,EAAUq6D,YAAY,OAAOxwD,eACnCwqD,EAAer0D,EAAUq6D,YAAY,iBACrChD,EAAoBr3D,EAAUq6D,YAAY,aAGhD,OAAO,IAAIH,EACT9S,EACAiN,EACAgD,EACA+C,EACAhC,KAImC,UAClCkC,gBAAgBN,GAChBO,sBAAqB,ILrC5B,CAAkB7gE,UAAgC,MAAM,KAAK,OAC7DA,UAAS,gB,qFM4BG8gE,E,sDvHbCC,IAAS,MACpB,6BACE,kDACF,8BACE,gDACF,0BACE,wDACF,wBACE,qEACF,wBACE,mEACF,yBACE,2EACF,wCACE,+EACF,4BACE,qEACF,8BACE,2DACF,8BACE,yEAEF,yBACE,oEACF,2BACE,wDACF,4BACE,4IAEF,6BACE,uEACF,wBACE,iEACF,uBAA+B,yCAC/B,mCACE,wIAEH,GAYY33D,EAAgB,IAAI,eAC/B,YACA,YACA23D,GDvEWC,EACX,0FAOWC,EAAsB,kB,SyHXnBC,EAAc30D,GAC5B,IAAM40D,EAAa,IAAIj1D,WAAWK,GAElC,OADqBC,KAAKC,OAAOC,aAAY,MAAnBD,OAAM,mBAAiB00D,KAC7Bz4D,QAAQ,KAAM,IAAIA,QAAQ,MAAO,KAAKA,QAAQ,MAAO,K,SAG3D04D,EAAcC,GAS5B,IARA,IACMnmD,GAAUmmD,EADA,IAAIC,QAAQ,EAAKD,EAAangE,OAAS,GAAM,IAE1DwH,QAAQ,MAAO,KACfA,QAAQ,KAAM,KAEX64D,EAAUC,KAAKtmD,GACfumD,EAAc,IAAIv1D,WAAWq1D,EAAQrgE,QAElCma,EAAI,EAAGA,EAAIkmD,EAAQrgE,SAAUma,EACpComD,EAAYpmD,GAAKkmD,EAAQG,WAAWrmD,GAEtC,OAAOomD,GDiBT,SAAYX,GACV,gCACA,8CAFF,CAAYA,MAAW,KESvB,IAAMa,EAAc,uBAMdC,EAAwB,yB,SAERC,EACpBC,G,qJAEI,cAAezsD,UAGC,GAAOA,UAEtB0sD,aALD,M,OAQF,GALMA,EAAY,UAGFA,EAAU/uC,KAAI,SAAAle,GAAM,OAAAA,EAAG1T,QAE1B4gE,SAASL,GAEpB,SAAO,M,iBAMA,OAFPM,EAAoC,KAE7B,GAAM,iBAAON,EAtBH,GAsBgC,SAAM7sD,GAAE,uD,kFAC3D,OAAIA,EAAG1G,WAAa,EAElB,IAGG0G,EAAGotD,iBAAiBnoD,SAAS6nD,GAMpB,IADR9rD,EAAchB,EAAGC,YAAYe,YAAY8rD,IACf7tD,MAAM,eAAepG,IAAIm0D,IAJvD,I,OAKF,OADMz7D,EAAQ,SACd,GAAMyP,EAAYioB,S,OAElB,GAFA,UAEK13B,EAEH,UAGF,GAAsB,IAAlByO,EAAG1G,WAAkB,CAGvB,KAFM+zD,EAAa97D,GAEH0zD,OAASoI,EAAWC,SAAWD,EAAWx3D,SACxD,UAGFs3D,EAAe,CACb55D,MAAO85D,EAAWE,SAClBC,WAAiC,QAAvB,EAAEH,EAAWG,kBAAU,QAAI15D,KAAKC,MAC1C05D,oBAAqB,CACnBxI,KAAMoI,EAAWpI,KACjBqI,OAAQD,EAAWC,OACnBz3D,SAAUw3D,EAAWx3D,SACrB63D,QAASL,EAAWK,QACpBC,SACiC,kBAAxBN,EAAWM,SACdN,EAAWM,SACXvB,EAAciB,EAAWM,iBAGR,IAAlB3tD,EAAG1G,YAce,IAAlB0G,EAAG1G,cAXZ6zD,EAAe,CACb55D,OAHI85D,EAAa97D,GAGCg8D,SAClBC,WAAYH,EAAWG,WACvBC,oBAAqB,CACnBxI,KAAMmH,EAAciB,EAAWpI,MAC/BqI,OAAQlB,EAAciB,EAAWC,QACjCz3D,SAAUw3D,EAAWx3D,SACrB63D,QAASL,EAAWK,QACpBC,SAAUvB,EAAciB,EAAWM,a,4BAsB3C,OA1EW,SAuERt0D,QAGH,GAAM,mBAASwzD,I,OACf,OADA,SACA,GAAM,mBAAS,yB,OACf,OADA,SACA,GAAM,mBAAS,c,OAEf,OAFA,SAEA,GAAOe,EAAkBT,GAAgBA,EAAe,aAG1D,SAASS,EACPT,GAEA,IAAKA,IAAiBA,EAAaM,oBACjC,OAAO,EAED,IAAAA,EAAwBN,EAAL,oBAC3B,MACqC,kBAA5BA,EAAaK,YACpBL,EAAaK,WAAa,GACI,kBAAvBL,EAAa55D,OACpB45D,EAAa55D,MAAMnH,OAAS,GACQ,kBAA7BqhE,EAAoBxI,MAC3BwI,EAAoBxI,KAAK74D,OAAS,GACI,kBAA/BqhE,EAAoBH,QAC3BG,EAAoBH,OAAOlhE,OAAS,GACI,kBAAjCqhE,EAAoB53D,UAC3B43D,EAAoB53D,SAASzJ,OAAS,GACC,kBAAhCqhE,EAAoBC,SAC3BD,EAAoBC,QAAQthE,OAAS,GACG,kBAAjCqhE,EAAoBE,UAC3BF,EAAoBE,SAASvhE,OAAS,EjHtKnC,IAEDoN,EAAoB,2BAEtBC,EAAgC,KACpC,SAASo0D,IAaP,OAZKp0D,IACHA,EAAY,iBAPa,8BACJ,GAM+B,SAAAq0D,GAKlD,OAAQA,EAAUx0D,YAChB,KAAK,EACHw0D,EAAUv0D,kBAAkBC,QAI7BC,E,SAIas0D,EACpBC,G,0IAGW,OADL31D,EAAML,EAAOg2D,GACR,GAAMH,K,OACI,SADV,SAER5tD,YAAYzG,GACZwH,YAAYxH,GACZX,IAAIR,I,cAHD80D,EAAe,UAMnB,GAAOA,GADL,M,OAIsB,SAAMJ,EAC5BiB,EAAqB94D,UAAU83D,W,cAD3BiB,EAAkB,UAItB,GAAMC,EAAMF,EAAsBC,IADhC,M,OAEF,OADA,SACA,GAAOA,G,iCAMSC,EACpBF,EACAb,G,0IAGW,OADL90D,EAAML,EAAOg2D,GACR,GAAMH,K,OAEjB,OAFM7tD,EAAK,SAEX,IADMmuD,EAAKnuD,EAAGC,YAAYzG,EAAmB,cACpCwH,YAAYxH,GAAmBw4C,IAAImb,EAAc90D,I,OAC1D,OADA,SACA,GAAM81D,EAAGvuD,U,OACT,OADA,SACA,GAAOutD,U,SAIaiB,EACpBJ,G,0IAGW,OADL31D,EAAML,EAAOg2D,GACR,GAAMH,K,OAEjB,OAFM7tD,EAAK,SAEX,IADMmuD,EAAKnuD,EAAGC,YAAYzG,EAAmB,cACpCwH,YAAYxH,GAAmBwD,OAAO3E,I,OAC/C,OADA,SACA,GAAM81D,EAAGvuD,U,cAAT,S,WAYF,SAAS5H,EAAO,GACd,OADyB,YACRhC,M,SkHlEGq4D,EACpBL,EACAP,G,gJAEgB,SAAM54D,EAAWm5D,I,OAA3B54D,EAAU,SACVU,EAAOw4D,EAAQb,GAEfc,EAAmB,CACvBn4D,OAAQ,OACRhB,QAAO,EACPU,KAAMO,KAAKC,UAAUR,I,iBAKJ,O,sBAAA,GAAMS,MACrBi4D,EAAYR,EAAqB94D,WACjCq5D,I,OAEa,SAJE,SAIar6D,Q,cAA9Bq3D,EAAe,S,aAEf,M,WAAMj3D,EAAcvB,OAAM,yBAAmC,CAC3D07D,UAAW,I,OAIf,GAAIlD,EAAal3D,MAEf,MADMK,EAAU62D,EAAal3D,MAAMK,QAC7BJ,EAAcvB,OAAM,yBAAmC,CAC3D07D,UAAW/5D,IAIf,IAAK62D,EAAah4D,MAChB,MAAMe,EAAcvB,OAAM,4BAG5B,SAAOw4D,EAAah4D,c,SAGAm7D,EACpBV,EACAb,G,gJAEgB,SAAMt4D,EAAWm5D,I,OAA3B54D,EAAU,SACVU,EAAOw4D,EAAQnB,EAAaM,qBAE5BkB,EAAgB,CACpBv4D,OAAQ,QACRhB,QAAO,EACPU,KAAMO,KAAKC,UAAUR,I,iBAKJ,O,sBAAA,GAAMS,MAClBi4D,EAAYR,EAAqB94D,WAAU,IAAIi4D,EAAa55D,MAC/Do7D,I,OAEa,SAJE,SAIaz6D,Q,cAA9Bq3D,EAAe,S,aAEf,M,WAAMj3D,EAAcvB,OAAM,sBAAgC,CACxD07D,UAAW,I,OAIf,GAAIlD,EAAal3D,MAEf,MADMK,EAAU62D,EAAal3D,MAAMK,QAC7BJ,EAAcvB,OAAM,sBAAgC,CACxD07D,UAAW/5D,IAIf,IAAK62D,EAAah4D,MAChB,MAAMe,EAAcvB,OAAM,yBAG5B,SAAOw4D,EAAah4D,c,SAGAq7D,EACpBZ,EACAz6D,G,8IAEgB,SAAMsB,EAAWm5D,I,OAA3B54D,EAAU,SAEVy5D,EAAqB,CACzBz4D,OAAQ,SACRhB,QAAO,G,iBAIU,O,sBAAA,GAAMmB,MAClBi4D,EAAYR,EAAqB94D,WAAU,IAAI3B,EAClDs7D,I,OAEgC,SAJjB,SAIgC36D,Q,OACjD,IADMq3D,EAA4B,UACjBl3D,MAEf,MADMK,EAAU62D,EAAal3D,MAAMK,QAC7BJ,EAAcvB,OAAM,2BAAqC,CAC7D07D,UAAW/5D,I,mBAIf,M,WAAMJ,EAAcvB,OAAM,2BAAqC,CAC7D07D,UAAW,I,wBAKjB,SAASD,EAAY,GACnB,MAAUM,uDADoB,YACW,iBAG3C,SAAej6D,EAAW,G,IACxBK,EAAS,YACT65D,EAAa,gB,sIAEK,SAAMA,EAAchY,Y,OAEtC,OAFMpgD,EAAY,SAElB,GAAO,IAAI5B,QAAQ,CACjB,eAAgB,mBAChBC,OAAQ,mBACR,iBAAkBE,EAAUJ,OAC5B,qCAAsC,OAAO6B,YAIjD,SAAS23D,EAAQ,G,IACfhB,EAAM,SACNrI,EAAI,OACJpvD,EAAQ,WACR83D,EAAQ,WAEF73D,EAAuB,CAC3Bk5D,IAAK,CACHn5D,SAAQ,EACRovD,KAAI,EACJqI,OAAM,IAQV,OAJIK,IAAazB,IACfp2D,EAAKk5D,IAAIC,kBAAoBtB,GAGxB73D,E,SCzJaihD,EACpBiX,EACAkB,EACAvB,G,4IAEA,GAAgC,YAA5B1E,aAAaC,WACf,MAAM50D,EAAcvB,OAAM,sBAKH,SAAMo8D,EAAoBD,EAAgBvB,I,OAC9C,OADfyB,EAAmB,SACJ,GAAMrB,EAAMC,I,cAA3Bb,EAAe,SAEfM,EAA2C,CAC/CE,SAAQ,EACRD,QAASwB,EAAeG,MACxBx5D,SAAUu5D,EAAiBv5D,SAC3BovD,KAAMmH,EAAcgD,EAAiBp3D,OAAO,SAC5Cs1D,OAAQlB,EAAcgD,EAAiBp3D,OAAO,YAG3Cm1D,EAAD,MAEF,GAAOmC,EAAYtB,EAAsBP,I,UAsH7C,SACE8B,EACAC,GAEA,IAAMC,EAAkBD,EAAe7B,WAAa4B,EAAU5B,SACxD+B,EAAkBF,EAAe35D,WAAa05D,EAAU15D,SACxD85D,EAAcH,EAAevK,OAASsK,EAAUtK,KAChD2K,EAAgBJ,EAAelC,SAAWiC,EAAUjC,OAE1D,OAAOmC,GAAmBC,GAAmBC,GAAeC,EA7HzDC,CAAa1C,EAAaM,oBAAsBA,GAAjD,Y,iBAIE,O,sBAAA,GAAMmB,EAAmBZ,EAAsBb,EAAa55D,Q,cAA5D,S,+BAGA4J,QAAQsK,KAAK,G,aAGf,SAAO6nD,EAAYtB,EAAsBP,I,OACpC,OAAI35D,KAAKC,OAASo5D,EAAaK,WAvCZ,OAyCxB,GAAOsC,EACL,CACEv8D,MAAO45D,EAAa55D,MACpBi6D,WAAY15D,KAAKC,MACjB05D,oBAAmB,GAErBO,EACAkB,IAIF,GAAO/B,EAAa55D,O,iCAQFw8D,EACpB/B,EACAkB,G,wIAEqB,SAAMnB,EAAMC,I,cAA3Bb,EAAe,UAEnB,GAAMyB,EAAmBZ,EAAsBb,EAAa55D,QAD1D,M,OAEF,OADA,SACA,GAAM66D,EAASJ,I,OAAf,S,iBAIuB,SAAMkB,EAAec,YAAYC,mB,OAC1D,OADMb,EAAmB,UAEvB,GAAOA,EAAiBc,eAI1B,IAAO,UAGT,SAAeJ,EACb3C,EACAa,EACAkB,G,0IAGuB,O,sBAAA,GAAMR,EACzBV,EACAb,I,OASF,OAXMgD,EAAe,SAKfC,EAAmB,yCACpBjD,GAAY,CACf55D,MAAO48D,EACP3C,WAAY15D,KAAKC,QAGnB,GAAMm6D,EAAMF,EAAsBoC,I,OAClC,OADA,SACA,GAAOD,G,OAEP,O,WAAA,GAAMJ,EAAY/B,EAAsBkB,I,OACxC,MADA,SACM,E,wBAIV,SAAeI,EACbtB,EACAP,G,wIAEc,SAAMY,EAClBL,EACAP,I,OAOF,OATMl6D,EAAQ,SAIR45D,EAA6B,CACjC55D,MAAK,EACLi6D,WAAY15D,KAAKC,MACjB05D,oBAAmB,GAErB,GAAMS,EAAMF,EAAsBb,I,OAClC,OADA,SACA,GAAOA,EAAa55D,cAMtB,SAAe47D,EACbD,EACAvB,G,sIAEqB,SAAMuB,EAAec,YAAYC,mB,OACtD,OADMI,EAAe,UAEnB,GAAOA,GAET,GAAOnB,EAAec,YAAYM,UAAU,CAC1CC,iBAAiB,EAGjBC,qBAAsBlE,EAAcqB,a,SClJxB8C,EAAiBt3D,GAE/B,MAAuB,kBAATA,KAAuBA,GAAQgzD,KAAuBhzD,ECmBtE,iBAaE,WACmB60D,GADnB,WACmB,KAAAA,uBATX,KAAA0C,0BAA4C,KAC5C,KAAA/C,SAA0B,KAC1B,KAAAgD,iBAIuB,KAK7Bt5D,KAAKksC,iBAAiB,QAAQ,SAAArqC,GAC5BA,EAAE03D,UAAU,EAAKC,OAAO33D,OAE1B7B,KAAKksC,iBAAiB,0BAA0B,SAAArqC,GAC9CA,EAAE03D,UAAU,EAAKE,YAAY53D,OAE/B7B,KAAKksC,iBAAiB,qBAAqB,SAAArqC,GACzCA,EAAE03D,UAAU,EAAKG,oBAAoB73D,OA2N3C,OAvNE,sBAAI,kBAAG,C,IAAP,WACE,OAAOwF,KAAKsvD,qBAAqBpV,K,gCAkBnC,YAAAoY,4BAAA,SAA4Bl4D,GAG1B,GAFA4F,KAAKgyD,2BAA4B,GAE5B53D,GAAgC,oBAAbA,EACtB,MAAMxE,EAAcvB,OAAM,sBAG5B2L,KAAKiyD,iBAAmB73D,GAG1B,YAAAm4D,oBAAA,SACEC,GADF,WAME,OAHAxyD,KAAKgyD,2BAA4B,EACjChyD,KAAKiyD,iBAAmBO,EAEjB,WACL,EAAKP,iBAAmB,OAMtB,YAAA5Z,SAAN,W,qJACOr4C,KAAKivD,SAAN,MAImB,GAAMI,EAAMrvD,KAAKsvD,uB,OAAhCb,EAAe,SACrBzuD,KAAKivD,SACwC,QADhC,EACsB,QADtB,EACC,OAAZR,QAAY,IAAZA,OAAY,EAAZA,EAAcM,2BAAmB,eAAEE,gBAAQ,QAAIzB,E,iBAGnD,SAAOnV,EACLr4C,KAAKsvD,qBACL32D,KAAK69B,aACLx2B,KAAKivD,mBAMT,YAAAoC,YAAA,WACE,OAAOA,EAAYrxD,KAAKsvD,qBAAsB32D,KAAK69B,eAGrD,YAAAi8B,kBAAA,WACE,MAAM78D,EAAcvB,OAAM,6BAI5B,YAAAq+D,kBAAA,SAAkBzD,GAChB,GAAsB,OAAlBjvD,KAAKivD,SACP,MAAMr5D,EAAcvB,OAAM,iCAG5B,GAAwB,kBAAb46D,GAA6C,IAApBA,EAASvhE,OAC3C,MAAMkI,EAAcvB,OAAM,qBAG5B2L,KAAKivD,SAAWA,GAGlB,YAAA0D,iBAAA,WACE,MAAM/8D,EAAcvB,OAAM,6BAG5B,YAAAyyC,UAAA,WACE,MAAMlxC,EAAcvB,OAAM,6BAG5B,YAAAu+D,eAAA,WACE,MAAMh9D,EAAcvB,OAAM,6BAatB,YAAA89D,OAAN,SAAapwD,G,4IAEX,OADM8wD,EAiIV,SAAmC,G,IACjCp4D,EAAI,OAEJ,IAAKA,EACH,OAAO,KAGT,IACE,OAAOA,EAAKjF,OACZ,MAAOgyB,GAEP,OAAO,MA5IiBsrC,CAA0B/wD,IAU/B,GAAMgxD,MARvBt0D,QAAQu0D,MACNC,sGAGF,K,OAKF,OA2JJ,SAA2BC,GACzB,OAAOA,EAAWC,MAChB,SAAAC,GACE,MAA2B,YAA3BA,EAAOC,kBAGND,EAAOtnB,IAAIwnB,WAAW,0BAjKrBC,CADEL,EAAa,UAEjB,GAAOM,EAAoCN,EAAYL,KAIrDY,GAAsB,EACpBZ,EAAgBa,aACpB,GAAMC,EAAiBC,EAAoBf,KADzC,O,OACF,SACAY,GAAsB,E,iBAKxB,OAC0B,IAAxBA,IACmC,IAAnCzzD,KAAKgyD,2BAKDhyD,KAAKiyD,mBACHxf,E,SCxLVogB,GAEA,IAAMpgB,EAA0B,CAC9B7hB,KAAMiiC,EAAgBjiC,KAEtBijC,YAAahB,EAAgBiB,cAO/B,OAGF,SACErhB,EACAshB,GAEA,GAAKA,EAAuBL,aAA5B,CAIAjhB,EAAQihB,aAAe,GAEvB,IAAMM,EAAQD,EAAuBL,aAAcM,MAC7CA,IACJvhB,EAAQihB,aAAcM,MAAQA,GAGhC,IAAM58D,EAAO28D,EAAuBL,aAAct8D,KAC5CA,IACJq7C,EAAQihB,aAAct8D,KAAOA,GAG/B,IAAM68D,EAAQF,EAAuBL,aAAcO,MAC7CA,IACJxhB,EAAQihB,aAAcO,MAAQA,IA7BhCC,CAA6BzhB,EAASogB,GAiCxC,SACEpgB,EACAshB,GAEKA,EAAuBt5D,OAI5Bg4C,EAAQh4C,KAAOs5D,EAAuBt5D,MAxCtC05D,CAAqB1hB,EAASogB,GA2ChC,SACEpgB,EACAshB,GAEA,GAAKA,EAAuBK,WAA5B,CAIA3hB,EAAQ2hB,WAAa,GAErB,IAAMC,EAAON,EAAuBK,WAAYC,KAC1CA,IACJ5hB,EAAQ2hB,WAAYC,KAAOA,GAI7B,IAAMC,EAAiBP,EAAuBK,WAAYG,gBACpDD,IACJ7hB,EAAQ2hB,WAAYE,eAAiBA,IA5DvCE,CAAoB/hB,EAASogB,GAEtBpgB,ED4KagiB,CAAmB5B,GAEE,oBAA1B7yD,KAAKiyD,iBACdjyD,KAAKiyD,iBAAiBxf,GAEtBzyC,KAAKiyD,iBAAiB9yC,KAAKszB,IAT7B,YAcE,YAAA2f,YAAN,SAAkBrwD,G,qJACYA,EAAL,gBACnB,MAEF,GAAMsvD,EAAYrxD,KAAKsvD,qBAAsB32D,KAAK69B,e,OAClD,OADA,SACA,I,OAGmB,SAAM64B,EAAMrvD,KAAKsvD,uB,OACtC,OADMb,EAAe,SACrB,GAAM4C,EAAYrxD,KAAKsvD,qBAAsB32D,KAAK69B,e,OAClD,OADA,SACA,GAAM6hB,EACJr4C,KAAKsvD,qBACL32D,KAAK69B,aACsC,QAD1B,EACgB,QADhB,EACL,OAAZi4B,QAAY,IAAZA,OAAY,EAAZA,EAAcM,2BAAmB,eAAEE,gBAAQ,QAAIzB,I,cAHjD,S,YAOI,YAAA6E,oBAAN,SAA0BtwD,G,sJAIxB,OAHM8wD,EACoB,QADL,EACD,QADC,EACnB9wD,EAAM2xD,oBAAY,eAAEj5D,YAAI,wBAIfsH,EAAMnO,OAGf,KAIFmO,EAAM2yD,2BACN3yD,EAAM2xD,aAAa/4D,SAGb05D,EA2IV,SAAiB5hB,G,UAET4hB,EAA+B,QAA3B,EAAqB,QAArB,EAAG5hB,EAAQ2hB,kBAAU,eAAEC,YAAI,QAAwB,QAAxB,EAAI5hB,EAAQihB,oBAAY,eAAEiB,aAC/D,GAAIN,EACF,OAAOA,EAGT,OAAItC,EAAiBtf,EAAQh4C,MAEpB9B,KAAKqY,SAASu8B,OAEd,KAtJMqnB,CAAQ/B,KAMf/mB,EAAM,IAAI4f,IAAI2I,EAAM17D,KAAKqY,SAASu3B,MAClCssB,EAAY,IAAInJ,IAAI/yD,KAAKqY,SAASu8B,QAEpCzB,EAAIz8B,OAASwlD,EAAUxlD,KACzB,IAGW,GAAMylD,EAAgBhpB,KAXjC,KAdA,I,cAyBEsnB,EAAS,UAET,MACO,GAAMz6D,KAAKo8D,QAAQC,WAAWX,I,OAIvC,OAJAjB,EAAS,SAIT,IE3PgBj7D,EF2PJ,IE1PT,IAAIC,SAAc,SAAAC,GACvBC,WAAWD,EAASF,Q,cFyPlB,S,aAES,SAAMi7D,EAAOvhE,S,OAAtBuhE,EAAS,S,iBAGX,OAAKA,GAKLP,EAAgBoC,YAAc3H,EAAY4H,qBAC1CrC,EAAgBsC,qBAAsB,EACtC,GAAO/B,EAAOr5D,YAAY84D,KALxB,I,IElQgB16D,SFyQtB,EAlPA,GAoPA,SAASy7D,EACPf,G,MAEMuC,EAAsB,sBACrBvC,EAAgBa,cAUvB,OAJA0B,EAAuB36D,OAAI,MACzB,QAAWo4D,EACZ,GAEMuC,EAsBT,SAAeN,EAAgBhpB,G,kJACV,SAAMinB,K,OAAnBG,EAAa,S,IAEnB,IAAqB,qBAAAA,GAAU,8BAG7B,GAHSE,EAAM,QACTiC,EAAY,IAAI3J,IAAI0H,EAAOtnB,IAAKnzC,KAAKqY,SAASu3B,MAEhDuD,EAAIz8B,OAASgmD,EAAUhmD,KACzB,SAAO+jD,G,iGAIX,SAAO,aAiBT,SAASI,EACPN,EACAL,G,QAEAA,EAAgBsC,qBAAsB,EACtCtC,EAAgBoC,YAAc3H,EAAYgI,c,IAE1C,IAAqB,yBAAApC,GAAU,8BAAE,CAAhB,QACRn5D,YAAY84D,I,kGAIvB,SAASE,IACP,OAAOp6D,KAAKo8D,QAAQQ,SAAS,CAC3BllD,KAAM,SACNmlD,qBAAqB,IAKzB,SAAS7B,EACP8B,G,MAIQC,EAAYD,EAAL,QACPE,EAAepL,aAAL,WAOlB,OANImL,GAAWC,GAAcD,EAAQhoE,OAASioE,GAC5Cl3D,QAAQsK,KACN,8BAA8B4sD,EAAU,0DAIrCh9D,KAAK69B,aAAam9B,iBACuB,QADN,EAC3B8B,EAA4BzB,aAAK,QAAI,GAClDyB,GGvVJ,iBAKE,WACmBnG,GADnB,WACmB,KAAAA,uBALX,KAAAL,SAA0B,KAE1B,KAAA2G,kBAA8D,KAKpEr6D,UAAUs6D,cAAchxB,iBAAiB,WAAW,SAAArqC,GAClD,SAAKs7D,qBAAqBt7D,MAoOhC,OAhOE,sBAAI,kBAAG,C,IAAP,WACE,OAAOwF,KAAKsvD,qBAAqBpV,K,gCAGrB,YAAA4b,qBAAd,SAAmC/zD,G,wIAGjC,OAFM8wD,EAAkB9wD,EAAMtH,MAET06D,qBAQnBn1D,KAAK41D,mBACL/C,EAAgBoC,cAAgB3H,EAAYgI,gBAEN,oBAA3Bt1D,KAAK41D,kBACd51D,KAAK41D,kBA0Nb,SACE/C,GAIA,cAFOA,EAAgBoC,mBAChBpC,EAAgBsC,oBAChBtC,EA9NCkD,CAAoBjpE,OAAOkpE,OAAO,GAAInD,KAGxC7yD,KAAK41D,kBAAkBz2C,KAAKryB,OAAOkpE,OAAO,GAAInD,KAOhDd,EAHIkE,EAAcpD,EAAgBp4D,OAIkB,MAApDw7D,EjIrD4C,gBiIuD5C,GAAMj2D,KAAKk2D,SAASrD,EAAgBoC,YAAcgB,IAHlD,OAtBA,I,OAyBA,S,mCAIJ,YAAAE,YAAA,WACE,OAAOn2D,KAAKivD,UAGd,YAAAmH,SAAA,WACE,OAAOp2D,KAAKwwD,gBAGR,YAAAnY,SAAN,SAAe7qD,G,sIAImB,YAA5B+8D,aAAaC,WAAb,MACF,GAAMD,aAAakI,qB,OAAnB,S,iBAGF,GAAgC,YAA5BlI,aAAaC,WACf,MAAM50D,EAAcvB,OAAM,sBAG5B,SAAM2L,KAAKq2D,eAAsB,OAAP7oE,QAAO,IAAPA,OAAO,EAAPA,EAASyhE,W,OACnC,OADA,SACA,GAAMjvD,KAAKs2D,YAAmB,OAAP9oE,QAAO,IAAPA,OAAO,EAAPA,EAAS+oE,4B,OAEhC,OAFA,SAEA,GAAOle,EACLr4C,KAAKsvD,qBACLtvD,KAAKwwD,eACLxwD,KAAKivD,mBAIH,YAAAoH,eAAN,SAAqBpH,G,gHACbA,EACJjvD,KAAKivD,SAAWA,EACNjvD,KAAKivD,WACfjvD,KAAKivD,SAAWzB,G,WAId,YAAA8I,YAAN,SACE9F,G,uIAEKA,GAAmBxwD,KAAKwwD,eAAzB,MACF,GAAMxwD,KAAKw2D,qB,OAAX,S,iBAGF,IAAKhG,GAAoBxwD,KAAKwwD,eAC5B,UAGF,KAAMA,aAA0BiG,2BAC9B,MAAM7gE,EAAcvB,OAAM,2B,OAG5B2L,KAAKwwD,eAAiBA,E,YAGV,YAAAgG,kBAAd,W,wIAE0B,O,sBAAtB,EAAAx2D,KAAsB,GAAMzE,UAAUs6D,cAAca,SjIpI3B,4BiIsIvB,CACE/F,MjItIsB,0C,ciImI1B,EAAKH,eAAiB,SAYtBxwD,KAAKwwD,eAAev1D,SAASuD,OAAM,e,aAInC,M,WAAM5I,EAAcvB,OAAM,qCAAwC,CAChEsiE,oBAAqB,EAAE3gE,U,yBAKvB,YAAAq7D,YAAN,W,uIACOrxD,KAAKwwD,eAAN,MACF,GAAMxwD,KAAKw2D,qB,OAAX,S,iBAGF,SAAOnF,EAAYrxD,KAAKsvD,qBAAsBtvD,KAAKwwD,yBAW/C,YAAAiC,kBAAN,W,sIACE,MAAgC,YAA5BlI,aAAaC,WACf,IAGuB,GAAMD,aAAakI,qB,OAC5C,GAAyB,aADnBmE,EAAmB,UAEvB,UACK,KAAyB,WAArBA,EACHhhE,EAAcvB,OAAM,sBAEpBuB,EAAcvB,OAAM,8BAQ9B,YAAAq+D,kBAAA,SAAkBzD,GAChB,GAAsB,OAAlBjvD,KAAKivD,SACP,MAAMr5D,EAAcvB,OAAM,iCAG5B,GAAwB,kBAAb46D,GAA6C,IAApBA,EAASvhE,OAC3C,MAAMkI,EAAcvB,OAAM,qBAG5B2L,KAAKivD,SAAWA,GAOlB,YAAA0D,iBAAA,SAAiBnC,GACf,KAAMA,aAA0BiG,2BAC9B,MAAM7gE,EAAcvB,OAAM,2BAG5B,GAAI2L,KAAKwwD,eACP,MAAM56D,EAAcvB,OAAM,0BAG5B2L,KAAKwwD,eAAiBA,GAQxB,YAAA1pB,UAAA,SAAU0rB,GAAV,WAGE,OAFAxyD,KAAK41D,kBAAoBpD,EAElB,WACL,EAAKoD,kBAAoB,OAI7B,YAAAtD,4BAAA,WACE,MAAM18D,EAAcvB,OAAM,yBAG5B,YAAAk+D,oBAAA,WACE,MAAM38D,EAAcvB,OAAM,yBAO5B,YAAAu+D,eAAA,WACE,OAAO,cAGK,YAAAsD,SAAd,SACEjB,EACAx6D,G,sIAGkB,OADZmZ,EAaV,SAAsBqhD,GACpB,OAAQA,GACN,KAAK3H,EAAY4H,qBACf,MAAO,oBACT,KAAK5H,EAAYgI,cACf,MAAO,0BACT,QACE,MAAM,IAAIxsD,OApBMya,CAAa0xC,GACb,GAAMj1D,KAAKsvD,qBAAqBuH,kBAAkB18D,O,cAAlD,SACR+7D,SAAStiD,EAAW,CAE5BkjD,WAAYr8D,EAAKgzD,mBACjBsJ,aAAct8D,EjInPiB,kBiIoP/Bu8D,aAAcv8D,EjInPiB,iBiIoP/Bw8D,oBAAqBlsD,KAAKI,MAAM/V,KAAKC,MAAQ,O,YAInD,EA7OA,GjHeA,SAAS6hE,EAAqBC,GAC5B,OAAOvhE,EAAcvB,OAAM,4BAAsC,CAC/D8iE,UAAS,IpBSb,IAAMC,EAAoB,CACxBC,YAAW,GA0Bb,SAASA,IACP,OAAI1+D,MAAQ,6BAA8BA,KA+BxC,cAAeA,MACD,OAAdkJ,WACA,gBAAiBlJ,MACjB,iBAAkBA,MAClB89D,0BAA0B53D,UAAU0L,eAAe,qBACnD+sD,iBAAiBz4D,UAAU0L,eAAe,UAtB1C,cAAeza,QACD,OAAd+R,WACAtG,UAAUg8D,eACV,kBAAmBh8D,WACnB,gBAAiBzL,QACjB,iBAAkBA,QAClB,UAAWA,QACX2mE,0BAA0B53D,UAAU0L,eAAe,qBACnD+sD,iBAAiBz4D,UAAU0L,eAAe,UA9C7C,IAAgCq9C,SAASqF,kBACxC,IAAI,YAnCiB,aACvB,SACEn6D,GAGA,IAAMonD,EAAMpnD,EAAUq6D,YAAY,OAAOxwD,eAKnC2yD,EAAqD,CACzDpV,IAAG,EACH1jD,U,SoB1B6B0jD,G,QAC/B,IAAKA,IAAQA,EAAI1sD,QACf,MAAM0pE,EAAqB,4BAG7B,IAAKhd,EAAItsD,KACP,MAAMspE,EAAqB,YAI7B,IAOQ1pE,EAAY0sD,EAAL,Q,IACf,IAAsB,yBARmC,CACvD,YACA,SACA,QACA,sBAI8B,8BAAE,CAA7B,IAAMsd,EAAO,QAChB,IAAKhqE,EAAQgqE,GACX,MAAMN,EAAqBM,I,iGAI/B,MAAO,CACLj+D,QAAS2gD,EAAItsD,KACby5D,UAAW75D,EAAQ65D,UACnBjxD,OAAQ5I,EAAQ4I,OAChBkB,MAAO9J,EAAQ8J,MACfg3D,SAAU9gE,EAAQiqE,mBpBTFC,CAAiBxd,GAOjCmW,cANoBv9D,EAAUq6D,YAAY,iBAAiBxwD,eAO3Dk6D,kBANwB/jE,EAAUq6D,YAAY,uBAShD,IAAKkK,IACH,MAAMzhE,EAAcvB,OAAM,uBAG5B,OAAIsE,MAAQ,6BAA8BA,KAEjC,IAAIg/D,EAAarI,GAGjB,IAAIsI,EAAiBtI,KAWf,UAEblC,gBAAgBgK,K,6NsIhDhBS,EACAC,E,iBCVS,EAAc,EAMd,EAAuB,wBAEvB,EAA6B,OAI7B,EAAsC,OAEtC,EAAiC,OAEjC,EAA2B,+BAE3B,EACX,qCAGW,EAAe,cCHtBC,IAAqB,MACzB,iBAAkC,yCAClC,mBAAkC,qCAClC,iCACE,mDACF,gCACE,kDACF,eAAuB,2BACvB,eAAuB,2BACvB,mBAA2B,+BAC3B,gBAAwB,4BACxB,oBAA4B,sCAC5B,oBACE,4EACF,wBAAuB,wBACvB,4BACE,8CACF,6BACE,gDACF,gCACE,oDACF,iCACE,uEACH,GAYYniE,EAAgB,IAAIoiE,eDjCV,cCmCrBC,EACAF,GCxDWG,EAAgB,IAAIlxD,SAAOixD,GACxCC,EAAc5vD,SAAWC,WAAS4vD,KHsBlC,IIrBIC,EJqBJ,aAWE,WAAqBtoE,GACnB,GADmB,KAAAA,UACdA,EACH,MAAM8F,EAAcvB,OAAM,aAE5B2L,KAAKq4D,YAAcvoE,EAAOuoE,YAC1Br4D,KAAKs4D,oBAAsBxoE,EAAOwoE,oBAClCt4D,KAAKu4D,eAAiBzoE,EAAOkhB,SAC7BhR,KAAKzE,UAAYzL,EAAOyL,UACxByE,KAAK4kC,SAAW90C,EAAO80C,SACnB5kC,KAAKzE,WAAayE,KAAKzE,UAAUg8D,gBAGnCv3D,KAAKw4D,aAAe1oE,EAAO0oE,cAEzB1oE,EAAO2oE,aAAe3oE,EAAO2oE,YAAYC,oBAC3C14D,KAAK04D,kBAAoB5oE,EAAO2oE,YAAYC,mBAyFlD,OArFE,YAAAC,OAAA,WAEE,OAAO34D,KAAKu4D,eAAehwB,KAAKvkC,MAAM,KAAK,IAG7C,YAAA40D,KAAA,SAAKhrE,GACEoS,KAAKq4D,aAAgBr4D,KAAKq4D,YAAYO,MAG3C54D,KAAKq4D,YAAYO,KAAKhrE,IAGxB,YAAAirE,QAAA,SAAQC,EAAqBC,EAAeC,GACrCh5D,KAAKq4D,aAAgBr4D,KAAKq4D,YAAYQ,SAG3C74D,KAAKq4D,YAAYQ,QAAQC,EAAaC,EAAOC,IAG/C,YAAAC,iBAAA,SAAiB5oD,GACf,OAAKrQ,KAAKq4D,aAAgBr4D,KAAKq4D,YAAYY,iBAGpCj5D,KAAKq4D,YAAYY,iBAAiB5oD,GAFhC,IAKX,YAAA6oD,iBAAA,SAAiBtrE,GACf,OAAKoS,KAAKq4D,aAAgBr4D,KAAKq4D,YAAYa,iBAGpCl5D,KAAKq4D,YAAYa,iBAAiBtrE,GAFhC,IAKX,YAAAurE,cAAA,WAEE,OACEn5D,KAAKq4D,cACJr4D,KAAKq4D,YAAYe,YAAcp5D,KAAKq4D,YAAYgB,OAAOC,kBAI5D,YAAAC,sBAAA,WACE,OACG1hE,OACAO,SACA4H,KAAKzE,WACLyE,KAAKzE,UAAUg8D,gBAQbiC,2BACHtB,EAAcuB,KAAK,mDACZ,IARPvB,EAAcuB,KACZ,2GAEK,IAUX,YAAAC,cAAA,SACEC,EACAv/D,GAEK4F,KAAKs4D,qBAGO,IAAIt4D,KAAKs4D,qBAAoB,SAAAsB,GAC5C,IAAoB,UAAAA,EAAKC,aAAL,eAAmB,CAAlC,IAAMx9D,EAAK,KAEdjC,EAASiC,OAKJy9D,QAAQ,CAAEC,WAAY,CAACJ,MAG3B,EAAA50B,YAAP,WAIE,YAHoBp3C,IAAhBkqE,IACFA,EAAc,IAAImC,EAAIlC,IAEjBD,GAEX,EAnHA,G,SKxBgBoC,EAAaC,EAAeC,GAC1C,IAAMC,EAAWF,EAAMxsE,OAASysE,EAAMzsE,OACtC,GAAI0sE,EAAW,GAAKA,EAAW,EAC7B,MAAMxkE,EAAcvB,OAAM,+BAI5B,IADA,IAAMgmE,EAAc,GACXxyD,EAAI,EAAGA,EAAIqyD,EAAMxsE,OAAQma,IAChCwyD,EAAYr3D,KAAKk3D,EAAMjoD,OAAOpK,IAC1BsyD,EAAMzsE,OAASma,GACjBwyD,EAAYr3D,KAAKm3D,EAAMloD,OAAOpK,IAIlC,OAAOwyD,EAAY7uD,KAAK,IDT1B,IENI8uD,ECSQC,EHHZ,0BAEE,KAAAC,wBAAyB,EAGzB,KAAAC,uBAAwB,EAGxB,KAAAC,gBAAiB,EAEjB,KAAAC,mBAAqB,EACrB,KAAAC,4BAA8B,EAG9B,KAAAC,eACE,oEAGF,KAAAC,uBAAyBb,EACvB,mCACA,mCAGF,KAAAc,aAAed,EAAa,uBAAwB,uBAGpD,KAAAe,UAAY,IAGZ,KAAAC,uBAAwB,EACxB,KAAAC,yBAA0B,EAG1B,KAAAC,iBAAmB,GAiDrB,OA3CE,YAAAC,SAAA,WACE,IAAM9jE,EACJ0I,KAAKq7D,qBACLr7D,KAAKq7D,oBAAoB7tE,SACzBwS,KAAKq7D,oBAAoB7tE,QAAQ8J,MACnC,IAAKA,EACH,MAAM1B,EAAcvB,OAAM,aAE5B,OAAOiD,GAGT,YAAAgkE,aAAA,WACE,IAAMjU,EACJrnD,KAAKq7D,qBACLr7D,KAAKq7D,oBAAoB7tE,SACzBwS,KAAKq7D,oBAAoB7tE,QAAQ65D,UACnC,IAAKA,EACH,MAAMzxD,EAAcvB,OAAM,iBAE5B,OAAOgzD,GAGT,YAAAkU,UAAA,WACE,IAAMnlE,EACJ4J,KAAKq7D,qBACLr7D,KAAKq7D,oBAAoB7tE,SACzBwS,KAAKq7D,oBAAoB7tE,QAAQ4I,OACnC,IAAKA,EACH,MAAMR,EAAcvB,OAAM,cAE5B,OAAO+B,GAGT,YAAAolE,sBAAA,WACE,OAAOx7D,KAAK86D,uBAAuB/mE,OAAO,QAASiM,KAAK+6D,eAGnD,EAAAh2B,YAAP,WAIE,YAHgCp3C,IAA5ByqE,IACFA,EAA0B,IAAIqD,GAEzBrD,GAEX,EAlFA,G,SEOgBsD,IACd,OAAOpB,GCLT,SAAYC,GACV,yBACA,yBACA,uBAHF,CAAYA,MAAe,KA2B3B,IAAMoB,EAA8B,CAAC,YAAa,UAAW,OACvDC,EAAyB,IAAI9vD,OAAO,kB,SAI1B+vD,IACd,IAAMtgE,EAAYy+D,EAAIj1B,cAAcxpC,UACpC,MAAI,kBAAmBA,EACjBA,EAAUs6D,cAAciG,WAC1B,EAEA,EAGF,E,SAIYC,IAGd,OAFiB/B,EAAIj1B,cAAcH,SACFyuB,iBAE/B,IAAK,UACH,OAAOkH,EAAgByB,QACzB,IAAK,SACH,OAAOzB,EAAgB0B,OACzB,QACE,OAAO1B,EAAgBrR,S,SAIbgT,IACd,IACMC,EADYnC,EAAIj1B,cAAcxpC,UAC+B6gE,WAGnE,OADED,GAAuBA,EAAoBE,eAE3C,IAAK,UACH,SACF,IAAK,KACH,SACF,IAAK,KACH,SACF,IAAK,KACH,SACF,QACE,UCvEN,IAAMC,EAA4B,QAa5BC,GACY,EAqBZC,EAAkB,8B,SAERC,EAAUnC,GACxB,IAAMoC,EAeR,WACE,IAAMlE,EAAewB,EAAIj1B,cAAcyzB,aACvC,IAAKA,EACH,OAEF,IAAMmE,EAAenE,EAAatyD,QAAQ02D,GAC1C,IAAKD,IA0IcE,EA1IeF,IA2I3B1nE,OAAO4nE,GAAUznE,KAAKC,QA1I3B,OAyIJ,IAAqBwnE,EAtInB,IAAMC,EAAoBtE,EAAatyD,QAAQ62D,GAC/C,IAAKD,EACH,OAEF,IAEE,OAD6CnlE,KAAKqlE,MAAMF,GAExD,SACA,QAjCaG,GACf,OAAIP,GACFQ,EAAcR,GACPtkE,QAAQC,WAqDnB,SACEiiE,GAGA,O,WF3FA,IAAM6C,EAAmB1B,EAAgB12B,cAAcq4B,qBAAqB/kB,WAK5E,OAHA8kB,EAAiB39D,MAAK,SAAC69D,OAGhBF,EEsFAG,GACJ99D,MAAK,SAAAvH,GACJ,IACMslE,EAAiB,2DADL9B,EAAgB12B,cAAcu2B,eAC2C,kCAAkCG,EAAgB12B,cAAcw2B,YACrJ9jE,EAAU,IAAI+lE,QAAQD,EAAgB,CAC1C7lE,OAAQ,OACRhB,QAAS,CAAE+mE,cAAkBjB,EAAe,IAAIvkE,GAEhDb,KAAMO,KAAKC,UAAU,CACnB8lE,gBAAiBpD,EACjBqD,sBAAuB1lE,EACvB2lE,OAAQnC,EAAgB12B,cAAcq2B,WACtCyC,YAAapxB,EACbqxB,YAAaxB,MAIjB,OAAOzkE,MAAMJ,GAAS+H,MAAK,SAAA5K,GACzB,GAAIA,EAASkD,GACX,OAAOlD,EAASY,OAGlB,MAAMI,EAAcvB,OAAM,4BAG7BmK,OAAM,WACL05D,EAAcuB,KAAKsE,MAhFhBC,CAAgB1D,GACpB96D,KAAK09D,GACL19D,MACC,SAAAk9D,GAAU,OA4BhB,SAAqBA,GACnB,IAAMlE,EAAewB,EAAIj1B,cAAcyzB,aACvC,IAAKkE,IAAWlE,EACd,OAGFA,EAAaxyD,QAAQ+2D,EAA0BplE,KAAKC,UAAU8kE,IAC9DlE,EAAaxyD,QACX42D,EACA3jE,OACE7D,KAAKC,MAC8C,GAAjDomE,EAAgB12B,cAAco2B,iBAAwB,GAAK,MAvCnD8C,CAAYvB,MAEtB,eA0CN,IAAMqB,EACJ,mDA0CF,SAASb,EACPR,GAEA,IAAKA,EACH,OAAOA,EAET,IAAMtE,EAA0BqD,EAAgB12B,cAC1CpM,EAAU+jC,EAAO/jC,SAAW,GAqDlC,YApD4BhrC,IAAxBgrC,EAAQulC,YAGV9F,EAAwBsC,eACU,SAAhCzhE,OAAO0/B,EAAQulC,aAIjB9F,EAAwBsC,eAAiB6B,EAEvC5jC,EAAQwlC,iBACV/F,EAAwB4C,UAAY/lE,OAAO0jC,EAAQwlC,iBAKjDxlC,EAAQylC,uBACVhG,EAAwByC,eAAiBliC,EAAQylC,sBAM/CzlC,EAAQ0lC,wBACVjG,EAAwB2C,aAAepiC,EAAQ0lC,4BAKI1wE,IAAjDgrC,EAAQ2lC,uCACVlG,EAAwBwC,4BAA8B3lE,OACpD0jC,EAAQ2lC,4CAM+B3wE,IAAvCgrC,EAAQ4lC,6BACVnG,EAAwBuC,mBAAqB1lE,OAC3C0jC,EAAQ4lC,6BAOZnG,EAAwB6C,sBAAwBuD,EAC9CpG,EAAwBuC,oBAE1BvC,EAAwB8C,wBAA0BsD,EAChDpG,EAAwBwC,6BAEnB8B,EAOT,SAAS8B,EAAuBC,GAC9B,OAAO1zD,KAAK+K,UAAY2oD,EC5M1B,IAEIC,EAFAC,EAAuB,E,SAIXC,IAKd,OAJAD,EAAuB,EAEvBD,EAAwBA,GAuB1B,WACE,IAAM95B,EAAWo1B,EAAIj1B,cAAcH,SACnC,OAAO,IAAIxsC,SAAQ,SAAAC,GACjB,GAAIusC,GAAoC,aAAxBA,EAAS4C,WAA2B,CAClD,IAAM,EAAU,SAAV,IACwB,aAAxB5C,EAAS4C,aACX5C,EAASi6B,oBAAoB,mBAAoB,GACjDxmE,MAGJusC,EAASC,iBAAiB,mBAAoB,QAE9CxsC,OAzBGymE,GACJt/D,MAAK,WAAM,O,WHvBd,IAAMu/D,EAAatD,EAAgB12B,cAAcq4B,qBAAqB4B,QAKtE,OAHAD,EAAWv/D,MAAK,SAACy/D,GACf3E,EAAM2E,KAEDF,EGkBOG,MACX1/D,MAAK,SAAA86D,GAAO,OAAAmC,EAAUnC,MACtB96D,MACC,WAAM,OAAA2/D,OACN,WAAM,OAAAA,OAyBZ,SAASA,IACPR,EAAuB,ECtDzB,ICkEI32D,EDlEEo3D,EAA2B,IAI7BC,EAD4B,EAgC5B/a,EAAsB,GAEtBgb,GAA4B,EAiBhC,SAASC,EAAaC,GACpBlnE,YAAW,WAET,GAAuB,IAAnB+mE,EAKJ,OAAK/a,EAAM52D,YAQf,WAEE,IAAM+xE,EAAS,EAAH,eAAOnb,GACnBA,EAAQ,GAIR,IAAMob,EAAmBD,EAAOjgD,KAAI,SAAAmgD,GAAO,MAAC,CAC1CC,6BAA8BD,EAAI3pE,QAClC6pE,cAAe5mE,OAAO0mE,EAAIG,gBAwB9B,SACErlE,EACAglE,GAEA,OAiCF,SAA0BhlE,GACxB,IAAMslE,EAAqBtE,EAAgB12B,cAAcy2B,wBACzD,OAAO3jE,MAAMkoE,EAAoB,CAC/BroE,OAAQ,OACRN,KAAMO,KAAKC,UAAU6C,KArChBulE,CAAiBvlE,GACrB+E,MAAK,SAAAm3C,GAIJ,OAHKA,EAAI7+C,IACPogE,EAAcuB,KAAK,oCAEd9iB,EAAInhD,UAEZgK,MAAK,SAAAm3C,GAEJ,IAAMspB,EAAgBhrE,OAAO0hD,EAAIupB,uBAC7BC,EAAgBf,EACf3wB,MAAMwxB,KACTE,EAAgBp1D,KAAK0D,IAAIwxD,EAAeE,IAK1C,IAAMC,EAA2CzpB,EAAIypB,mBAEnDxhE,MAAM8F,QAAQ07D,IACdA,EAAmB1yE,OAAS,GACa,wBAAzC0yE,EAAmB,GAAGC,iBAEtB/b,EAAQ,EAAH,eAAOmb,EAAWnb,GACvB4T,EAAcuB,KAAK,mCAGrB4F,EAnI0B,EAqI1BE,EAAaY,OA3CjBG,CAXsC,CACpCC,gBAAiBtnE,OAAO7D,KAAKC,OAC7BmrE,YAAa,CACXC,YAAa,EACbC,eAAgB,IAElBC,WAAYlF,EAAgB12B,cAAci2B,UAC1C0E,UAAS,GAIUD,GAAQjhE,OAAM,WAGjC8lD,EAAQ,EAAH,eAAOmb,EAAWnb,GACvB+a,IACAnH,EAAcuB,KAAK,eAAe4F,EAAc,KAChDE,EAAaH,MAjCbwB,GAHSrB,EAAaH,KAIrBI,GAiFL,SAASqB,GAAWlB,GAClB,IAAKA,EAAIG,YAAcH,EAAI3pE,QACzB,MAAMJ,EAAcvB,OAAM,kBAG5BiwD,EAAQ,EAAH,eAAOA,EAAK,CAAEqb,IClFrB,SAASmB,GACPC,EACAC,GAEKh5D,IACHA,E,SDmFFmjD,GAEA,OAAO,W,IAAC,sDAEN0V,GAAW,CACT7qE,QAFcm1D,EAAU,aAAI9rD,GAG5BygE,UAAW1qE,KAAKC,SCzFT4rE,CAAiB9V,KAE5BnjD,EAAO+4D,EAAUC,G,SAGHE,GAASC,GACvB,IAAMC,EAAkB3F,EAAgB12B,eAEnCq8B,EAAgB5G,wBAA0B2G,EAAME,SAIhDD,EAAgB3G,uBAA0B0G,EAAME,SAIhDrH,EAAIj1B,cAAcw0B,0BAKnB4H,EAAME,QAAUtF,MAAyBxB,EAAgByB,UF9E7B,IAAzB2C,EEmFL2C,GAAaH,GAKbvC,IAA2Bp/D,MACzB,WAAM,OAAA8hE,GAAaH,MACnB,WAAM,OAAAG,GAAaH,QAKzB,SAASG,GAAaH,GACpB,GAAKzF,IAAL,CAIA,IAAM0F,EAAkB3F,EAAgB12B,cAErCq8B,EAAgB1G,gBAChB0G,EAAgBnG,uBAKnB3iE,YAAW,WAAM,OAAAwoE,GAAQK,EAAK,KAAuB,IAmCvD,SAAShW,GACP4V,EACAC,GAEA,OAAqB,IAAjBA,EAMN,SAAiCO,GAC/B,IAAMC,EAA6C,CACjD11B,IAAKy1B,EAAez1B,IACpB21B,YAAaF,EAAeG,YAAc,EAC1CC,mBAAoB,IACpBC,uBAAwBL,EAAeM,qBACvCC,qBAAsBP,EAAeQ,YACrCC,8BAA+BT,EAAeU,0BAC9CC,8BAA+BX,EAAeY,2BAE1CC,EAA6B,CACjCC,iBAAkBC,KAClBC,uBAAwBf,GAE1B,OAAO7pE,KAAKC,UAAUwqE,GAnBbI,CAAwBzB,GAsBnC,SAAwBI,GACtB,IAAMsB,EAA2B,CAC/B70E,KAAMuzE,EAAMvzE,KACZ80E,QAASvB,EAAME,OACfS,qBAAsBX,EAAMY,YAC5BY,YAAaxB,EAAMyB,YAGsB,IAAvC91E,OAAOC,KAAKo0E,EAAM0B,UAAUn1E,SAC9B+0E,EAAYI,SAAW1B,EAAM0B,UAE/B,IAAMC,EAAmB3B,EAAM4B,gBACc,IAAzCj2E,OAAOC,KAAK+1E,GAAkBp1E,SAChC+0E,EAAYO,kBAAoBF,GAGlC,IAAMV,EAA2B,CAC/BC,iBAAkBC,KAClBW,aAAcR,GAEhB,OAAO9qE,KAAKC,UAAUwqE,GAxCfc,CAAenC,GA2CxB,SAASuB,KACP,MAAO,CACLa,cAAe1H,EAAgB12B,cAAcq2B,WAC7CsC,gBAAiBhC,IACjB0H,aAAc,CACZtF,YAAarxB,EACb42B,SAAUrJ,EAAIj1B,cAAc4zB,SAC5B2K,sBAAuBzH,IACvB0H,iBAAkBxH,IAClByH,0BAA2BtH,KAE7BuH,0BAA2B,GC3N/B,IAEMC,GAAa,CXEqB,MWAtCC,EACAC,GCeF,kBAmBE,WACWh2E,EACAyzE,EACTwC,QADS,IAAAxC,OAAA,GADA,KAAAzzE,OACA,KAAAyzE,SApBH,KAAAyC,MAAK,EAGL,KAAAhB,iBAA8C,GACtD,KAAAD,SAA8C,GACtC,KAAAkB,IAAM/J,EAAIj1B,cACV,KAAAi/B,SAAWj5D,KAAKI,MAAsB,IAAhBJ,KAAK+K,UAiB5B9V,KAAKqhE,SACRrhE,KAAKikE,eAAoBC,uBAA2BlkE,KAAKgkE,SAAQ,IAAIhkE,KAAKpS,KAC1EoS,KAAKmkE,cAAmBC,sBAA0BpkE,KAAKgkE,SAAQ,IAAIhkE,KAAKpS,KACxEoS,KAAKqkE,aACHR,GACGS,yBAAwBtkE,KAAKgkE,SAAQ,IAAIhkE,KAAKpS,KAE/Ci2E,GAGF7jE,KAAKukE,yBAoQb,OA5PE,YAAA77B,MAAA,WACE,GAAc,IAAV1oC,KAAK8jE,MACP,MAAMluE,EAAcvB,OAAM,gBAAiC,CACzDmwE,UAAWxkE,KAAKpS,OAGpBoS,KAAK+jE,IAAInL,KAAK54D,KAAKikE,gBACnBjkE,KAAK8jE,MAAK,GAOZ,YAAAW,KAAA,WACE,GAAc,IAAVzkE,KAAK8jE,MACP,MAAMluE,EAAcvB,OAAM,gBAAiC,CACzDmwE,UAAWxkE,KAAKpS,OAGpBoS,KAAK8jE,MAAK,EACV9jE,KAAK+jE,IAAInL,KAAK54D,KAAKmkE,eACnBnkE,KAAK+jE,IAAIlL,QACP74D,KAAKqkE,aACLrkE,KAAKikE,eACLjkE,KAAKmkE,eAEPnkE,KAAKukE,wBACLrD,GAASlhE,OAUX,YAAA46B,OAAA,SACE8pC,EACApwE,EACA9G,GAKA,GAAIk3E,GAAa,EACf,MAAM9uE,EAAcvB,OAAM,8BAAyC,CACjEmwE,UAAWxkE,KAAKpS,OAGpB,GAAI0G,GAAY,EACd,MAAMsB,EAAcvB,OAAM,6BAAuC,CAC/DmwE,UAAWxkE,KAAKpS,OASpB,GALAoS,KAAK4iE,WAAa73D,KAAKI,MAAiB,IAAX7W,GAC7B0L,KAAK+hE,YAAch3D,KAAKI,MAAkB,IAAZu5D,GAC1Bl3E,GAAWA,EAAQm3E,aACrB3kE,KAAK8iE,iBAAgB,cAAQt1E,EAAQm3E,aAEnCn3E,GAAWA,EAAQo3E,QACrB,IAAqB,UAAA93E,OAAOC,KAAKS,EAAQo3E,SAApB,eAA8B,CAA9C,IAAMxnB,EAAM,KACV3O,MAAMx5C,OAAOzH,EAAQo3E,QAAQxnB,OAChCp9C,KAAK6iE,SAASzlB,GAAUnoD,OAAO8V,KAAKI,MAAM3d,EAAQo3E,QAAQxnB,MAIhE8jB,GAASlhE,OAUX,YAAA6kE,gBAAA,SAAgBC,EAAiBC,QAAA,IAAAA,MAAA,QACAp3E,IAA3BqS,KAAK6iE,SAASiC,GAChB9kE,KAAKglE,UAAUF,EAASC,GAExB/kE,KAAKglE,UAAUF,EAAS9kE,KAAK6iE,SAASiC,GAAWC,IAUrD,YAAAC,UAAA,SAAUF,EAAiBC,GACzB,I,SDhJ8Bn3E,EAAc42E,GAC9C,QAAoB,IAAhB52E,EAAKF,QAAgBE,EAAKF,OAbD,OAiB1B82E,GACCA,EAAUlR,WAAW2R,IACrBvB,GAAWx2E,QAAQU,IAAS,IAC7BA,EAAK0lE,WAnBmB,MC2JrB4R,CAAkBJ,EAAS9kE,KAAKpS,MAGlC,MAAMgI,EAAcvB,OAAM,6BAAuC,CAC/D8wE,iBAAkBL,IAHpB9kE,KAAK6iE,SAASiC,G,SD/HwBM,GAC1C,IAAMC,EAAyBt6D,KAAKI,MAAMi6D,GAM1C,OALIC,EAAiBD,GACnBlN,EAAcuB,KACZ,6DAA6D4L,EAAc,KAGxEA,ECwHsBC,CAA4BP,IAazD,YAAAQ,UAAA,SAAUT,GACR,OAAO9kE,KAAK6iE,SAASiC,IAAY,GAQnC,YAAAU,aAAA,SAAaC,EAAc5yE,GACzB,IAAM6yE,E,SNrGiC93E,GACzC,QAAoB,IAAhBA,EAAKF,QAAgBE,EAAKF,OAjDE,MAoDFiuE,EAA4BxI,MAAK,SAAAvqD,GAC7D,OAAAhb,EAAK0lE,WAAW1qD,SAEiBhb,EAAKogD,MAAM4tB,GM8FxB+J,CAA2BF,GACzCG,E,SN5FkC/yE,GAC1C,OAAwB,IAAjBA,EAAMnF,QAAgBmF,EAAMnF,QA1DF,IMqJVm4E,CAA4BhzE,GACjD,GAAI6yE,GAAeE,EACjB5lE,KAAK8iE,iBAAiB2C,GAAQ5yE,MADhC,CAKA,IAAK6yE,EACH,MAAM9vE,EAAcvB,OAAM,yBAAmC,CAC3DyxE,cAAeL,IAGnB,IAAKG,EACH,MAAMhwE,EAAcvB,OAAM,0BAAoC,CAC5D0xE,eAAgBlzE,MAStB,YAAAmzE,aAAA,SAAaP,GACX,OAAOzlE,KAAK8iE,iBAAiB2C,IAG/B,YAAAQ,gBAAA,SAAgBR,QACsB93E,IAAhCqS,KAAK8iE,iBAAiB2C,WAGnBzlE,KAAK8iE,iBAAiB2C,IAG/B,YAAA1C,cAAA,WACE,qBAAY/iE,KAAK8iE,mBAGX,YAAAoD,aAAR,SAAqBxB,GACnB1kE,KAAK+hE,YAAc2C,GAGb,YAAAyB,YAAR,SAAoB7xE,GAClB0L,KAAK4iE,WAAatuE,GAOZ,YAAAiwE,sBAAR,WACE,IAAM6B,EAAqBpmE,KAAK+jE,IAAI7K,iBAAiBl5D,KAAKqkE,cACpDgC,EAAmBD,GAAsBA,EAAmB,GAC9DC,IACFrmE,KAAK4iE,WAAa73D,KAAKI,MAAkC,IAA5Bk7D,EAAiB/xE,UAC9C0L,KAAK+hE,YAAch3D,KAAKI,MACoC,KAAzDk7D,EAAiB3B,UAAY1kE,KAAK+jE,IAAI5K,oBAWtC,EAAAmN,eAAP,SACEC,EACAC,EACAC,GAEA,IAAMC,EAAQ1M,EAAIj1B,cAAc4zB,SAChC,GAAK+N,EAAL,CAGA,IAAMvF,EAAQ,IAAIwF,EAAM1B,EAA6ByB,GAAO,GACtDE,EAAe77D,KAAKI,MAA0C,IAApC6uD,EAAIj1B,cAAco0B,iBAClDgI,EAAM+E,aAAaU,GAGfL,GAAqBA,EAAkB,KACzCpF,EAAMgF,YAAYp7D,KAAKI,MAAsC,IAAhCo7D,EAAkB,GAAGjyE,WAClD6sE,EAAM6D,UACJ,iBACAj6D,KAAKI,MAA4C,IAAtCo7D,EAAkB,GAAGM,iBAElC1F,EAAM6D,UACJ,2BACAj6D,KAAKI,MAAsD,IAAhDo7D,EAAkB,GAAGO,2BAElC3F,EAAM6D,UACJ,eACAj6D,KAAKI,MAA0C,IAApCo7D,EAAkB,GAAGQ,gBAMpC,GAAIP,EAAc,CAChB,IAAMQ,EAAaR,EAAar8C,MAC9B,SAAA88C,GAAe,MAJC,gBAIDA,EAAYr5E,QAEzBo5E,GAAcA,EAAWtC,WAC3BvD,EAAM6D,UZxR0B,MY0R9Bj6D,KAAKI,MAA6B,IAAvB67D,EAAWtC,YAG1B,IAAMwC,EAAuBV,EAAar8C,MACxC,SAAA88C,GAAe,MAZY,2BAYZA,EAAYr5E,QAEzBs5E,GAAwBA,EAAqBxC,WAC/CvD,EAAM6D,UACJrB,EACA54D,KAAKI,MAAuC,IAAjC+7D,EAAqBxC,YAIhC+B,GACFtF,EAAM6D,UACJpB,EACA74D,KAAKI,MAAwB,IAAlBs7D,IAKjBvF,GAASC,KAGJ,EAAAgG,sBAAP,SAA6BrO,GAE3BoI,GADc,IAAIyF,EAAM7N,GAAa,EAAOA,KAGhD,EAtSA,G,SCGgBsO,GAA0B/qE,GACxC,IAAMgrE,EAAmBhrE,EACzB,GAAKgrE,QAAuD15E,IAAnC05E,EAAiBC,cAA1C,CAGA,IAAMlO,EAAaY,EAAIj1B,cAAco0B,gBAC/B4I,EAAch3D,KAAKI,MACqB,KAA3Ck8D,EAAiB3C,UAAYtL,IAE1B6I,EAA4BoF,EAAiBC,cAC/Cv8D,KAAKI,MAC6D,KAA/Dk8D,EAAiBC,cAAgBD,EAAiB3C,iBAErD/2E,EACEw0E,EAA4Bp3D,KAAKI,MACyB,KAA7Dk8D,EAAiBE,YAAcF,EAAiB3C,a,SHwFnBnD,GAChC,IAAMH,EAAkB3F,EAAgB12B,cAExC,GAAKq8B,EAAgB5G,uBAArB,CAMA,IAAMgN,EAAoBjG,EAAez1B,IAInC27B,EAAiBrG,EAAgBvG,eAAe72D,MAAM,KAAK,GAC3D0jE,EAAgBtG,EAAgBtG,uBAAuB92D,MAAM,KAAK,GAEtEwjE,IAAsBC,GACtBD,IAAsBE,GAMrBtG,EAAgB1G,gBAChB0G,EAAgBlG,yBAKnB5iE,YAAW,WAAM,OAAAwoE,GAAQS,EAAc,KAAgC,IGzGvEoG,CARuC,CACrC77B,IAFUu7B,EAAiBz5E,MAAQy5E,EAAiBz5E,KAAKoW,MAAM,KAAK,GAGpE69D,qBAAsBwF,EAAiBO,aACvC7F,YAAW,EACXE,0BAAyB,EACzBE,0BAAyB,K,SChDb0F,KAETnM,MAKLpjE,YAAW,WAAM,OAcnB,WACE,IAAMyrE,EAAM/J,EAAIj1B,cACVwhC,EAAoBxC,EAAI9K,iBAC5B,cAEIuN,EAAezC,EAAI9K,iBAAiB,SAG1C,GAAI8K,EAAIrL,kBAAmB,CAGzB,IAAI,EAAiBpgE,YAAW,WAC9BquE,GAAML,eAAeC,EAAmBC,GACxC,OAAY74E,IApCO,KAsCrBo2E,EAAIrL,mBAAkB,SAACxhE,GACjB,IACF+wC,aAAa,GACb0+B,GAAML,eAAeC,EAAmBC,EAActvE,YAI1DyvE,GAAML,eAAeC,EAAmBC,GApCzBsB,KAAkB,GACnCxvE,YAAW,WAAM,OAInB,WAGE,IAFA,IAAMyrE,EAAM/J,EAAIj1B,cACVgjC,EAAYhE,EAAI9K,iBAAiB,YAChB,MAAA8O,EAAA,eAAW,CAChCX,GADiB,MAGnBrD,EAAIrK,cAAc,WAAY0N,IAVbY,KAAwB,GACzC1vE,YAAW,WAAM,OAsCnB,WAIE,IAHA,IAAMyrE,EAAM/J,EAAIj1B,cAEVkjC,EAAWlE,EAAI9K,iBAAiB,WAChB,MAAAgP,EAAA,eAAU,CAC9Bd,GADgB,MAIlBpD,EAAIrK,cAAc,UAAWyN,IA9CZe,KAAyB,IAiD5C,SAASf,GAAsBtO,GAC7B,IAAMC,EAAcD,EAAQjrE,KAG1BkrE,EAAYzuD,UAAU,EAAGi6D,EAAqB52E,UAC9C42E,GAIFqC,GAAMQ,sBAAsBrO,GCjE9B,kBACE,WAAqB5e,GAAA,KAAAA,MACf8f,EAAIj1B,cAAcw0B,yBACpB4O,8BACG3oE,MAAK,SAAA0pC,GACAA,IN8BPo2B,IACHC,EAxC+B,MAyC/BD,GAAmB,GM9BXV,IAA2Bp/D,KACzBqoE,GACAA,QAILrpE,OAAM,SAAA7I,GACLuiE,EAAcuB,KAAK,0CAA0C9jE,MAsBvE,OAjBE,YAAAwrE,MAAA,SAAMvzE,GACJ,OAAO,IAAI+4E,GAAM/4E,IAGnB,sBAAI,qCAAsB,C,IAG1B,WACE,OAAO6tE,EAAgB12B,cAAcy1B,wB,IAJvC,SAA2Bv6D,GACzBw7D,EAAgB12B,cAAcy1B,uBAAyBv6D,G,gCAMzD,sBAAI,oCAAqB,C,IAGzB,WACE,OAAOw7D,EAAgB12B,cAAc01B,uB,IAJvC,SAA0Bx6D,GACxBw7D,EAAgB12B,cAAc01B,sBAAwBx6D,G,gCAK1D,EApCA,G,ShCMgB,GAAoB,GAClC,IAAM,EAAgB,SACpB,EACA,GAEA,GAPuB,cAOnB,EAAI,KACN,MAAM,EAAc,OAAM,kBAE5B,GAAsB,qBAAX,OACT,MAAM,EAAc,OAAM,aAK5B,O,SgBkHqBnQ,GACvBgoE,EAAiBhoE,EhBtHf,CAAS,QACT,EAAgB,cAAc,oBAAsB,EACpD,EAAgB,cAAc,qBAAuB,EAC9C,IAAI,GAAsB,IAIlC,EAAgC,SAAS,kBACxC,IAAI1C,YACF,eACA,YAGE,IAAM,EAAM,EAAU,YAAY,OAAO,eAEnC,EAAgB,EACnB,YAAY,iBACZ,eAEH,OAAO,EAAc,EAAK,KAC3B,WAKL,EAAS,gB,wBAAsB,GAGjC,GAAoBZ,W,uSiB3CR47E,EAUAC,E,+DAZCC,EAAW,4CAExB,SAAYF,GACV,gBACA,YACA,kBAHF,CAAYA,MAAW,KAUvB,SAAYC,GACV,wCACA,sCACA,4BACA,oCACA,kCAEA,wCACA,wBACA,gCACA,gBACA,wBACA,sBACA,kBACA,sCACA,4BACA,kBACA,kCACA,4BACA,sCAEA,4CACA,gBACA,oBACA,oCACA,wBACA,wBACA,kCACA,kCACA,4CA7BF,CAAYA,MAAS,KgBnBd,I,EAAMrgE,EAAS,IAAI,SAAO,uBCgDjC,SAAeugE,EACbC,EACAC,EACAC,EAGAC,EACAC,EACAC,G,4IAIMC,EAAqBH,EAAqBC,G,8CAE1CE,EACF,GAAML,EAA0BK,IAD9B,M,cACF,S,aAM6B,SAAM1wE,QAAQ2wE,IAAIL,I,cAAzCM,EAAuB,UACvBC,EAAcD,EAAqB7+C,MACvC,SAAAuyC,GAAU,OAAAA,EAAOkM,gBAAkBA,MAGnC,GAAMH,EAA0BQ,EAAY3xE,QAD1C,M,OACF,S,sDAIJ0Q,EAAOrS,MAAM,G,oBAEf6yE,EAASJ,EAAYc,OAAQN,EAAeC,G,WAY9C,SAAeM,EACbX,EACAC,EACAC,EAGAE,EACAC,G,iLAGMO,EAA0D,GAI1DP,GAAcA,EAAU,SACtBQ,EAAkCR,EAAU,QAE3CjqE,MAAM8F,QAAQ2kE,KACjBA,EAAe,CAACA,IAIW,GAAMjxE,QAAQ2wE,IAAIL,KAR7C,M,OASF,IADMM,EAAuB,S,WAClBM,GAET,IAAML,EAAcD,EAAqB7+C,MACvC,SAAAuyC,GAAU,OAAAA,EAAOkM,gBAAkBU,KAE/B5K,EACJuK,GAAeR,EAA0BQ,EAAY3xE,OACvD,IAAIonE,E,OAMF0K,EAAkC,G,QALlCA,EAAgCpmE,KAAK07D,IARzC,IAAuB,EAAA2K,EAAA,aAAZC,EAAQ,K,YAARA,IAAY,K,iBA8BzB,OAR+C,IAA3CF,EAAgC17E,SAClC07E,EAAkCt8E,OAAO+jC,OACvC43C,IAMJ,GAAMrwE,QAAQ2wE,IAAIK,I,cAAlB,SAEAZ,EAASJ,EAAYmB,MAAOX,EAAeC,GAAc,I,+BAEzD7gE,EAAOrS,MAAM,G,uCAwFD6zE,EACdf,EACAC,EAGAC,EACAc,EACAC,GAMA,IAAIlB,EAAiB,W,IAAU,sDAE5B14E,OAAO25E,GAA6BzmE,KAAKvV,YAmB5C,OAdEqC,OAAO45E,IAC6B,oBAA7B55E,OAAO45E,KAGdlB,EAAW14E,OAAO45E,IAGpB55E,OAAO45E,GAtGT,SACElB,EAKAC,EAKAC,EAQAC,GA0CA,OAlCA,SACE9gC,EACA8hC,EACAd,G,mKAIMhhC,IAAYugC,EAAYmB,MAAxB,MAEF,GAAMJ,EACJX,EACAC,EACAC,EACAiB,EACAd,I,cALF,S,oBAOShhC,IAAYugC,EAAYc,OAAxB,MAET,GAAMX,EACJC,EACAC,EACAC,EACAC,EACAgB,EACAd,I,cANF,S,aAUAL,EAASJ,EAAYwB,IAAKD,G,sDAG5B3hE,EAAOrS,MAAM,G,+BA4CUk0E,CACzBrB,EACAC,EACAC,EACAC,GAGK,CACLH,SAAQ,EACRsB,YAAah6E,OAAO45E,ICrQxB,IAAM,IAAM,MACV,kBACE,0IAGF,yBACE,iJAGF,kCACE,wEACF,+BACE,oMAGF,2BACE,oMAGF,oBACE,yKAEF,yBACE,kEACF,gBACE,8HAEF,eACE,4HAEH,GAcY,EAAgB,IAAI,eAC/B,YACA,YACA,GCJIK,EAAmB,IAnBzB,WACE,WACSC,EACAC,QADA,IAAAD,MAAA,SACA,IAAAC,MARkB,KAOlB,KAAAD,mBACA,KAAAC,iBAcX,OAXE,YAAAC,oBAAA,SAAoB5yE,GAClB,OAAO0I,KAAKgqE,iBAAiB1yE,IAG/B,YAAA6yE,oBAAA,SAAoB7yE,EAAe8yE,GACjCpqE,KAAKgqE,iBAAiB1yE,GAAS8yE,GAGjC,YAAAC,uBAAA,SAAuB/yE,UACd0I,KAAKgqE,iBAAiB1yE,IAEjC,EAjBA,IAyBA,SAASnB,EAAWC,GAClB,OAAO,IAAIC,QAAQ,CACjBC,OAAQ,mBACR,iBAAkBF,I,SAQAk0E,EACpBC,G,wJAQiB,OANTjzE,EAAkBizE,EAAb,MAAEn0E,EAAWm0E,EAAL,OACf9yE,EAAuB,CAC3BC,OAAQ,MACRhB,QAASP,EAAWC,IAEhBo0E,EnB3EN,6EmB2EkCt1E,QAAQ,WAAYoC,GACrC,GAAMO,MAAM2yE,EAAQ/yE,I,UACb,OADlB7C,EAAW,UACJsB,QAAsC,MAApBtB,EAASsB,OAApC,YACEywD,EAAe,G,iBAGK,O,sBAAA,GAAM/xD,EAASY,Q,cAA/Bi1E,EAAgB,UAGA,QAAtB,EAAIA,EAAa90E,aAAK,eAAEK,WACtB2wD,EAAe8jB,EAAa90E,MAAMK,S,0CAGtC,MAAMJ,EAAcvB,OAAM,sBAAqC,CAC7Dq2E,WAAY91E,EAASsB,OACrBy0E,gBAAiBhkB,I,OAGrB,SAAO/xD,EAASY,eA4DlB,SAAeo1E,EACbL,EACA,EACAM,EACAC,G,IAFEC,EAAqB,wBAAEC,EAAY,e,YAErC,IAAAF,MAAA,G,2IAEQxzE,EAAyBizE,EAApB,MAAE3B,EAAkB2B,EAAL,c,iBAK1B,O,sBAAA,GAAMU,EAAoBJ,EAAQE,I,cAAlC,S,aAEA,G,WAAInC,EAMF,OALA5gE,EAAOe,KACL,6GACyC6/D,EACvC,yEAAyE,EAAE5yE,QAAO,KAEtF,GAAO,CAAEsB,MAAK,EAAEsxE,cAAa,IAE/B,MAAM,E,OAIW,O,sBAAA,GAAM0B,EAAmBC,I,OAK1C,OALM31E,EAAW,SAGjBk2E,EAAUT,uBAAuB/yE,GAEjC,GAAO1C,G,OAEP,IAgFJ,SAA0B4F,GACxB,KAAMA,aAAa,iBACjB,OAAO,EAIT,IAAMkwE,EAAaz1E,OAAOuF,EAAC,YAE3B,OACiB,MAAfkwE,GACe,MAAfA,GACe,MAAfA,GACe,MAAfA,EA5FKQ,C,YAAqB,CAExB,GADAJ,EAAUT,uBAAuB/yE,GAC7BsxE,EAMF,OALA5gE,EAAOe,KACL,0GACyC6/D,EACvC,yEAAyE,EAAE5yE,QAAO,KAEtF,GAAO,CAAEsB,MAAK,EAAEsxE,cAAa,IAE7B,MAAM,EAuBV,OAnBMuC,EACqB,MAAzBl2E,OAAO,EAAEy1E,YACL,iCACEM,EACAF,EAAUb,eAtLW,IAyLvB,iCAAuBe,EAAcF,EAAUb,gBAG/CD,EAAmB,CACvBe,sBAAuB31E,KAAKC,MAAQ81E,EACpCH,aAAcA,EAAe,GAI/BF,EAAUX,oBAAoB7yE,EAAO0yE,GACrChiE,EAAOgrD,MAAM,iCAAiCmY,EAAa,WAE3D,GAAOP,EACLL,EACAP,EACAa,EACAC,I,wBAiBN,SAASG,EACPJ,EACAE,GAEA,OAAO,IAAI3yE,SAAQ,SAACC,EAASqD,GAE3B,IAAMyvE,EAAgBpgE,KAAK0D,IAAIs8D,EAAwB31E,KAAKC,MAAO,GAE7D+W,EAAU9T,WAAWD,EAAS8yE,GAGpCN,EAAOhmC,kBAAiB,WACtBoD,aAAa77B,GAEb1Q,EACE9F,EAAcvB,OAAM,iBAAgC,CAClD02E,sBAAqB,WAkC/B,8BACE,KAAAzmC,UAA+B,GAOjC,OANE,YAAAO,iBAAA,SAAiBvF,GACft/B,KAAKskC,UAAUthC,KAAKs8B,IAEtB,YAAA8rC,MAAA,WACEprE,KAAKskC,UAAUt3C,SAAQ,SAAAsyC,GAAY,OAAAA,QAEvC,EARA,G,SCpPsB+rC,EACpBnxB,EACAwuB,EAGAC,EACAtY,EACAmY,G,kJAkC6B,OAhCvB8C,E,SD+CNpxB,EAEA4wB,EACAS,G,YADA,IAAAT,MAAA,G,yHAKA,GAFM,EAAmC5wB,EAAI1sD,QAArC8J,EAAK,QAAElB,EAAM,SAAEwyE,EAAa,iBAE/BtxE,EACH,MAAM1B,EAAcvB,OAAM,aAG5B,IAAK+B,EAAQ,CACX,GAAIwyE,EACF,SAAO,CACLA,cAAa,EACbtxE,MAAK,IAGT,MAAM1B,EAAcvB,OAAM,cAoB5B,OAjBM21E,EAAqCc,EAAUZ,oBACnD5yE,IACG,CACH0zE,aAAc,EACdD,sBAAuB31E,KAAKC,OAGxBw1E,EAAS,IAAIW,EAEnBlzE,YACE,kE,sDAEEuyE,EAAOO,Q,iBAESz9E,IAAlB49E,EAA8BA,EnB3IE,KmB8IlC,GAAOX,EACL,CAAEtzE,MAAK,EAAElB,OAAM,EAAEwyE,cAAa,GAC9BoB,EACAa,EACAC,UCzF2BW,CAA4BvxB,IAGtD16C,MAAK,SAAAk9D,GACJiM,EAAqBjM,EAAOkM,eAAiBlM,EAAOplE,MAElD4iD,EAAI1sD,QAAQo7E,eACZlM,EAAOkM,gBAAkB1uB,EAAI1sD,QAAQo7E,eAErC5gE,EAAOe,KACL,oDAAoDmxC,EAAI1sD,QAAQo7E,cAAhE,gEACiElM,EAAOkM,cADxE,+KAQLpqE,OAAM,SAAAhE,GAAK,OAAAwN,EAAOrS,MAAM6E,MAE3BkuE,EAA0B1lE,KAAKsoE,GAEzBI,EAnER,W,6IACO,iCAAD,OACF1jE,EAAOe,KACLnT,EAAcvB,OAAM,wBAAuC,CACzD07D,UAAW,oDACV/5D,SAEL,IAAO,I,OAGL,O,sBAAA,GAAM,uC,cAAN,S,aAOA,O,WALAgS,EAAOe,KACLnT,EAAcvB,OAAM,wBAAuC,CACzD07D,UAAW,IACV/5D,SAEL,IAAO,G,OAGX,UAAO,UA+CyC21E,GAAoBnsE,MAClE,SAAAosE,GACE,OAAIA,EACKvb,EAAc2O,aAErB,KAKuB,GAAM5mE,QAAQ2wE,IAAI,CAC7CuC,EACAI,K,OAsBF,OAxBM,EAAuB,SAAtBG,EAAa,KAAE30E,EAAG,KASzBsxE,EAAS,KAAa,IAAIpzE,OAEJ,MAEpB,OAAc,WACd,EAAA6F,QAAQ,EAHJ6wE,EAIL,EAEU,MAAP50E,IACF40E,EAAgB,YAAe50E,GAKjCsxE,EAASJ,EAAYc,OAAQ2C,EAAcjD,cAAekD,GAC1D,GAAOD,EAAcjD,sBChFvB,IAmCImD,EAMAC,EAzCAvD,EAEA,GAOAC,EAEC,GAQCC,EAA4D,GAK9Dc,EAAwB,YAKxBwC,EAAmB,OAkBnBC,GAA0B,E,SAKdC,EACdC,EACAC,EACAC,QAFA,IAAAF,OAAA,QACA,IAAAC,MAAA,SACA,IAAAC,MAAA,IAEAJ,EAAiBE,EACjB3D,EAA4B4D,EAC5B3D,EAA4B4D,EAC5B7C,EAAgB,YAChBwC,EAAW,O,SAMGM,IAMd,MAAO,CACL9D,0BAAyB,EACzBC,0BAAyB,G,SASb8D,EAASh/E,GACvB,GAAI0+E,EACF,MAAMt2E,EAAcvB,OAAM,uBAExB7G,EAAQi8E,gBACVA,EAAgBj8E,EAAQi8E,eAEtBj8E,EAAQy+E,WACVA,EAAWz+E,EAAQy+E,U,SA4BP/oE,EACdg3C,EACAmW,IArBF,WACE,IAAMoc,EAAwB,GAO9B,GANI,gCACFA,EAAsBzpE,KAAK,4CAExB,+BACHypE,EAAsBzpE,KAAK,8BAEzBypE,EAAsB/+E,OAAS,EAAG,CACpC,IAAMs8D,EAAUyiB,EACbjtD,KAAI,SAACxpB,EAASuK,GAAU,WAAIA,EAAQ,GAAC,KAAKvK,KAC1CwV,KAAK,KACFgc,EAAM5xB,EAAcvB,OAAM,4BAA2C,CACzE07D,UAAW/F,IAEbhiD,EAAOe,KAAKye,EAAIxxB,UAQlB02E,GACA,IAAMp1E,EAAQ4iD,EAAI1sD,QAAQ8J,MAC1B,IAAKA,EACH,MAAM1B,EAAcvB,OAAM,aAE5B,IAAK6lD,EAAI1sD,QAAQ4I,OAAQ,CACvB,IAAI8jD,EAAI1sD,QAAQo7E,cAOd,MAAMhzE,EAAcvB,OAAM,cAN1B2T,EAAOe,KACL,yKAC+EmxC,EAAI1sD,QAAQo7E,cACzF,wEAMR,GAAwC,MAApCH,EAA0BnxE,GAC5B,MAAM1B,EAAcvB,OAAM,iBAAgC,CACxD6S,GAAI5P,IAIR,IAAK40E,EAAgB,E,WJqGrB,IADA,IAAMS,EAAa78E,OAAO80C,SAASgoC,qBAAqB,UACtC,MAAA9/E,OAAO+jC,OAAO87C,GAAd,eAA2B,CAAxC,IAAMhvC,EAAG,KACZ,GAAIA,EAAIqM,KAAOrM,EAAIqM,IAAIwkB,SAAS8Z,GAC9B,OAAO3qC,EAGX,OAAO,MIrGAkvC,I,SJ5KuBpD,GAC9B,IAAMh/B,EAAS7F,SAASn1C,cAAc,UAGtCg7C,EAAOT,IAASs+B,EAAQ,MAAMmB,EAC9Bh/B,EAAO2B,OAAQ,EACfxH,SAASkoC,KAAK7iC,YAAYQ,GIuKtBsiC,CAAgBtD,G,SJhKeA,GAEnC,IAAIuD,EAAuB,GACvBpuE,MAAM8F,QAAQ5U,OAAO25E,IACvBuD,EAAYl9E,OAAO25E,GAEnB35E,OAAO25E,GAAiBuD,EI4JxBC,CAAqBxD,GAEf,MAA4BD,EAChCf,EACAC,EACAC,EACAc,EACAwC,GALMnC,EAAW,cAAEtB,EAAQ,WAO7BwD,EAAsBlC,EACtBiC,EAAmBvD,EAEnB0D,GAAiB,EA+DnB,OA3DAzD,EAA0BnxE,GAAS+zE,EACjCnxB,EACAwuB,EACAC,EACAtY,EACA0b,GAGmD,CACnD7xB,IAAG,EAGHgc,SAAU,SAACgX,EAAWC,EAAa3/E,I,SC3MrC4/E,EACA1O,EACAwO,EACAC,EACA3/E,G,+IAEIA,GAAWA,EAAQ6/E,QACrBD,EAAahF,EAAYmB,MAAO2D,EAAWC,GAC3C,KAFE,M,OAIoB,SAAMzO,G,OAAtBkK,EAAgB,SAChBt4D,EAAM,yCACP68D,GAAW,CACd,QAAWvE,IAEbwE,EAAahF,EAAYmB,MAAO2D,EAAW58D,G,mCD6LzC,CACE07D,EACAvD,EAA0BnxE,GAC1B41E,EACAC,EACA3/E,GACAgR,OAAM,SAAAhE,GAAK,OAAAwN,EAAOrS,MAAM6E,OAE5B8yE,iBAAkB,SAACC,EAAY//E,I,SC1LjC4/E,EACA1O,EACA6O,EACA//E,G,6IAEIA,GAAWA,EAAQ6/E,QACrBD,EAAahF,EAAYwB,IAAK,CAAE,YAAe2D,IAC/C,GAAOn1E,QAAQC,YAFb,M,OAIoB,SAAMqmE,G,OAAtBkK,EAAgB,SACtBwE,EAAahF,EAAYc,OAAQN,EAAe,CAC9C3tE,QAAQ,EACR,YAAesyE,I,mCD+Kf,CACEvB,EACAvD,EAA0BnxE,GAC1Bi2E,EACA//E,GACAgR,OAAM,SAAAhE,GAAK,OAAAwN,EAAOrS,MAAM6E,OAE5BgzE,UAAW,SAACtmE,EAAI1Z,I,SC1KlB4/E,EACA1O,EACAx3D,EACA1Z,G,6IAEIA,GAAWA,EAAQ6/E,QACrBD,EAAahF,EAAYwB,IAAK,CAAE,QAAW1iE,IAC3C,GAAO9O,QAAQC,YAFb,M,OAIoB,SAAMqmE,G,OAAtBkK,EAAgB,SACtBwE,EAAahF,EAAYc,OAAQN,EAAe,CAC9C3tE,QAAQ,EACR,QAAWiM,I,mCD+JX,CACE8kE,EACAvD,EAA0BnxE,GAC1B4P,EACA1Z,GACAgR,OAAM,SAAAhE,GAAK,OAAAwN,EAAOrS,MAAM6E,OAE5BizE,kBAAmB,SAAC3tE,EAAYtS,I,SC1JlC4/E,EACA1O,EACA5+D,EACAtS,G,kJAEIA,IAAWA,EAAQ6/E,OAAnB,YAEF,IADMK,EAA6C,GACnD,IAAkB,EAAA5gF,OAAOC,KAAK+S,GAAZ,eAAPnG,EAAG,KAEZ+zE,EAAe,mBAAmB/zE,GAASmG,EAAWnG,GAGxD,OADAyzE,EAAahF,EAAYwB,IAAK8D,GAC9B,GAAOt1E,QAAQC,W,OAEO,SAAMqmE,G,OAAtBkK,EAAgB,SACtBwE,EAAahF,EAAYc,OAAQN,EAAe,CAC9C3tE,QAAQ,EACR,gBAAmB6E,I,mCD0InB,CACEksE,EACAvD,EAA0BnxE,GAC1BwI,EACAtS,GACAgR,OAAM,SAAAhE,GAAK,OAAAwN,EAAOrS,MAAM6E,OAE5BmzE,8BAA+B,SAAAC,I,SCtIjClP,EACAkP,G,sIAEsB,SAAMlP,G,cAAtBkK,EAAgB,SACtB94E,OAAO,cAAc84E,IAAoBgF,E,YDmIrC,CACEnF,EAA0BnxE,GAC1Bs2E,GACApvE,OAAM,SAAAhE,GAAK,OAAAwN,EAAOrS,MAAM6E,OAE5BotD,SAAU,CACRtpD,OAAQ,WAEN,cADOmqE,EAA0BnxE,GAC1Bc,QAAQC,a,ItCnOjB,EAAiB,Y,SAEP,EAAkB,GAC9B,EAAO,SAAS,kBAChB,IAAI,YACF,GACA,YAOE,OAAO,EALK,EAAU,YAAY,OAAO,eACnB,EACnB,YAAY,iBACZ,kBAGJ,UAED,gBAAgB,CAChB,SAAQ,EACR,UAAS,EACT,YAAW,KAIb,EAAO,SAAS,kBAChB,IAAI,YAAU,sBAKd,SACA,GAEA,IAEE,MAAO,CACL,SAFgB,EAAU,YAAY,GAAgB,eAElC,UAEtB,MAAO,GACP,MAAM,EAAc,OAAM,+BAA8C,CACtE,OAAQ,OAfuC,YAGnD,EAAO,gB,+BA2CX,SAAe,I,gIACb,GAAI,+BACF,UAAO,GAET,IAAK,8BACH,UAAO,GAET,IAAK,iCACH,UAAO,G,iBAIuB,O,sBAAA,GAAM,uC,OACpC,SAD8B,U,OAG9B,O,SAAA,IAAO,G,wBAtCX,EAAkB,M,oOwCjElB,aACE,WACmB+6D,EACAya,EACAC,EACA9lE,GAHA,KAAAorD,SACA,KAAAya,UACA,KAAAC,eACA,KAAA9lE,SAoFrB,OAxEE,YAAA+lE,kBAAA,SACEC,EACAC,GAGA,IAAKA,EAEH,OADAjuE,KAAKgI,OAAOgrD,MAAM,iDACX,EAIT,IAAMkb,EAAiB94E,KAAKC,MAAQ44E,EAE9BF,EAAoBG,GAAkBF,EAS5C,OAPAhuE,KAAKgI,OAAOgrD,MACV,+CACwBkb,EADxB,gEAEiEF,EAFjE,mBAGoBD,EAAiB,KAGhCA,GAGH,YAAAl2E,MAAN,SAAYJ,G,8HAKN,SAAMW,QAAQ2wE,IAAI,CACpB/oE,KAAK6tE,QAAQM,wCACbnuE,KAAK6tE,QAAQO,oC,OAIf,OATM,EAGF,SAFFH,EAAkC,MAClCI,EAA2B,OAS3BruE,KAAK+tE,kBACHt2E,EAAQu2E,kBACRC,GAGF,GAAOI,IAKT52E,EAAQ62E,KACND,GAA+BA,EAA4BC,KAG5C,GAAMtuE,KAAKozD,OAAOv7D,MAAMJ,K,OAgBzC,OAhBM7C,EAAW,SAIX25E,EAAoB,CAExBvuE,KAAK8tE,aAAaU,sCAAsCp5E,KAAKC,QAGvC,MAApBT,EAASsB,QAEXq4E,EAAkBvrE,KAChBhD,KAAK6tE,QAAQY,+BAA+B75E,IAIhD,GAAMwD,QAAQ2wE,IAAIwF,I,OAElB,OAFA,SAEA,GAAO35E,WAEX,EAzFA,GLEMmjE,IAAqB,MACzB,uBACE,kFACF,6BACE,mEACF,0BACE,wDACF,yBACE,+DACF,kBACE,8EACF,iBACE,mFACF,iBACE,iFACF,oBACE,oFACF,0BACE,mHAEF,mBACE,iGAEF,oBACE,mOAGF,wBACE,kFAEF,kBACE,0EACH,GAoBYniE,EAAgB,IAAIoiE,eAC/B,eACA,gBACAD,GMzCF,iBACE,WACmB2W,EACAn3E,EACAgY,EACA83C,EACAjxD,EACAkB,GALA,KAAAo3E,wBACA,KAAAn3E,aACA,KAAAgY,YACA,KAAA83C,YACA,KAAAjxD,SACA,KAAAkB,QAuHrB,OA3GQ,YAAAO,MAAN,SAAYJ,G,0JACkC,SAAMW,QAAQ2wE,IAAI,CAC5D/oE,KAAK0uE,sBAAsB1P,QAC3Bh/D,KAAK0uE,sBAAsBr2B,c,OAFvB,EAAsC,SAArCs2B,EAAc,KAAEC,EAAiB,KAKlCC,EACJ/+E,OAAOg/E,iCACP,8CAEIhjC,EAAS+iC,EAAO,gBAAgB7uE,KAAKqnD,UAAS,eAAernD,KAAKuP,UAAS,cAAcvP,KAAK5J,OAE9FM,EAAU,CACd,eAAgB,mBAChB,mBAAoB,OAGpB,gBAAiBe,EAAQ62E,MAAQ,KAG7BS,EAAgC,CAEpCjR,YAAa99D,KAAKzI,WAClBmmE,gBAAiBiR,EACjBhR,sBAAuBiR,EACvBhR,OAAQ59D,KAAK1I,MACb03E,oBCnEJ,IAAAC,MAAA1zE,WAIG0zE,EAAkBC,WAAaD,EAAkBC,UAAU,IAG5DD,EAAkBE,WDgEZ3hF,EAAU,CACdkK,OAAQ,OACRhB,QAAO,EACPU,KAAMO,KAAKC,UAAUm3E,IAIjBK,EAAev3E,MAAMi0C,EAAKt+C,GAC1B6hF,EAAiB,IAAIj3E,SAAQ,SAACk3E,EAAU5zE,GAE5CjE,EAAQozE,OAAOhmC,kBAAiB,WAE9B,IAAMlvC,EAAQ,IAAImT,MAAM,8BACxBnT,EAAM/H,KAAO,aACb8N,EAAO/F,S,iBAMT,O,sBAAA,GAAMyC,QAAQk0D,KAAK,CAAC8iB,EAAcC,K,OACvB,OADX,SACW,GAAMD,G,cAAjBx6E,EAAW,S,aAMX,M,WAJI26E,EAAY,uBACW,eAAvB,EAAc3hF,OAChB2hF,EAAY,iBAER35E,EAAcvB,OAAOk7E,EAAW,CACpCC,qBAAsB,EAAcx5E,U,UAIpCE,EAAStB,EAASsB,OAGhBu5E,EAAe76E,EAAS8B,QAAQyD,IAAI,cAAWxM,EAO7B,MAApBiH,EAASsB,OAAT,aACEw5E,OAAY,E,iBAEC,O,uBAAA,GAAM96E,EAASY,Q,cAA9Bk6E,EAAe,S,cAEf,M,WAAM95E,EAAcvB,OAAM,qBAAwB,CAChDm7E,qBAAsB,EAAcx5E,U,QAGxC0mE,EAASgT,EAAY,QACrB5L,EAAQ4L,EAAY,M,mBAiBtB,GAbc,+BAAV5L,EACF5tE,EAAS,IACU,cAAV4tE,EACT5tE,EAAS,IACU,gBAAV4tE,GAAqC,iBAAVA,IAEpCpH,EAAS,IAOI,MAAXxmE,GAA6B,MAAXA,EACpB,MAAMN,EAAcvB,OAAM,eAAyB,CACjDq2E,WAAYx0E,IAIhB,SAAO,CAAEA,OAAM,EAAEo4E,KAAMmB,EAAc/S,OAAM,I,IClJ7CuS,SDoJF,EA9HA,GEEA,0BACE,KAAA3qC,UAA+B,GAOjC,OANE,YAAAO,iBAAA,SAAiBvF,GACft/B,KAAKskC,UAAUthC,KAAKs8B,IAEtB,YAAA8rC,MAAA,WACEprE,KAAKskC,UAAUt3C,SAAQ,SAAAsyC,GAAY,OAAAA,QAEvC,EARA,GC5BMqwC,EAAwB,CAAC,IAAK,OAAQ,IAAK,MAAO,IAAK,MAE7D,aACE,WACmBC,EACAC,QAAA,IAAAA,MARY,IAOZ,KAAAD,UACA,KAAAC,SA4BrB,OAzBE,YAAAC,SAAA,WACE,OAAO9vE,KAAK6vE,QAGd,YAAAE,UAAA,WACE,MAAqB,WAAjB/vE,KAAK4vE,SAGFD,EAAsBziF,QAAQ8S,KAAK6vE,OAAOjkE,gBAAkB,GAGrE,YAAAokE,SAAA,WACE,GAAqB,WAAjBhwE,KAAK4vE,QACP,OAvB2B,EAyB7B,IAAI9yD,EAAM7nB,OAAO+K,KAAK6vE,QAItB,OAHIphC,MAAM3xB,KACRA,EA3B2B,GA6BtBA,GAGT,YAAAmzD,UAAA,WACE,OAAOjwE,KAAK4vE,SAEhB,EA/BA,GCkBA,aAqCE,WAEW11B,EAIQg2B,EACAC,EACAC,EACAC,GAPR,KAAAn2B,MAIQ,KAAAg2B,UACA,KAAAC,gBACA,KAAAC,WACA,KAAAC,UA5CX,KAAAC,2BAA4B,EAKpC,KAAA9D,SAAqB,CACnB+D,mBAhBiC,IAiBjCC,2BAhBiC,OAmBnC,KAAAC,cAA8D,GA4JhE,OAxJE,YAAAC,YAAA,SAAYpoE,GACV,OAAQA,GACN,IAAK,QACHtI,KAAKqwE,QAAQ/nE,SAAWqoE,WAAiBC,MACzC,MACF,IAAK,SACH5wE,KAAKqwE,QAAQ/nE,SAAWqoE,WAAiBE,OACzC,MACF,QACE7wE,KAAKqwE,QAAQ/nE,SAAWqoE,WAAiBG,QAI/C,sBAAI,8BAAe,C,IAAnB,WACE,OAAO9wE,KAAKmwE,cAAchC,0CAA4C,G,gCAGxE,sBAAI,8BAAe,C,IAAnB,WACE,OAAOnuE,KAAKmwE,cAAcY,sBAAwB,gB,gCAe9C,YAAAC,SAAN,W,0HAC0D,SAAM54E,QAAQ2wE,IAAI,CACxE/oE,KAAKowE,SAAShC,iCACdpuE,KAAKowE,SAASa,yB,OAEhB,OAJM,EAAkD,SAAjD5C,EAA2B,KAAE6C,EAAgB,KAKjD7C,GACAA,EAA4B3R,QAC5B2R,EAA4BC,MAC7BD,EAA4BC,OAAS4C,EAMvC,GAAM94E,QAAQ2wE,IAAI,CAChB/oE,KAAKmwE,cAAcgB,gBAAgB9C,EAA4B3R,QAC/D18D,KAAKowE,SAASgB,oBAAoB/C,EAA4BC,SAJ9D,IAAO,G,OAMT,OAJA,SAIA,IAAO,WAGT,YAAA+C,kBAAA,sBAQE,OAPKrxE,KAAKsxE,qBACRtxE,KAAKsxE,mBAAqBtxE,KAAKmwE,cAC5BoB,kBACA/xE,MAAK,WACJ,EAAK8wE,2BAA4B,MAGhCtwE,KAAKsxE,oBAQR,YAAAz5E,MAAN,W,iIAWQ25E,EAAc,IAAIC,EAExBn5E,YAAW,0D,8CAETk5E,EAAYpG,Q,YACXprE,KAAKwsE,SAAS+D,oB,iBAIf,O,sBAAA,GAAMvwE,KAAKkwE,QAAQr4E,MAAM,CACvBm2E,kBAAmBhuE,KAAKwsE,SAASgE,2BACjC3F,OAAQ2G,K,OAGV,OALA,SAKA,GAAMxxE,KAAKmwE,cAAcuB,mBAAmB,Y,cAA5C,S,aAKA,O,WVlEiCnC,EU+DK,iBAAhCoC,GV/DiBn3E,EU+Dc,aV9DrBo3E,kBAAgD,IAA/Bp3E,EAAE1E,KAAK5I,QAAQqiF,GU+D5C,WACA,UACJ,GAAMvvE,KAAKmwE,cAAcuB,mBAAmBC,I,OAC5C,MADA,SACM,E,qBVnEiBn3E,EAAU+0E,SUuE/B,YAAAsC,iBAAN,W,gHACE,SAAM7xE,KAAKnI,S,OACX,OADA,SACA,GAAOmI,KAAKgxE,oBAGd,YAAAruE,OAAA,sBACE,OA6CJ,SAAoBmvE,EAAeC,QAAf,IAAAD,MAAA,SAAe,IAAAC,MAAA,IACjC,OAAOjlF,OAAOC,KAAI,yBAAM+kF,GAASC,IA9CxBC,CACLhyE,KAAKmwE,cAAc8B,kBACnBjyE,KAAKywE,eACL7sE,QAAO,SAACsuE,EAAYv4E,GAEpB,OADAu4E,EAAWv4E,GAAO,EAAKkf,SAASlf,GACzBu4E,IACN,KAGL,YAAAC,WAAA,SAAWx4E,GACT,OAAOqG,KAAK6Y,SAASlf,GAAKo2E,aAG5B,YAAAqC,UAAA,SAAUz4E,GACR,OAAOqG,KAAK6Y,SAASlf,GAAKq2E,YAG5B,YAAAqC,UAAA,SAAU14E,GACR,OAAOqG,KAAK6Y,SAASlf,GAAKm2E,YAG5B,YAAAj3D,SAAA,SAASlf,GACFqG,KAAKswE,2BACRtwE,KAAKqwE,QAAQrd,MACX,kCAAkCr5D,EAAlC,4HAIJ,IAAM24E,EAAetyE,KAAKmwE,cAAc8B,kBACxC,OAAIK,QAAsC3kF,IAAtB2kF,EAAa34E,GACxB,IAAI44E,EAAM,SAAUD,EAAa34E,IAC/BqG,KAAKywE,oBAA6C9iF,IAA5BqS,KAAKywE,cAAc92E,GAC3C,IAAI44E,EAAM,UAAWt5E,OAAO+G,KAAKywE,cAAc92E,MAExDqG,KAAKqwE,QAAQrd,MACX,mCAAmCr5D,EAAnC,iEAGK,IAAI44E,EAAM,YAErB,EAxKA,GCfA,SAASC,EAAgBzwE,EAAcwtE,GACrC,IAAMkD,EAAiB1wE,EAAM2wE,OAAsB/8E,YAAShI,EAC5D,OAAOiI,EAAcvB,OAAOk7E,EAAW,CACrCC,qBAAsBiD,GAAiBA,EAAcz8E,UAclD,IAAM28E,EAAsB,sBA4DnC,iBAME,WACmBr7E,EACAiC,EACAgW,EACAqjE,QAAA,IAAAA,MAvCZ,IAAIx6E,SAAQ,SAACC,EAASqD,GAC3B,IAAMjE,EAAUoK,UAAUglC,KA9Bd,yBACG,GA8BfpvC,EAAQyH,QAAU,SAAA6C,GAChBrG,EAAO82E,EAAgBzwE,EAAK,kBAE9BtK,EAAQwH,UAAY,SAAA8C,GAClB1J,EAAS0J,EAAM2wE,OAA4B17E,SAE7CS,EAAQqK,gBAAkB,SAAAC,GACxB,IAAMT,EAAMS,EAAM2wE,OAA4B17E,OAO9C,OAAQ+K,EAAMnH,YACZ,KAAK,EACH0G,EAAGzG,kBAAkB83E,EAAqB,CACxCE,QAAS,uBAiBA,KAAAv7E,QACA,KAAAiC,UACA,KAAAgW,YACA,KAAAqjE,gBAgJrB,OA7IE,YAAA7B,mBAAA,WACE,OAAO/wE,KAAK7F,IAAiB,sBAG/B,YAAAu3E,mBAAA,SAAmBx7E,GACjB,OAAO8J,KAAKlE,IAAiB,oBAAqB5F,IAKpD,YAAAi4E,sCAAA,WACE,OAAOnuE,KAAK7F,IAAY,2CAG1B,YAAAq0E,sCAAA,SAAsCz7B,GACpC,OAAO/yC,KAAKlE,IACV,yCACAi3C,IAIJ,YAAAq7B,+BAAA,WACE,OAAOpuE,KAAK7F,IAAmB,mCAGjC,YAAAs0E,+BAAA,SAA+B75E,GAC7B,OAAOoL,KAAKlE,IAAmB,iCAAkClH,IAGnE,YAAAq9E,gBAAA,WACE,OAAOjyE,KAAK7F,IAAgC,kBAG9C,YAAAg3E,gBAAA,SAAgBzU,GACd,OAAO18D,KAAKlE,IAAgC,gBAAiB4gE,IAG/D,YAAAuU,oBAAA,WACE,OAAOjxE,KAAK7F,IAAY,uBAG1B,YAAAi3E,oBAAA,SAAoB0B,GAClB,OAAO9yE,KAAKlE,IAAY,qBAAsBg3E,IAGhD,YAAA5I,oBAAA,WACE,OAAOlqE,KAAK7F,IAAsB,sBAGpC,YAAAgwE,oBAAA,SAAoBC,GAClB,OAAOpqE,KAAKlE,IAAsB,oBAAqBsuE,IAGzD,YAAAC,uBAAA,WACE,OAAOrqE,KAAK1B,OAAO,sBAGf,YAAAnE,IAAN,SAAaR,G,6HACA,SAAMqG,KAAK4yE,e,OACtB,OADMtxE,EAAK,SACX,GAAO,IAAIlJ,SAAQ,SAACC,EAASqD,GAC3B,IACM4G,EADchB,EAAGC,YAAY,CAACoxE,GAAsB,YAC1BrwE,YAAYqwE,GACtCI,EAAe,EAAKC,mBAAmBr5E,GAC7C,IACE,IAAMlC,EAAU6K,EAAYnI,IAAI44E,GAChCt7E,EAAQyH,QAAU,SAAA6C,GAChBrG,EAAO82E,EAAgBzwE,EAAK,iBAE9BtK,EAAQwH,UAAY,SAAA8C,GAClB,IAAM/K,EAAU+K,EAAM2wE,OAAsB17E,OAE1CqB,EADErB,EACMA,EAAOnE,WAEPlF,IAGZ,MAAO6M,GACPkB,EACE9F,EAAcvB,OAAM,cAAwB,CAC1Cm7E,qBAAsBh1E,GAAKA,EAAExE,wBAOjC,YAAA8F,IAAN,SAAanC,EAAoC9G,G,6HACpC,SAAMmN,KAAK4yE,e,OACtB,OADMtxE,EAAK,SACX,GAAO,IAAIlJ,SAAQ,SAACC,EAASqD,GAC3B,IACM4G,EADchB,EAAGC,YAAY,CAACoxE,GAAsB,aAC1BrwE,YAAYqwE,GACtCI,EAAe,EAAKC,mBAAmBr5E,GAC7C,IACE,IAAMlC,EAAU6K,EAAYgxC,IAAI,CAC9By/B,aAAY,EACZlgF,MAAK,IAEP4E,EAAQyH,QAAU,SAAC6C,GACjBrG,EAAO82E,EAAgBzwE,EAAK,iBAE9BtK,EAAQwH,UAAY,WAClB5G,KAEF,MAAOmC,GACPkB,EACE9F,EAAcvB,OAAM,cAAwB,CAC1Cm7E,qBAAsBh1E,GAAKA,EAAExE,wBAOjC,YAAAsI,OAAN,SAAa3E,G,6HACA,SAAMqG,KAAK4yE,e,OACtB,OADMtxE,EAAK,SACX,GAAO,IAAIlJ,SAAQ,SAACC,EAASqD,GAC3B,IACM4G,EADchB,EAAGC,YAAY,CAACoxE,GAAsB,aAC1BrwE,YAAYqwE,GACtCI,EAAe,EAAKC,mBAAmBr5E,GAC7C,IACE,IAAMlC,EAAU6K,EAAYhE,OAAOy0E,GACnCt7E,EAAQyH,QAAU,SAAC6C,GACjBrG,EAAO82E,EAAgBzwE,EAAK,oBAE9BtK,EAAQwH,UAAY,WAClB5G,KAEF,MAAOmC,GACPkB,EACE9F,EAAcvB,OAAM,iBAA2B,CAC7Cm7E,qBAAsBh1E,GAAKA,EAAExE,wBAQvC,YAAAg9E,mBAAA,SAAmBr5E,GACjB,MAAO,CAACqG,KAAK1I,MAAO0I,KAAKzG,QAASyG,KAAKuP,UAAW5V,GAAK6R,QAE3D,EA1JA,GCjFA,aACE,WAA6BqiE,GAAA,KAAAA,UAyE/B,OA7DE,YAAAkD,mBAAA,WACE,OAAO/wE,KAAK2xE,iBAGd,YAAAxD,sCAAA,WACE,OAAOnuE,KAAKiuE,oCAGd,YAAAgE,gBAAA,WACE,OAAOjyE,KAAKsyE,cAMR,YAAAf,gBAAN,W,gIAW0B,OAVlB0B,EAAyBjzE,KAAK6tE,QAAQkD,qBACtCmC,EAA4ClzE,KAAK6tE,QAAQM,wCACzDgF,EAAsBnzE,KAAK6tE,QAAQoE,kBAQjB,GAAMgB,G,OAKa,OALrCtB,EAAkB,YAEtB3xE,KAAK2xE,gBAAkBA,GAGkB,GAAMuB,G,OAK5B,OALfjF,EAAqC,YAEzCjuE,KAAKiuE,mCAAqCA,GAGvB,GAAMkF,G,cAArBb,EAAe,YAEnBtyE,KAAKsyE,aAAeA,G,YAOxB,YAAAZ,mBAAA,SAAmBx7E,GAEjB,OADA8J,KAAK2xE,gBAAkBz7E,EAChB8J,KAAK6tE,QAAQ6D,mBAAmBx7E,IAGzC,YAAAs4E,sCAAA,SACE4E,GAGA,OADApzE,KAAKiuE,mCAAqCmF,EACnCpzE,KAAK6tE,QAAQW,sCAAsC4E,IAG5D,YAAAjC,gBAAA,SAAgBmB,GAEd,OADAtyE,KAAKsyE,aAAeA,EACbtyE,KAAK6tE,QAAQsD,gBAAgBmB,IAExC,EA1EA,G,SCegBrH,EACdJ,EACAE,GAEA,OAAO,IAAI3yE,SAAQ,SAACC,EAASqD,GAE3B,IAAMyvE,EAAgBpgE,KAAK0D,IAAIs8D,EAAwB31E,KAAKC,MAAO,GAE7D+W,EAAU9T,WAAWD,EAAS8yE,GAGpCN,EAAOhmC,kBAAiB,WACtBoD,aAAa77B,GAGb1Q,EACE9F,EAAcvB,OAAM,iBAA2B,CAC7C02E,sBAAqB,WAgC/B,iBACE,WACmB3X,EACAya,GADA,KAAAza,SACA,KAAAya,UAmDrB,OAhDQ,YAAAh2E,MAAN,SAAYJ,G,sHACgB,SAAMuI,KAAK6tE,QAAQ3D,uB,OAK7C,OALMF,EAAoB,UAA6C,CACrEgB,aAAc,EACdD,sBAAuB31E,KAAKC,OAG9B,GAAO2K,KAAKqzE,aAAa57E,EAASuyE,YAQ9B,YAAAqJ,aAAN,SACE57E,EACA,G,IAAEszE,EAAqB,wBAAEC,EAAY,e,0HAKrC,SAAMC,EAAoBxzE,EAAQozE,OAAQE,I,OAA1C,S,iBAGmB,O,sBAAA,GAAM/qE,KAAKozD,OAAOv7D,MAAMJ,I,OAGzC,OAHM7C,EAAW,SAGjB,GAAMoL,KAAK6tE,QAAQxD,0B,OAEnB,OAFA,SAEA,GAAOz1E,G,OAEP,IA3DN,SAA0B4F,GACxB,KAAMA,aAAao3E,iBACjB,OAAO,EAIT,IAAMlH,EAAaz1E,OAAOuF,EAAC,YAE3B,OACiB,MAAfkwE,GACe,MAAfA,GACe,MAAfA,GACe,MAAfA,EA+COQ,C,YACH,MAAM,EAWR,OAPMlB,EAAmB,CACvBe,sBACE31E,KAAKC,MAAQi+E,yBAAuBtI,GACtCA,aAAcA,EAAe,GAI/B,GAAMhrE,KAAK6tE,QAAQ1D,oBAAoBH,I,OAEvC,OAFA,SAEA,GAAOhqE,KAAKqzE,aAAa57E,EAASuyE,I,yBAGxC,EAtDA,G,qChD1CgBuJ,EACdC,GAEAA,EAAiB5rB,SAASqF,kBACxB,IAAI7/D,YACF,gBAQJ,SACE0F,EACAyc,GAIA,IAAM2qC,EAAMpnD,EAAUq6D,YAAY,OAAOxwD,eAEnC0zD,EAAgBv9D,EAAUq6D,YAAY,iBAAiBxwD,eAG7D,GAAsB,qBAAX7M,OACT,MAAM8F,EAAcvB,OAAM,uBAItB,MAA+B6lD,EAAI1sD,QAAjC65D,EAAS,YAAEjxD,EAAM,SAAEkB,EAAK,QAChC,IAAK+vD,EACH,MAAMzxD,EAAcvB,OAAM,2BAE5B,IAAK+B,EACH,MAAMR,EAAcvB,OAAM,wBAE5B,IAAKiD,EACH,MAAM1B,EAAcvB,OAAM,uBAE5Bkb,EAAYA,GAAa,WAEzB,IAAMs+D,EAAU,IAAI4F,EAAQn8E,EAAO4iD,EAAItsD,KAAM2hB,GACvCu+D,EAAe,IAAI4F,EAAa7F,GAEhC7lE,EAAS,IAAIhB,SAAO2sE,GAI1B3rE,EAAOM,SAAWqoE,WAAiBG,MAEnC,IAAM8C,EAAa,IAAIC,EACrBxjB,EAEAmjB,EAAiB/mC,YACjBl9B,EACA83C,EACAjxD,EACAkB,GAEIw8E,EAAiB,IAAIC,EAAeH,EAAY/F,GAChDmG,EAAgB,IAAIC,EACxBH,EACAjG,EACAC,EACA9lE,GAGIksE,EAAuB,IAAIC,EAC/Bj6B,EACA85B,EACAlG,EACAD,EACA7lE,GAOF,OAFAksE,EAAqB7C,oBAEd6C,IAzEc,UAEnB7mB,sBAAqB,IAGzBmmB,EAAiB/mF,gBAAgBknF,E,UAwEnCJ,EAAqB/mF,W","file":"static/js/3.7764589d.chunk.js","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport firebase from '@firebase/app';\nimport { name, version } from '../package.json';\n\nfirebase.registerVersion(name, version, 'app');\n\nexport default firebase;\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport '@firebase/installations';\n\nimport {\n  Component,\n  ComponentContainer,\n  ComponentType\n} from '@firebase/component';\nimport { ERROR_FACTORY, ErrorCode } from './util/errors';\nimport {\n  FirebaseService,\n  _FirebaseNamespace\n} from '@firebase/app-types/private';\n\nimport { FirebaseInternalDependencies } from './interfaces/internal-dependencies';\nimport { FirebaseMessaging } from '@firebase/messaging-types';\nimport { SwController } from './controllers/sw-controller';\nimport { WindowController } from './controllers/window-controller';\nimport { extractAppConfig } from './helpers/extract-app-config';\nimport firebase from '@firebase/app';\n\nconst MESSAGING_NAME = 'messaging';\nfunction factoryMethod(\n  container: ComponentContainer\n): FirebaseService & FirebaseMessaging {\n  // Dependencies.\n  const app = container.getProvider('app').getImmediate();\n  const appConfig = extractAppConfig(app);\n  const installations = container.getProvider('installations').getImmediate();\n  const analyticsProvider = container.getProvider('analytics-internal');\n\n  const firebaseDependencies: FirebaseInternalDependencies = {\n    app,\n    appConfig,\n    installations,\n    analyticsProvider\n  };\n\n  if (!isSupported()) {\n    throw ERROR_FACTORY.create(ErrorCode.UNSUPPORTED_BROWSER);\n  }\n\n  if (self && 'ServiceWorkerGlobalScope' in self) {\n    // Running in ServiceWorker context\n    return new SwController(firebaseDependencies);\n  } else {\n    // Assume we are in the window context.\n    return new WindowController(firebaseDependencies);\n  }\n}\n\nconst NAMESPACE_EXPORTS = {\n  isSupported\n};\n\n(firebase as _FirebaseNamespace).INTERNAL.registerComponent(\n  new Component(\n    MESSAGING_NAME,\n    factoryMethod,\n    ComponentType.PUBLIC\n  ).setServiceProps(NAMESPACE_EXPORTS)\n);\n\n/**\n * Define extension behavior of `registerMessaging`\n */\ndeclare module '@firebase/app-types' {\n  interface FirebaseNamespace {\n    messaging: {\n      (app?: FirebaseApp): FirebaseMessaging;\n      isSupported(): boolean;\n    };\n  }\n  interface FirebaseApp {\n    messaging(): FirebaseMessaging;\n  }\n}\n\nfunction isSupported(): boolean {\n  if (self && 'ServiceWorkerGlobalScope' in self) {\n    // Running in ServiceWorker context\n    return isSWControllerSupported();\n  } else {\n    // Assume we are in the window context.\n    return isWindowControllerSupported();\n  }\n}\n\n/**\n * Checks to see if the required APIs exist.\n */\nfunction isWindowControllerSupported(): boolean {\n  return (\n    'indexedDB' in window &&\n    indexedDB !== null &&\n    navigator.cookieEnabled &&\n    'serviceWorker' in navigator &&\n    'PushManager' in window &&\n    'Notification' in window &&\n    'fetch' in window &&\n    ServiceWorkerRegistration.prototype.hasOwnProperty('showNotification') &&\n    PushSubscription.prototype.hasOwnProperty('getKey')\n  );\n}\n\n/**\n * Checks to see if the required APIs exist within SW Context.\n */\nfunction isSWControllerSupported(): boolean {\n  return (\n    'indexedDB' in self &&\n    indexedDB !== null &&\n    'PushManager' in self &&\n    'Notification' in self &&\n    ServiceWorkerRegistration.prototype.hasOwnProperty('showNotification') &&\n    PushSubscription.prototype.hasOwnProperty('getKey')\n  );\n}\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport React from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport { chainPropTypes, getDisplayName } from '@material-ui/utils';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport makeStyles from '../makeStyles';\n\nfunction omit(input, fields) {\n  var output = {};\n  Object.keys(input).forEach(function (prop) {\n    if (fields.indexOf(prop) === -1) {\n      output[prop] = input[prop];\n    }\n  });\n  return output;\n} // styled-components's API removes the mapping between components and styles.\n// Using components as a low-level styling construct can be simpler.\n\n\nexport default function styled(Component) {\n  var componentCreator = function componentCreator(style) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    var name = options.name,\n        stylesOptions = _objectWithoutProperties(options, [\"name\"]);\n\n    if (process.env.NODE_ENV !== 'production' && Component === undefined) {\n      throw new Error(['You are calling styled(Component)(style) with an undefined component.', 'You may have forgotten to import it.'].join('\\n'));\n    }\n\n    var classNamePrefix = name;\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (!name) {\n        // Provide a better DX outside production.\n        var displayName = getDisplayName(Component);\n\n        if (displayName !== undefined) {\n          classNamePrefix = displayName;\n        }\n      }\n    }\n\n    var stylesOrCreator = typeof style === 'function' ? function (theme) {\n      return {\n        root: function root(props) {\n          return style(_extends({\n            theme: theme\n          }, props));\n        }\n      };\n    } : {\n      root: style\n    };\n    var useStyles = makeStyles(stylesOrCreator, _extends({\n      Component: Component,\n      name: name || Component.displayName,\n      classNamePrefix: classNamePrefix\n    }, stylesOptions));\n    var filterProps;\n    var propTypes = {};\n\n    if (style.filterProps) {\n      filterProps = style.filterProps;\n      delete style.filterProps;\n    }\n    /* eslint-disable react/forbid-foreign-prop-types */\n\n\n    if (style.propTypes) {\n      propTypes = style.propTypes;\n      delete style.propTypes;\n    }\n    /* eslint-enable react/forbid-foreign-prop-types */\n\n\n    var StyledComponent = React.forwardRef(function StyledComponent(props, ref) {\n      var children = props.children,\n          classNameProp = props.className,\n          clone = props.clone,\n          ComponentProp = props.component,\n          other = _objectWithoutProperties(props, [\"children\", \"className\", \"clone\", \"component\"]);\n\n      var classes = useStyles(props);\n      var className = clsx(classes.root, classNameProp);\n      var spread = other;\n\n      if (filterProps) {\n        spread = omit(spread, filterProps);\n      }\n\n      if (clone) {\n        return React.cloneElement(children, _extends({\n          className: clsx(children.props.className, className)\n        }, spread));\n      }\n\n      if (typeof children === 'function') {\n        return children(_extends({\n          className: className\n        }, spread));\n      }\n\n      var FinalComponent = ComponentProp || Component;\n      return /*#__PURE__*/React.createElement(FinalComponent, _extends({\n        ref: ref,\n        className: className\n      }, spread), children);\n    });\n    process.env.NODE_ENV !== \"production\" ? StyledComponent.propTypes = _extends({\n      /**\n       * A render function or node.\n       */\n      children: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n\n      /**\n       * @ignore\n       */\n      className: PropTypes.string,\n\n      /**\n       * If `true`, the component will recycle it's children HTML element.\n       * It's using `React.cloneElement` internally.\n       *\n       * This prop will be deprecated and removed in v5\n       */\n      clone: chainPropTypes(PropTypes.bool, function (props) {\n        if (props.clone && props.component) {\n          return new Error('You can not use the clone and component prop at the same time.');\n        }\n\n        return null;\n      }),\n\n      /**\n       * The component used for the root node.\n       * Either a string to use a HTML element or a component.\n       */\n      component: PropTypes.elementType\n    }, propTypes) : void 0;\n\n    if (process.env.NODE_ENV !== 'production') {\n      StyledComponent.displayName = \"Styled(\".concat(classNamePrefix, \")\");\n    }\n\n    hoistNonReactStatics(StyledComponent, Component);\n    return StyledComponent;\n  };\n\n  return componentCreator;\n}","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { styled as styledWithoutDefault } from '@material-ui/styles';\nimport defaultTheme from './defaultTheme';\n\nvar styled = function styled(Component) {\n  var componentCreator = styledWithoutDefault(Component);\n  return function (style, options) {\n    return componentCreator(style, _extends({\n      defaultTheme: defaultTheme\n    }, options));\n  };\n};\n\nexport default styled;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { chainPropTypes } from '@material-ui/utils';\nimport withStyles from '../styles/withStyles';\nimport ButtonBase from '../ButtonBase';\nimport isMuiElement from '../utils/isMuiElement';\nimport useForkRef from '../utils/useForkRef';\nimport ListContext from '../List/ListContext';\nimport * as ReactDOM from 'react-dom';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the (normally root) `component` element. May be wrapped by a `container`. */\n    root: {\n      display: 'flex',\n      justifyContent: 'flex-start',\n      alignItems: 'center',\n      position: 'relative',\n      textDecoration: 'none',\n      width: '100%',\n      boxSizing: 'border-box',\n      textAlign: 'left',\n      paddingTop: 8,\n      paddingBottom: 8,\n      '&$focusVisible': {\n        backgroundColor: theme.palette.action.selected\n      },\n      '&$selected, &$selected:hover': {\n        backgroundColor: theme.palette.action.selected\n      },\n      '&$disabled': {\n        opacity: 0.5\n      }\n    },\n\n    /* Styles applied to the `container` element if `children` includes `ListItemSecondaryAction`. */\n    container: {\n      position: 'relative'\n    },\n\n    /* Pseudo-class applied to the `component`'s `focusVisibleClassName` prop if `button={true}`. */\n    focusVisible: {},\n\n    /* Styles applied to the `component` element if dense. */\n    dense: {\n      paddingTop: 4,\n      paddingBottom: 4\n    },\n\n    /* Styles applied to the `component` element if `alignItems=\"flex-start\"`. */\n    alignItemsFlexStart: {\n      alignItems: 'flex-start'\n    },\n\n    /* Pseudo-class applied to the inner `component` element if `disabled={true}`. */\n    disabled: {},\n\n    /* Styles applied to the inner `component` element if `divider={true}`. */\n    divider: {\n      borderBottom: \"1px solid \".concat(theme.palette.divider),\n      backgroundClip: 'padding-box'\n    },\n\n    /* Styles applied to the inner `component` element if `disableGutters={false}`. */\n    gutters: {\n      paddingLeft: 16,\n      paddingRight: 16\n    },\n\n    /* Styles applied to the inner `component` element if `button={true}`. */\n    button: {\n      transition: theme.transitions.create('background-color', {\n        duration: theme.transitions.duration.shortest\n      }),\n      '&:hover': {\n        textDecoration: 'none',\n        backgroundColor: theme.palette.action.hover,\n        // Reset on touch devices, it doesn't add specificity\n        '@media (hover: none)': {\n          backgroundColor: 'transparent'\n        }\n      }\n    },\n\n    /* Styles applied to the `component` element if `children` includes `ListItemSecondaryAction`. */\n    secondaryAction: {\n      // Add some space to avoid collision as `ListItemSecondaryAction`\n      // is absolutely positioned.\n      paddingRight: 48\n    },\n\n    /* Pseudo-class applied to the root element if `selected={true}`. */\n    selected: {}\n  };\n};\nvar useEnhancedEffect = typeof window === 'undefined' ? React.useEffect : React.useLayoutEffect;\n/**\n * Uses an additional container component if `ListItemSecondaryAction` is the last child.\n */\n\nvar ListItem = /*#__PURE__*/React.forwardRef(function ListItem(props, ref) {\n  var _props$alignItems = props.alignItems,\n      alignItems = _props$alignItems === void 0 ? 'center' : _props$alignItems,\n      _props$autoFocus = props.autoFocus,\n      autoFocus = _props$autoFocus === void 0 ? false : _props$autoFocus,\n      _props$button = props.button,\n      button = _props$button === void 0 ? false : _props$button,\n      childrenProp = props.children,\n      classes = props.classes,\n      className = props.className,\n      componentProp = props.component,\n      _props$ContainerCompo = props.ContainerComponent,\n      ContainerComponent = _props$ContainerCompo === void 0 ? 'li' : _props$ContainerCompo,\n      _props$ContainerProps = props.ContainerProps;\n  _props$ContainerProps = _props$ContainerProps === void 0 ? {} : _props$ContainerProps;\n\n  var ContainerClassName = _props$ContainerProps.className,\n      ContainerProps = _objectWithoutProperties(_props$ContainerProps, [\"className\"]),\n      _props$dense = props.dense,\n      dense = _props$dense === void 0 ? false : _props$dense,\n      _props$disabled = props.disabled,\n      disabled = _props$disabled === void 0 ? false : _props$disabled,\n      _props$disableGutters = props.disableGutters,\n      disableGutters = _props$disableGutters === void 0 ? false : _props$disableGutters,\n      _props$divider = props.divider,\n      divider = _props$divider === void 0 ? false : _props$divider,\n      focusVisibleClassName = props.focusVisibleClassName,\n      _props$selected = props.selected,\n      selected = _props$selected === void 0 ? false : _props$selected,\n      other = _objectWithoutProperties(props, [\"alignItems\", \"autoFocus\", \"button\", \"children\", \"classes\", \"className\", \"component\", \"ContainerComponent\", \"ContainerProps\", \"dense\", \"disabled\", \"disableGutters\", \"divider\", \"focusVisibleClassName\", \"selected\"]);\n\n  var context = React.useContext(ListContext);\n  var childContext = {\n    dense: dense || context.dense || false,\n    alignItems: alignItems\n  };\n  var listItemRef = React.useRef(null);\n  useEnhancedEffect(function () {\n    if (autoFocus) {\n      if (listItemRef.current) {\n        listItemRef.current.focus();\n      } else if (process.env.NODE_ENV !== 'production') {\n        console.error('Material-UI: Unable to set focus to a ListItem whose component has not been rendered.');\n      }\n    }\n  }, [autoFocus]);\n  var children = React.Children.toArray(childrenProp);\n  var hasSecondaryAction = children.length && isMuiElement(children[children.length - 1], ['ListItemSecondaryAction']);\n  var handleOwnRef = React.useCallback(function (instance) {\n    // #StrictMode ready\n    listItemRef.current = ReactDOM.findDOMNode(instance);\n  }, []);\n  var handleRef = useForkRef(handleOwnRef, ref);\n\n  var componentProps = _extends({\n    className: clsx(classes.root, className, childContext.dense && classes.dense, !disableGutters && classes.gutters, divider && classes.divider, disabled && classes.disabled, button && classes.button, alignItems !== \"center\" && classes.alignItemsFlexStart, hasSecondaryAction && classes.secondaryAction, selected && classes.selected),\n    disabled: disabled\n  }, other);\n\n  var Component = componentProp || 'li';\n\n  if (button) {\n    componentProps.component = componentProp || 'div';\n    componentProps.focusVisibleClassName = clsx(classes.focusVisible, focusVisibleClassName);\n    Component = ButtonBase;\n  }\n\n  if (hasSecondaryAction) {\n    // Use div by default.\n    Component = !componentProps.component && !componentProp ? 'div' : Component; // Avoid nesting of li > li.\n\n    if (ContainerComponent === 'li') {\n      if (Component === 'li') {\n        Component = 'div';\n      } else if (componentProps.component === 'li') {\n        componentProps.component = 'div';\n      }\n    }\n\n    return /*#__PURE__*/React.createElement(ListContext.Provider, {\n      value: childContext\n    }, /*#__PURE__*/React.createElement(ContainerComponent, _extends({\n      className: clsx(classes.container, ContainerClassName),\n      ref: handleRef\n    }, ContainerProps), /*#__PURE__*/React.createElement(Component, componentProps, children), children.pop()));\n  }\n\n  return /*#__PURE__*/React.createElement(ListContext.Provider, {\n    value: childContext\n  }, /*#__PURE__*/React.createElement(Component, _extends({\n    ref: handleRef\n  }, componentProps), children));\n});\nprocess.env.NODE_ENV !== \"production\" ? ListItem.propTypes = {\n  /**\n   * Defines the `align-items` style property.\n   */\n  alignItems: PropTypes.oneOf(['flex-start', 'center']),\n\n  /**\n   * If `true`, the list item will be focused during the first mount.\n   * Focus will also be triggered if the value changes from false to true.\n   */\n  autoFocus: PropTypes.bool,\n\n  /**\n   * If `true`, the list item will be a button (using `ButtonBase`). Props intended\n   * for `ButtonBase` can then be applied to `ListItem`.\n   */\n  button: PropTypes.bool,\n\n  /**\n   * The content of the component. If a `ListItemSecondaryAction` is used it must\n   * be the last child.\n   */\n  children: chainPropTypes(PropTypes.node, function (props) {\n    var children = React.Children.toArray(props.children); // React.Children.toArray(props.children).findLastIndex(isListItemSecondaryAction)\n\n    var secondaryActionIndex = -1;\n\n    for (var i = children.length - 1; i >= 0; i -= 1) {\n      var child = children[i];\n\n      if (isMuiElement(child, ['ListItemSecondaryAction'])) {\n        secondaryActionIndex = i;\n        break;\n      }\n    } //  is ListItemSecondaryAction the last child of ListItem\n\n\n    if (secondaryActionIndex !== -1 && secondaryActionIndex !== children.length - 1) {\n      return new Error('Material-UI: You used an element after ListItemSecondaryAction. ' + 'For ListItem to detect that it has a secondary action ' + 'you must pass it as the last child to ListItem.');\n    }\n\n    return null;\n  }),\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   * By default, it's a `li` when `button` is `false` and a `div` when `button` is `true`.\n   */\n  component: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .elementType,\n\n  /**\n   * The container component used when a `ListItemSecondaryAction` is the last child.\n   */\n  ContainerComponent: PropTypes.elementType,\n\n  /**\n   * Props applied to the container component if used.\n   */\n  ContainerProps: PropTypes.object,\n\n  /**\n   * If `true`, compact vertical padding designed for keyboard and mouse input will be used.\n   */\n  dense: PropTypes.bool,\n\n  /**\n   * If `true`, the list item will be disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, the left and right padding is removed.\n   */\n  disableGutters: PropTypes.bool,\n\n  /**\n   * If `true`, a 1px light border is added to the bottom of the list item.\n   */\n  divider: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  focusVisibleClassName: PropTypes.string,\n\n  /**\n   * Use to apply selected styling.\n   */\n  selected: PropTypes.bool\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiListItem'\n})(ListItem);","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const DEFAULT_SW_PATH = '/firebase-messaging-sw.js';\nexport const DEFAULT_SW_SCOPE = '/firebase-cloud-messaging-push-scope';\n\nexport const DEFAULT_VAPID_KEY =\n  'BDOU99-h67HcA6JeFXHbSNMu7e2yNNu3RzoMj8TM4W88jITfq7ZmPvIM1Iv-4_l2LxQcYwhqby2xGpWwzjfAnG4';\n\nexport const ENDPOINT = 'https://fcmregistrations.googleapis.com/v1';\n\n/** Key of FCM Payload in Notification's data field. */\nexport const FCM_MSG = 'FCM_MSG';\n\nexport const CONSOLE_CAMPAIGN_ID = 'google.c.a.c_id';\nexport const CONSOLE_CAMPAIGN_NAME = 'google.c.a.c_l';\nexport const CONSOLE_CAMPAIGN_TIME = 'google.c.a.ts';\n/** Set to '1' if Analytics is enabled for the campaign */\nexport const CONSOLE_CAMPAIGN_ANALYTICS_ENABLED = 'google.c.a.e';\nexport const TAG = 'FirebaseMessaging: ';\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory, ErrorMap } from '@firebase/util';\n\nexport const enum ErrorCode {\n  MISSING_APP_CONFIG_VALUES = 'missing-app-config-values',\n  AVAILABLE_IN_WINDOW = 'only-available-in-window',\n  AVAILABLE_IN_SW = 'only-available-in-sw',\n  PERMISSION_DEFAULT = 'permission-default',\n  PERMISSION_BLOCKED = 'permission-blocked',\n  UNSUPPORTED_BROWSER = 'unsupported-browser',\n  FAILED_DEFAULT_REGISTRATION = 'failed-service-worker-registration',\n  TOKEN_SUBSCRIBE_FAILED = 'token-subscribe-failed',\n  TOKEN_SUBSCRIBE_NO_TOKEN = 'token-subscribe-no-token',\n  TOKEN_UNSUBSCRIBE_FAILED = 'token-unsubscribe-failed',\n  TOKEN_UPDATE_FAILED = 'token-update-failed',\n  TOKEN_UPDATE_NO_TOKEN = 'token-update-no-token',\n  INVALID_BG_HANDLER = 'invalid-bg-handler',\n  USE_SW_AFTER_GET_TOKEN = 'use-sw-after-get-token',\n  INVALID_SW_REGISTRATION = 'invalid-sw-registration',\n  USE_VAPID_KEY_AFTER_GET_TOKEN = 'use-vapid-key-after-get-token',\n  INVALID_VAPID_KEY = 'invalid-vapid-key'\n}\n\nexport const ERROR_MAP: ErrorMap<ErrorCode> = {\n  [ErrorCode.MISSING_APP_CONFIG_VALUES]:\n    'Missing App configuration value: \"{$valueName}\"',\n  [ErrorCode.AVAILABLE_IN_WINDOW]:\n    'This method is available in a Window context.',\n  [ErrorCode.AVAILABLE_IN_SW]:\n    'This method is available in a service worker context.',\n  [ErrorCode.PERMISSION_DEFAULT]:\n    'The notification permission was not granted and dismissed instead.',\n  [ErrorCode.PERMISSION_BLOCKED]:\n    'The notification permission was not granted and blocked instead.',\n  [ErrorCode.UNSUPPORTED_BROWSER]:\n    \"This browser doesn't support the API's required to use the firebase SDK.\",\n  [ErrorCode.FAILED_DEFAULT_REGISTRATION]:\n    'We are unable to register the default service worker. {$browserErrorMessage}',\n  [ErrorCode.TOKEN_SUBSCRIBE_FAILED]:\n    'A problem occurred while subscribing the user to FCM: {$errorInfo}',\n  [ErrorCode.TOKEN_SUBSCRIBE_NO_TOKEN]:\n    'FCM returned no token when subscribing the user to push.',\n  [ErrorCode.TOKEN_UNSUBSCRIBE_FAILED]:\n    'A problem occurred while unsubscribing the ' +\n    'user from FCM: {$errorInfo}',\n  [ErrorCode.TOKEN_UPDATE_FAILED]:\n    'A problem occurred while updating the user from FCM: {$errorInfo}',\n  [ErrorCode.TOKEN_UPDATE_NO_TOKEN]:\n    'FCM returned no token when updating the user to push.',\n  [ErrorCode.USE_SW_AFTER_GET_TOKEN]:\n    'The useServiceWorker() method may only be called once and must be ' +\n    'called before calling getToken() to ensure your service worker is used.',\n  [ErrorCode.INVALID_SW_REGISTRATION]:\n    'The input to useServiceWorker() must be a ServiceWorkerRegistration.',\n  [ErrorCode.INVALID_BG_HANDLER]:\n    'The input to setBackgroundMessageHandler() must be a function.',\n  [ErrorCode.INVALID_VAPID_KEY]: 'The public VAPID key must be a string.',\n  [ErrorCode.USE_VAPID_KEY_AFTER_GET_TOKEN]:\n    'The usePublicVapidKey() method may only be called once and must be ' +\n    'called before calling getToken() to ensure your VAPID key is used.'\n};\n\ninterface ErrorParams {\n  [ErrorCode.MISSING_APP_CONFIG_VALUES]: {\n    valueName: string;\n  };\n  [ErrorCode.FAILED_DEFAULT_REGISTRATION]: { browserErrorMessage: string };\n  [ErrorCode.TOKEN_SUBSCRIBE_FAILED]: { errorInfo: string };\n  [ErrorCode.TOKEN_UNSUBSCRIBE_FAILED]: { errorInfo: string };\n  [ErrorCode.TOKEN_UPDATE_FAILED]: { errorInfo: string };\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<ErrorCode, ErrorParams>(\n  'messaging',\n  'Messaging',\n  ERROR_MAP\n);\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseError } from '@firebase/util';\nimport { GenerateAuthTokenResponse } from '../interfaces/api-response';\nimport { AppConfig } from '../interfaces/app-config';\nimport {\n  CompletedAuthToken,\n  RegisteredInstallationEntry,\n  RequestStatus\n} from '../interfaces/installation-entry';\nimport {\n  INSTALLATIONS_API_URL,\n  INTERNAL_AUTH_VERSION\n} from '../util/constants';\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\n\nexport function getInstallationsEndpoint({ projectId }: AppConfig): string {\n  return `${INSTALLATIONS_API_URL}/projects/${projectId}/installations`;\n}\n\nexport function extractAuthTokenInfoFromResponse(\n  response: GenerateAuthTokenResponse\n): CompletedAuthToken {\n  return {\n    token: response.token,\n    requestStatus: RequestStatus.COMPLETED,\n    expiresIn: getExpiresInFromResponseExpiresIn(response.expiresIn),\n    creationTime: Date.now()\n  };\n}\n\nexport async function getErrorFromResponse(\n  requestName: string,\n  response: Response\n): Promise<FirebaseError> {\n  const responseJson: ErrorResponse = await response.json();\n  const errorData = responseJson.error;\n  return ERROR_FACTORY.create(ErrorCode.REQUEST_FAILED, {\n    requestName,\n    serverCode: errorData.code,\n    serverMessage: errorData.message,\n    serverStatus: errorData.status\n  });\n}\n\nexport function getHeaders({ apiKey }: AppConfig): Headers {\n  return new Headers({\n    'Content-Type': 'application/json',\n    Accept: 'application/json',\n    'x-goog-api-key': apiKey\n  });\n}\n\nexport function getHeadersWithAuth(\n  appConfig: AppConfig,\n  { refreshToken }: RegisteredInstallationEntry\n): Headers {\n  const headers = getHeaders(appConfig);\n  headers.append('Authorization', getAuthorizationHeader(refreshToken));\n  return headers;\n}\n\nexport interface ErrorResponse {\n  error: {\n    code: number;\n    message: string;\n    status: string;\n  };\n}\n\n/**\n * Calls the passed in fetch wrapper and returns the response.\n * If the returned response has a status of 5xx, re-runs the function once and\n * returns the response.\n */\nexport async function retryIfServerError(\n  fn: () => Promise<Response>\n): Promise<Response> {\n  const result = await fn();\n\n  if (result.status >= 500 && result.status < 600) {\n    // Internal Server Error. Retry request.\n    return fn();\n  }\n\n  return result;\n}\n\nfunction getExpiresInFromResponseExpiresIn(responseExpiresIn: string): number {\n  // This works because the server will never respond with fractions of a second.\n  return Number(responseExpiresIn.replace('s', '000'));\n}\n\nfunction getAuthorizationHeader(refreshToken: string): string {\n  return `${INTERNAL_AUTH_VERSION} ${refreshToken}`;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CreateInstallationResponse } from '../interfaces/api-response';\nimport { AppConfig } from '../interfaces/app-config';\nimport {\n  InProgressInstallationEntry,\n  RegisteredInstallationEntry,\n  RequestStatus\n} from '../interfaces/installation-entry';\nimport { INTERNAL_AUTH_VERSION, PACKAGE_VERSION } from '../util/constants';\nimport {\n  extractAuthTokenInfoFromResponse,\n  getErrorFromResponse,\n  getHeaders,\n  getInstallationsEndpoint,\n  retryIfServerError\n} from './common';\n\nexport async function createInstallationRequest(\n  appConfig: AppConfig,\n  { fid }: InProgressInstallationEntry\n): Promise<RegisteredInstallationEntry> {\n  const endpoint = getInstallationsEndpoint(appConfig);\n\n  const headers = getHeaders(appConfig);\n  const body = {\n    fid,\n    authVersion: INTERNAL_AUTH_VERSION,\n    appId: appConfig.appId,\n    sdkVersion: PACKAGE_VERSION\n  };\n\n  const request: RequestInit = {\n    method: 'POST',\n    headers,\n    body: JSON.stringify(body)\n  };\n\n  const response = await retryIfServerError(() => fetch(endpoint, request));\n  if (response.ok) {\n    const responseValue: CreateInstallationResponse = await response.json();\n    const registeredInstallationEntry: RegisteredInstallationEntry = {\n      fid: responseValue.fid || fid,\n      registrationStatus: RequestStatus.COMPLETED,\n      refreshToken: responseValue.refreshToken,\n      authToken: extractAuthTokenInfoFromResponse(responseValue.authToken)\n    };\n    return registeredInstallationEntry;\n  } else {\n    throw await getErrorFromResponse('Create Installation', response);\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Returns a promise that resolves after given time passes. */\nexport function sleep(ms: number): Promise<void> {\n  return new Promise<void>(resolve => {\n    setTimeout(resolve, ms);\n  });\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { bufferToBase64UrlSafe } from './buffer-to-base64-url-safe';\n\nexport const VALID_FID_PATTERN = /^[cdef][\\w-]{21}$/;\nexport const INVALID_FID = '';\n\n/**\n * Generates a new FID using random values from Web Crypto API.\n * Returns an empty string if FID generation fails for any reason.\n */\nexport function generateFid(): string {\n  try {\n    // A valid FID has exactly 22 base64 characters, which is 132 bits, or 16.5\n    // bytes. our implementation generates a 17 byte array instead.\n    const fidByteArray = new Uint8Array(17);\n    const crypto =\n      self.crypto || ((self as unknown) as { msCrypto: Crypto }).msCrypto;\n    crypto.getRandomValues(fidByteArray);\n\n    // Replace the first 4 random bits with the constant FID header of 0b0111.\n    fidByteArray[0] = 0b01110000 + (fidByteArray[0] % 0b00010000);\n\n    const fid = encode(fidByteArray);\n\n    return VALID_FID_PATTERN.test(fid) ? fid : INVALID_FID;\n  } catch {\n    // FID generation errored\n    return INVALID_FID;\n  }\n}\n\n/** Converts a FID Uint8Array to a base64 string representation. */\nfunction encode(fidByteArray: Uint8Array): string {\n  const b64String = bufferToBase64UrlSafe(fidByteArray);\n\n  // Remove the 23rd character that was added because of the extra 4 bits at the\n  // end of our 17 byte array, and the '=' padding.\n  return b64String.substr(0, 22);\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport function bufferToBase64UrlSafe(array: Uint8Array): string {\n  const b64 = btoa(String.fromCharCode(...array));\n  return b64.replace(/\\+/g, '-').replace(/\\//g, '_');\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AppConfig } from '../interfaces/app-config';\n\n/** Returns a string key that can be used to identify the app. */\nexport function getKey(appConfig: AppConfig): string {\n  return `${appConfig.appName}!${appConfig.appId}`;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getKey } from '../util/get-key';\nimport { AppConfig } from '../interfaces/app-config';\nimport { IdChangeCallbackFn } from '../functions';\n\nconst fidChangeCallbacks: Map<string, Set<IdChangeCallbackFn>> = new Map();\n\n/**\n * Calls the onIdChange callbacks with the new FID value, and broadcasts the\n * change to other tabs.\n */\nexport function fidChanged(appConfig: AppConfig, fid: string): void {\n  const key = getKey(appConfig);\n\n  callFidChangeCallbacks(key, fid);\n  broadcastFidChange(key, fid);\n}\n\nexport function addCallback(\n  appConfig: AppConfig,\n  callback: IdChangeCallbackFn\n): void {\n  // Open the broadcast channel if it's not already open,\n  // to be able to listen to change events from other tabs.\n  getBroadcastChannel();\n\n  const key = getKey(appConfig);\n\n  let callbackSet = fidChangeCallbacks.get(key);\n  if (!callbackSet) {\n    callbackSet = new Set();\n    fidChangeCallbacks.set(key, callbackSet);\n  }\n  callbackSet.add(callback);\n}\n\nexport function removeCallback(\n  appConfig: AppConfig,\n  callback: IdChangeCallbackFn\n): void {\n  const key = getKey(appConfig);\n\n  const callbackSet = fidChangeCallbacks.get(key);\n\n  if (!callbackSet) {\n    return;\n  }\n\n  callbackSet.delete(callback);\n  if (callbackSet.size === 0) {\n    fidChangeCallbacks.delete(key);\n  }\n\n  // Close broadcast channel if there are no more callbacks.\n  closeBroadcastChannel();\n}\n\nfunction callFidChangeCallbacks(key: string, fid: string): void {\n  const callbacks = fidChangeCallbacks.get(key);\n  if (!callbacks) {\n    return;\n  }\n\n  for (const callback of callbacks) {\n    callback(fid);\n  }\n}\n\nfunction broadcastFidChange(key: string, fid: string): void {\n  const channel = getBroadcastChannel();\n  if (channel) {\n    channel.postMessage({ key, fid });\n  }\n  closeBroadcastChannel();\n}\n\nlet broadcastChannel: BroadcastChannel | null = null;\n/** Opens and returns a BroadcastChannel if it is supported by the browser. */\nfunction getBroadcastChannel(): BroadcastChannel | null {\n  if (!broadcastChannel && 'BroadcastChannel' in self) {\n    broadcastChannel = new BroadcastChannel('[Firebase] FID Change');\n    broadcastChannel.onmessage = e => {\n      callFidChangeCallbacks(e.data.key, e.data.fid);\n    };\n  }\n  return broadcastChannel;\n}\n\nfunction closeBroadcastChannel(): void {\n  if (fidChangeCallbacks.size === 0 && broadcastChannel) {\n    broadcastChannel.close();\n    broadcastChannel = null;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DB, deleteDb, openDb } from 'idb';\n\nimport { FirebaseInternalDependencies } from '../interfaces/internal-dependencies';\nimport { TokenDetails } from '../interfaces/token-details';\nimport { migrateOldDatabase } from './migrate-old-database';\n\n// Exported for tests.\nexport const DATABASE_NAME = 'firebase-messaging-database';\nconst DATABASE_VERSION = 1;\nconst OBJECT_STORE_NAME = 'firebase-messaging-store';\n\nlet dbPromise: Promise<DB> | null = null;\nfunction getDbPromise(): Promise<DB> {\n  if (!dbPromise) {\n    dbPromise = openDb(DATABASE_NAME, DATABASE_VERSION, upgradeDb => {\n      // We don't use 'break' in this switch statement, the fall-through behavior is what we want,\n      // because if there are multiple versions between the old version and the current version, we\n      // want ALL the migrations that correspond to those versions to run, not only the last one.\n      // eslint-disable-next-line default-case\n      switch (upgradeDb.oldVersion) {\n        case 0:\n          upgradeDb.createObjectStore(OBJECT_STORE_NAME);\n      }\n    });\n  }\n  return dbPromise;\n}\n\n/** Gets record(s) from the objectStore that match the given key. */\nexport async function dbGet(\n  firebaseDependencies: FirebaseInternalDependencies\n): Promise<TokenDetails | undefined> {\n  const key = getKey(firebaseDependencies);\n  const db = await getDbPromise();\n  const tokenDetails = await db\n    .transaction(OBJECT_STORE_NAME)\n    .objectStore(OBJECT_STORE_NAME)\n    .get(key);\n\n  if (tokenDetails) {\n    return tokenDetails;\n  } else {\n    // Check if there is a tokenDetails object in the old DB.\n    const oldTokenDetails = await migrateOldDatabase(\n      firebaseDependencies.appConfig.senderId\n    );\n    if (oldTokenDetails) {\n      await dbSet(firebaseDependencies, oldTokenDetails);\n      return oldTokenDetails;\n    }\n  }\n}\n\n/** Assigns or overwrites the record for the given key with the given value. */\nexport async function dbSet(\n  firebaseDependencies: FirebaseInternalDependencies,\n  tokenDetails: TokenDetails\n): Promise<TokenDetails> {\n  const key = getKey(firebaseDependencies);\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  await tx.objectStore(OBJECT_STORE_NAME).put(tokenDetails, key);\n  await tx.complete;\n  return tokenDetails;\n}\n\n/** Removes record(s) from the objectStore that match the given key. */\nexport async function dbRemove(\n  firebaseDependencies: FirebaseInternalDependencies\n): Promise<void> {\n  const key = getKey(firebaseDependencies);\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  await tx.objectStore(OBJECT_STORE_NAME).delete(key);\n  await tx.complete;\n}\n\n/** Deletes the DB. Useful for tests. */\nexport async function dbDelete(): Promise<void> {\n  if (dbPromise) {\n    (await dbPromise).close();\n    await deleteDb(DATABASE_NAME);\n    dbPromise = null;\n  }\n}\n\nfunction getKey({ appConfig }: FirebaseInternalDependencies): string {\n  return appConfig.appId;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { createInstallationRequest } from '../api/create-installation-request';\nimport { AppConfig } from '../interfaces/app-config';\nimport {\n  InProgressInstallationEntry,\n  InstallationEntry,\n  RegisteredInstallationEntry,\n  RequestStatus\n} from '../interfaces/installation-entry';\nimport { PENDING_TIMEOUT_MS } from '../util/constants';\nimport { ERROR_FACTORY, ErrorCode, isServerError } from '../util/errors';\nimport { sleep } from '../util/sleep';\nimport { generateFid, INVALID_FID } from './generate-fid';\nimport { remove, set, update } from './idb-manager';\n\nexport interface InstallationEntryWithRegistrationPromise {\n  installationEntry: InstallationEntry;\n  /** Exist iff the installationEntry is not registered. */\n  registrationPromise?: Promise<RegisteredInstallationEntry>;\n}\n\n/**\n * Updates and returns the InstallationEntry from the database.\n * Also triggers a registration request if it is necessary and possible.\n */\nexport async function getInstallationEntry(\n  appConfig: AppConfig\n): Promise<InstallationEntryWithRegistrationPromise> {\n  let registrationPromise: Promise<RegisteredInstallationEntry> | undefined;\n\n  const installationEntry = await update(appConfig, oldEntry => {\n    const installationEntry = updateOrCreateInstallationEntry(oldEntry);\n    const entryWithPromise = triggerRegistrationIfNecessary(\n      appConfig,\n      installationEntry\n    );\n    registrationPromise = entryWithPromise.registrationPromise;\n    return entryWithPromise.installationEntry;\n  });\n\n  if (installationEntry.fid === INVALID_FID) {\n    // FID generation failed. Waiting for the FID from the server.\n    return { installationEntry: await registrationPromise! };\n  }\n\n  return {\n    installationEntry,\n    registrationPromise\n  };\n}\n\n/**\n * Creates a new Installation Entry if one does not exist.\n * Also clears timed out pending requests.\n */\nfunction updateOrCreateInstallationEntry(\n  oldEntry: InstallationEntry | undefined\n): InstallationEntry {\n  const entry: InstallationEntry = oldEntry || {\n    fid: generateFid(),\n    registrationStatus: RequestStatus.NOT_STARTED\n  };\n\n  return clearTimedOutRequest(entry);\n}\n\n/**\n * If the Firebase Installation is not registered yet, this will trigger the\n * registration and return an InProgressInstallationEntry.\n *\n * If registrationPromise does not exist, the installationEntry is guaranteed\n * to be registered.\n */\nfunction triggerRegistrationIfNecessary(\n  appConfig: AppConfig,\n  installationEntry: InstallationEntry\n): InstallationEntryWithRegistrationPromise {\n  if (installationEntry.registrationStatus === RequestStatus.NOT_STARTED) {\n    if (!navigator.onLine) {\n      // Registration required but app is offline.\n      const registrationPromiseWithError = Promise.reject(\n        ERROR_FACTORY.create(ErrorCode.APP_OFFLINE)\n      );\n      return {\n        installationEntry,\n        registrationPromise: registrationPromiseWithError\n      };\n    }\n\n    // Try registering. Change status to IN_PROGRESS.\n    const inProgressEntry: InProgressInstallationEntry = {\n      fid: installationEntry.fid,\n      registrationStatus: RequestStatus.IN_PROGRESS,\n      registrationTime: Date.now()\n    };\n    const registrationPromise = registerInstallation(\n      appConfig,\n      inProgressEntry\n    );\n    return { installationEntry: inProgressEntry, registrationPromise };\n  } else if (\n    installationEntry.registrationStatus === RequestStatus.IN_PROGRESS\n  ) {\n    return {\n      installationEntry,\n      registrationPromise: waitUntilFidRegistration(appConfig)\n    };\n  } else {\n    return { installationEntry };\n  }\n}\n\n/** This will be executed only once for each new Firebase Installation. */\nasync function registerInstallation(\n  appConfig: AppConfig,\n  installationEntry: InProgressInstallationEntry\n): Promise<RegisteredInstallationEntry> {\n  try {\n    const registeredInstallationEntry = await createInstallationRequest(\n      appConfig,\n      installationEntry\n    );\n    return set(appConfig, registeredInstallationEntry);\n  } catch (e) {\n    if (isServerError(e) && e.serverCode === 409) {\n      // Server returned a \"FID can not be used\" error.\n      // Generate a new ID next time.\n      await remove(appConfig);\n    } else {\n      // Registration failed. Set FID as not registered.\n      await set(appConfig, {\n        fid: installationEntry.fid,\n        registrationStatus: RequestStatus.NOT_STARTED\n      });\n    }\n    throw e;\n  }\n}\n\n/** Call if FID registration is pending in another request. */\nasync function waitUntilFidRegistration(\n  appConfig: AppConfig\n): Promise<RegisteredInstallationEntry> {\n  // Unfortunately, there is no way of reliably observing when a value in\n  // IndexedDB changes (yet, see https://github.com/WICG/indexed-db-observers),\n  // so we need to poll.\n\n  let entry: InstallationEntry = await updateInstallationRequest(appConfig);\n  while (entry.registrationStatus === RequestStatus.IN_PROGRESS) {\n    // createInstallation request still in progress.\n    await sleep(100);\n\n    entry = await updateInstallationRequest(appConfig);\n  }\n\n  if (entry.registrationStatus === RequestStatus.NOT_STARTED) {\n    // The request timed out or failed in a different call. Try again.\n    const {\n      installationEntry,\n      registrationPromise\n    } = await getInstallationEntry(appConfig);\n\n    if (registrationPromise) {\n      return registrationPromise;\n    } else {\n      // if there is no registrationPromise, entry is registered.\n      return installationEntry as RegisteredInstallationEntry;\n    }\n  }\n\n  return entry;\n}\n\n/**\n * Called only if there is a CreateInstallation request in progress.\n *\n * Updates the InstallationEntry in the DB based on the status of the\n * CreateInstallation request.\n *\n * Returns the updated InstallationEntry.\n */\nfunction updateInstallationRequest(\n  appConfig: AppConfig\n): Promise<InstallationEntry> {\n  return update(appConfig, oldEntry => {\n    if (!oldEntry) {\n      throw ERROR_FACTORY.create(ErrorCode.INSTALLATION_NOT_FOUND);\n    }\n    return clearTimedOutRequest(oldEntry);\n  });\n}\n\nfunction clearTimedOutRequest(entry: InstallationEntry): InstallationEntry {\n  if (hasInstallationRequestTimedOut(entry)) {\n    return {\n      fid: entry.fid,\n      registrationStatus: RequestStatus.NOT_STARTED\n    };\n  }\n\n  return entry;\n}\n\nfunction hasInstallationRequestTimedOut(\n  installationEntry: InstallationEntry\n): boolean {\n  return (\n    installationEntry.registrationStatus === RequestStatus.IN_PROGRESS &&\n    installationEntry.registrationTime + PENDING_TIMEOUT_MS < Date.now()\n  );\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GenerateAuthTokenResponse } from '../interfaces/api-response';\nimport { AppConfig } from '../interfaces/app-config';\nimport { FirebaseDependencies } from '../interfaces/firebase-dependencies';\nimport {\n  CompletedAuthToken,\n  RegisteredInstallationEntry\n} from '../interfaces/installation-entry';\nimport { PACKAGE_VERSION } from '../util/constants';\nimport {\n  extractAuthTokenInfoFromResponse,\n  getErrorFromResponse,\n  getHeadersWithAuth,\n  getInstallationsEndpoint,\n  retryIfServerError\n} from './common';\n\nexport async function generateAuthTokenRequest(\n  { appConfig, platformLoggerProvider }: FirebaseDependencies,\n  installationEntry: RegisteredInstallationEntry\n): Promise<CompletedAuthToken> {\n  const endpoint = getGenerateAuthTokenEndpoint(appConfig, installationEntry);\n\n  const headers = getHeadersWithAuth(appConfig, installationEntry);\n\n  // If platform logger exists, add the platform info string to the header.\n  const platformLogger = platformLoggerProvider.getImmediate({\n    optional: true\n  });\n  if (platformLogger) {\n    headers.append('x-firebase-client', platformLogger.getPlatformInfoString());\n  }\n\n  const body = {\n    installation: {\n      sdkVersion: PACKAGE_VERSION\n    }\n  };\n\n  const request: RequestInit = {\n    method: 'POST',\n    headers,\n    body: JSON.stringify(body)\n  };\n\n  const response = await retryIfServerError(() => fetch(endpoint, request));\n  if (response.ok) {\n    const responseValue: GenerateAuthTokenResponse = await response.json();\n    const completedAuthToken: CompletedAuthToken = extractAuthTokenInfoFromResponse(\n      responseValue\n    );\n    return completedAuthToken;\n  } else {\n    throw await getErrorFromResponse('Generate Auth Token', response);\n  }\n}\n\nfunction getGenerateAuthTokenEndpoint(\n  appConfig: AppConfig,\n  { fid }: RegisteredInstallationEntry\n): string {\n  return `${getInstallationsEndpoint(appConfig)}/${fid}/authTokens:generate`;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { generateAuthTokenRequest } from '../api/generate-auth-token-request';\nimport { AppConfig } from '../interfaces/app-config';\nimport { FirebaseDependencies } from '../interfaces/firebase-dependencies';\nimport {\n  AuthToken,\n  CompletedAuthToken,\n  InProgressAuthToken,\n  InstallationEntry,\n  RegisteredInstallationEntry,\n  RequestStatus\n} from '../interfaces/installation-entry';\nimport { PENDING_TIMEOUT_MS, TOKEN_EXPIRATION_BUFFER } from '../util/constants';\nimport { ERROR_FACTORY, ErrorCode, isServerError } from '../util/errors';\nimport { sleep } from '../util/sleep';\nimport { remove, set, update } from './idb-manager';\n\n/**\n * Returns a valid authentication token for the installation. Generates a new\n * token if one doesn't exist, is expired or about to expire.\n *\n * Should only be called if the Firebase Installation is registered.\n */\nexport async function refreshAuthToken(\n  dependencies: FirebaseDependencies,\n  forceRefresh = false\n): Promise<CompletedAuthToken> {\n  let tokenPromise: Promise<CompletedAuthToken> | undefined;\n  const entry = await update(dependencies.appConfig, oldEntry => {\n    if (!isEntryRegistered(oldEntry)) {\n      throw ERROR_FACTORY.create(ErrorCode.NOT_REGISTERED);\n    }\n\n    const oldAuthToken = oldEntry.authToken;\n    if (!forceRefresh && isAuthTokenValid(oldAuthToken)) {\n      // There is a valid token in the DB.\n      return oldEntry;\n    } else if (oldAuthToken.requestStatus === RequestStatus.IN_PROGRESS) {\n      // There already is a token request in progress.\n      tokenPromise = waitUntilAuthTokenRequest(dependencies, forceRefresh);\n      return oldEntry;\n    } else {\n      // No token or token expired.\n      if (!navigator.onLine) {\n        throw ERROR_FACTORY.create(ErrorCode.APP_OFFLINE);\n      }\n\n      const inProgressEntry = makeAuthTokenRequestInProgressEntry(oldEntry);\n      tokenPromise = fetchAuthTokenFromServer(dependencies, inProgressEntry);\n      return inProgressEntry;\n    }\n  });\n\n  const authToken = tokenPromise\n    ? await tokenPromise\n    : (entry.authToken as CompletedAuthToken);\n  return authToken;\n}\n\n/**\n * Call only if FID is registered and Auth Token request is in progress.\n *\n * Waits until the current pending request finishes. If the request times out,\n * tries once in this thread as well.\n */\nasync function waitUntilAuthTokenRequest(\n  dependencies: FirebaseDependencies,\n  forceRefresh: boolean\n): Promise<CompletedAuthToken> {\n  // Unfortunately, there is no way of reliably observing when a value in\n  // IndexedDB changes (yet, see https://github.com/WICG/indexed-db-observers),\n  // so we need to poll.\n\n  let entry = await updateAuthTokenRequest(dependencies.appConfig);\n  while (entry.authToken.requestStatus === RequestStatus.IN_PROGRESS) {\n    // generateAuthToken still in progress.\n    await sleep(100);\n\n    entry = await updateAuthTokenRequest(dependencies.appConfig);\n  }\n\n  const authToken = entry.authToken;\n  if (authToken.requestStatus === RequestStatus.NOT_STARTED) {\n    // The request timed out or failed in a different call. Try again.\n    return refreshAuthToken(dependencies, forceRefresh);\n  } else {\n    return authToken;\n  }\n}\n\n/**\n * Called only if there is a GenerateAuthToken request in progress.\n *\n * Updates the InstallationEntry in the DB based on the status of the\n * GenerateAuthToken request.\n *\n * Returns the updated InstallationEntry.\n */\nfunction updateAuthTokenRequest(\n  appConfig: AppConfig\n): Promise<RegisteredInstallationEntry> {\n  return update(appConfig, oldEntry => {\n    if (!isEntryRegistered(oldEntry)) {\n      throw ERROR_FACTORY.create(ErrorCode.NOT_REGISTERED);\n    }\n\n    const oldAuthToken = oldEntry.authToken;\n    if (hasAuthTokenRequestTimedOut(oldAuthToken)) {\n      return {\n        ...oldEntry,\n        authToken: { requestStatus: RequestStatus.NOT_STARTED }\n      };\n    }\n\n    return oldEntry;\n  });\n}\n\nasync function fetchAuthTokenFromServer(\n  dependencies: FirebaseDependencies,\n  installationEntry: RegisteredInstallationEntry\n): Promise<CompletedAuthToken> {\n  try {\n    const authToken = await generateAuthTokenRequest(\n      dependencies,\n      installationEntry\n    );\n    const updatedInstallationEntry: RegisteredInstallationEntry = {\n      ...installationEntry,\n      authToken\n    };\n    await set(dependencies.appConfig, updatedInstallationEntry);\n    return authToken;\n  } catch (e) {\n    if (isServerError(e) && (e.serverCode === 401 || e.serverCode === 404)) {\n      // Server returned a \"FID not found\" or a \"Invalid authentication\" error.\n      // Generate a new ID next time.\n      await remove(dependencies.appConfig);\n    } else {\n      const updatedInstallationEntry: RegisteredInstallationEntry = {\n        ...installationEntry,\n        authToken: { requestStatus: RequestStatus.NOT_STARTED }\n      };\n      await set(dependencies.appConfig, updatedInstallationEntry);\n    }\n    throw e;\n  }\n}\n\nfunction isEntryRegistered(\n  installationEntry: InstallationEntry | undefined\n): installationEntry is RegisteredInstallationEntry {\n  return (\n    installationEntry !== undefined &&\n    installationEntry.registrationStatus === RequestStatus.COMPLETED\n  );\n}\n\nfunction isAuthTokenValid(authToken: AuthToken): boolean {\n  return (\n    authToken.requestStatus === RequestStatus.COMPLETED &&\n    !isAuthTokenExpired(authToken)\n  );\n}\n\nfunction isAuthTokenExpired(authToken: CompletedAuthToken): boolean {\n  const now = Date.now();\n  return (\n    now < authToken.creationTime ||\n    authToken.creationTime + authToken.expiresIn < now + TOKEN_EXPIRATION_BUFFER\n  );\n}\n\n/** Returns an updated InstallationEntry with an InProgressAuthToken. */\nfunction makeAuthTokenRequestInProgressEntry(\n  oldEntry: RegisteredInstallationEntry\n): RegisteredInstallationEntry {\n  const inProgressAuthToken: InProgressAuthToken = {\n    requestStatus: RequestStatus.IN_PROGRESS,\n    requestTime: Date.now()\n  };\n  return {\n    ...oldEntry,\n    authToken: inProgressAuthToken\n  };\n}\n\nfunction hasAuthTokenRequestTimedOut(authToken: AuthToken): boolean {\n  return (\n    authToken.requestStatus === RequestStatus.IN_PROGRESS &&\n    authToken.requestTime + PENDING_TIMEOUT_MS < Date.now()\n  );\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getInstallationEntry } from '../helpers/get-installation-entry';\nimport { refreshAuthToken } from '../helpers/refresh-auth-token';\nimport { AppConfig } from '../interfaces/app-config';\nimport { FirebaseDependencies } from '../interfaces/firebase-dependencies';\n\nexport async function getToken(\n  dependencies: FirebaseDependencies,\n  forceRefresh = false\n): Promise<string> {\n  await completeInstallationRegistration(dependencies.appConfig);\n\n  // At this point we either have a Registered Installation in the DB, or we've\n  // already thrown an error.\n  const authToken = await refreshAuthToken(dependencies, forceRefresh);\n  return authToken.token;\n}\n\nasync function completeInstallationRegistration(\n  appConfig: AppConfig\n): Promise<void> {\n  const { registrationPromise } = await getInstallationEntry(appConfig);\n\n  if (registrationPromise) {\n    // A createInstallation request is in progress. Wait until it finishes.\n    await registrationPromise;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AppConfig } from '../interfaces/app-config';\nimport { RegisteredInstallationEntry } from '../interfaces/installation-entry';\nimport {\n  getErrorFromResponse,\n  getHeadersWithAuth,\n  getInstallationsEndpoint,\n  retryIfServerError\n} from './common';\n\nexport async function deleteInstallationRequest(\n  appConfig: AppConfig,\n  installationEntry: RegisteredInstallationEntry\n): Promise<void> {\n  const endpoint = getDeleteEndpoint(appConfig, installationEntry);\n\n  const headers = getHeadersWithAuth(appConfig, installationEntry);\n  const request: RequestInit = {\n    method: 'DELETE',\n    headers\n  };\n\n  const response = await retryIfServerError(() => fetch(endpoint, request));\n  if (!response.ok) {\n    throw await getErrorFromResponse('Delete Installation', response);\n  }\n}\n\nfunction getDeleteEndpoint(\n  appConfig: AppConfig,\n  { fid }: RegisteredInstallationEntry\n): string {\n  return `${getInstallationsEndpoint(appConfig)}/${fid}`;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { addCallback, removeCallback } from '../helpers/fid-changed';\nimport { FirebaseDependencies } from '../interfaces/firebase-dependencies';\n\nexport type IdChangeCallbackFn = (installationId: string) => void;\nexport type IdChangeUnsubscribeFn = () => void;\n\n/**\n * Sets a new callback that will get called when Installation ID changes.\n * Returns an unsubscribe function that will remove the callback when called.\n */\nexport function onIdChange(\n  { appConfig }: FirebaseDependencies,\n  callback: IdChangeCallbackFn\n): IdChangeUnsubscribeFn {\n  addCallback(appConfig, callback);\n\n  return () => {\n    removeCallback(appConfig, callback);\n  };\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\nimport { FirebaseApp, FirebaseOptions } from '@firebase/app-types';\n\nimport { AppConfig } from '../interfaces/app-config';\nimport { FirebaseError } from '@firebase/util';\n\nexport function extractAppConfig(app: FirebaseApp): AppConfig {\n  if (!app || !app.options) {\n    throw getMissingValueError('App Configuration Object');\n  }\n\n  if (!app.name) {\n    throw getMissingValueError('App Name');\n  }\n\n  // Required app config keys\n  const configKeys: ReadonlyArray<keyof FirebaseOptions> = [\n    'projectId',\n    'apiKey',\n    'appId',\n    'messagingSenderId'\n  ];\n\n  const { options } = app;\n  for (const keyName of configKeys) {\n    if (!options[keyName]) {\n      throw getMissingValueError(keyName);\n    }\n  }\n\n  return {\n    appName: app.name,\n    projectId: options.projectId!,\n    apiKey: options.apiKey!,\n    appId: options.appId!,\n    senderId: options.messagingSenderId!\n  };\n}\n\nfunction getMissingValueError(valueName: string): FirebaseError {\n  return ERROR_FACTORY.create(ErrorCode.MISSING_APP_CONFIG_VALUES, {\n    valueName\n  });\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getInstallationEntry } from '../helpers/get-installation-entry';\nimport { refreshAuthToken } from '../helpers/refresh-auth-token';\nimport { FirebaseDependencies } from '../interfaces/firebase-dependencies';\n\nexport async function getId(\n  dependencies: FirebaseDependencies\n): Promise<string> {\n  const { installationEntry, registrationPromise } = await getInstallationEntry(\n    dependencies.appConfig\n  );\n\n  if (registrationPromise) {\n    registrationPromise.catch(console.error);\n  } else {\n    // If the installation is already registered, update the authentication\n    // token if needed.\n    refreshAuthToken(dependencies).catch(console.error);\n  }\n\n  return installationEntry.fid;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { deleteInstallationRequest } from '../api/delete-installation-request';\nimport { remove, update } from '../helpers/idb-manager';\nimport { FirebaseDependencies } from '../interfaces/firebase-dependencies';\nimport { RequestStatus } from '../interfaces/installation-entry';\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\n\nexport async function deleteInstallation(\n  dependencies: FirebaseDependencies\n): Promise<void> {\n  const { appConfig } = dependencies;\n\n  const entry = await update(appConfig, oldEntry => {\n    if (oldEntry && oldEntry.registrationStatus === RequestStatus.NOT_STARTED) {\n      // Delete the unregistered entry without sending a deleteInstallation request.\n      return undefined;\n    }\n    return oldEntry;\n  });\n\n  if (entry) {\n    if (entry.registrationStatus === RequestStatus.IN_PROGRESS) {\n      // Can't delete while trying to register.\n      throw ERROR_FACTORY.create(ErrorCode.DELETE_PENDING_REGISTRATION);\n    } else if (entry.registrationStatus === RequestStatus.COMPLETED) {\n      if (!navigator.onLine) {\n        throw ERROR_FACTORY.create(ErrorCode.APP_OFFLINE);\n      } else {\n        await deleteInstallationRequest(appConfig, entry);\n        await remove(appConfig);\n      }\n    }\n  }\n}\n","(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n  typeof define === 'function' && define.amd ? define(['exports'], factory) :\n  (global = global || self, factory(global.idb = {}));\n}(this, function (exports) { 'use strict';\n\n  function toArray(arr) {\n    return Array.prototype.slice.call(arr);\n  }\n\n  function promisifyRequest(request) {\n    return new Promise(function(resolve, reject) {\n      request.onsuccess = function() {\n        resolve(request.result);\n      };\n\n      request.onerror = function() {\n        reject(request.error);\n      };\n    });\n  }\n\n  function promisifyRequestCall(obj, method, args) {\n    var request;\n    var p = new Promise(function(resolve, reject) {\n      request = obj[method].apply(obj, args);\n      promisifyRequest(request).then(resolve, reject);\n    });\n\n    p.request = request;\n    return p;\n  }\n\n  function promisifyCursorRequestCall(obj, method, args) {\n    var p = promisifyRequestCall(obj, method, args);\n    return p.then(function(value) {\n      if (!value) return;\n      return new Cursor(value, p.request);\n    });\n  }\n\n  function proxyProperties(ProxyClass, targetProp, properties) {\n    properties.forEach(function(prop) {\n      Object.defineProperty(ProxyClass.prototype, prop, {\n        get: function() {\n          return this[targetProp][prop];\n        },\n        set: function(val) {\n          this[targetProp][prop] = val;\n        }\n      });\n    });\n  }\n\n  function proxyRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return promisifyRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function proxyMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return this[targetProp][prop].apply(this[targetProp], arguments);\n      };\n    });\n  }\n\n  function proxyCursorRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return promisifyCursorRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function Index(index) {\n    this._index = index;\n  }\n\n  proxyProperties(Index, '_index', [\n    'name',\n    'keyPath',\n    'multiEntry',\n    'unique'\n  ]);\n\n  proxyRequestMethods(Index, '_index', IDBIndex, [\n    'get',\n    'getKey',\n    'getAll',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(Index, '_index', IDBIndex, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  function Cursor(cursor, request) {\n    this._cursor = cursor;\n    this._request = request;\n  }\n\n  proxyProperties(Cursor, '_cursor', [\n    'direction',\n    'key',\n    'primaryKey',\n    'value'\n  ]);\n\n  proxyRequestMethods(Cursor, '_cursor', IDBCursor, [\n    'update',\n    'delete'\n  ]);\n\n  // proxy 'next' methods\n  ['advance', 'continue', 'continuePrimaryKey'].forEach(function(methodName) {\n    if (!(methodName in IDBCursor.prototype)) return;\n    Cursor.prototype[methodName] = function() {\n      var cursor = this;\n      var args = arguments;\n      return Promise.resolve().then(function() {\n        cursor._cursor[methodName].apply(cursor._cursor, args);\n        return promisifyRequest(cursor._request).then(function(value) {\n          if (!value) return;\n          return new Cursor(value, cursor._request);\n        });\n      });\n    };\n  });\n\n  function ObjectStore(store) {\n    this._store = store;\n  }\n\n  ObjectStore.prototype.createIndex = function() {\n    return new Index(this._store.createIndex.apply(this._store, arguments));\n  };\n\n  ObjectStore.prototype.index = function() {\n    return new Index(this._store.index.apply(this._store, arguments));\n  };\n\n  proxyProperties(ObjectStore, '_store', [\n    'name',\n    'keyPath',\n    'indexNames',\n    'autoIncrement'\n  ]);\n\n  proxyRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'put',\n    'add',\n    'delete',\n    'clear',\n    'get',\n    'getAll',\n    'getKey',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  proxyMethods(ObjectStore, '_store', IDBObjectStore, [\n    'deleteIndex'\n  ]);\n\n  function Transaction(idbTransaction) {\n    this._tx = idbTransaction;\n    this.complete = new Promise(function(resolve, reject) {\n      idbTransaction.oncomplete = function() {\n        resolve();\n      };\n      idbTransaction.onerror = function() {\n        reject(idbTransaction.error);\n      };\n      idbTransaction.onabort = function() {\n        reject(idbTransaction.error);\n      };\n    });\n  }\n\n  Transaction.prototype.objectStore = function() {\n    return new ObjectStore(this._tx.objectStore.apply(this._tx, arguments));\n  };\n\n  proxyProperties(Transaction, '_tx', [\n    'objectStoreNames',\n    'mode'\n  ]);\n\n  proxyMethods(Transaction, '_tx', IDBTransaction, [\n    'abort'\n  ]);\n\n  function UpgradeDB(db, oldVersion, transaction) {\n    this._db = db;\n    this.oldVersion = oldVersion;\n    this.transaction = new Transaction(transaction);\n  }\n\n  UpgradeDB.prototype.createObjectStore = function() {\n    return new ObjectStore(this._db.createObjectStore.apply(this._db, arguments));\n  };\n\n  proxyProperties(UpgradeDB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(UpgradeDB, '_db', IDBDatabase, [\n    'deleteObjectStore',\n    'close'\n  ]);\n\n  function DB(db) {\n    this._db = db;\n  }\n\n  DB.prototype.transaction = function() {\n    return new Transaction(this._db.transaction.apply(this._db, arguments));\n  };\n\n  proxyProperties(DB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(DB, '_db', IDBDatabase, [\n    'close'\n  ]);\n\n  // Add cursor iterators\n  // TODO: remove this once browsers do the right thing with promises\n  ['openCursor', 'openKeyCursor'].forEach(function(funcName) {\n    [ObjectStore, Index].forEach(function(Constructor) {\n      // Don't create iterateKeyCursor if openKeyCursor doesn't exist.\n      if (!(funcName in Constructor.prototype)) return;\n\n      Constructor.prototype[funcName.replace('open', 'iterate')] = function() {\n        var args = toArray(arguments);\n        var callback = args[args.length - 1];\n        var nativeObject = this._store || this._index;\n        var request = nativeObject[funcName].apply(nativeObject, args.slice(0, -1));\n        request.onsuccess = function() {\n          callback(request.result);\n        };\n      };\n    });\n  });\n\n  // polyfill getAll\n  [Index, ObjectStore].forEach(function(Constructor) {\n    if (Constructor.prototype.getAll) return;\n    Constructor.prototype.getAll = function(query, count) {\n      var instance = this;\n      var items = [];\n\n      return new Promise(function(resolve) {\n        instance.iterateCursor(query, function(cursor) {\n          if (!cursor) {\n            resolve(items);\n            return;\n          }\n          items.push(cursor.value);\n\n          if (count !== undefined && items.length == count) {\n            resolve(items);\n            return;\n          }\n          cursor.continue();\n        });\n      });\n    };\n  });\n\n  function openDb(name, version, upgradeCallback) {\n    var p = promisifyRequestCall(indexedDB, 'open', [name, version]);\n    var request = p.request;\n\n    if (request) {\n      request.onupgradeneeded = function(event) {\n        if (upgradeCallback) {\n          upgradeCallback(new UpgradeDB(request.result, event.oldVersion, request.transaction));\n        }\n      };\n    }\n\n    return p.then(function(db) {\n      return new DB(db);\n    });\n  }\n\n  function deleteDb(name) {\n    return promisifyRequestCall(indexedDB, 'deleteDatabase', [name]);\n  }\n\n  exports.openDb = openDb;\n  exports.deleteDb = deleteDb;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n","import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport PropTypes from 'prop-types';\nimport merge from './merge';\n\nfunction omit(input, fields) {\n  var output = {};\n  Object.keys(input).forEach(function (prop) {\n    if (fields.indexOf(prop) === -1) {\n      output[prop] = input[prop];\n    }\n  });\n  return output;\n}\n\nfunction css(styleFunction) {\n  var newStyleFunction = function newStyleFunction(props) {\n    var output = styleFunction(props);\n\n    if (props.css) {\n      return _extends(_extends({}, merge(output, styleFunction(_extends({\n        theme: props.theme\n      }, props.css)))), omit(props.css, [styleFunction.filterProps]));\n    }\n\n    return output;\n  };\n\n  newStyleFunction.propTypes = process.env.NODE_ENV !== 'production' ? _extends(_extends({}, styleFunction.propTypes), {}, {\n    css: PropTypes.object\n  }) : {};\n  newStyleFunction.filterProps = ['css'].concat(_toConsumableArray(styleFunction.filterProps));\n  return newStyleFunction;\n}\n\nexport default css;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport merge from './merge';\n\nfunction compose() {\n  for (var _len = arguments.length, styles = new Array(_len), _key = 0; _key < _len; _key++) {\n    styles[_key] = arguments[_key];\n  }\n\n  var fn = function fn(props) {\n    return styles.reduce(function (acc, style) {\n      var output = style(props);\n\n      if (output) {\n        return merge(acc, output);\n      }\n\n      return acc;\n    }, {});\n  }; // Alternative approach that doesn't yield any performance gain.\n  // const handlers = styles.reduce((acc, style) => {\n  //   style.filterProps.forEach(prop => {\n  //     acc[prop] = style;\n  //   });\n  //   return acc;\n  // }, {});\n  // const fn = props => {\n  //   return Object.keys(props).reduce((acc, prop) => {\n  //     if (handlers[prop]) {\n  //       return merge(acc, handlers[prop](props));\n  //     }\n  //     return acc;\n  //   }, {});\n  // };\n\n\n  fn.propTypes = process.env.NODE_ENV !== 'production' ? styles.reduce(function (acc, style) {\n    return _extends(acc, style.propTypes);\n  }, {}) : {};\n  fn.filterProps = styles.reduce(function (acc, style) {\n    return acc.concat(style.filterProps);\n  }, []);\n  return fn;\n}\n\nexport default compose;","import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport responsivePropType from './responsivePropType';\nimport { handleBreakpoints } from './breakpoints';\n\nfunction getPath(obj, path) {\n  if (!path || typeof path !== 'string') {\n    return null;\n  }\n\n  return path.split('.').reduce(function (acc, item) {\n    return acc && acc[item] ? acc[item] : null;\n  }, obj);\n}\n\nfunction style(options) {\n  var prop = options.prop,\n      _options$cssProperty = options.cssProperty,\n      cssProperty = _options$cssProperty === void 0 ? options.prop : _options$cssProperty,\n      themeKey = options.themeKey,\n      transform = options.transform;\n\n  var fn = function fn(props) {\n    if (props[prop] == null) {\n      return null;\n    }\n\n    var propValue = props[prop];\n    var theme = props.theme;\n    var themeMapping = getPath(theme, themeKey) || {};\n\n    var styleFromPropValue = function styleFromPropValue(propValueFinal) {\n      var value;\n\n      if (typeof themeMapping === 'function') {\n        value = themeMapping(propValueFinal);\n      } else if (Array.isArray(themeMapping)) {\n        value = themeMapping[propValueFinal] || propValueFinal;\n      } else {\n        value = getPath(themeMapping, propValueFinal) || propValueFinal;\n\n        if (transform) {\n          value = transform(value);\n        }\n      }\n\n      if (cssProperty === false) {\n        return value;\n      }\n\n      return _defineProperty({}, cssProperty, value);\n    };\n\n    return handleBreakpoints(props, propValue, styleFromPropValue);\n  };\n\n  fn.propTypes = process.env.NODE_ENV !== 'production' ? _defineProperty({}, prop, responsivePropType) : {};\n  fn.filterProps = [prop];\n  return fn;\n}\n\nexport default style;","import style from './style';\nimport compose from './compose';\n\nfunction getBorder(value) {\n  if (typeof value !== 'number') {\n    return value;\n  }\n\n  return \"\".concat(value, \"px solid\");\n}\n\nexport var border = style({\n  prop: 'border',\n  themeKey: 'borders',\n  transform: getBorder\n});\nexport var borderTop = style({\n  prop: 'borderTop',\n  themeKey: 'borders',\n  transform: getBorder\n});\nexport var borderRight = style({\n  prop: 'borderRight',\n  themeKey: 'borders',\n  transform: getBorder\n});\nexport var borderBottom = style({\n  prop: 'borderBottom',\n  themeKey: 'borders',\n  transform: getBorder\n});\nexport var borderLeft = style({\n  prop: 'borderLeft',\n  themeKey: 'borders',\n  transform: getBorder\n});\nexport var borderColor = style({\n  prop: 'borderColor',\n  themeKey: 'palette'\n});\nexport var borderRadius = style({\n  prop: 'borderRadius',\n  themeKey: 'shape'\n});\nvar borders = compose(border, borderTop, borderRight, borderBottom, borderLeft, borderColor, borderRadius);\nexport default borders;","import style from './style';\nimport compose from './compose';\nexport var displayPrint = style({\n  prop: 'displayPrint',\n  cssProperty: false,\n  transform: function transform(value) {\n    return {\n      '@media print': {\n        display: value\n      }\n    };\n  }\n});\nexport var displayRaw = style({\n  prop: 'display'\n});\nexport var overflow = style({\n  prop: 'overflow'\n});\nexport var textOverflow = style({\n  prop: 'textOverflow'\n});\nexport var visibility = style({\n  prop: 'visibility'\n});\nexport var whiteSpace = style({\n  prop: 'whiteSpace'\n});\nexport default compose(displayPrint, displayRaw, overflow, textOverflow, visibility, whiteSpace);","import style from './style';\nimport compose from './compose';\nexport var flexBasis = style({\n  prop: 'flexBasis'\n});\nexport var flexDirection = style({\n  prop: 'flexDirection'\n});\nexport var flexWrap = style({\n  prop: 'flexWrap'\n});\nexport var justifyContent = style({\n  prop: 'justifyContent'\n});\nexport var alignItems = style({\n  prop: 'alignItems'\n});\nexport var alignContent = style({\n  prop: 'alignContent'\n});\nexport var order = style({\n  prop: 'order'\n});\nexport var flex = style({\n  prop: 'flex'\n});\nexport var flexGrow = style({\n  prop: 'flexGrow'\n});\nexport var flexShrink = style({\n  prop: 'flexShrink'\n});\nexport var alignSelf = style({\n  prop: 'alignSelf'\n});\nexport var justifyItems = style({\n  prop: 'justifyItems'\n});\nexport var justifySelf = style({\n  prop: 'justifySelf'\n});\nvar flexbox = compose(flexBasis, flexDirection, flexWrap, justifyContent, alignItems, alignContent, order, flex, flexGrow, flexShrink, alignSelf, justifyItems, justifySelf);\nexport default flexbox;","import style from './style';\nimport compose from './compose';\nexport var gridGap = style({\n  prop: 'gridGap'\n});\nexport var gridColumnGap = style({\n  prop: 'gridColumnGap'\n});\nexport var gridRowGap = style({\n  prop: 'gridRowGap'\n});\nexport var gridColumn = style({\n  prop: 'gridColumn'\n});\nexport var gridRow = style({\n  prop: 'gridRow'\n});\nexport var gridAutoFlow = style({\n  prop: 'gridAutoFlow'\n});\nexport var gridAutoColumns = style({\n  prop: 'gridAutoColumns'\n});\nexport var gridAutoRows = style({\n  prop: 'gridAutoRows'\n});\nexport var gridTemplateColumns = style({\n  prop: 'gridTemplateColumns'\n});\nexport var gridTemplateRows = style({\n  prop: 'gridTemplateRows'\n});\nexport var gridTemplateAreas = style({\n  prop: 'gridTemplateAreas'\n});\nexport var gridArea = style({\n  prop: 'gridArea'\n});\nvar grid = compose(gridGap, gridColumnGap, gridRowGap, gridColumn, gridRow, gridAutoFlow, gridAutoColumns, gridAutoRows, gridTemplateColumns, gridTemplateRows, gridTemplateAreas, gridArea);\nexport default grid;","import style from './style';\nimport compose from './compose';\nexport var position = style({\n  prop: 'position'\n});\nexport var zIndex = style({\n  prop: 'zIndex',\n  themeKey: 'zIndex'\n});\nexport var top = style({\n  prop: 'top'\n});\nexport var right = style({\n  prop: 'right'\n});\nexport var bottom = style({\n  prop: 'bottom'\n});\nexport var left = style({\n  prop: 'left'\n});\nexport default compose(position, zIndex, top, right, bottom, left);","import style from './style';\nimport compose from './compose';\nexport var color = style({\n  prop: 'color',\n  themeKey: 'palette'\n});\nexport var bgcolor = style({\n  prop: 'bgcolor',\n  cssProperty: 'backgroundColor',\n  themeKey: 'palette'\n});\nvar palette = compose(color, bgcolor);\nexport default palette;","import style from './style';\nvar boxShadow = style({\n  prop: 'boxShadow',\n  themeKey: 'shadows'\n});\nexport default boxShadow;","import style from './style';\nimport compose from './compose';\n\nfunction transform(value) {\n  return value <= 1 ? \"\".concat(value * 100, \"%\") : value;\n}\n\nexport var width = style({\n  prop: 'width',\n  transform: transform\n});\nexport var maxWidth = style({\n  prop: 'maxWidth',\n  transform: transform\n});\nexport var minWidth = style({\n  prop: 'minWidth',\n  transform: transform\n});\nexport var height = style({\n  prop: 'height',\n  transform: transform\n});\nexport var maxHeight = style({\n  prop: 'maxHeight',\n  transform: transform\n});\nexport var minHeight = style({\n  prop: 'minHeight',\n  transform: transform\n});\nexport var sizeWidth = style({\n  prop: 'size',\n  cssProperty: 'width',\n  transform: transform\n});\nexport var sizeHeight = style({\n  prop: 'size',\n  cssProperty: 'height',\n  transform: transform\n});\nexport var boxSizing = style({\n  prop: 'boxSizing'\n});\nvar sizing = compose(width, maxWidth, minWidth, height, maxHeight, minHeight, boxSizing);\nexport default sizing;","import style from './style';\nimport compose from './compose';\nexport var fontFamily = style({\n  prop: 'fontFamily',\n  themeKey: 'typography'\n});\nexport var fontSize = style({\n  prop: 'fontSize',\n  themeKey: 'typography'\n});\nexport var fontStyle = style({\n  prop: 'fontStyle',\n  themeKey: 'typography'\n});\nexport var fontWeight = style({\n  prop: 'fontWeight',\n  themeKey: 'typography'\n});\nexport var letterSpacing = style({\n  prop: 'letterSpacing'\n});\nexport var lineHeight = style({\n  prop: 'lineHeight'\n});\nexport var textAlign = style({\n  prop: 'textAlign'\n});\nvar typography = compose(fontFamily, fontSize, fontStyle, fontWeight, letterSpacing, lineHeight, textAlign);\nexport default typography;","import { borders, compose, display, flexbox, grid, palette, positions, shadows, sizing, spacing, typography, css } from '@material-ui/system';\nimport styled from '../styles/styled';\nexport var styleFunction = css(compose(borders, display, flexbox, grid, positions, palette, shadows, sizing, spacing, typography));\n/**\n * @ignore - do not document.\n */\n\nvar Box = styled('div')(styleFunction, {\n  name: 'MuiBox'\n});\nexport default Box;","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { jsonEval, stringify } from '@firebase/util';\n\n/**\n * Wraps a DOM Storage object and:\n * - automatically encode objects as JSON strings before storing them to allow us to store arbitrary types.\n * - prefixes names with \"firebase:\" to avoid collisions with app data.\n *\n * We automatically (see storage.js) create two such wrappers, one for sessionStorage,\n * and one for localStorage.\n *\n * @constructor\n */\nexport class DOMStorageWrapper {\n  // Use a prefix to avoid collisions with other stuff saved by the app.\n  private prefix_ = 'firebase:';\n\n  /**\n   * @param {Storage} domStorage_ The underlying storage object (e.g. localStorage or sessionStorage)\n   */\n  constructor(private domStorage_: Storage) {}\n\n  /**\n   * @param {string} key The key to save the value under\n   * @param {?Object} value The value being stored, or null to remove the key.\n   */\n  set(key: string, value: unknown | null) {\n    if (value == null) {\n      this.domStorage_.removeItem(this.prefixedName_(key));\n    } else {\n      this.domStorage_.setItem(this.prefixedName_(key), stringify(value));\n    }\n  }\n\n  /**\n   * @param {string} key\n   * @return {*} The value that was stored under this key, or null\n   */\n  get(key: string): unknown {\n    const storedVal = this.domStorage_.getItem(this.prefixedName_(key));\n    if (storedVal == null) {\n      return null;\n    } else {\n      return jsonEval(storedVal);\n    }\n  }\n\n  /**\n   * @param {string} key\n   */\n  remove(key: string) {\n    this.domStorage_.removeItem(this.prefixedName_(key));\n  }\n\n  isInMemoryStorage: boolean;\n\n  /**\n   * @param {string} name\n   * @return {string}\n   */\n  prefixedName_(name: string): string {\n    return this.prefix_ + name;\n  }\n\n  toString(): string {\n    return this.domStorage_.toString();\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains } from '@firebase/util';\n\n/**\n * An in-memory storage implementation that matches the API of DOMStorageWrapper\n * (TODO: create interface for both to implement).\n *\n * @constructor\n */\nexport class MemoryStorage {\n  private cache_: { [k: string]: unknown } = {};\n\n  set(key: string, value: unknown | null) {\n    if (value == null) {\n      delete this.cache_[key];\n    } else {\n      this.cache_[key] = value;\n    }\n  }\n\n  get(key: string): unknown {\n    if (contains(this.cache_, key)) {\n      return this.cache_[key];\n    }\n    return null;\n  }\n\n  remove(key: string) {\n    delete this.cache_[key];\n  }\n\n  isInMemoryStorage = true;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DOMStorageWrapper } from './DOMStorageWrapper';\nimport { MemoryStorage } from './MemoryStorage';\n\ndeclare const window: Window;\n\n/**\n * Helper to create a DOMStorageWrapper or else fall back to MemoryStorage.\n * TODO: Once MemoryStorage and DOMStorageWrapper have a shared interface this method annotation should change\n * to reflect this type\n *\n * @param {string} domStorageName Name of the underlying storage object\n *   (e.g. 'localStorage' or 'sessionStorage').\n * @return {?} Turning off type information until a common interface is defined.\n */\nconst createStoragefor = function (\n  domStorageName: string\n): DOMStorageWrapper | MemoryStorage {\n  try {\n    // NOTE: just accessing \"localStorage\" or \"window['localStorage']\" may throw a security exception,\n    // so it must be inside the try/catch.\n    if (\n      typeof window !== 'undefined' &&\n      typeof window[domStorageName] !== 'undefined'\n    ) {\n      // Need to test cache. Just because it's here doesn't mean it works\n      const domStorage = window[domStorageName];\n      domStorage.setItem('firebase:sentinel', 'cache');\n      domStorage.removeItem('firebase:sentinel');\n      return new DOMStorageWrapper(domStorage);\n    }\n  } catch (e) {}\n\n  // Failed to create wrapper.  Just return in-memory storage.\n  // TODO: log?\n  return new MemoryStorage();\n};\n\n/** A storage object that lasts across sessions */\nexport const PersistentStorage = createStoragefor('localStorage');\n\n/** A storage object that only lasts one session */\nexport const SessionStorage = createStoragefor('sessionStorage');\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Query } from '../../api/Query';\nimport {\n  assert,\n  base64,\n  Sha1,\n  stringToByteArray,\n  stringify,\n  isNodeSdk\n} from '@firebase/util';\nimport { SessionStorage } from '../storage/storage';\nimport { Logger, LogLevel } from '@firebase/logger';\n\ndeclare const window: Window;\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ndeclare const Windows: any;\n\nconst logClient = new Logger('@firebase/database');\n\n/**\n * Returns a locally-unique ID (generated by just incrementing up from 0 each time its called).\n * @type {function(): number} Generated ID.\n */\nexport const LUIDGenerator: () => number = (function () {\n  let id = 1;\n  return function () {\n    return id++;\n  };\n})();\n\n/**\n * Sha1 hash of the input string\n * @param {!string} str The string to hash\n * @return {!string} The resulting hash\n */\nexport const sha1 = function (str: string): string {\n  const utf8Bytes = stringToByteArray(str);\n  const sha1 = new Sha1();\n  sha1.update(utf8Bytes);\n  const sha1Bytes = sha1.digest();\n  return base64.encodeByteArray(sha1Bytes);\n};\n\n/**\n * @param {...*} varArgs\n * @return {string}\n * @private\n */\nconst buildLogMessage_ = function (...varArgs: unknown[]): string {\n  let message = '';\n  for (let i = 0; i < varArgs.length; i++) {\n    const arg = varArgs[i];\n    if (\n      Array.isArray(arg) ||\n      (arg &&\n        typeof arg === 'object' &&\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        typeof (arg as any).length === 'number')\n    ) {\n      message += buildLogMessage_.apply(null, arg);\n    } else if (typeof arg === 'object') {\n      message += stringify(arg);\n    } else {\n      message += arg;\n    }\n    message += ' ';\n  }\n\n  return message;\n};\n\n/**\n * Use this for all debug messages in Firebase.\n * @type {?function(string)}\n */\nexport let logger: ((a: string) => void) | null = null;\n\n/**\n * Flag to check for log availability on first log message\n * @type {boolean}\n * @private\n */\nlet firstLog_ = true;\n\n/**\n * The implementation of Firebase.enableLogging (defined here to break dependencies)\n * @param {boolean|?function(string)} logger_ A flag to turn on logging, or a custom logger\n * @param {boolean=} persistent Whether or not to persist logging settings across refreshes\n */\nexport const enableLogging = function (\n  logger_?: boolean | ((a: string) => void) | null,\n  persistent?: boolean\n) {\n  assert(\n    !persistent || logger_ === true || logger_ === false,\n    \"Can't turn on custom loggers persistently.\"\n  );\n  if (logger_ === true) {\n    logClient.logLevel = LogLevel.VERBOSE;\n    logger = logClient.log.bind(logClient);\n    if (persistent) {\n      SessionStorage.set('logging_enabled', true);\n    }\n  } else if (typeof logger_ === 'function') {\n    logger = logger_;\n  } else {\n    logger = null;\n    SessionStorage.remove('logging_enabled');\n  }\n};\n\n/**\n *\n * @param {...(string|Arguments)} varArgs\n */\nexport const log = function (...varArgs: unknown[]) {\n  if (firstLog_ === true) {\n    firstLog_ = false;\n    if (logger === null && SessionStorage.get('logging_enabled') === true) {\n      enableLogging(true);\n    }\n  }\n\n  if (logger) {\n    const message = buildLogMessage_.apply(null, varArgs);\n    logger(message);\n  }\n};\n\n/**\n * @param {!string} prefix\n * @return {function(...[*])}\n */\nexport const logWrapper = function (\n  prefix: string\n): (...varArgs: unknown[]) => void {\n  return function (...varArgs: unknown[]) {\n    log(prefix, ...varArgs);\n  };\n};\n\n/**\n * @param {...string} varArgs\n */\nexport const error = function (...varArgs: string[]) {\n  const message = 'FIREBASE INTERNAL ERROR: ' + buildLogMessage_(...varArgs);\n  logClient.error(message);\n};\n\n/**\n * @param {...string} varArgs\n */\nexport const fatal = function (...varArgs: string[]) {\n  const message = `FIREBASE FATAL ERROR: ${buildLogMessage_(...varArgs)}`;\n  logClient.error(message);\n  throw new Error(message);\n};\n\n/**\n * @param {...*} varArgs\n */\nexport const warn = function (...varArgs: unknown[]) {\n  const message = 'FIREBASE WARNING: ' + buildLogMessage_(...varArgs);\n  logClient.warn(message);\n};\n\n/**\n * Logs a warning if the containing page uses https. Called when a call to new Firebase\n * does not use https.\n */\nexport const warnIfPageIsSecure = function () {\n  // Be very careful accessing browser globals. Who knows what may or may not exist.\n  if (\n    typeof window !== 'undefined' &&\n    window.location &&\n    window.location.protocol &&\n    window.location.protocol.indexOf('https:') !== -1\n  ) {\n    warn(\n      'Insecure Firebase access from a secure page. ' +\n        'Please use https in calls to new Firebase().'\n    );\n  }\n};\n\n/**\n * @param {!String} methodName\n */\nexport const warnAboutUnsupportedMethod = function (methodName: string) {\n  warn(\n    methodName +\n      ' is unsupported and will likely change soon.  ' +\n      'Please do not use.'\n  );\n};\n\n/**\n * Returns true if data is NaN, or +/- Infinity.\n * @param {*} data\n * @return {boolean}\n */\nexport const isInvalidJSONNumber = function (data: unknown): boolean {\n  return (\n    typeof data === 'number' &&\n    (data !== data || // NaN\n      data === Number.POSITIVE_INFINITY ||\n      data === Number.NEGATIVE_INFINITY)\n  );\n};\n\n/**\n * @param {function()} fn\n */\nexport const executeWhenDOMReady = function (fn: () => void) {\n  if (isNodeSdk() || document.readyState === 'complete') {\n    fn();\n  } else {\n    // Modeled after jQuery. Try DOMContentLoaded and onreadystatechange (which\n    // fire before onload), but fall back to onload.\n\n    let called = false;\n    const wrappedFn = function () {\n      if (!document.body) {\n        setTimeout(wrappedFn, Math.floor(10));\n        return;\n      }\n\n      if (!called) {\n        called = true;\n        fn();\n      }\n    };\n\n    if (document.addEventListener) {\n      document.addEventListener('DOMContentLoaded', wrappedFn, false);\n      // fallback to onload.\n      window.addEventListener('load', wrappedFn, false);\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } else if ((document as any).attachEvent) {\n      // IE.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (document as any).attachEvent('onreadystatechange', () => {\n        if (document.readyState === 'complete') {\n          wrappedFn();\n        }\n      });\n      // fallback to onload.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (window as any).attachEvent('onload', wrappedFn);\n\n      // jQuery has an extra hack for IE that we could employ (based on\n      // http://javascript.nwbox.com/IEContentLoaded/) But it looks really old.\n      // I'm hoping we don't need it.\n    }\n  }\n};\n\n/**\n * Minimum key name. Invalid for actual data, used as a marker to sort before any valid names\n * @type {!string}\n */\nexport const MIN_NAME = '[MIN_NAME]';\n\n/**\n * Maximum key name. Invalid for actual data, used as a marker to sort above any valid names\n * @type {!string}\n */\nexport const MAX_NAME = '[MAX_NAME]';\n\n/**\n * Compares valid Firebase key names, plus min and max name\n * @param {!string} a\n * @param {!string} b\n * @return {!number}\n */\nexport const nameCompare = function (a: string, b: string): number {\n  if (a === b) {\n    return 0;\n  } else if (a === MIN_NAME || b === MAX_NAME) {\n    return -1;\n  } else if (b === MIN_NAME || a === MAX_NAME) {\n    return 1;\n  } else {\n    const aAsInt = tryParseInt(a),\n      bAsInt = tryParseInt(b);\n\n    if (aAsInt !== null) {\n      if (bAsInt !== null) {\n        return aAsInt - bAsInt === 0 ? a.length - b.length : aAsInt - bAsInt;\n      } else {\n        return -1;\n      }\n    } else if (bAsInt !== null) {\n      return 1;\n    } else {\n      return a < b ? -1 : 1;\n    }\n  }\n};\n\n/**\n * @param {!string} a\n * @param {!string} b\n * @return {!number} comparison result.\n */\nexport const stringCompare = function (a: string, b: string): number {\n  if (a === b) {\n    return 0;\n  } else if (a < b) {\n    return -1;\n  } else {\n    return 1;\n  }\n};\n\n/**\n * @param {string} key\n * @param {Object} obj\n * @return {*}\n */\nexport const requireKey = function (\n  key: string,\n  obj: { [k: string]: unknown }\n): unknown {\n  if (obj && key in obj) {\n    return obj[key];\n  } else {\n    throw new Error(\n      'Missing required key (' + key + ') in object: ' + stringify(obj)\n    );\n  }\n};\n\n/**\n * @param {*} obj\n * @return {string}\n */\nexport const ObjectToUniqueKey = function (obj: unknown): string {\n  if (typeof obj !== 'object' || obj === null) {\n    return stringify(obj);\n  }\n\n  const keys = [];\n  // eslint-disable-next-line guard-for-in\n  for (const k in obj) {\n    keys.push(k);\n  }\n\n  // Export as json, but with the keys sorted.\n  keys.sort();\n  let key = '{';\n  for (let i = 0; i < keys.length; i++) {\n    if (i !== 0) {\n      key += ',';\n    }\n    key += stringify(keys[i]);\n    key += ':';\n    key += ObjectToUniqueKey(obj[keys[i]]);\n  }\n\n  key += '}';\n  return key;\n};\n\n/**\n * Splits a string into a number of smaller segments of maximum size\n * @param {!string} str The string\n * @param {!number} segsize The maximum number of chars in the string.\n * @return {Array.<string>} The string, split into appropriately-sized chunks\n */\nexport const splitStringBySize = function (\n  str: string,\n  segsize: number\n): string[] {\n  const len = str.length;\n\n  if (len <= segsize) {\n    return [str];\n  }\n\n  const dataSegs = [];\n  for (let c = 0; c < len; c += segsize) {\n    if (c + segsize > len) {\n      dataSegs.push(str.substring(c, len));\n    } else {\n      dataSegs.push(str.substring(c, c + segsize));\n    }\n  }\n  return dataSegs;\n};\n\n/**\n * Apply a function to each (key, value) pair in an object or\n * apply a function to each (index, value) pair in an array\n * @param obj The object or array to iterate over\n * @param fn The function to apply\n */\nexport function each(obj: object, fn: (k: string, v: unknown) => void) {\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      fn(key, obj[key]);\n    }\n  }\n}\n\n/**\n * Like goog.bind, but doesn't bother to create a closure if opt_context is null/undefined.\n * @param {function(*)} callback Callback function.\n * @param {?Object=} context Optional context to bind to.\n * @return {function(*)}\n */\nexport const bindCallback = function (\n  callback: (a: unknown) => void,\n  context?: object | null\n): (a: unknown) => void {\n  return context ? callback.bind(context) : callback;\n};\n\n/**\n * Borrowed from http://hg.secondlife.com/llsd/src/tip/js/typedarray.js (MIT License)\n * I made one modification at the end and removed the NaN / Infinity\n * handling (since it seemed broken [caused an overflow] and we don't need it).  See MJL comments.\n * @param {!number} v A double\n * @return {string}\n */\nexport const doubleToIEEE754String = function (v: number): string {\n  assert(!isInvalidJSONNumber(v), 'Invalid JSON number'); // MJL\n\n  const ebits = 11,\n    fbits = 52;\n  const bias = (1 << (ebits - 1)) - 1;\n  let s, e, f, ln, i;\n\n  // Compute sign, exponent, fraction\n  // Skip NaN / Infinity handling --MJL.\n  if (v === 0) {\n    e = 0;\n    f = 0;\n    s = 1 / v === -Infinity ? 1 : 0;\n  } else {\n    s = v < 0;\n    v = Math.abs(v);\n\n    if (v >= Math.pow(2, 1 - bias)) {\n      // Normalized\n      ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\n      e = ln + bias;\n      f = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));\n    } else {\n      // Denormalized\n      e = 0;\n      f = Math.round(v / Math.pow(2, 1 - bias - fbits));\n    }\n  }\n\n  // Pack sign, exponent, fraction\n  const bits = [];\n  for (i = fbits; i; i -= 1) {\n    bits.push(f % 2 ? 1 : 0);\n    f = Math.floor(f / 2);\n  }\n  for (i = ebits; i; i -= 1) {\n    bits.push(e % 2 ? 1 : 0);\n    e = Math.floor(e / 2);\n  }\n  bits.push(s ? 1 : 0);\n  bits.reverse();\n  const str = bits.join('');\n\n  // Return the data as a hex string. --MJL\n  let hexByteString = '';\n  for (i = 0; i < 64; i += 8) {\n    let hexByte = parseInt(str.substr(i, 8), 2).toString(16);\n    if (hexByte.length === 1) {\n      hexByte = '0' + hexByte;\n    }\n    hexByteString = hexByteString + hexByte;\n  }\n  return hexByteString.toLowerCase();\n};\n\n/**\n * Used to detect if we're in a Chrome content script (which executes in an\n * isolated environment where long-polling doesn't work).\n * @return {boolean}\n */\nexport const isChromeExtensionContentScript = function (): boolean {\n  return !!(\n    typeof window === 'object' &&\n    window['chrome'] &&\n    window['chrome']['extension'] &&\n    !/^chrome/.test(window.location.href)\n  );\n};\n\n/**\n * Used to detect if we're in a Windows 8 Store app.\n * @return {boolean}\n */\nexport const isWindowsStoreApp = function (): boolean {\n  // Check for the presence of a couple WinRT globals\n  return typeof Windows === 'object' && typeof Windows.UI === 'object';\n};\n\n/**\n * Converts a server error code to a Javascript Error\n * @param {!string} code\n * @param {!Query} query\n * @return {Error}\n */\nexport const errorForServerCode = function (code: string, query: Query): Error {\n  let reason = 'Unknown Error';\n  if (code === 'too_big') {\n    reason =\n      'The data requested exceeds the maximum size ' +\n      'that can be accessed with a single request.';\n  } else if (code === 'permission_denied') {\n    reason = \"Client doesn't have permission to access the desired data.\";\n  } else if (code === 'unavailable') {\n    reason = 'The service is unavailable';\n  }\n\n  const error = new Error(\n    code + ' at ' + query.path.toString() + ': ' + reason\n  );\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  (error as any).code = code.toUpperCase();\n  return error;\n};\n\n/**\n * Used to test for integer-looking strings\n * @type {RegExp}\n * @private\n */\nexport const INTEGER_REGEXP_ = new RegExp('^-?(0*)\\\\d{1,10}$');\n\n/**\n * If the string contains a 32-bit integer, return it.  Else return null.\n * @param {!string} str\n * @return {?number}\n */\nexport const tryParseInt = function (str: string): number | null {\n  if (INTEGER_REGEXP_.test(str)) {\n    const intVal = Number(str);\n    if (intVal >= -2147483648 && intVal <= 2147483647) {\n      return intVal;\n    }\n  }\n  return null;\n};\n\n/**\n * Helper to run some code but catch any exceptions and re-throw them later.\n * Useful for preventing user callbacks from breaking internal code.\n *\n * Re-throwing the exception from a setTimeout is a little evil, but it's very\n * convenient (we don't have to try to figure out when is a safe point to\n * re-throw it), and the behavior seems reasonable:\n *\n * * If you aren't pausing on exceptions, you get an error in the console with\n *   the correct stack trace.\n * * If you're pausing on all exceptions, the debugger will pause on your\n *   exception and then again when we rethrow it.\n * * If you're only pausing on uncaught exceptions, the debugger will only pause\n *   on us re-throwing it.\n *\n * @param {!function()} fn The code to guard.\n */\nexport const exceptionGuard = function (fn: () => void) {\n  try {\n    fn();\n  } catch (e) {\n    // Re-throw exception when it's safe.\n    setTimeout(() => {\n      // It used to be that \"throw e\" would result in a good console error with\n      // relevant context, but as of Chrome 39, you just get the firebase.js\n      // file/line number where we re-throw it, which is useless. So we log\n      // e.stack explicitly.\n      const stack = e.stack || '';\n      warn('Exception was thrown by user callback.', stack);\n      throw e;\n    }, Math.floor(0));\n  }\n};\n\n/**\n * Helper function to safely call opt_callback with the specified arguments.  It:\n * 1. Turns into a no-op if opt_callback is null or undefined.\n * 2. Wraps the call inside exceptionGuard to prevent exceptions from breaking our state.\n *\n * @param {?Function=} callback Optional onComplete callback.\n * @param {...*} varArgs Arbitrary args to be passed to opt_onComplete\n */\nexport const callUserCallback = function (\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  callback?: Function | null,\n  ...varArgs: unknown[]\n) {\n  if (typeof callback === 'function') {\n    exceptionGuard(() => {\n      callback(...varArgs);\n    });\n  }\n};\n\n/**\n * @return {boolean} true if we think we're currently being crawled.\n */\nexport const beingCrawled = function (): boolean {\n  const userAgent =\n    (typeof window === 'object' &&\n      window['navigator'] &&\n      window['navigator']['userAgent']) ||\n    '';\n\n  // For now we whitelist the most popular crawlers.  We should refine this to be the set of crawlers we\n  // believe to support JavaScript/AJAX rendering.\n  // NOTE: Google Webmaster Tools doesn't really belong, but their \"This is how a visitor to your website\n  // would have seen the page\" is flaky if we don't treat it as a crawler.\n  return (\n    userAgent.search(\n      /googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i\n    ) >= 0\n  );\n};\n\n/**\n * Export a property of an object using a getter function.\n *\n * @param {!Object} object\n * @param {string} name\n * @param {!function(): *} fnGet\n */\nexport const exportPropGetter = function (\n  object: object,\n  name: string,\n  fnGet: () => unknown\n) {\n  Object.defineProperty(object, name, { get: fnGet });\n};\n\n/**\n * Same as setTimeout() except on Node.JS it will /not/ prevent the process from exiting.\n *\n * It is removed with clearTimeout() as normal.\n *\n * @param {Function} fn Function to run.\n * @param {number} time Milliseconds to wait before running.\n * @return {number|Object} The setTimeout() return value.\n */\nexport const setTimeoutNonBlocking = function (\n  fn: () => void,\n  time: number\n): number | object {\n  const timeout: number | object = setTimeout(fn, time);\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  if (typeof timeout === 'object' && (timeout as any)['unref']) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (timeout as any)['unref']();\n  }\n  return timeout;\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { nameCompare } from './util';\nimport { stringLength } from '@firebase/util';\n/**\n * An immutable object representing a parsed path.  It's immutable so that you\n * can pass them around to other functions without worrying about them changing\n * it.\n */\n\nexport class Path {\n  private pieces_: string[];\n  private pieceNum_: number;\n\n  /**\n   * Singleton to represent an empty path\n   *\n   * @const\n   */\n  static get Empty() {\n    return new Path('');\n  }\n\n  /**\n   * @param {string|Array.<string>} pathOrString Path string to parse,\n   *      or another path, or the raw tokens array\n   * @param {number=} pieceNum\n   */\n  constructor(pathOrString: string | string[], pieceNum?: number) {\n    if (pieceNum === void 0) {\n      this.pieces_ = (pathOrString as string).split('/');\n\n      // Remove empty pieces.\n      let copyTo = 0;\n      for (let i = 0; i < this.pieces_.length; i++) {\n        if (this.pieces_[i].length > 0) {\n          this.pieces_[copyTo] = this.pieces_[i];\n          copyTo++;\n        }\n      }\n      this.pieces_.length = copyTo;\n\n      this.pieceNum_ = 0;\n    } else {\n      this.pieces_ = pathOrString as string[];\n      this.pieceNum_ = pieceNum;\n    }\n  }\n\n  getFront(): string | null {\n    if (this.pieceNum_ >= this.pieces_.length) {\n      return null;\n    }\n\n    return this.pieces_[this.pieceNum_];\n  }\n\n  /**\n   * @return {number} The number of segments in this path\n   */\n  getLength(): number {\n    return this.pieces_.length - this.pieceNum_;\n  }\n\n  /**\n   * @return {!Path}\n   */\n  popFront(): Path {\n    let pieceNum = this.pieceNum_;\n    if (pieceNum < this.pieces_.length) {\n      pieceNum++;\n    }\n    return new Path(this.pieces_, pieceNum);\n  }\n\n  /**\n   * @return {?string}\n   */\n  getBack(): string | null {\n    if (this.pieceNum_ < this.pieces_.length) {\n      return this.pieces_[this.pieces_.length - 1];\n    }\n\n    return null;\n  }\n\n  toString(): string {\n    let pathString = '';\n    for (let i = this.pieceNum_; i < this.pieces_.length; i++) {\n      if (this.pieces_[i] !== '') {\n        pathString += '/' + this.pieces_[i];\n      }\n    }\n\n    return pathString || '/';\n  }\n\n  toUrlEncodedString(): string {\n    let pathString = '';\n    for (let i = this.pieceNum_; i < this.pieces_.length; i++) {\n      if (this.pieces_[i] !== '') {\n        pathString += '/' + encodeURIComponent(String(this.pieces_[i]));\n      }\n    }\n\n    return pathString || '/';\n  }\n\n  /**\n   * Shallow copy of the parts of the path.\n   *\n   * @param {number=} begin\n   * @return {!Array<string>}\n   */\n  slice(begin: number = 0): string[] {\n    return this.pieces_.slice(this.pieceNum_ + begin);\n  }\n\n  /**\n   * @return {?Path}\n   */\n  parent(): Path | null {\n    if (this.pieceNum_ >= this.pieces_.length) {\n      return null;\n    }\n\n    const pieces = [];\n    for (let i = this.pieceNum_; i < this.pieces_.length - 1; i++) {\n      pieces.push(this.pieces_[i]);\n    }\n\n    return new Path(pieces, 0);\n  }\n\n  /**\n   * @param {string|!Path} childPathObj\n   * @return {!Path}\n   */\n  child(childPathObj: string | Path): Path {\n    const pieces = [];\n    for (let i = this.pieceNum_; i < this.pieces_.length; i++) {\n      pieces.push(this.pieces_[i]);\n    }\n\n    if (childPathObj instanceof Path) {\n      for (\n        let i = childPathObj.pieceNum_;\n        i < childPathObj.pieces_.length;\n        i++\n      ) {\n        pieces.push(childPathObj.pieces_[i]);\n      }\n    } else {\n      const childPieces = childPathObj.split('/');\n      for (let i = 0; i < childPieces.length; i++) {\n        if (childPieces[i].length > 0) {\n          pieces.push(childPieces[i]);\n        }\n      }\n    }\n\n    return new Path(pieces, 0);\n  }\n\n  /**\n   * @return {boolean} True if there are no segments in this path\n   */\n  isEmpty(): boolean {\n    return this.pieceNum_ >= this.pieces_.length;\n  }\n\n  /**\n   * @param {!Path} outerPath\n   * @param {!Path} innerPath\n   * @return {!Path} The path from outerPath to innerPath\n   */\n  static relativePath(outerPath: Path, innerPath: Path): Path {\n    const outer = outerPath.getFront(),\n      inner = innerPath.getFront();\n    if (outer === null) {\n      return innerPath;\n    } else if (outer === inner) {\n      return Path.relativePath(outerPath.popFront(), innerPath.popFront());\n    } else {\n      throw new Error(\n        'INTERNAL ERROR: innerPath (' +\n          innerPath +\n          ') is not within ' +\n          'outerPath (' +\n          outerPath +\n          ')'\n      );\n    }\n  }\n\n  /**\n   * @param {!Path} left\n   * @param {!Path} right\n   * @return {number} -1, 0, 1 if left is less, equal, or greater than the right.\n   */\n  static comparePaths(left: Path, right: Path): number {\n    const leftKeys = left.slice();\n    const rightKeys = right.slice();\n    for (let i = 0; i < leftKeys.length && i < rightKeys.length; i++) {\n      const cmp = nameCompare(leftKeys[i], rightKeys[i]);\n      if (cmp !== 0) {\n        return cmp;\n      }\n    }\n    if (leftKeys.length === rightKeys.length) {\n      return 0;\n    }\n    return leftKeys.length < rightKeys.length ? -1 : 1;\n  }\n\n  /**\n   *\n   * @param {Path} other\n   * @return {boolean} true if paths are the same.\n   */\n  equals(other: Path): boolean {\n    if (this.getLength() !== other.getLength()) {\n      return false;\n    }\n\n    for (\n      let i = this.pieceNum_, j = other.pieceNum_;\n      i <= this.pieces_.length;\n      i++, j++\n    ) {\n      if (this.pieces_[i] !== other.pieces_[j]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   *\n   * @param {!Path} other\n   * @return {boolean} True if this path is a parent (or the same as) other\n   */\n  contains(other: Path): boolean {\n    let i = this.pieceNum_;\n    let j = other.pieceNum_;\n    if (this.getLength() > other.getLength()) {\n      return false;\n    }\n    while (i < this.pieces_.length) {\n      if (this.pieces_[i] !== other.pieces_[j]) {\n        return false;\n      }\n      ++i;\n      ++j;\n    }\n    return true;\n  }\n} // end Path\n\n/**\n * Dynamic (mutable) path used to count path lengths.\n *\n * This class is used to efficiently check paths for valid\n * length (in UTF8 bytes) and depth (used in path validation).\n *\n * Throws Error exception if path is ever invalid.\n *\n * The definition of a path always begins with '/'.\n */\nexport class ValidationPath {\n  /** @type {!Array<string>} */\n  private parts_: string[];\n  /** @type {number} Initialize to number of '/' chars needed in path. */\n  private byteLength_: number;\n\n  /**\n   * @param {!Path} path Initial Path.\n   * @param {string} errorPrefix_ Prefix for any error messages.\n   */\n  constructor(path: Path, private errorPrefix_: string) {\n    /** @type {!Array<string>} */\n    this.parts_ = path.slice();\n    /** @type {number} Initialize to number of '/' chars needed in path. */\n    this.byteLength_ = Math.max(1, this.parts_.length);\n\n    for (let i = 0; i < this.parts_.length; i++) {\n      this.byteLength_ += stringLength(this.parts_[i]);\n    }\n    this.checkValid_();\n  }\n\n  /** @const {number} Maximum key depth. */\n  static get MAX_PATH_DEPTH() {\n    return 32;\n  }\n\n  /** @const {number} Maximum number of (UTF8) bytes in a Firebase path. */\n  static get MAX_PATH_LENGTH_BYTES() {\n    return 768;\n  }\n\n  /** @param {string} child */\n  push(child: string) {\n    // Count the needed '/'\n    if (this.parts_.length > 0) {\n      this.byteLength_ += 1;\n    }\n    this.parts_.push(child);\n    this.byteLength_ += stringLength(child);\n    this.checkValid_();\n  }\n\n  pop() {\n    const last = this.parts_.pop();\n    this.byteLength_ -= stringLength(last);\n    // Un-count the previous '/'\n    if (this.parts_.length > 0) {\n      this.byteLength_ -= 1;\n    }\n  }\n\n  private checkValid_() {\n    if (this.byteLength_ > ValidationPath.MAX_PATH_LENGTH_BYTES) {\n      throw new Error(\n        this.errorPrefix_ +\n          'has a key path longer than ' +\n          ValidationPath.MAX_PATH_LENGTH_BYTES +\n          ' bytes (' +\n          this.byteLength_ +\n          ').'\n      );\n    }\n    if (this.parts_.length > ValidationPath.MAX_PATH_DEPTH) {\n      throw new Error(\n        this.errorPrefix_ +\n          'path specified exceeds the maximum depth that can be written (' +\n          ValidationPath.MAX_PATH_DEPTH +\n          ') or object contains a cycle ' +\n          this.toErrorString()\n      );\n    }\n  }\n\n  /**\n   * String for use in error messages - uses '.' notation for path.\n   *\n   * @return {string}\n   */\n  toErrorString(): string {\n    if (this.parts_.length === 0) {\n      return '';\n    }\n    return \"in property '\" + this.parts_.join('.') + \"'\";\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const PROTOCOL_VERSION = '5';\n\nexport const VERSION_PARAM = 'v';\n\nexport const TRANSPORT_SESSION_PARAM = 's';\n\nexport const REFERER_PARAM = 'r';\n\nexport const FORGE_REF = 'f';\n\nexport const FORGE_DOMAIN = 'firebaseio.com';\n\nexport const LAST_SESSION_PARAM = 'ls';\n\nexport const APPLICATION_ID_PARAM = 'p';\n\nexport const WEBSOCKET = 'websocket';\n\nexport const LONG_POLLING = 'long_polling';\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { PersistentStorage } from './storage/storage';\nimport { LONG_POLLING, WEBSOCKET } from '../realtime/Constants';\nimport { each } from './util/util';\n\n/**\n * A class that holds metadata about a Repo object\n *\n * @constructor\n */\nexport class RepoInfo {\n  host: string;\n  domain: string;\n  internalHost: string;\n\n  /**\n   * @param host Hostname portion of the url for the repo\n   * @param secure Whether or not this repo is accessed over ssl\n   * @param namespace The namespace represented by the repo\n   * @param webSocketOnly Whether to prefer websockets over all other transports (used by Nest).\n   * @param nodeAdmin Whether this instance uses Admin SDK credentials\n   * @param persistenceKey Override the default session persistence storage key\n   */\n  constructor(\n    host: string,\n    public readonly secure: boolean,\n    public readonly namespace: string,\n    public readonly webSocketOnly: boolean,\n    public readonly nodeAdmin: boolean = false,\n    public readonly persistenceKey: string = '',\n    public readonly includeNamespaceInQueryParams: boolean = false\n  ) {\n    this.host = host.toLowerCase();\n    this.domain = this.host.substr(this.host.indexOf('.') + 1);\n    this.internalHost =\n      (PersistentStorage.get('host:' + host) as string) || this.host;\n  }\n\n  needsQueryParam(): boolean {\n    return (\n      this.host !== this.internalHost ||\n      this.isCustomHost() ||\n      this.includeNamespaceInQueryParams\n    );\n  }\n\n  isCacheableHost(): boolean {\n    return this.internalHost.substr(0, 2) === 's-';\n  }\n\n  isDemoHost() {\n    return this.domain === 'firebaseio-demo.com';\n  }\n\n  isCustomHost() {\n    return (\n      this.domain !== 'firebaseio.com' && this.domain !== 'firebaseio-demo.com'\n    );\n  }\n\n  updateHost(newHost: string) {\n    if (newHost !== this.internalHost) {\n      this.internalHost = newHost;\n      if (this.isCacheableHost()) {\n        PersistentStorage.set('host:' + this.host, this.internalHost);\n      }\n    }\n  }\n\n  /**\n   * Returns the websocket URL for this repo\n   * @param {string} type of connection\n   * @param {Object} params list\n   * @return {string} The URL for this repo\n   */\n  connectionURL(type: string, params: { [k: string]: string }): string {\n    assert(typeof type === 'string', 'typeof type must == string');\n    assert(typeof params === 'object', 'typeof params must == object');\n\n    let connURL: string;\n    if (type === WEBSOCKET) {\n      connURL =\n        (this.secure ? 'wss://' : 'ws://') + this.internalHost + '/.ws?';\n    } else if (type === LONG_POLLING) {\n      connURL =\n        (this.secure ? 'https://' : 'http://') + this.internalHost + '/.lp?';\n    } else {\n      throw new Error('Unknown connection type: ' + type);\n    }\n    if (this.needsQueryParam()) {\n      params['ns'] = this.namespace;\n    }\n\n    const pairs: string[] = [];\n\n    each(params, (key: string, value: string) => {\n      pairs.push(key + '=' + value);\n    });\n\n    return connURL + pairs.join('&');\n  }\n\n  /** @return {string} */\n  toString(): string {\n    let str = this.toURLString();\n    if (this.persistenceKey) {\n      str += '<' + this.persistenceKey + '>';\n    }\n    return str;\n  }\n\n  /** @return {string} */\n  toURLString(): string {\n    return (this.secure ? 'https://' : 'http://') + this.host;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path } from '../Path';\nimport { RepoInfo } from '../../RepoInfo';\nimport { warnIfPageIsSecure, warn, fatal } from '../util';\n\n/**\n * @param {!string} pathString\n * @return {string}\n */\nfunction decodePath(pathString: string): string {\n  let pathStringDecoded = '';\n  const pieces = pathString.split('/');\n  for (let i = 0; i < pieces.length; i++) {\n    if (pieces[i].length > 0) {\n      let piece = pieces[i];\n      try {\n        piece = decodeURIComponent(piece.replace(/\\+/g, ' '));\n      } catch (e) {}\n      pathStringDecoded += '/' + piece;\n    }\n  }\n  return pathStringDecoded;\n}\n\n/**\n * @param {!string} queryString\n * @return {!{[key:string]:string}} key value hash\n */\nfunction decodeQuery(queryString: string): { [key: string]: string } {\n  const results = {};\n  if (queryString.charAt(0) === '?') {\n    queryString = queryString.substring(1);\n  }\n  for (const segment of queryString.split('&')) {\n    if (segment.length === 0) {\n      continue;\n    }\n    const kv = segment.split('=');\n    if (kv.length === 2) {\n      results[decodeURIComponent(kv[0])] = decodeURIComponent(kv[1]);\n    } else {\n      warn(`Invalid query segment '${segment}' in query '${queryString}'`);\n    }\n  }\n  return results;\n}\n\nexport const parseRepoInfo = function (\n  dataURL: string,\n  nodeAdmin: boolean\n): { repoInfo: RepoInfo; path: Path } {\n  const parsedUrl = parseDatabaseURL(dataURL),\n    namespace = parsedUrl.namespace;\n\n  if (parsedUrl.domain === 'firebase.com') {\n    fatal(\n      parsedUrl.host +\n        ' is no longer supported. ' +\n        'Please use <YOUR FIREBASE>.firebaseio.com instead'\n    );\n  }\n\n  // Catch common error of uninitialized namespace value.\n  if (\n    (!namespace || namespace === 'undefined') &&\n    parsedUrl.domain !== 'localhost'\n  ) {\n    fatal(\n      'Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com'\n    );\n  }\n\n  if (!parsedUrl.secure) {\n    warnIfPageIsSecure();\n  }\n\n  const webSocketOnly = parsedUrl.scheme === 'ws' || parsedUrl.scheme === 'wss';\n\n  return {\n    repoInfo: new RepoInfo(\n      parsedUrl.host,\n      parsedUrl.secure,\n      namespace,\n      nodeAdmin,\n      webSocketOnly,\n      /*persistenceKey=*/ '',\n      /*includeNamespaceInQueryParams=*/ namespace !== parsedUrl.subdomain\n    ),\n    path: new Path(parsedUrl.pathString)\n  };\n};\n\n/**\n *\n * @param {!string} dataURL\n * @return {{host: string, port: number, domain: string, subdomain: string, secure: boolean, scheme: string, pathString: string, namespace: string}}\n */\nexport const parseDatabaseURL = function (\n  dataURL: string\n): {\n  host: string;\n  port: number;\n  domain: string;\n  subdomain: string;\n  secure: boolean;\n  scheme: string;\n  pathString: string;\n  namespace: string;\n} {\n  // Default to empty strings in the event of a malformed string.\n  let host = '',\n    domain = '',\n    subdomain = '',\n    pathString = '',\n    namespace = '';\n\n  // Always default to SSL, unless otherwise specified.\n  let secure = true,\n    scheme = 'https',\n    port = 443;\n\n  // Don't do any validation here. The caller is responsible for validating the result of parsing.\n  if (typeof dataURL === 'string') {\n    // Parse scheme.\n    let colonInd = dataURL.indexOf('//');\n    if (colonInd >= 0) {\n      scheme = dataURL.substring(0, colonInd - 1);\n      dataURL = dataURL.substring(colonInd + 2);\n    }\n\n    // Parse host, path, and query string.\n    let slashInd = dataURL.indexOf('/');\n    if (slashInd === -1) {\n      slashInd = dataURL.length;\n    }\n    let questionMarkInd = dataURL.indexOf('?');\n    if (questionMarkInd === -1) {\n      questionMarkInd = dataURL.length;\n    }\n    host = dataURL.substring(0, Math.min(slashInd, questionMarkInd));\n    if (slashInd < questionMarkInd) {\n      // For pathString, questionMarkInd will always come after slashInd\n      pathString = decodePath(dataURL.substring(slashInd, questionMarkInd));\n    }\n    const queryParams = decodeQuery(\n      dataURL.substring(Math.min(dataURL.length, questionMarkInd))\n    );\n\n    // If we have a port, use scheme for determining if it's secure.\n    colonInd = host.indexOf(':');\n    if (colonInd >= 0) {\n      secure = scheme === 'https' || scheme === 'wss';\n      port = parseInt(host.substring(colonInd + 1), 10);\n    } else {\n      colonInd = host.length;\n    }\n\n    const hostWithoutPort = host.slice(0, colonInd);\n    if (hostWithoutPort.toLowerCase() === 'localhost') {\n      domain = 'localhost';\n    } else if (hostWithoutPort.split('.').length <= 2) {\n      domain = hostWithoutPort;\n    } else {\n      // Interpret the subdomain of a 3 or more component URL as the namespace name.\n      const dotInd = host.indexOf('.');\n      subdomain = host.substring(0, dotInd).toLowerCase();\n      domain = host.substring(dotInd + 1);\n      // Normalize namespaces to lowercase to share storage / connection.\n      namespace = subdomain;\n    }\n    // Always treat the value of the `ns` as the namespace name if it is present.\n    if ('ns' in queryParams) {\n      namespace = queryParams['ns'];\n    }\n  }\n\n  return {\n    host,\n    port,\n    domain,\n    subdomain,\n    secure,\n    scheme,\n    pathString,\n    namespace\n  };\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Index } from './Index';\nimport { Node, NamedNode } from '../Node';\nimport { nameCompare, MAX_NAME } from '../../util/util';\nimport { assert, assertionError } from '@firebase/util';\nimport { ChildrenNode } from '../ChildrenNode';\n\nlet __EMPTY_NODE: ChildrenNode;\n\nexport class KeyIndex extends Index {\n  static get __EMPTY_NODE() {\n    return __EMPTY_NODE;\n  }\n\n  static set __EMPTY_NODE(val) {\n    __EMPTY_NODE = val;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  compare(a: NamedNode, b: NamedNode): number {\n    return nameCompare(a.name, b.name);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  isDefinedOn(node: Node): boolean {\n    // We could probably return true here (since every node has a key), but it's never called\n    // so just leaving unimplemented for now.\n    throw assertionError('KeyIndex.isDefinedOn not expected to be called.');\n  }\n\n  /**\n   * @inheritDoc\n   */\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return false; // The key for a node never changes.\n  }\n\n  /**\n   * @inheritDoc\n   */\n  minPost() {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  maxPost(): NamedNode {\n    // TODO: This should really be created once and cached in a static property, but\n    // NamedNode isn't defined yet, so I can't use it in a static.  Bleh.\n    return new NamedNode(MAX_NAME, __EMPTY_NODE);\n  }\n\n  /**\n   * @param {*} indexValue\n   * @param {string} name\n   * @return {!NamedNode}\n   */\n  makePost(indexValue: string, name: string): NamedNode {\n    assert(\n      typeof indexValue === 'string',\n      'KeyIndex indexValue must always be a string.'\n    );\n    // We just use empty node, but it'll never be compared, since our comparator only looks at name.\n    return new NamedNode(indexValue, __EMPTY_NODE);\n  }\n\n  /**\n   * @return {!string} String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.key';\n  }\n}\n\nexport const KEY_INDEX = new KeyIndex();\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, contains } from '@firebase/util';\nimport { doubleToIEEE754String } from '../util/util';\n\nimport { Node } from './Node';\nimport { Indexable } from '../util/misc';\n\nlet MAX_NODE: Node;\n\nexport function setMaxNode(val: Node) {\n  MAX_NODE = val;\n}\n\n/**\n * @param {(!string|!number)} priority\n * @return {!string}\n */\nexport const priorityHashText = function (priority: string | number): string {\n  if (typeof priority === 'number') {\n    return 'number:' + doubleToIEEE754String(priority);\n  } else {\n    return 'string:' + priority;\n  }\n};\n\n/**\n * Validates that a priority snapshot Node is valid.\n *\n * @param {!Node} priorityNode\n */\nexport const validatePriorityNode = function (priorityNode: Node) {\n  if (priorityNode.isLeafNode()) {\n    const val = priorityNode.val();\n    assert(\n      typeof val === 'string' ||\n        typeof val === 'number' ||\n        (typeof val === 'object' && contains(val as Indexable, '.sv')),\n      'Priority must be a string or number.'\n    );\n  } else {\n    assert(\n      priorityNode === MAX_NODE || priorityNode.isEmpty(),\n      'priority of unexpected type.'\n    );\n  }\n  // Don't call getPriority() on MAX_NODE to avoid hitting assertion.\n  assert(\n    priorityNode === MAX_NODE || priorityNode.getPriority().isEmpty(),\n    \"Priority nodes can't have a priority of their own.\"\n  );\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path, ValidationPath } from './Path';\nimport {\n  contains,\n  safeGet,\n  errorPrefix as errorPrefixFxn,\n  stringLength\n} from '@firebase/util';\nimport { isInvalidJSONNumber, each } from './util';\n\nimport { RepoInfo } from '../RepoInfo';\n\n/**\n * True for invalid Firebase keys\n * @type {RegExp}\n * @private\n */\nexport const INVALID_KEY_REGEX_ = /[\\[\\].#$\\/\\u0000-\\u001F\\u007F]/;\n\n/**\n * True for invalid Firebase paths.\n * Allows '/' in paths.\n * @type {RegExp}\n * @private\n */\nexport const INVALID_PATH_REGEX_ = /[\\[\\].#$\\u0000-\\u001F\\u007F]/;\n\n/**\n * Maximum number of characters to allow in leaf value\n * @type {number}\n * @private\n */\nexport const MAX_LEAF_SIZE_ = 10 * 1024 * 1024;\n\n/**\n * @param {*} key\n * @return {boolean}\n */\nexport const isValidKey = function (key: unknown): boolean {\n  return (\n    typeof key === 'string' && key.length !== 0 && !INVALID_KEY_REGEX_.test(key)\n  );\n};\n\n/**\n * @param {string} pathString\n * @return {boolean}\n */\nexport const isValidPathString = function (pathString: string): boolean {\n  return (\n    typeof pathString === 'string' &&\n    pathString.length !== 0 &&\n    !INVALID_PATH_REGEX_.test(pathString)\n  );\n};\n\n/**\n * @param {string} pathString\n * @return {boolean}\n */\nexport const isValidRootPathString = function (pathString: string): boolean {\n  if (pathString) {\n    // Allow '/.info/' at the beginning.\n    pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n  }\n\n  return isValidPathString(pathString);\n};\n\n/**\n * @param {*} priority\n * @return {boolean}\n */\nexport const isValidPriority = function (priority: unknown): boolean {\n  return (\n    priority === null ||\n    typeof priority === 'string' ||\n    (typeof priority === 'number' && !isInvalidJSONNumber(priority)) ||\n    (priority &&\n      typeof priority === 'object' &&\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      contains(priority as any, '.sv'))\n  );\n};\n\n/**\n * Pre-validate a datum passed as an argument to Firebase function.\n *\n * @param {string} fnName\n * @param {number} argumentNumber\n * @param {*} data\n * @param {!Path} path\n * @param {boolean} optional\n */\nexport const validateFirebaseDataArg = function (\n  fnName: string,\n  argumentNumber: number,\n  data: unknown,\n  path: Path,\n  optional: boolean\n) {\n  if (optional && data === undefined) {\n    return;\n  }\n\n  validateFirebaseData(\n    errorPrefixFxn(fnName, argumentNumber, optional),\n    data,\n    path\n  );\n};\n\n/**\n * Validate a data object client-side before sending to server.\n *\n * @param {string} errorPrefix\n * @param {*} data\n * @param {!Path|!ValidationPath} path_\n */\nexport const validateFirebaseData = function (\n  errorPrefix: string,\n  data: unknown,\n  path_: Path | ValidationPath\n) {\n  const path =\n    path_ instanceof Path ? new ValidationPath(path_, errorPrefix) : path_;\n\n  if (data === undefined) {\n    throw new Error(errorPrefix + 'contains undefined ' + path.toErrorString());\n  }\n  if (typeof data === 'function') {\n    throw new Error(\n      errorPrefix +\n        'contains a function ' +\n        path.toErrorString() +\n        ' with contents = ' +\n        data.toString()\n    );\n  }\n  if (isInvalidJSONNumber(data)) {\n    throw new Error(\n      errorPrefix + 'contains ' + data.toString() + ' ' + path.toErrorString()\n    );\n  }\n\n  // Check max leaf size, but try to avoid the utf8 conversion if we can.\n  if (\n    typeof data === 'string' &&\n    data.length > MAX_LEAF_SIZE_ / 3 &&\n    stringLength(data) > MAX_LEAF_SIZE_\n  ) {\n    throw new Error(\n      errorPrefix +\n        'contains a string greater than ' +\n        MAX_LEAF_SIZE_ +\n        ' utf8 bytes ' +\n        path.toErrorString() +\n        \" ('\" +\n        data.substring(0, 50) +\n        \"...')\"\n    );\n  }\n\n  // TODO = Perf = Consider combining the recursive validation of keys into NodeFromJSON\n  // to save extra walking of large objects.\n  if (data && typeof data === 'object') {\n    let hasDotValue = false;\n    let hasActualChild = false;\n    each(data, (key: string, value: unknown) => {\n      if (key === '.value') {\n        hasDotValue = true;\n      } else if (key !== '.priority' && key !== '.sv') {\n        hasActualChild = true;\n        if (!isValidKey(key)) {\n          throw new Error(\n            errorPrefix +\n              ' contains an invalid key (' +\n              key +\n              ') ' +\n              path.toErrorString() +\n              '.  Keys must be non-empty strings ' +\n              'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"'\n          );\n        }\n      }\n\n      path.push(key);\n      validateFirebaseData(errorPrefix, value, path);\n      path.pop();\n    });\n\n    if (hasDotValue && hasActualChild) {\n      throw new Error(\n        errorPrefix +\n          ' contains \".value\" child ' +\n          path.toErrorString() +\n          ' in addition to actual children.'\n      );\n    }\n  }\n};\n\n/**\n * Pre-validate paths passed in the firebase function.\n *\n * @param {string} errorPrefix\n * @param {Array<!Path>} mergePaths\n */\nexport const validateFirebaseMergePaths = function (\n  errorPrefix: string,\n  mergePaths: Path[]\n) {\n  let i, curPath;\n  for (i = 0; i < mergePaths.length; i++) {\n    curPath = mergePaths[i];\n    const keys = curPath.slice();\n    for (let j = 0; j < keys.length; j++) {\n      if (keys[j] === '.priority' && j === keys.length - 1) {\n        // .priority is OK\n      } else if (!isValidKey(keys[j])) {\n        throw new Error(\n          errorPrefix +\n            'contains an invalid key (' +\n            keys[j] +\n            ') in path ' +\n            curPath.toString() +\n            '. Keys must be non-empty strings ' +\n            'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"'\n        );\n      }\n    }\n  }\n\n  // Check that update keys are not descendants of each other.\n  // We rely on the property that sorting guarantees that ancestors come\n  // right before descendants.\n  mergePaths.sort(Path.comparePaths);\n  let prevPath: Path | null = null;\n  for (i = 0; i < mergePaths.length; i++) {\n    curPath = mergePaths[i];\n    if (prevPath !== null && prevPath.contains(curPath)) {\n      throw new Error(\n        errorPrefix +\n          'contains a path ' +\n          prevPath.toString() +\n          ' that is ancestor of another path ' +\n          curPath.toString()\n      );\n    }\n    prevPath = curPath;\n  }\n};\n\n/**\n * pre-validate an object passed as an argument to firebase function (\n * must be an object - e.g. for firebase.update()).\n *\n * @param {string} fnName\n * @param {number} argumentNumber\n * @param {*} data\n * @param {!Path} path\n * @param {boolean} optional\n */\nexport const validateFirebaseMergeDataArg = function (\n  fnName: string,\n  argumentNumber: number,\n  data: unknown,\n  path: Path,\n  optional: boolean\n) {\n  if (optional && data === undefined) {\n    return;\n  }\n\n  const errorPrefix = errorPrefixFxn(fnName, argumentNumber, optional);\n\n  if (!(data && typeof data === 'object') || Array.isArray(data)) {\n    throw new Error(\n      errorPrefix + ' must be an object containing the children to replace.'\n    );\n  }\n\n  const mergePaths: Path[] = [];\n  each(data, (key: string, value: unknown) => {\n    const curPath = new Path(key);\n    validateFirebaseData(errorPrefix, value, path.child(curPath));\n    if (curPath.getBack() === '.priority') {\n      if (!isValidPriority(value)) {\n        throw new Error(\n          errorPrefix +\n            \"contains an invalid value for '\" +\n            curPath.toString() +\n            \"', which must be a valid \" +\n            'Firebase priority (a string, finite number, server value, or null).'\n        );\n      }\n    }\n    mergePaths.push(curPath);\n  });\n  validateFirebaseMergePaths(errorPrefix, mergePaths);\n};\n\nexport const validatePriority = function (\n  fnName: string,\n  argumentNumber: number,\n  priority: unknown,\n  optional: boolean\n) {\n  if (optional && priority === undefined) {\n    return;\n  }\n  if (isInvalidJSONNumber(priority)) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentNumber, optional) +\n        'is ' +\n        priority.toString() +\n        ', but must be a valid Firebase priority (a string, finite number, ' +\n        'server value, or null).'\n    );\n  }\n  // Special case to allow importing data with a .sv.\n  if (!isValidPriority(priority)) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentNumber, optional) +\n        'must be a valid Firebase priority ' +\n        '(a string, finite number, server value, or null).'\n    );\n  }\n};\n\nexport const validateEventType = function (\n  fnName: string,\n  argumentNumber: number,\n  eventType: string,\n  optional: boolean\n) {\n  if (optional && eventType === undefined) {\n    return;\n  }\n\n  switch (eventType) {\n    case 'value':\n    case 'child_added':\n    case 'child_removed':\n    case 'child_changed':\n    case 'child_moved':\n      break;\n    default:\n      throw new Error(\n        errorPrefixFxn(fnName, argumentNumber, optional) +\n          'must be a valid event type = \"value\", \"child_added\", \"child_removed\", ' +\n          '\"child_changed\", or \"child_moved\".'\n      );\n  }\n};\n\nexport const validateKey = function (\n  fnName: string,\n  argumentNumber: number,\n  key: string,\n  optional: boolean\n) {\n  if (optional && key === undefined) {\n    return;\n  }\n  if (!isValidKey(key)) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentNumber, optional) +\n        'was an invalid key = \"' +\n        key +\n        '\".  Firebase keys must be non-empty strings and ' +\n        'can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\").'\n    );\n  }\n};\n\nexport const validatePathString = function (\n  fnName: string,\n  argumentNumber: number,\n  pathString: string,\n  optional: boolean\n) {\n  if (optional && pathString === undefined) {\n    return;\n  }\n\n  if (!isValidPathString(pathString)) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentNumber, optional) +\n        'was an invalid path = \"' +\n        pathString +\n        '\". Paths must be non-empty strings and ' +\n        'can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\"'\n    );\n  }\n};\n\nexport const validateRootPathString = function (\n  fnName: string,\n  argumentNumber: number,\n  pathString: string,\n  optional: boolean\n) {\n  if (pathString) {\n    // Allow '/.info/' at the beginning.\n    pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n  }\n\n  validatePathString(fnName, argumentNumber, pathString, optional);\n};\n\nexport const validateWritablePath = function (fnName: string, path: Path) {\n  if (path.getFront() === '.info') {\n    throw new Error(fnName + \" failed = Can't modify data under /.info/\");\n  }\n};\n\nexport const validateUrl = function (\n  fnName: string,\n  argumentNumber: number,\n  parsedUrl: { repoInfo: RepoInfo; path: Path }\n) {\n  // TODO = Validate server better.\n  const pathString = parsedUrl.path.toString();\n  if (\n    !(typeof parsedUrl.repoInfo.host === 'string') ||\n    parsedUrl.repoInfo.host.length === 0 ||\n    (!isValidKey(parsedUrl.repoInfo.namespace) &&\n      parsedUrl.repoInfo.host.split(':')[0] !== 'localhost') ||\n    (pathString.length !== 0 && !isValidRootPathString(pathString))\n  ) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentNumber, false) +\n        'must be a valid firebase URL and ' +\n        'the path can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\".'\n    );\n  }\n};\n\nexport const validateCredential = function (\n  fnName: string,\n  argumentNumber: number,\n  cred: unknown,\n  optional: boolean\n) {\n  if (optional && cred === undefined) {\n    return;\n  }\n  if (!(typeof cred === 'string')) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentNumber, optional) +\n        'must be a valid credential (a string).'\n    );\n  }\n};\n\nexport const validateBoolean = function (\n  fnName: string,\n  argumentNumber: number,\n  bool: unknown,\n  optional: boolean\n) {\n  if (optional && bool === undefined) {\n    return;\n  }\n  if (typeof bool !== 'boolean') {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentNumber, optional) + 'must be a boolean.'\n    );\n  }\n};\n\nexport const validateString = function (\n  fnName: string,\n  argumentNumber: number,\n  string: unknown,\n  optional: boolean\n) {\n  if (optional && string === undefined) {\n    return;\n  }\n  if (!(typeof string === 'string')) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentNumber, optional) +\n        'must be a valid string.'\n    );\n  }\n};\n\nexport const validateObject = function (\n  fnName: string,\n  argumentNumber: number,\n  obj: unknown,\n  optional: boolean\n) {\n  if (optional && obj === undefined) {\n    return;\n  }\n  if (!(obj && typeof obj === 'object') || obj === null) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentNumber, optional) +\n        'must be a valid object.'\n    );\n  }\n};\n\nexport const validateObjectContainsKey = function (\n  fnName: string,\n  argumentNumber: number,\n  obj: unknown,\n  key: string,\n  optional: boolean,\n  optType?: string\n) {\n  const objectContainsKey =\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    obj && typeof obj === 'object' && contains(obj as any, key);\n\n  if (!objectContainsKey) {\n    if (optional) {\n      return;\n    } else {\n      throw new Error(\n        errorPrefixFxn(fnName, argumentNumber, optional) +\n          'must contain the key \"' +\n          key +\n          '\"'\n      );\n    }\n  }\n\n  if (optType) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const val = safeGet(obj as any, key);\n    if (\n      (optType === 'number' && !(typeof val === 'number')) ||\n      (optType === 'string' && !(typeof val === 'string')) ||\n      (optType === 'boolean' && !(typeof val === 'boolean')) ||\n      (optType === 'function' && !(typeof val === 'function')) ||\n      (optType === 'object' && !(typeof val === 'object') && val)\n    ) {\n      if (optional) {\n        throw new Error(\n          errorPrefixFxn(fnName, argumentNumber, optional) +\n            'contains invalid value for key \"' +\n            key +\n            '\" (must be of type \"' +\n            optType +\n            '\")'\n        );\n      } else {\n        throw new Error(\n          errorPrefixFxn(fnName, argumentNumber, optional) +\n            'must contain the key \"' +\n            key +\n            '\" with type \"' +\n            optType +\n            '\"'\n        );\n      }\n    }\n  }\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { validateArgCount, validateCallback, Deferred } from '@firebase/util';\nimport {\n  validateWritablePath,\n  validateFirebaseDataArg,\n  validatePriority,\n  validateFirebaseMergeDataArg\n} from '../core/util/validation';\nimport { warn } from '../core/util/util';\n\nimport { Repo } from '../core/Repo';\nimport { Path } from '../core/util/Path';\nimport { Indexable } from '../core/util/misc';\n\n/**\n * @constructor\n */\nexport class OnDisconnect {\n  /**\n   * @param {!Repo} repo_\n   * @param {!Path} path_\n   */\n  constructor(private repo_: Repo, private path_: Path) {}\n\n  /**\n   * @param {function(?Error)=} onComplete\n   * @return {!firebase.Promise}\n   */\n  cancel(onComplete?: (a: Error | null) => void): Promise<void> {\n    validateArgCount('OnDisconnect.cancel', 0, 1, arguments.length);\n    validateCallback('OnDisconnect.cancel', 1, onComplete, true);\n    const deferred = new Deferred<void>();\n    this.repo_.onDisconnectCancel(\n      this.path_,\n      deferred.wrapCallback(onComplete)\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * @param {function(?Error)=} onComplete\n   * @return {!firebase.Promise}\n   */\n  remove(onComplete?: (a: Error | null) => void): Promise<void> {\n    validateArgCount('OnDisconnect.remove', 0, 1, arguments.length);\n    validateWritablePath('OnDisconnect.remove', this.path_);\n    validateCallback('OnDisconnect.remove', 1, onComplete, true);\n    const deferred = new Deferred<void>();\n    this.repo_.onDisconnectSet(\n      this.path_,\n      null,\n      deferred.wrapCallback(onComplete)\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * @param {*} value\n   * @param {function(?Error)=} onComplete\n   * @return {!firebase.Promise}\n   */\n  set(value: unknown, onComplete?: (a: Error | null) => void): Promise<void> {\n    validateArgCount('OnDisconnect.set', 1, 2, arguments.length);\n    validateWritablePath('OnDisconnect.set', this.path_);\n    validateFirebaseDataArg('OnDisconnect.set', 1, value, this.path_, false);\n    validateCallback('OnDisconnect.set', 2, onComplete, true);\n    const deferred = new Deferred<void>();\n    this.repo_.onDisconnectSet(\n      this.path_,\n      value,\n      deferred.wrapCallback(onComplete)\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * @param {*} value\n   * @param {number|string|null} priority\n   * @param {function(?Error)=} onComplete\n   * @return {!firebase.Promise}\n   */\n  setWithPriority(\n    value: unknown,\n    priority: number | string | null,\n    onComplete?: (a: Error | null) => void\n  ): Promise<void> {\n    validateArgCount('OnDisconnect.setWithPriority', 2, 3, arguments.length);\n    validateWritablePath('OnDisconnect.setWithPriority', this.path_);\n    validateFirebaseDataArg(\n      'OnDisconnect.setWithPriority',\n      1,\n      value,\n      this.path_,\n      false\n    );\n    validatePriority('OnDisconnect.setWithPriority', 2, priority, false);\n    validateCallback('OnDisconnect.setWithPriority', 3, onComplete, true);\n\n    const deferred = new Deferred<void>();\n    this.repo_.onDisconnectSetWithPriority(\n      this.path_,\n      value,\n      priority,\n      deferred.wrapCallback(onComplete)\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * @param {!Object} objectToMerge\n   * @param {function(?Error)=} onComplete\n   * @return {!firebase.Promise}\n   */\n  update(\n    objectToMerge: Indexable,\n    onComplete?: (a: Error | null) => void\n  ): Promise<void> {\n    validateArgCount('OnDisconnect.update', 1, 2, arguments.length);\n    validateWritablePath('OnDisconnect.update', this.path_);\n    if (Array.isArray(objectToMerge)) {\n      const newObjectToMerge: { [k: string]: unknown } = {};\n      for (let i = 0; i < objectToMerge.length; ++i) {\n        newObjectToMerge['' + i] = objectToMerge[i];\n      }\n      objectToMerge = newObjectToMerge;\n      warn(\n        'Passing an Array to firebase.database.onDisconnect().update() is deprecated. Use set() if you want to overwrite the ' +\n          'existing data, or an Object with integer keys if you really do want to only update some of the children.'\n      );\n    }\n    validateFirebaseMergeDataArg(\n      'OnDisconnect.update',\n      1,\n      objectToMerge,\n      this.path_,\n      false\n    );\n    validateCallback('OnDisconnect.update', 2, onComplete, true);\n    const deferred = new Deferred<void>();\n    this.repo_.onDisconnectUpdate(\n      this.path_,\n      objectToMerge,\n      deferred.wrapCallback(onComplete)\n    );\n    return deferred.promise;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DataSnapshot } from './DataSnapshot';\nimport { validateArgCount } from '@firebase/util';\n\nexport class TransactionResult {\n  /**\n   * A type for the resolve value of Firebase.transaction.\n   * @constructor\n   * @dict\n   * @param {boolean} committed\n   * @param {DataSnapshot} snapshot\n   */\n  constructor(public committed: boolean, public snapshot: DataSnapshot) {}\n\n  // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\n  // for end-users\n  toJSON(): object {\n    validateArgCount('TransactionResult.toJSON', 0, 1, arguments.length);\n    return { committed: this.committed, snapshot: this.snapshot.toJSON() };\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\n/**\n * Fancy ID generator that creates 20-character string identifiers with the\n * following properties:\n *\n * 1. They're based on timestamp so that they sort *after* any existing ids.\n * 2. They contain 72-bits of random data after the timestamp so that IDs won't\n *    collide with other clients' IDs.\n * 3. They sort *lexicographically* (so the timestamp is converted to characters\n *    that will sort properly).\n * 4. They're monotonically increasing. Even if you generate more than one in\n *    the same timestamp, the latter ones will sort after the former ones. We do\n *    this by using the previous random bits but \"incrementing\" them by 1 (only\n *    in the case of a timestamp collision).\n */\nexport const nextPushId = (function () {\n  // Modeled after base64 web-safe chars, but ordered by ASCII.\n  const PUSH_CHARS =\n    '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';\n\n  // Timestamp of last push, used to prevent local collisions if you push twice\n  // in one ms.\n  let lastPushTime = 0;\n\n  // We generate 72-bits of randomness which get turned into 12 characters and\n  // appended to the timestamp to prevent collisions with other clients. We\n  // store the last characters we generated because in the event of a collision,\n  // we'll use those same characters except \"incremented\" by one.\n  const lastRandChars: number[] = [];\n\n  return function (now: number) {\n    const duplicateTime = now === lastPushTime;\n    lastPushTime = now;\n\n    let i;\n    const timeStampChars = new Array(8);\n    for (i = 7; i >= 0; i--) {\n      timeStampChars[i] = PUSH_CHARS.charAt(now % 64);\n      // NOTE: Can't use << here because javascript will convert to int and lose\n      // the upper bits.\n      now = Math.floor(now / 64);\n    }\n    assert(now === 0, 'Cannot push at time == 0');\n\n    let id = timeStampChars.join('');\n\n    if (!duplicateTime) {\n      for (i = 0; i < 12; i++) {\n        lastRandChars[i] = Math.floor(Math.random() * 64);\n      }\n    } else {\n      // If the timestamp hasn't changed since last push, use the same random\n      // number, except incremented by 1.\n      for (i = 11; i >= 0 && lastRandChars[i] === 63; i--) {\n        lastRandChars[i] = 0;\n      }\n      lastRandChars[i]++;\n    }\n    for (i = 0; i < 12; i++) {\n      id += PUSH_CHARS.charAt(lastRandChars[i]);\n    }\n    assert(id.length === 20, 'nextPushId: Length should be 20.');\n\n    return id;\n  };\n})();\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path } from '../util/Path';\nimport { Index } from './indexes/Index';\n\n/**\n * Node is an interface defining the common functionality for nodes in\n * a DataSnapshot.\n *\n * @interface\n */\nexport interface Node {\n  /**\n   * Whether this node is a leaf node.\n   * @return {boolean} Whether this is a leaf node.\n   */\n  isLeafNode(): boolean;\n\n  /**\n   * Gets the priority of the node.\n   * @return {!Node} The priority of the node.\n   */\n  getPriority(): Node;\n\n  /**\n   * Returns a duplicate node with the new priority.\n   * @param {!Node} newPriorityNode New priority to set for the node.\n   * @return {!Node} Node with new priority.\n   */\n  updatePriority(newPriorityNode: Node): Node;\n\n  /**\n   * Returns the specified immediate child, or null if it doesn't exist.\n   * @param {string} childName The name of the child to retrieve.\n   * @return {!Node} The retrieved child, or an empty node.\n   */\n  getImmediateChild(childName: string): Node;\n\n  /**\n   * Returns a child by path, or null if it doesn't exist.\n   * @param {!Path} path The path of the child to retrieve.\n   * @return {!Node} The retrieved child or an empty node.\n   */\n  getChild(path: Path): Node;\n\n  /**\n   * Returns the name of the child immediately prior to the specified childNode, or null.\n   * @param {!string} childName The name of the child to find the predecessor of.\n   * @param {!Node} childNode The node to find the predecessor of.\n   * @param {!Index} index The index to use to determine the predecessor\n   * @return {?string} The name of the predecessor child, or null if childNode is the first child.\n   */\n  getPredecessorChildName(\n    childName: string,\n    childNode: Node,\n    index: Index\n  ): string | null;\n\n  /**\n   * Returns a duplicate node, with the specified immediate child updated.\n   * Any value in the node will be removed.\n   * @param {string} childName The name of the child to update.\n   * @param {!Node} newChildNode The new child node\n   * @return {!Node} The updated node.\n   */\n  updateImmediateChild(childName: string, newChildNode: Node): Node;\n\n  /**\n   * Returns a duplicate node, with the specified child updated.  Any value will\n   * be removed.\n   * @param {!Path} path The path of the child to update.\n   * @param {!Node} newChildNode The new child node, which may be an empty node\n   * @return {!Node} The updated node.\n   */\n  updateChild(path: Path, newChildNode: Node): Node;\n\n  /**\n   * True if the immediate child specified exists\n   * @param {!string} childName\n   * @return {boolean}\n   */\n  hasChild(childName: string): boolean;\n\n  /**\n   * @return {boolean} True if this node has no value or children.\n   */\n  isEmpty(): boolean;\n\n  /**\n   * @return {number} The number of children of this node.\n   */\n  numChildren(): number;\n\n  /**\n   * Calls action for each child.\n   * @param {!Index} index\n   * @param {function(string, !Node)} action Action to be called for\n   * each child.  It's passed the child name and the child node.\n   * @return {*} The first truthy value return by action, or the last falsey one\n   */\n  forEachChild(index: Index, action: (a: string, b: Node) => void): unknown;\n\n  /**\n   * @param exportFormat True for export format (also wire protocol format).\n   * @return Value of this node as JSON.\n   */\n  val(exportFormat?: boolean): unknown;\n\n  /**\n   * @return {string} hash representing the node contents.\n   */\n  hash(): string;\n\n  /**\n   * @param {!Node} other Another node\n   * @return {!number} -1 for less than, 0 for equal, 1 for greater than other\n   */\n  compareTo(other: Node): number;\n\n  /**\n   * @param {!Node} other\n   * @return {boolean} Whether or not this snapshot equals other\n   */\n  equals(other: Node): boolean;\n\n  /**\n   * @param {!Index} indexDefinition\n   * @return {!Node} This node, with the specified index now available\n   */\n  withIndex(indexDefinition: Index): Node;\n\n  /**\n   * @param {!Index} indexDefinition\n   * @return {boolean}\n   */\n  isIndexed(indexDefinition: Index): boolean;\n}\n\n/**\n *\n * @param {!string} name\n * @param {!Node} node\n * @constructor\n * @struct\n */\nexport class NamedNode {\n  constructor(public name: string, public node: Node) {}\n\n  /**\n   *\n   * @param {!string} name\n   * @param {!Node} node\n   * @return {NamedNode}\n   */\n  static Wrap(name: string, node: Node) {\n    return new NamedNode(name, node);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node, NamedNode } from '../Node';\nimport { MIN_NAME, MAX_NAME } from '../../util/util';\nimport { Comparator } from '../../util/SortedMap';\n\n/**\n *\n * @constructor\n */\nexport abstract class Index {\n  /**\n   * @param {!NamedNode} a\n   * @param {!NamedNode} b\n   * @return {number}\n   */\n  abstract compare(a: NamedNode, b: NamedNode): number;\n\n  /**\n   * @param {!Node} node\n   * @return {boolean}\n   */\n  abstract isDefinedOn(node: Node): boolean;\n\n  /**\n   * @return {function(!NamedNode, !NamedNode):number} A standalone comparison function for\n   * this index\n   */\n  getCompare(): Comparator<NamedNode> {\n    return this.compare.bind(this);\n  }\n\n  /**\n   * Given a before and after value for a node, determine if the indexed value has changed. Even if they are different,\n   * it's possible that the changes are isolated to parts of the snapshot that are not indexed.\n   *\n   * @param {!Node} oldNode\n   * @param {!Node} newNode\n   * @return {boolean} True if the portion of the snapshot being indexed changed between oldNode and newNode\n   */\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    const oldWrapped = new NamedNode(MIN_NAME, oldNode);\n    const newWrapped = new NamedNode(MIN_NAME, newNode);\n    return this.compare(oldWrapped, newWrapped) !== 0;\n  }\n\n  /**\n   * @return {!NamedNode} a node wrapper that will sort equal to or less than\n   * any other node wrapper, using this index\n   */\n  minPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n\n  /**\n   * @return {!NamedNode} a node wrapper that will sort greater than or equal to\n   * any other node wrapper, using this index\n   */\n  abstract maxPost(): NamedNode;\n\n  /**\n   * @param {*} indexValue\n   * @param {string} name\n   * @return {!NamedNode}\n   */\n  abstract makePost(indexValue: unknown, name: string): NamedNode;\n\n  /**\n   * @return {!string} String representation for inclusion in a query spec\n   */\n  abstract toString(): string;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { doubleToIEEE754String, sha1 } from '../util/util';\nimport { priorityHashText, validatePriorityNode } from './snap';\nimport { Node } from './Node';\nimport { Path } from '../util/Path';\nimport { Index } from './indexes/Index';\nimport { ChildrenNodeConstructor } from './ChildrenNode';\nimport { Indexable } from '../util/misc';\n\nlet __childrenNodeConstructor: ChildrenNodeConstructor;\n\n/**\n * LeafNode is a class for storing leaf nodes in a DataSnapshot.  It\n * implements Node and stores the value of the node (a string,\n * number, or boolean) accessible via getValue().\n */\nexport class LeafNode implements Node {\n  static set __childrenNodeConstructor(val: ChildrenNodeConstructor) {\n    __childrenNodeConstructor = val;\n  }\n\n  static get __childrenNodeConstructor() {\n    return __childrenNodeConstructor;\n  }\n\n  /**\n   * The sort order for comparing leaf nodes of different types. If two leaf nodes have\n   * the same type, the comparison falls back to their value\n   * @type {Array.<!string>}\n   * @const\n   */\n  static VALUE_TYPE_ORDER = ['object', 'boolean', 'number', 'string'];\n\n  private lazyHash_: string | null = null;\n\n  /**\n   * @implements {Node}\n   * @param {!(string|number|boolean|Object)} value_ The value to store in this leaf node.\n   *                                         The object type is possible in the event of a deferred value\n   * @param {!Node=} priorityNode_ The priority of this node.\n   */\n  constructor(\n    private readonly value_: string | number | boolean | Indexable,\n    private priorityNode_: Node = LeafNode.__childrenNodeConstructor.EMPTY_NODE\n  ) {\n    assert(\n      this.value_ !== undefined && this.value_ !== null,\n      \"LeafNode shouldn't be created with null/undefined value.\"\n    );\n\n    validatePriorityNode(this.priorityNode_);\n  }\n\n  /** @inheritDoc */\n  isLeafNode(): boolean {\n    return true;\n  }\n\n  /** @inheritDoc */\n  getPriority(): Node {\n    return this.priorityNode_;\n  }\n\n  /** @inheritDoc */\n  updatePriority(newPriorityNode: Node): Node {\n    return new LeafNode(this.value_, newPriorityNode);\n  }\n\n  /** @inheritDoc */\n  getImmediateChild(childName: string): Node {\n    // Hack to treat priority as a regular child\n    if (childName === '.priority') {\n      return this.priorityNode_;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    }\n  }\n\n  /** @inheritDoc */\n  getChild(path: Path): Node {\n    if (path.isEmpty()) {\n      return this;\n    } else if (path.getFront() === '.priority') {\n      return this.priorityNode_;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  hasChild(): boolean {\n    return false;\n  }\n\n  /** @inheritDoc */\n  getPredecessorChildName(childName: string, childNode: Node): null {\n    return null;\n  }\n\n  /** @inheritDoc */\n  updateImmediateChild(childName: string, newChildNode: Node): Node {\n    if (childName === '.priority') {\n      return this.updatePriority(newChildNode);\n    } else if (newChildNode.isEmpty() && childName !== '.priority') {\n      return this;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(\n        childName,\n        newChildNode\n      ).updatePriority(this.priorityNode_);\n    }\n  }\n\n  /** @inheritDoc */\n  updateChild(path: Path, newChildNode: Node): Node {\n    const front = path.getFront();\n    if (front === null) {\n      return newChildNode;\n    } else if (newChildNode.isEmpty() && front !== '.priority') {\n      return this;\n    } else {\n      assert(\n        front !== '.priority' || path.getLength() === 1,\n        '.priority must be the last token in a path'\n      );\n\n      return this.updateImmediateChild(\n        front,\n        LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateChild(\n          path.popFront(),\n          newChildNode\n        )\n      );\n    }\n  }\n\n  /** @inheritDoc */\n  isEmpty(): boolean {\n    return false;\n  }\n\n  /** @inheritDoc */\n  numChildren(): number {\n    return 0;\n  }\n\n  /** @inheritDoc */\n  forEachChild(index: Index, action: (s: string, n: Node) => void): boolean {\n    return false;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  val(exportFormat?: boolean): {} {\n    if (exportFormat && !this.getPriority().isEmpty()) {\n      return {\n        '.value': this.getValue(),\n        '.priority': this.getPriority().val()\n      };\n    } else {\n      return this.getValue();\n    }\n  }\n\n  /** @inheritDoc */\n  hash(): string {\n    if (this.lazyHash_ === null) {\n      let toHash = '';\n      if (!this.priorityNode_.isEmpty()) {\n        toHash +=\n          'priority:' +\n          priorityHashText(this.priorityNode_.val() as number | string) +\n          ':';\n      }\n\n      const type = typeof this.value_;\n      toHash += type + ':';\n      if (type === 'number') {\n        toHash += doubleToIEEE754String(this.value_ as number);\n      } else {\n        toHash += this.value_;\n      }\n      this.lazyHash_ = sha1(toHash);\n    }\n    return this.lazyHash_;\n  }\n\n  /**\n   * Returns the value of the leaf node.\n   * @return {Object|string|number|boolean} The value of the node.\n   */\n  getValue(): Indexable | string | number | boolean {\n    return this.value_;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  compareTo(other: Node): number {\n    if (other === LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\n      return 1;\n    } else if (other instanceof LeafNode.__childrenNodeConstructor) {\n      return -1;\n    } else {\n      assert(other.isLeafNode(), 'Unknown node type');\n      return this.compareToLeafNode_(other as LeafNode);\n    }\n  }\n\n  /**\n   * Comparison specifically for two leaf nodes\n   * @param {!LeafNode} otherLeaf\n   * @return {!number}\n   * @private\n   */\n  private compareToLeafNode_(otherLeaf: LeafNode): number {\n    const otherLeafType = typeof otherLeaf.value_;\n    const thisLeafType = typeof this.value_;\n    const otherIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(otherLeafType);\n    const thisIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(thisLeafType);\n    assert(otherIndex >= 0, 'Unknown leaf type: ' + otherLeafType);\n    assert(thisIndex >= 0, 'Unknown leaf type: ' + thisLeafType);\n    if (otherIndex === thisIndex) {\n      // Same type, compare values\n      if (thisLeafType === 'object') {\n        // Deferred value nodes are all equal, but we should also never get to this point...\n        return 0;\n      } else {\n        // Note that this works because true > false, all others are number or string comparisons\n        if (this.value_ < otherLeaf.value_) {\n          return -1;\n        } else if (this.value_ === otherLeaf.value_) {\n          return 0;\n        } else {\n          return 1;\n        }\n      }\n    } else {\n      return thisIndex - otherIndex;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  withIndex(): Node {\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  isIndexed(): boolean {\n    return true;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  equals(other: Node): boolean {\n    /**\n     * @inheritDoc\n     */\n    if (other === this) {\n      return true;\n    } else if (other.isLeafNode()) {\n      const otherLeaf = other as LeafNode;\n      return (\n        this.value_ === otherLeaf.value_ &&\n        this.priorityNode_.equals(otherLeaf.priorityNode_)\n      );\n    } else {\n      return false;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Index } from './Index';\nimport { nameCompare, MAX_NAME } from '../../util/util';\nimport { NamedNode, Node } from '../Node';\nimport { LeafNode } from '../LeafNode';\n\nlet nodeFromJSON: (a: unknown) => Node;\nlet MAX_NODE: Node;\n\nexport function setNodeFromJSON(val: (a: unknown) => Node) {\n  nodeFromJSON = val;\n}\n\nexport function setMaxNode(val: Node) {\n  MAX_NODE = val;\n}\n\n/**\n * @constructor\n * @extends {Index}\n * @private\n */\nexport class PriorityIndex extends Index {\n  /**\n   * @inheritDoc\n   */\n  compare(a: NamedNode, b: NamedNode): number {\n    const aPriority = a.node.getPriority();\n    const bPriority = b.node.getPriority();\n    const indexCmp = aPriority.compareTo(bPriority);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  isDefinedOn(node: Node): boolean {\n    return !node.getPriority().isEmpty();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return !oldNode.getPriority().equals(newNode.getPriority());\n  }\n\n  /**\n   * @inheritDoc\n   */\n  minPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  maxPost(): NamedNode {\n    return new NamedNode(MAX_NAME, new LeafNode('[PRIORITY-POST]', MAX_NODE));\n  }\n\n  /**\n   * @param {*} indexValue\n   * @param {string} name\n   * @return {!NamedNode}\n   */\n  makePost(indexValue: unknown, name: string): NamedNode {\n    const priorityNode = nodeFromJSON(indexValue);\n    return new NamedNode(name, new LeafNode('[PRIORITY-POST]', priorityNode));\n  }\n\n  /**\n   * @return {!string} String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.priority';\n  }\n}\n\nexport const PRIORITY_INDEX = new PriorityIndex();\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, contains, map, safeGet } from '@firebase/util';\nimport { buildChildSet } from './childSet';\n\nimport { NamedNode, Node } from './Node';\nimport { PRIORITY_INDEX } from './indexes/PriorityIndex';\nimport { KEY_INDEX } from './indexes/KeyIndex';\nimport { SortedMap } from '../util/SortedMap';\nimport { Index } from './indexes/Index';\n\nlet _defaultIndexMap: IndexMap;\n\nconst fallbackObject = {};\n\nexport class IndexMap {\n  /**\n   * The default IndexMap for nodes without a priority\n   */\n  static get Default(): IndexMap {\n    assert(\n      fallbackObject && PRIORITY_INDEX,\n      'ChildrenNode.ts has not been loaded'\n    );\n    _defaultIndexMap =\n      _defaultIndexMap ||\n      new IndexMap(\n        { '.priority': fallbackObject },\n        { '.priority': PRIORITY_INDEX }\n      );\n    return _defaultIndexMap;\n  }\n\n  constructor(\n    private indexes_: {\n      [k: string]: SortedMap<NamedNode, Node> | /*FallbackType*/ object;\n    },\n    private indexSet_: { [k: string]: Index }\n  ) {}\n\n  get(indexKey: string): SortedMap<NamedNode, Node> | null {\n    const sortedMap = safeGet(this.indexes_, indexKey);\n    if (!sortedMap) {\n      throw new Error('No index defined for ' + indexKey);\n    }\n\n    if (sortedMap instanceof SortedMap) {\n      return sortedMap;\n    } else {\n      // The index exists, but it falls back to just name comparison. Return null so that the calling code uses the\n      // regular child map\n      return null;\n    }\n  }\n\n  hasIndex(indexDefinition: Index): boolean {\n    return contains(this.indexSet_, indexDefinition.toString());\n  }\n\n  addIndex(\n    indexDefinition: Index,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap {\n    assert(\n      indexDefinition !== KEY_INDEX,\n      \"KeyIndex always exists and isn't meant to be added to the IndexMap.\"\n    );\n    const childList = [];\n    let sawIndexedValue = false;\n    const iter = existingChildren.getIterator(NamedNode.Wrap);\n    let next = iter.getNext();\n    while (next) {\n      sawIndexedValue =\n        sawIndexedValue || indexDefinition.isDefinedOn(next.node);\n      childList.push(next);\n      next = iter.getNext();\n    }\n    let newIndex;\n    if (sawIndexedValue) {\n      newIndex = buildChildSet(childList, indexDefinition.getCompare());\n    } else {\n      newIndex = fallbackObject;\n    }\n    const indexName = indexDefinition.toString();\n    const newIndexSet = { ...this.indexSet_ };\n    newIndexSet[indexName] = indexDefinition;\n    const newIndexes = { ...this.indexes_ };\n    newIndexes[indexName] = newIndex;\n    return new IndexMap(newIndexes, newIndexSet);\n  }\n\n  /**\n   * Ensure that this node is properly tracked in any indexes that we're maintaining\n   */\n  addToIndexes(\n    namedNode: NamedNode,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap {\n    const newIndexes = map(\n      this.indexes_,\n      (indexedChildren: SortedMap<NamedNode, Node>, indexName: string) => {\n        const index = safeGet(this.indexSet_, indexName);\n        assert(index, 'Missing index implementation for ' + indexName);\n        if (indexedChildren === fallbackObject) {\n          // Check to see if we need to index everything\n          if (index.isDefinedOn(namedNode.node)) {\n            // We need to build this index\n            const childList = [];\n            const iter = existingChildren.getIterator(NamedNode.Wrap);\n            let next = iter.getNext();\n            while (next) {\n              if (next.name !== namedNode.name) {\n                childList.push(next);\n              }\n              next = iter.getNext();\n            }\n            childList.push(namedNode);\n            return buildChildSet(childList, index.getCompare());\n          } else {\n            // No change, this remains a fallback\n            return fallbackObject;\n          }\n        } else {\n          const existingSnap = existingChildren.get(namedNode.name);\n          let newChildren = indexedChildren;\n          if (existingSnap) {\n            newChildren = newChildren.remove(\n              new NamedNode(namedNode.name, existingSnap)\n            );\n          }\n          return newChildren.insert(namedNode, namedNode.node);\n        }\n      }\n    );\n    return new IndexMap(newIndexes, this.indexSet_);\n  }\n\n  /**\n   * Create a new IndexMap instance with the given value removed\n   */\n  removeFromIndexes(\n    namedNode: NamedNode,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap {\n    const newIndexes = map(\n      this.indexes_,\n      (indexedChildren: SortedMap<NamedNode, Node>) => {\n        if (indexedChildren === fallbackObject) {\n          // This is the fallback. Just return it, nothing to do in this case\n          return indexedChildren;\n        } else {\n          const existingSnap = existingChildren.get(namedNode.name);\n          if (existingSnap) {\n            return indexedChildren.remove(\n              new NamedNode(namedNode.name, existingSnap)\n            );\n          } else {\n            // No record of this child\n            return indexedChildren;\n          }\n        }\n      }\n    );\n    return new IndexMap(newIndexes, this.indexSet_);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { sha1, MAX_NAME, MIN_NAME } from '../util/util';\nimport { SortedMap, SortedMapIterator } from '../util/SortedMap';\nimport { Node, NamedNode } from './Node';\nimport { validatePriorityNode, priorityHashText, setMaxNode } from './snap';\nimport {\n  PRIORITY_INDEX,\n  setMaxNode as setPriorityMaxNode\n} from './indexes/PriorityIndex';\nimport { KEY_INDEX, KeyIndex } from './indexes/KeyIndex';\nimport { IndexMap } from './IndexMap';\nimport { LeafNode } from './LeafNode';\nimport { NAME_COMPARATOR } from './comparators';\nimport { Index } from './indexes/Index';\nimport { Path } from '../util/Path';\n\nexport interface ChildrenNodeConstructor {\n  new (\n    children_: SortedMap<string, Node>,\n    priorityNode_: Node | null,\n    indexMap_: IndexMap\n  ): ChildrenNode;\n  EMPTY_NODE: ChildrenNode;\n}\n\n// TODO: For memory savings, don't store priorityNode_ if it's empty.\n\nlet EMPTY_NODE: ChildrenNode;\n\n/**\n * ChildrenNode is a class for storing internal nodes in a DataSnapshot\n * (i.e. nodes with children).  It implements Node and stores the\n * list of children in the children property, sorted by child name.\n *\n * @constructor\n * @implements {Node}\n */\nexport class ChildrenNode implements Node {\n  private lazyHash_: string | null = null;\n\n  static get EMPTY_NODE(): ChildrenNode {\n    return (\n      EMPTY_NODE ||\n      (EMPTY_NODE = new ChildrenNode(\n        new SortedMap<string, Node>(NAME_COMPARATOR),\n        null,\n        IndexMap.Default\n      ))\n    );\n  }\n\n  /**\n   *\n   * @param {!SortedMap.<string, !Node>} children_ List of children\n   * of this node..\n   * @param {?Node} priorityNode_ The priority of this node (as a snapshot node).\n   * @param {!IndexMap} indexMap_\n   */\n  constructor(\n    private readonly children_: SortedMap<string, Node>,\n    private readonly priorityNode_: Node | null,\n    private indexMap_: IndexMap\n  ) {\n    /**\n     * Note: The only reason we allow null priority is for EMPTY_NODE, since we can't use\n     * EMPTY_NODE as the priority of EMPTY_NODE.  We might want to consider making EMPTY_NODE its own\n     * class instead of an empty ChildrenNode.\n     */\n    if (this.priorityNode_) {\n      validatePriorityNode(this.priorityNode_);\n    }\n\n    if (this.children_.isEmpty()) {\n      assert(\n        !this.priorityNode_ || this.priorityNode_.isEmpty(),\n        'An empty node cannot have a priority'\n      );\n    }\n  }\n\n  /** @inheritDoc */\n  isLeafNode(): boolean {\n    return false;\n  }\n\n  /** @inheritDoc */\n  getPriority(): Node {\n    return this.priorityNode_ || EMPTY_NODE;\n  }\n\n  /** @inheritDoc */\n  updatePriority(newPriorityNode: Node): Node {\n    if (this.children_.isEmpty()) {\n      // Don't allow priorities on empty nodes\n      return this;\n    } else {\n      return new ChildrenNode(this.children_, newPriorityNode, this.indexMap_);\n    }\n  }\n\n  /** @inheritDoc */\n  getImmediateChild(childName: string): Node {\n    // Hack to treat priority as a regular child\n    if (childName === '.priority') {\n      return this.getPriority();\n    } else {\n      const child = this.children_.get(childName);\n      return child === null ? EMPTY_NODE : child;\n    }\n  }\n\n  /** @inheritDoc */\n  getChild(path: Path): Node {\n    const front = path.getFront();\n    if (front === null) {\n      return this;\n    }\n\n    return this.getImmediateChild(front).getChild(path.popFront());\n  }\n\n  /** @inheritDoc */\n  hasChild(childName: string): boolean {\n    return this.children_.get(childName) !== null;\n  }\n\n  /** @inheritDoc */\n  updateImmediateChild(childName: string, newChildNode: Node): Node {\n    assert(newChildNode, 'We should always be passing snapshot nodes');\n    if (childName === '.priority') {\n      return this.updatePriority(newChildNode);\n    } else {\n      const namedNode = new NamedNode(childName, newChildNode);\n      let newChildren, newIndexMap;\n      if (newChildNode.isEmpty()) {\n        newChildren = this.children_.remove(childName);\n        newIndexMap = this.indexMap_.removeFromIndexes(\n          namedNode,\n          this.children_\n        );\n      } else {\n        newChildren = this.children_.insert(childName, newChildNode);\n        newIndexMap = this.indexMap_.addToIndexes(namedNode, this.children_);\n      }\n\n      const newPriority = newChildren.isEmpty()\n        ? EMPTY_NODE\n        : this.priorityNode_;\n      return new ChildrenNode(newChildren, newPriority, newIndexMap);\n    }\n  }\n\n  /** @inheritDoc */\n  updateChild(path: Path, newChildNode: Node): Node {\n    const front = path.getFront();\n    if (front === null) {\n      return newChildNode;\n    } else {\n      assert(\n        path.getFront() !== '.priority' || path.getLength() === 1,\n        '.priority must be the last token in a path'\n      );\n      const newImmediateChild = this.getImmediateChild(front).updateChild(\n        path.popFront(),\n        newChildNode\n      );\n      return this.updateImmediateChild(front, newImmediateChild);\n    }\n  }\n\n  /** @inheritDoc */\n  isEmpty(): boolean {\n    return this.children_.isEmpty();\n  }\n\n  /** @inheritDoc */\n  numChildren(): number {\n    return this.children_.count();\n  }\n\n  /**\n   * @private\n   * @type {RegExp}\n   */\n  private static INTEGER_REGEXP_ = /^(0|[1-9]\\d*)$/;\n\n  /** @inheritDoc */\n  val(exportFormat?: boolean): object {\n    if (this.isEmpty()) {\n      return null;\n    }\n\n    const obj: { [k: string]: unknown } = {};\n    let numKeys = 0,\n      maxKey = 0,\n      allIntegerKeys = true;\n    this.forEachChild(PRIORITY_INDEX, (key: string, childNode: Node) => {\n      obj[key] = childNode.val(exportFormat);\n\n      numKeys++;\n      if (allIntegerKeys && ChildrenNode.INTEGER_REGEXP_.test(key)) {\n        maxKey = Math.max(maxKey, Number(key));\n      } else {\n        allIntegerKeys = false;\n      }\n    });\n\n    if (!exportFormat && allIntegerKeys && maxKey < 2 * numKeys) {\n      // convert to array.\n      const array: unknown[] = [];\n      // eslint-disable-next-line guard-for-in\n      for (const key in obj) {\n        array[(key as unknown) as number] = obj[key];\n      }\n\n      return array;\n    } else {\n      if (exportFormat && !this.getPriority().isEmpty()) {\n        obj['.priority'] = this.getPriority().val();\n      }\n      return obj;\n    }\n  }\n\n  /** @inheritDoc */\n  hash(): string {\n    if (this.lazyHash_ === null) {\n      let toHash = '';\n      if (!this.getPriority().isEmpty()) {\n        toHash +=\n          'priority:' +\n          priorityHashText(this.getPriority().val() as string | number) +\n          ':';\n      }\n\n      this.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n        const childHash = childNode.hash();\n        if (childHash !== '') {\n          toHash += ':' + key + ':' + childHash;\n        }\n      });\n\n      this.lazyHash_ = toHash === '' ? '' : sha1(toHash);\n    }\n    return this.lazyHash_;\n  }\n\n  /** @inheritDoc */\n  getPredecessorChildName(\n    childName: string,\n    childNode: Node,\n    index: Index\n  ): string {\n    const idx = this.resolveIndex_(index);\n    if (idx) {\n      const predecessor = idx.getPredecessorKey(\n        new NamedNode(childName, childNode)\n      );\n      return predecessor ? predecessor.name : null;\n    } else {\n      return this.children_.getPredecessorKey(childName);\n    }\n  }\n\n  /**\n   * @param {!Index} indexDefinition\n   * @return {?string}\n   */\n  getFirstChildName(indexDefinition: Index): string | null {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      const minKey = idx.minKey();\n      return minKey && minKey.name;\n    } else {\n      return this.children_.minKey();\n    }\n  }\n\n  /**\n   * @param {!Index} indexDefinition\n   * @return {?NamedNode}\n   */\n  getFirstChild(indexDefinition: Index): NamedNode | null {\n    const minKey = this.getFirstChildName(indexDefinition);\n    if (minKey) {\n      return new NamedNode(minKey, this.children_.get(minKey));\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Given an index, return the key name of the largest value we have, according to that index\n   * @param {!Index} indexDefinition\n   * @return {?string}\n   */\n  getLastChildName(indexDefinition: Index): string | null {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      const maxKey = idx.maxKey();\n      return maxKey && maxKey.name;\n    } else {\n      return this.children_.maxKey();\n    }\n  }\n\n  /**\n   * @param {!Index} indexDefinition\n   * @return {?NamedNode}\n   */\n  getLastChild(indexDefinition: Index): NamedNode | null {\n    const maxKey = this.getLastChildName(indexDefinition);\n    if (maxKey) {\n      return new NamedNode(maxKey, this.children_.get(maxKey));\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  forEachChild(\n    index: Index,\n    action: (key: string, node: Node) => boolean | void\n  ): boolean {\n    const idx = this.resolveIndex_(index);\n    if (idx) {\n      return idx.inorderTraversal(wrappedNode => {\n        return action(wrappedNode.name, wrappedNode.node);\n      });\n    } else {\n      return this.children_.inorderTraversal(action);\n    }\n  }\n\n  /**\n   * @param {!Index} indexDefinition\n   * @return {SortedMapIterator}\n   */\n  getIterator(\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    return this.getIteratorFrom(indexDefinition.minPost(), indexDefinition);\n  }\n\n  /**\n   *\n   * @param {!NamedNode} startPost\n   * @param {!Index} indexDefinition\n   * @return {!SortedMapIterator}\n   */\n  getIteratorFrom(\n    startPost: NamedNode,\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      return idx.getIteratorFrom(startPost, key => key);\n    } else {\n      const iterator = this.children_.getIteratorFrom(\n        startPost.name,\n        NamedNode.Wrap\n      );\n      let next = iterator.peek();\n      while (next != null && indexDefinition.compare(next, startPost) < 0) {\n        iterator.getNext();\n        next = iterator.peek();\n      }\n      return iterator;\n    }\n  }\n\n  /**\n   * @param {!Index} indexDefinition\n   * @return {!SortedMapIterator}\n   */\n  getReverseIterator(\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    return this.getReverseIteratorFrom(\n      indexDefinition.maxPost(),\n      indexDefinition\n    );\n  }\n\n  /**\n   * @param {!NamedNode} endPost\n   * @param {!Index} indexDefinition\n   * @return {!SortedMapIterator}\n   */\n  getReverseIteratorFrom(\n    endPost: NamedNode,\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      return idx.getReverseIteratorFrom(endPost, key => {\n        return key;\n      });\n    } else {\n      const iterator = this.children_.getReverseIteratorFrom(\n        endPost.name,\n        NamedNode.Wrap\n      );\n      let next = iterator.peek();\n      while (next != null && indexDefinition.compare(next, endPost) > 0) {\n        iterator.getNext();\n        next = iterator.peek();\n      }\n      return iterator;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  compareTo(other: ChildrenNode): number {\n    if (this.isEmpty()) {\n      if (other.isEmpty()) {\n        return 0;\n      } else {\n        return -1;\n      }\n    } else if (other.isLeafNode() || other.isEmpty()) {\n      return 1;\n    } else if (other === MAX_NODE) {\n      return -1;\n    } else {\n      // Must be another node with children.\n      return 0;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  withIndex(indexDefinition: Index): Node {\n    if (\n      indexDefinition === KEY_INDEX ||\n      this.indexMap_.hasIndex(indexDefinition)\n    ) {\n      return this;\n    } else {\n      const newIndexMap = this.indexMap_.addIndex(\n        indexDefinition,\n        this.children_\n      );\n      return new ChildrenNode(this.children_, this.priorityNode_, newIndexMap);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  isIndexed(index: Index): boolean {\n    return index === KEY_INDEX || this.indexMap_.hasIndex(index);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  equals(other: Node): boolean {\n    if (other === this) {\n      return true;\n    } else if (other.isLeafNode()) {\n      return false;\n    } else {\n      const otherChildrenNode = other as ChildrenNode;\n      if (!this.getPriority().equals(otherChildrenNode.getPriority())) {\n        return false;\n      } else if (\n        this.children_.count() === otherChildrenNode.children_.count()\n      ) {\n        const thisIter = this.getIterator(PRIORITY_INDEX);\n        const otherIter = otherChildrenNode.getIterator(PRIORITY_INDEX);\n        let thisCurrent = thisIter.getNext();\n        let otherCurrent = otherIter.getNext();\n        while (thisCurrent && otherCurrent) {\n          if (\n            thisCurrent.name !== otherCurrent.name ||\n            !thisCurrent.node.equals(otherCurrent.node)\n          ) {\n            return false;\n          }\n          thisCurrent = thisIter.getNext();\n          otherCurrent = otherIter.getNext();\n        }\n        return thisCurrent === null && otherCurrent === null;\n      } else {\n        return false;\n      }\n    }\n  }\n\n  /**\n   * Returns a SortedMap ordered by index, or null if the default (by-key) ordering can be used\n   * instead.\n   *\n   * @private\n   * @param {!Index} indexDefinition\n   * @return {?SortedMap.<NamedNode, Node>}\n   */\n  private resolveIndex_(\n    indexDefinition: Index\n  ): SortedMap<NamedNode, Node> | null {\n    if (indexDefinition === KEY_INDEX) {\n      return null;\n    } else {\n      return this.indexMap_.get(indexDefinition.toString());\n    }\n  }\n}\n\n/**\n * @constructor\n * @extends {ChildrenNode}\n * @private\n */\nexport class MaxNode extends ChildrenNode {\n  constructor() {\n    super(\n      new SortedMap<string, Node>(NAME_COMPARATOR),\n      ChildrenNode.EMPTY_NODE,\n      IndexMap.Default\n    );\n  }\n\n  compareTo(other: Node): number {\n    if (other === this) {\n      return 0;\n    } else {\n      return 1;\n    }\n  }\n\n  equals(other: Node): boolean {\n    // Not that we every compare it, but MAX_NODE is only ever equal to itself\n    return other === this;\n  }\n\n  getPriority(): MaxNode {\n    return this;\n  }\n\n  getImmediateChild(childName: string): ChildrenNode {\n    return ChildrenNode.EMPTY_NODE;\n  }\n\n  isEmpty(): boolean {\n    return false;\n  }\n}\n\n/**\n * Marker that will sort higher than any other snapshot.\n * @type {!MAX_NODE}\n * @const\n */\nexport const MAX_NODE = new MaxNode();\n\n/**\n * Document NamedNode extensions\n */\ndeclare module './Node' {\n  interface NamedNode {\n    MIN: NamedNode;\n    MAX: NamedNode;\n  }\n}\n\nObject.defineProperties(NamedNode, {\n  MIN: {\n    value: new NamedNode(MIN_NAME, ChildrenNode.EMPTY_NODE)\n  },\n  MAX: {\n    value: new NamedNode(MAX_NAME, MAX_NODE)\n  }\n});\n\n/**\n * Reference Extensions\n */\nKeyIndex.__EMPTY_NODE = ChildrenNode.EMPTY_NODE;\nLeafNode.__childrenNodeConstructor = ChildrenNode;\nsetMaxNode(MAX_NODE);\nsetPriorityMaxNode(MAX_NODE);\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Implementation of an immutable SortedMap using a Left-leaning\n * Red-Black Tree, adapted from the implementation in Mugs\n * (http://mads379.github.com/mugs/) by Mads Hartmann Jensen\n * (mads379@gmail.com).\n *\n * Original paper on Left-leaning Red-Black Trees:\n *   http://www.cs.princeton.edu/~rs/talks/LLRB/LLRB.pdf\n *\n * Invariant 1: No red node has a red child\n * Invariant 2: Every leaf path has the same number of black nodes\n * Invariant 3: Only the left child can be red (left leaning)\n */\n\n// TODO: There are some improvements I'd like to make to improve memory / perf:\n//  * Create two prototypes, LLRedNode and LLBlackNode, instead of storing a\n//    color property in every node.\n// TODO: It would also be good (and possibly necessary) to create a base\n// interface for LLRBNode and LLRBEmptyNode.\n\nexport type Comparator<K> = (key1: K, key2: K) => number;\n\n/**\n * An iterator over an LLRBNode.\n */\nexport class SortedMapIterator<K, V, T> {\n  /** @private\n   * @type {Array.<!LLRBNode>}\n   */\n  private nodeStack_: Array<LLRBNode<K, V> | LLRBEmptyNode<K, V>> = [];\n\n  /**\n   * @template K, V, T\n   * @param {LLRBNode|LLRBEmptyNode} node Node to iterate.\n   * @param {?K} startKey\n   * @param {function(K, K): number} comparator\n   * @param {boolean} isReverse_ Whether or not to iterate in reverse\n   * @param {(function(K, V):T)=} resultGenerator_\n   */\n  constructor(\n    node: LLRBNode<K, V> | LLRBEmptyNode<K, V>,\n    startKey: K | null,\n    comparator: Comparator<K>,\n    private isReverse_: boolean,\n    private resultGenerator_: ((k: K, v: V) => T) | null = null\n  ) {\n    let cmp = 1;\n    while (!node.isEmpty()) {\n      node = node as LLRBNode<K, V>;\n      cmp = startKey ? comparator(node.key, startKey) : 1;\n      // flip the comparison if we're going in reverse\n      if (isReverse_) {\n        cmp *= -1;\n      }\n\n      if (cmp < 0) {\n        // This node is less than our start key. ignore it\n        if (this.isReverse_) {\n          node = node.left;\n        } else {\n          node = node.right;\n        }\n      } else if (cmp === 0) {\n        // This node is exactly equal to our start key. Push it on the stack, but stop iterating;\n        this.nodeStack_.push(node);\n        break;\n      } else {\n        // This node is greater than our start key, add it to the stack and move to the next one\n        this.nodeStack_.push(node);\n        if (this.isReverse_) {\n          node = node.right;\n        } else {\n          node = node.left;\n        }\n      }\n    }\n  }\n\n  getNext(): T {\n    if (this.nodeStack_.length === 0) {\n      return null;\n    }\n\n    let node = this.nodeStack_.pop();\n    let result: T;\n    if (this.resultGenerator_) {\n      result = this.resultGenerator_(node.key, node.value);\n    } else {\n      result = ({ key: node.key, value: node.value } as unknown) as T;\n    }\n\n    if (this.isReverse_) {\n      node = node.left;\n      while (!node.isEmpty()) {\n        this.nodeStack_.push(node);\n        node = node.right;\n      }\n    } else {\n      node = node.right;\n      while (!node.isEmpty()) {\n        this.nodeStack_.push(node);\n        node = node.left;\n      }\n    }\n\n    return result;\n  }\n\n  hasNext(): boolean {\n    return this.nodeStack_.length > 0;\n  }\n\n  peek(): T {\n    if (this.nodeStack_.length === 0) {\n      return null;\n    }\n\n    const node = this.nodeStack_[this.nodeStack_.length - 1];\n    if (this.resultGenerator_) {\n      return this.resultGenerator_(node.key, node.value);\n    } else {\n      return ({ key: node.key, value: node.value } as unknown) as T;\n    }\n  }\n}\n\n/**\n * Represents a node in a Left-leaning Red-Black tree.\n */\nexport class LLRBNode<K, V> {\n  color: boolean;\n  left: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  right: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n\n  /**\n   * @template K, V\n   * @param {!K} key Key associated with this node.\n   * @param {!V} value Value associated with this node.\n   * @param {?boolean} color Whether this node is red.\n   * @param {?(LLRBNode|LLRBEmptyNode)=} left Left child.\n   * @param {?(LLRBNode|LLRBEmptyNode)=} right Right child.\n   */\n  constructor(\n    public key: K,\n    public value: V,\n    color: boolean | null,\n    left?: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right?: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ) {\n    this.color = color != null ? color : LLRBNode.RED;\n    this.left =\n      left != null ? left : (SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>);\n    this.right =\n      right != null ? right : (SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>);\n  }\n\n  static RED = true;\n  static BLACK = false;\n\n  /**\n   * Returns a copy of the current node, optionally replacing pieces of it.\n   *\n   * @param {?K} key New key for the node, or null.\n   * @param {?V} value New value for the node, or null.\n   * @param {?boolean} color New color for the node, or null.\n   * @param {?LLRBNode|LLRBEmptyNode} left New left child for the node, or null.\n   * @param {?LLRBNode|LLRBEmptyNode} right New right child for the node, or null.\n   * @return {!LLRBNode} The node copy.\n   */\n  copy(\n    key: K | null,\n    value: V | null,\n    color: boolean | null,\n    left: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ): LLRBNode<K, V> {\n    return new LLRBNode(\n      key != null ? key : this.key,\n      value != null ? value : this.value,\n      color != null ? color : this.color,\n      left != null ? left : this.left,\n      right != null ? right : this.right\n    );\n  }\n\n  /**\n   * @return {number} The total number of nodes in the tree.\n   */\n  count(): number {\n    return this.left.count() + 1 + this.right.count();\n  }\n\n  /**\n   * @return {boolean} True if the tree is empty.\n   */\n  isEmpty(): boolean {\n    return false;\n  }\n\n  /**\n   * Traverses the tree in key order and calls the specified action function\n   * for each node.\n   *\n   * @param {function(!K, !V):*} action Callback function to be called for each\n   *   node.  If it returns true, traversal is aborted.\n   * @return {*} The first truthy value returned by action, or the last falsey\n   *   value returned by action\n   */\n  inorderTraversal(action: (k: K, v: V) => unknown): boolean {\n    return (\n      this.left.inorderTraversal(action) ||\n      !!action(this.key, this.value) ||\n      this.right.inorderTraversal(action)\n    );\n  }\n\n  /**\n   * Traverses the tree in reverse key order and calls the specified action function\n   * for each node.\n   *\n   * @param {function(!Object, !Object)} action Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @return {*} True if traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return (\n      this.right.reverseTraversal(action) ||\n      action(this.key, this.value) ||\n      this.left.reverseTraversal(action)\n    );\n  }\n\n  /**\n   * @return {!Object} The minimum node in the tree.\n   * @private\n   */\n  private min_(): LLRBNode<K, V> {\n    if (this.left.isEmpty()) {\n      return this;\n    } else {\n      return (this.left as LLRBNode<K, V>).min_();\n    }\n  }\n\n  /**\n   * @return {!K} The maximum key in the tree.\n   */\n  minKey(): K {\n    return this.min_().key;\n  }\n\n  /**\n   * @return {!K} The maximum key in the tree.\n   */\n  maxKey(): K {\n    if (this.right.isEmpty()) {\n      return this.key;\n    } else {\n      return this.right.maxKey();\n    }\n  }\n\n  /**\n   *\n   * @param {!Object} key Key to insert.\n   * @param {!Object} value Value to insert.\n   * @param {Comparator} comparator Comparator.\n   * @return {!LLRBNode} New tree, with the key/value added.\n   */\n  insert(key: K, value: V, comparator: Comparator<K>): LLRBNode<K, V> {\n    let n: LLRBNode<K, V> = this;\n    const cmp = comparator(key, n.key);\n    if (cmp < 0) {\n      n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);\n    } else if (cmp === 0) {\n      n = n.copy(null, value, null, null, null);\n    } else {\n      n = n.copy(\n        null,\n        null,\n        null,\n        null,\n        n.right.insert(key, value, comparator)\n      );\n    }\n    return n.fixUp_();\n  }\n\n  /**\n   * @private\n   * @return {!LLRBNode|LLRBEmptyNode} New tree, with the minimum key removed.\n   */\n  private removeMin_(): LLRBNode<K, V> | LLRBEmptyNode<K, V> {\n    if (this.left.isEmpty()) {\n      return SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>;\n    }\n    let n: LLRBNode<K, V> = this;\n    if (!n.left.isRed_() && !n.left.left.isRed_()) {\n      n = n.moveRedLeft_();\n    }\n    n = n.copy(null, null, null, (n.left as LLRBNode<K, V>).removeMin_(), null);\n    return n.fixUp_();\n  }\n\n  /**\n   * @param {!Object} key The key of the item to remove.\n   * @param {Comparator} comparator Comparator.\n   * @return {!LLRBNode|LLRBEmptyNode} New tree, with the specified item removed.\n   */\n  remove(\n    key: K,\n    comparator: Comparator<K>\n  ): LLRBNode<K, V> | LLRBEmptyNode<K, V> {\n    let n, smallest;\n    n = this;\n    if (comparator(key, n.key) < 0) {\n      if (!n.left.isEmpty() && !n.left.isRed_() && !n.left.left.isRed_()) {\n        n = n.moveRedLeft_();\n      }\n      n = n.copy(null, null, null, n.left.remove(key, comparator), null);\n    } else {\n      if (n.left.isRed_()) {\n        n = n.rotateRight_();\n      }\n      if (!n.right.isEmpty() && !n.right.isRed_() && !n.right.left.isRed_()) {\n        n = n.moveRedRight_();\n      }\n      if (comparator(key, n.key) === 0) {\n        if (n.right.isEmpty()) {\n          return SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>;\n        } else {\n          smallest = (n.right as LLRBNode<K, V>).min_();\n          n = n.copy(\n            smallest.key,\n            smallest.value,\n            null,\n            null,\n            (n.right as LLRBNode<K, V>).removeMin_()\n          );\n        }\n      }\n      n = n.copy(null, null, null, null, n.right.remove(key, comparator));\n    }\n    return n.fixUp_();\n  }\n\n  /**\n   * @private\n   * @return {boolean} Whether this is a RED node.\n   */\n  isRed_(): boolean {\n    return this.color;\n  }\n\n  /**\n   * @private\n   * @return {!LLRBNode} New tree after performing any needed rotations.\n   */\n  private fixUp_(): LLRBNode<K, V> {\n    let n: LLRBNode<K, V> = this;\n    if (n.right.isRed_() && !n.left.isRed_()) {\n      n = n.rotateLeft_();\n    }\n    if (n.left.isRed_() && n.left.left.isRed_()) {\n      n = n.rotateRight_();\n    }\n    if (n.left.isRed_() && n.right.isRed_()) {\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n\n  /**\n   * @private\n   * @return {!LLRBNode} New tree, after moveRedLeft.\n   */\n  private moveRedLeft_(): LLRBNode<K, V> {\n    let n = this.colorFlip_();\n    if (n.right.left.isRed_()) {\n      n = n.copy(\n        null,\n        null,\n        null,\n        null,\n        (n.right as LLRBNode<K, V>).rotateRight_()\n      );\n      n = n.rotateLeft_();\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n\n  /**\n   * @private\n   * @return {!LLRBNode} New tree, after moveRedRight.\n   */\n  private moveRedRight_(): LLRBNode<K, V> {\n    let n = this.colorFlip_();\n    if (n.left.left.isRed_()) {\n      n = n.rotateRight_();\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n\n  /**\n   * @private\n   * @return {!LLRBNode} New tree, after rotateLeft.\n   */\n  private rotateLeft_(): LLRBNode<K, V> {\n    const nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);\n    return this.right.copy(null, null, this.color, nl, null) as LLRBNode<K, V>;\n  }\n\n  /**\n   * @private\n   * @return {!LLRBNode} New tree, after rotateRight.\n   */\n  private rotateRight_(): LLRBNode<K, V> {\n    const nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);\n    return this.left.copy(null, null, this.color, null, nr) as LLRBNode<K, V>;\n  }\n\n  /**\n   * @private\n   * @return {!LLRBNode} New tree, after colorFlip.\n   */\n  private colorFlip_(): LLRBNode<K, V> {\n    const left = this.left.copy(null, null, !this.left.color, null, null);\n    const right = this.right.copy(null, null, !this.right.color, null, null);\n    return this.copy(null, null, !this.color, left, right);\n  }\n\n  /**\n   * For testing.\n   *\n   * @private\n   * @return {boolean} True if all is well.\n   */\n  private checkMaxDepth_(): boolean {\n    const blackDepth = this.check_();\n    return Math.pow(2.0, blackDepth) <= this.count() + 1;\n  }\n\n  /**\n   * @private\n   * @return {number} Not sure what this returns exactly. :-).\n   */\n  check_(): number {\n    if (this.isRed_() && this.left.isRed_()) {\n      throw new Error(\n        'Red node has red child(' + this.key + ',' + this.value + ')'\n      );\n    }\n    if (this.right.isRed_()) {\n      throw new Error(\n        'Right child of (' + this.key + ',' + this.value + ') is red'\n      );\n    }\n    const blackDepth = this.left.check_();\n    if (blackDepth !== this.right.check_()) {\n      throw new Error('Black depths differ');\n    } else {\n      return blackDepth + (this.isRed_() ? 0 : 1);\n    }\n  }\n}\n\n/**\n * Represents an empty node (a leaf node in the Red-Black Tree).\n */\nexport class LLRBEmptyNode<K, V> {\n  key: K;\n  value: V;\n  left: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  right: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  color: boolean;\n\n  /**\n   * Returns a copy of the current node.\n   *\n   * @return {!LLRBEmptyNode} The node copy.\n   */\n  copy(\n    key: K | null,\n    value: V | null,\n    color: boolean | null,\n    left: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ): LLRBEmptyNode<K, V> {\n    return this;\n  }\n\n  /**\n   * Returns a copy of the tree, with the specified key/value added.\n   *\n   * @param {!K} key Key to be added.\n   * @param {!V} value Value to be added.\n   * @param {Comparator} comparator Comparator.\n   * @return {!LLRBNode} New tree, with item added.\n   */\n  insert(key: K, value: V, comparator: Comparator<K>): LLRBNode<K, V> {\n    return new LLRBNode(key, value, null);\n  }\n\n  /**\n   * Returns a copy of the tree, with the specified key removed.\n   *\n   * @param {!K} key The key to remove.\n   * @param {Comparator} comparator Comparator.\n   * @return {!LLRBEmptyNode} New tree, with item removed.\n   */\n  remove(key: K, comparator: Comparator<K>): LLRBEmptyNode<K, V> {\n    return this;\n  }\n\n  /**\n   * @return {number} The total number of nodes in the tree.\n   */\n  count(): number {\n    return 0;\n  }\n\n  /**\n   * @return {boolean} True if the tree is empty.\n   */\n  isEmpty(): boolean {\n    return true;\n  }\n\n  /**\n   * Traverses the tree in key order and calls the specified action function\n   * for each node.\n   *\n   * @param {function(!K, !V):*} action Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @return {boolean} True if traversal was aborted.\n   */\n  inorderTraversal(action: (k: K, v: V) => unknown): boolean {\n    return false;\n  }\n\n  /**\n   * Traverses the tree in reverse key order and calls the specified action function\n   * for each node.\n   *\n   * @param {function(!K, !V)} action Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @return {boolean} True if traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return false;\n  }\n\n  /**\n   * @return {null}\n   */\n  minKey(): null {\n    return null;\n  }\n\n  /**\n   * @return {null}\n   */\n  maxKey(): null {\n    return null;\n  }\n\n  /**\n   * @private\n   * @return {number} Not sure what this returns exactly. :-).\n   */\n  check_(): number {\n    return 0;\n  }\n\n  /**\n   * @private\n   * @return {boolean} Whether this node is red.\n   */\n  isRed_() {\n    return false;\n  }\n}\n\n/**\n * An immutable sorted map implementation, based on a Left-leaning Red-Black\n * tree.\n */\nexport class SortedMap<K, V> {\n  /**\n   * Always use the same empty node, to reduce memory.\n   * @const\n   */\n  static EMPTY_NODE = new LLRBEmptyNode();\n\n  /**\n   * @template K, V\n   * @param {function(K, K):number} comparator_ Key comparator.\n   * @param {LLRBNode=} root_ (Optional) Root node for the map.\n   */\n  constructor(\n    private comparator_: Comparator<K>,\n    private root_:\n      | LLRBNode<K, V>\n      | LLRBEmptyNode<K, V> = SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>\n  ) {}\n\n  /**\n   * Returns a copy of the map, with the specified key/value added or replaced.\n   * (TODO: We should perhaps rename this method to 'put')\n   *\n   * @param {!K} key Key to be added.\n   * @param {!V} value Value to be added.\n   * @return {!SortedMap.<K, V>} New map, with item added.\n   */\n  insert(key: K, value: V): SortedMap<K, V> {\n    return new SortedMap(\n      this.comparator_,\n      this.root_\n        .insert(key, value, this.comparator_)\n        .copy(null, null, LLRBNode.BLACK, null, null)\n    );\n  }\n\n  /**\n   * Returns a copy of the map, with the specified key removed.\n   *\n   * @param {!K} key The key to remove.\n   * @return {!SortedMap.<K, V>} New map, with item removed.\n   */\n  remove(key: K): SortedMap<K, V> {\n    return new SortedMap(\n      this.comparator_,\n      this.root_\n        .remove(key, this.comparator_)\n        .copy(null, null, LLRBNode.BLACK, null, null)\n    );\n  }\n\n  /**\n   * Returns the value of the node with the given key, or null.\n   *\n   * @param {!K} key The key to look up.\n   * @return {?V} The value of the node with the given key, or null if the\n   * key doesn't exist.\n   */\n  get(key: K): V | null {\n    let cmp;\n    let node = this.root_;\n    while (!node.isEmpty()) {\n      cmp = this.comparator_(key, node.key);\n      if (cmp === 0) {\n        return node.value;\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        node = node.right;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Returns the key of the item *before* the specified key, or null if key is the first item.\n   * @param {K} key The key to find the predecessor of\n   * @return {?K} The predecessor key.\n   */\n  getPredecessorKey(key: K): K | null {\n    let cmp,\n      node = this.root_,\n      rightParent = null;\n    while (!node.isEmpty()) {\n      cmp = this.comparator_(key, node.key);\n      if (cmp === 0) {\n        if (!node.left.isEmpty()) {\n          node = node.left;\n          while (!node.right.isEmpty()) {\n            node = node.right;\n          }\n          return node.key;\n        } else if (rightParent) {\n          return rightParent.key;\n        } else {\n          return null; // first item.\n        }\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        rightParent = node;\n        node = node.right;\n      }\n    }\n\n    throw new Error(\n      'Attempted to find predecessor key for a nonexistent key.  What gives?'\n    );\n  }\n\n  /**\n   * @return {boolean} True if the map is empty.\n   */\n  isEmpty(): boolean {\n    return this.root_.isEmpty();\n  }\n\n  /**\n   * @return {number} The total number of nodes in the map.\n   */\n  count(): number {\n    return this.root_.count();\n  }\n\n  /**\n   * @return {?K} The minimum key in the map.\n   */\n  minKey(): K | null {\n    return this.root_.minKey();\n  }\n\n  /**\n   * @return {?K} The maximum key in the map.\n   */\n  maxKey(): K | null {\n    return this.root_.maxKey();\n  }\n\n  /**\n   * Traverses the map in key order and calls the specified action function\n   * for each key/value pair.\n   *\n   * @param {function(!K, !V):*} action Callback function to be called\n   * for each key/value pair.  If action returns true, traversal is aborted.\n   * @return {*} The first truthy value returned by action, or the last falsey\n   *   value returned by action\n   */\n  inorderTraversal(action: (k: K, v: V) => unknown): boolean {\n    return this.root_.inorderTraversal(action);\n  }\n\n  /**\n   * Traverses the map in reverse key order and calls the specified action function\n   * for each key/value pair.\n   *\n   * @param {function(!Object, !Object)} action Callback function to be called\n   * for each key/value pair.  If action returns true, traversal is aborted.\n   * @return {*} True if the traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return this.root_.reverseTraversal(action);\n  }\n\n  /**\n   * Returns an iterator over the SortedMap.\n   * @template T\n   * @param {(function(K, V):T)=} resultGenerator\n   * @return {SortedMapIterator.<K, V, T>} The iterator.\n   */\n  getIterator<T>(\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      null,\n      this.comparator_,\n      false,\n      resultGenerator\n    );\n  }\n\n  getIteratorFrom<T>(\n    key: K,\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      key,\n      this.comparator_,\n      false,\n      resultGenerator\n    );\n  }\n\n  getReverseIteratorFrom<T>(\n    key: K,\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      key,\n      this.comparator_,\n      true,\n      resultGenerator\n    );\n  }\n\n  getReverseIterator<T>(\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      null,\n      this.comparator_,\n      true,\n      resultGenerator\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { LLRBNode, SortedMap } from '../util/SortedMap';\n\nimport { NamedNode } from './Node';\n\nconst LOG_2 = Math.log(2);\n\n/**\n * @constructor\n */\nclass Base12Num {\n  count: number;\n  private current_: number;\n  private bits_: number;\n\n  /**\n   * @param {number} length\n   */\n  constructor(length: number) {\n    const logBase2 = (num: number) =>\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      parseInt((Math.log(num) / LOG_2) as any, 10);\n    const bitMask = (bits: number) => parseInt(Array(bits + 1).join('1'), 2);\n    this.count = logBase2(length + 1);\n    this.current_ = this.count - 1;\n    const mask = bitMask(this.count);\n    this.bits_ = (length + 1) & mask;\n  }\n\n  /**\n   * @return {boolean}\n   */\n  nextBitIsOne(): boolean {\n    //noinspection JSBitwiseOperatorUsage\n    const result = !(this.bits_ & (0x1 << this.current_));\n    this.current_--;\n    return result;\n  }\n}\n\n/**\n * Takes a list of child nodes and constructs a SortedSet using the given comparison\n * function\n *\n * Uses the algorithm described in the paper linked here:\n * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.1458\n *\n * @template K, V\n * @param {Array.<!NamedNode>} childList Unsorted list of children\n * @param {function(!NamedNode, !NamedNode):number} cmp The comparison method to be used\n * @param {(function(NamedNode):K)=} keyFn An optional function to extract K from a node wrapper, if K's\n *                                                        type is not NamedNode\n * @param {(function(K, K):number)=} mapSortFn An optional override for comparator used by the generated sorted map\n * @return {SortedMap.<K, V>}\n */\nexport const buildChildSet = function <K, V>(\n  childList: NamedNode[],\n  cmp: (a: NamedNode, b: NamedNode) => number,\n  keyFn?: (a: NamedNode) => K,\n  mapSortFn?: (a: K, b: K) => number\n): SortedMap<K, V> {\n  childList.sort(cmp);\n\n  const buildBalancedTree = function (\n    low: number,\n    high: number\n  ): LLRBNode<K, V> | null {\n    const length = high - low;\n    let namedNode: NamedNode;\n    let key: K;\n    if (length === 0) {\n      return null;\n    } else if (length === 1) {\n      namedNode = childList[low];\n      key = keyFn ? keyFn(namedNode) : ((namedNode as unknown) as K);\n      return new LLRBNode(\n        key,\n        (namedNode.node as unknown) as V,\n        LLRBNode.BLACK,\n        null,\n        null\n      );\n    } else {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const middle = parseInt((length / 2) as any, 10) + low;\n      const left = buildBalancedTree(low, middle);\n      const right = buildBalancedTree(middle + 1, high);\n      namedNode = childList[middle];\n      key = keyFn ? keyFn(namedNode) : ((namedNode as unknown) as K);\n      return new LLRBNode(\n        key,\n        (namedNode.node as unknown) as V,\n        LLRBNode.BLACK,\n        left,\n        right\n      );\n    }\n  };\n\n  const buildFrom12Array = function (base12: Base12Num): LLRBNode<K, V> {\n    let node: LLRBNode<K, V> = null;\n    let root = null;\n    let index = childList.length;\n\n    const buildPennant = function (chunkSize: number, color: boolean) {\n      const low = index - chunkSize;\n      const high = index;\n      index -= chunkSize;\n      const childTree = buildBalancedTree(low + 1, high);\n      const namedNode = childList[low];\n      const key: K = keyFn ? keyFn(namedNode) : ((namedNode as unknown) as K);\n      attachPennant(\n        new LLRBNode(\n          key,\n          (namedNode.node as unknown) as V,\n          color,\n          null,\n          childTree\n        )\n      );\n    };\n\n    const attachPennant = function (pennant: LLRBNode<K, V>) {\n      if (node) {\n        node.left = pennant;\n        node = pennant;\n      } else {\n        root = pennant;\n        node = pennant;\n      }\n    };\n\n    for (let i = 0; i < base12.count; ++i) {\n      const isOne = base12.nextBitIsOne();\n      // The number of nodes taken in each slice is 2^(arr.length - (i + 1))\n      const chunkSize = Math.pow(2, base12.count - (i + 1));\n      if (isOne) {\n        buildPennant(chunkSize, LLRBNode.BLACK);\n      } else {\n        // current == 2\n        buildPennant(chunkSize, LLRBNode.BLACK);\n        buildPennant(chunkSize, LLRBNode.RED);\n      }\n    }\n    return root;\n  };\n\n  const base12 = new Base12Num(childList.length);\n  const root = buildFrom12Array(base12);\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return new SortedMap<K, V>(mapSortFn || (cmp as any), root);\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { nameCompare } from '../util/util';\nimport { NamedNode } from './Node';\n\nexport function NAME_ONLY_COMPARATOR(left: NamedNode, right: NamedNode) {\n  return nameCompare(left.name, right.name);\n}\n\nexport function NAME_COMPARATOR(left: string, right: string) {\n  return nameCompare(left, right);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ChildrenNode } from './ChildrenNode';\nimport { LeafNode } from './LeafNode';\nimport { NamedNode, Node } from './Node';\nimport { contains, assert } from '@firebase/util';\n\nimport { buildChildSet } from './childSet';\nimport { NAME_COMPARATOR, NAME_ONLY_COMPARATOR } from './comparators';\nimport { IndexMap } from './IndexMap';\nimport { PRIORITY_INDEX, setNodeFromJSON } from './indexes/PriorityIndex';\nimport { SortedMap } from '../util/SortedMap';\nimport { each } from '../util/util';\nimport { Indexable } from '../util/misc';\n\nconst USE_HINZE = true;\n\n/**\n * Constructs a snapshot node representing the passed JSON and returns it.\n * @param {*} json JSON to create a node for.\n * @param {?string|?number=} priority Optional priority to use.  This will be ignored if the\n * passed JSON contains a .priority property.\n * @return {!Node}\n */\nexport function nodeFromJSON(\n  json: unknown | null,\n  priority: unknown = null\n): Node {\n  if (json === null) {\n    return ChildrenNode.EMPTY_NODE;\n  }\n\n  if (typeof json === 'object' && '.priority' in json) {\n    priority = json['.priority'];\n  }\n\n  assert(\n    priority === null ||\n      typeof priority === 'string' ||\n      typeof priority === 'number' ||\n      (typeof priority === 'object' && '.sv' in (priority as object)),\n    'Invalid priority type found: ' + typeof priority\n  );\n\n  if (typeof json === 'object' && '.value' in json && json['.value'] !== null) {\n    json = json['.value'];\n  }\n\n  // Valid leaf nodes include non-objects or server-value wrapper objects\n  if (typeof json !== 'object' || '.sv' in json) {\n    const jsonLeaf = json as string | number | boolean | Indexable;\n    return new LeafNode(jsonLeaf, nodeFromJSON(priority));\n  }\n\n  if (!(json instanceof Array) && USE_HINZE) {\n    const children: NamedNode[] = [];\n    let childrenHavePriority = false;\n    const hinzeJsonObj = json;\n    each(hinzeJsonObj, (key, child) => {\n      if (key.substring(0, 1) !== '.') {\n        // Ignore metadata nodes\n        const childNode = nodeFromJSON(child);\n        if (!childNode.isEmpty()) {\n          childrenHavePriority =\n            childrenHavePriority || !childNode.getPriority().isEmpty();\n          children.push(new NamedNode(key, childNode));\n        }\n      }\n    });\n\n    if (children.length === 0) {\n      return ChildrenNode.EMPTY_NODE;\n    }\n\n    const childSet = buildChildSet(\n      children,\n      NAME_ONLY_COMPARATOR,\n      namedNode => namedNode.name,\n      NAME_COMPARATOR\n    ) as SortedMap<string, Node>;\n    if (childrenHavePriority) {\n      const sortedChildSet = buildChildSet(\n        children,\n        PRIORITY_INDEX.getCompare()\n      );\n      return new ChildrenNode(\n        childSet,\n        nodeFromJSON(priority),\n        new IndexMap(\n          { '.priority': sortedChildSet },\n          { '.priority': PRIORITY_INDEX }\n        )\n      );\n    } else {\n      return new ChildrenNode(\n        childSet,\n        nodeFromJSON(priority),\n        IndexMap.Default\n      );\n    }\n  } else {\n    let node: Node = ChildrenNode.EMPTY_NODE;\n    each(json, (key: string, childData: unknown) => {\n      if (contains(json as object, key)) {\n        if (key.substring(0, 1) !== '.') {\n          // ignore metadata nodes.\n          const childNode = nodeFromJSON(childData);\n          if (childNode.isLeafNode() || !childNode.isEmpty()) {\n            node = node.updateImmediateChild(key, childNode);\n          }\n        }\n      }\n    });\n\n    return node.updatePriority(nodeFromJSON(priority));\n  }\n}\n\nsetNodeFromJSON(nodeFromJSON);\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Index } from './Index';\nimport { NamedNode, Node } from '../Node';\nimport { nameCompare } from '../../util/util';\nimport { nodeFromJSON } from '../nodeFromJSON';\n\n/**\n * @constructor\n * @extends {Index}\n * @private\n */\nexport class ValueIndex extends Index {\n  /**\n   * @inheritDoc\n   */\n  compare(a: NamedNode, b: NamedNode): number {\n    const indexCmp = a.node.compareTo(b.node);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  isDefinedOn(node: Node): boolean {\n    return true;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return !oldNode.equals(newNode);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  minPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  maxPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MAX;\n  }\n\n  /**\n   * @param {*} indexValue\n   * @param {string} name\n   * @return {!NamedNode}\n   */\n  makePost(indexValue: object, name: string): NamedNode {\n    const valueNode = nodeFromJSON(indexValue);\n    return new NamedNode(name, valueNode);\n  }\n\n  /**\n   * @return {!string} String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.value';\n  }\n}\n\nexport const VALUE_INDEX = new ValueIndex();\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  errorPrefix,\n  validateArgCount,\n  validateCallback,\n  validateContextObject,\n  Deferred\n} from '@firebase/util';\nimport { KEY_INDEX } from '../core/snap/indexes/KeyIndex';\nimport { PRIORITY_INDEX } from '../core/snap/indexes/PriorityIndex';\nimport { VALUE_INDEX } from '../core/snap/indexes/ValueIndex';\nimport { PathIndex } from '../core/snap/indexes/PathIndex';\nimport { MIN_NAME, MAX_NAME, ObjectToUniqueKey } from '../core/util/util';\nimport { Path } from '../core/util/Path';\nimport {\n  isValidPriority,\n  validateEventType,\n  validatePathString,\n  validateFirebaseDataArg,\n  validateKey\n} from '../core/util/validation';\n\nimport {\n  ValueEventRegistration,\n  ChildEventRegistration,\n  EventRegistration\n} from '../core/view/EventRegistration';\n\nimport { Repo } from '../core/Repo';\nimport { QueryParams } from '../core/view/QueryParams';\nimport { Reference } from './Reference';\nimport { DataSnapshot } from './DataSnapshot';\n\nlet __referenceConstructor: new (repo: Repo, path: Path) => Query;\n\nexport interface SnapshotCallback {\n  (a: DataSnapshot, b?: string | null): unknown;\n}\n\n/**\n * A Query represents a filter to be applied to a firebase location.  This object purely represents the\n * query expression (and exposes our public API to build the query).  The actual query logic is in ViewBase.js.\n *\n * Since every Firebase reference is a query, Firebase inherits from this object.\n */\nexport class Query {\n  static set __referenceConstructor(val) {\n    __referenceConstructor = val;\n  }\n\n  static get __referenceConstructor() {\n    assert(__referenceConstructor, 'Reference.ts has not been loaded');\n    return __referenceConstructor;\n  }\n\n  constructor(\n    public repo: Repo,\n    public path: Path,\n    private queryParams_: QueryParams,\n    private orderByCalled_: boolean\n  ) {}\n\n  /**\n   * Validates start/end values for queries.\n   * @param {!QueryParams} params\n   * @private\n   */\n  private static validateQueryEndpoints_(params: QueryParams) {\n    let startNode = null;\n    let endNode = null;\n    if (params.hasStart()) {\n      startNode = params.getIndexStartValue();\n    }\n    if (params.hasEnd()) {\n      endNode = params.getIndexEndValue();\n    }\n\n    if (params.getIndex() === KEY_INDEX) {\n      const tooManyArgsError =\n        'Query: When ordering by key, you may only pass one argument to ' +\n        'startAt(), endAt(), or equalTo().';\n      const wrongArgTypeError =\n        'Query: When ordering by key, the argument passed to startAt(), endAt(),' +\n        'or equalTo() must be a string.';\n      if (params.hasStart()) {\n        const startName = params.getIndexStartName();\n        if (startName !== MIN_NAME) {\n          throw new Error(tooManyArgsError);\n        } else if (typeof startNode !== 'string') {\n          throw new Error(wrongArgTypeError);\n        }\n      }\n      if (params.hasEnd()) {\n        const endName = params.getIndexEndName();\n        if (endName !== MAX_NAME) {\n          throw new Error(tooManyArgsError);\n        } else if (typeof endNode !== 'string') {\n          throw new Error(wrongArgTypeError);\n        }\n      }\n    } else if (params.getIndex() === PRIORITY_INDEX) {\n      if (\n        (startNode != null && !isValidPriority(startNode)) ||\n        (endNode != null && !isValidPriority(endNode))\n      ) {\n        throw new Error(\n          'Query: When ordering by priority, the first argument passed to startAt(), ' +\n            'endAt(), or equalTo() must be a valid priority value (null, a number, or a string).'\n        );\n      }\n    } else {\n      assert(\n        params.getIndex() instanceof PathIndex ||\n          params.getIndex() === VALUE_INDEX,\n        'unknown index type.'\n      );\n      if (\n        (startNode != null && typeof startNode === 'object') ||\n        (endNode != null && typeof endNode === 'object')\n      ) {\n        throw new Error(\n          'Query: First argument passed to startAt(), endAt(), or equalTo() cannot be ' +\n            'an object.'\n        );\n      }\n    }\n  }\n\n  /**\n   * Validates that limit* has been called with the correct combination of parameters\n   * @param {!QueryParams} params\n   * @private\n   */\n  private static validateLimit_(params: QueryParams) {\n    if (\n      params.hasStart() &&\n      params.hasEnd() &&\n      params.hasLimit() &&\n      !params.hasAnchoredLimit()\n    ) {\n      throw new Error(\n        \"Query: Can't combine startAt(), endAt(), and limit(). Use limitToFirst() or limitToLast() instead.\"\n      );\n    }\n  }\n\n  /**\n   * Validates that no other order by call has been made\n   * @param {!string} fnName\n   * @private\n   */\n  private validateNoPreviousOrderByCall_(fnName: string) {\n    if (this.orderByCalled_ === true) {\n      throw new Error(fnName + \": You can't combine multiple orderBy calls.\");\n    }\n  }\n\n  /**\n   * @return {!QueryParams}\n   */\n  getQueryParams(): QueryParams {\n    return this.queryParams_;\n  }\n\n  /**\n   * @return {!Reference}\n   */\n  getRef(): Reference {\n    validateArgCount('Query.ref', 0, 0, arguments.length);\n    // This is a slight hack. We cannot goog.require('fb.api.Firebase'), since Firebase requires fb.api.Query.\n    // However, we will always export 'Firebase' to the global namespace, so it's guaranteed to exist by the time this\n    // method gets called.\n    return new Query.__referenceConstructor(this.repo, this.path) as Reference;\n  }\n\n  /**\n   * @param {!string} eventType\n   * @param {!function(DataSnapshot, string=)} callback\n   * @param {(function(Error)|Object)=} cancelCallbackOrContext\n   * @param {Object=} context\n   * @return {!function(DataSnapshot, string=)}\n   */\n  on(\n    eventType: string,\n    callback: SnapshotCallback,\n    cancelCallbackOrContext?: ((a: Error) => unknown) | object | null,\n    context?: object | null\n  ): SnapshotCallback {\n    validateArgCount('Query.on', 2, 4, arguments.length);\n    validateEventType('Query.on', 1, eventType, false);\n    validateCallback('Query.on', 2, callback, false);\n\n    const ret = Query.getCancelAndContextArgs_(\n      'Query.on',\n      cancelCallbackOrContext,\n      context\n    );\n\n    if (eventType === 'value') {\n      this.onValueEvent(callback, ret.cancel, ret.context);\n    } else {\n      const callbacks: { [k: string]: typeof callback } = {};\n      callbacks[eventType] = callback;\n      this.onChildEvent(callbacks, ret.cancel, ret.context);\n    }\n    return callback;\n  }\n\n  /**\n   * @param {!function(!DataSnapshot)} callback\n   * @param {?function(Error)} cancelCallback\n   * @param {?Object} context\n   * @protected\n   */\n  protected onValueEvent(\n    callback: (a: DataSnapshot) => void,\n    cancelCallback: ((a: Error) => void) | null,\n    context: object | null\n  ) {\n    const container = new ValueEventRegistration(\n      callback,\n      cancelCallback || null,\n      context || null\n    );\n    this.repo.addEventCallbackForQuery(this, container);\n  }\n\n  /**\n   * @param {!Object.<string, !function(!DataSnapshot, ?string)>} callbacks\n   * @param {?function(Error)} cancelCallback\n   * @param {?Object} context\n   * @protected\n   */\n  onChildEvent(\n    callbacks: { [k: string]: SnapshotCallback },\n    cancelCallback: ((a: Error) => unknown) | null,\n    context: object | null\n  ) {\n    const container = new ChildEventRegistration(\n      callbacks,\n      cancelCallback,\n      context\n    );\n    this.repo.addEventCallbackForQuery(this, container);\n  }\n\n  /**\n   * @param {string=} eventType\n   * @param {(function(!DataSnapshot, ?string=))=} callback\n   * @param {Object=} context\n   */\n  off(\n    eventType?: string,\n    callback?: SnapshotCallback,\n    context?: object | null\n  ): void {\n    validateArgCount('Query.off', 0, 3, arguments.length);\n    validateEventType('Query.off', 1, eventType, true);\n    validateCallback('Query.off', 2, callback, true);\n    validateContextObject('Query.off', 3, context, true);\n\n    let container: EventRegistration | null = null;\n    let callbacks: { [k: string]: typeof callback } | null = null;\n    if (eventType === 'value') {\n      const valueCallback = callback || null;\n      container = new ValueEventRegistration(\n        valueCallback,\n        null,\n        context || null\n      );\n    } else if (eventType) {\n      if (callback) {\n        callbacks = {};\n        callbacks[eventType] = callback;\n      }\n      container = new ChildEventRegistration(callbacks, null, context || null);\n    }\n    this.repo.removeEventCallbackForQuery(this, container);\n  }\n\n  /**\n   * Attaches a listener, waits for the first event, and then removes the listener\n   * @param {!string} eventType\n   * @param {!function(!DataSnapshot, string=)} userCallback\n   * @param failureCallbackOrContext\n   * @param context\n   * @return {!firebase.Promise}\n   */\n  once(\n    eventType: string,\n    userCallback?: SnapshotCallback,\n    failureCallbackOrContext?: ((a: Error) => void) | object | null,\n    context?: object | null\n  ): Promise<DataSnapshot> {\n    validateArgCount('Query.once', 1, 4, arguments.length);\n    validateEventType('Query.once', 1, eventType, false);\n    validateCallback('Query.once', 2, userCallback, true);\n\n    const ret = Query.getCancelAndContextArgs_(\n      'Query.once',\n      failureCallbackOrContext,\n      context\n    );\n\n    // TODO: Implement this more efficiently (in particular, use 'get' wire protocol for 'value' event)\n    // TODO: consider actually wiring the callbacks into the promise. We cannot do this without a breaking change\n    // because the API currently expects callbacks will be called synchronously if the data is cached, but this is\n    // against the Promise specification.\n    let firstCall = true;\n    const deferred = new Deferred<DataSnapshot>();\n\n    // A dummy error handler in case a user wasn't expecting promises\n    deferred.promise.catch(() => {});\n\n    const onceCallback = (snapshot: DataSnapshot) => {\n      // NOTE: Even though we unsubscribe, we may get called multiple times if a single action (e.g. set() with JSON)\n      // triggers multiple events (e.g. child_added or child_changed).\n      if (firstCall) {\n        firstCall = false;\n        this.off(eventType, onceCallback);\n\n        if (userCallback) {\n          userCallback.bind(ret.context)(snapshot);\n        }\n        deferred.resolve(snapshot);\n      }\n    };\n\n    this.on(\n      eventType,\n      onceCallback,\n      /*cancel=*/ err => {\n        this.off(eventType, onceCallback);\n\n        if (ret.cancel) {\n          ret.cancel.bind(ret.context)(err);\n        }\n        deferred.reject(err);\n      }\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * Set a limit and anchor it to the start of the window.\n   * @param {!number} limit\n   * @return {!Query}\n   */\n  limitToFirst(limit: number): Query {\n    validateArgCount('Query.limitToFirst', 1, 1, arguments.length);\n    if (\n      typeof limit !== 'number' ||\n      Math.floor(limit) !== limit ||\n      limit <= 0\n    ) {\n      throw new Error(\n        'Query.limitToFirst: First argument must be a positive integer.'\n      );\n    }\n    if (this.queryParams_.hasLimit()) {\n      throw new Error(\n        'Query.limitToFirst: Limit was already set (by another call to limit, ' +\n          'limitToFirst, or limitToLast).'\n      );\n    }\n\n    return new Query(\n      this.repo,\n      this.path,\n      this.queryParams_.limitToFirst(limit),\n      this.orderByCalled_\n    );\n  }\n\n  /**\n   * Set a limit and anchor it to the end of the window.\n   * @param {!number} limit\n   * @return {!Query}\n   */\n  limitToLast(limit: number): Query {\n    validateArgCount('Query.limitToLast', 1, 1, arguments.length);\n    if (\n      typeof limit !== 'number' ||\n      Math.floor(limit) !== limit ||\n      limit <= 0\n    ) {\n      throw new Error(\n        'Query.limitToLast: First argument must be a positive integer.'\n      );\n    }\n    if (this.queryParams_.hasLimit()) {\n      throw new Error(\n        'Query.limitToLast: Limit was already set (by another call to limit, ' +\n          'limitToFirst, or limitToLast).'\n      );\n    }\n\n    return new Query(\n      this.repo,\n      this.path,\n      this.queryParams_.limitToLast(limit),\n      this.orderByCalled_\n    );\n  }\n\n  /**\n   * Given a child path, return a new query ordered by the specified grandchild path.\n   * @param {!string} path\n   * @return {!Query}\n   */\n  orderByChild(path: string): Query {\n    validateArgCount('Query.orderByChild', 1, 1, arguments.length);\n    if (path === '$key') {\n      throw new Error(\n        'Query.orderByChild: \"$key\" is invalid.  Use Query.orderByKey() instead.'\n      );\n    } else if (path === '$priority') {\n      throw new Error(\n        'Query.orderByChild: \"$priority\" is invalid.  Use Query.orderByPriority() instead.'\n      );\n    } else if (path === '$value') {\n      throw new Error(\n        'Query.orderByChild: \"$value\" is invalid.  Use Query.orderByValue() instead.'\n      );\n    }\n    validatePathString('Query.orderByChild', 1, path, false);\n    this.validateNoPreviousOrderByCall_('Query.orderByChild');\n    const parsedPath = new Path(path);\n    if (parsedPath.isEmpty()) {\n      throw new Error(\n        'Query.orderByChild: cannot pass in empty path.  Use Query.orderByValue() instead.'\n      );\n    }\n    const index = new PathIndex(parsedPath);\n    const newParams = this.queryParams_.orderBy(index);\n    Query.validateQueryEndpoints_(newParams);\n\n    return new Query(this.repo, this.path, newParams, /*orderByCalled=*/ true);\n  }\n\n  /**\n   * Return a new query ordered by the KeyIndex\n   * @return {!Query}\n   */\n  orderByKey(): Query {\n    validateArgCount('Query.orderByKey', 0, 0, arguments.length);\n    this.validateNoPreviousOrderByCall_('Query.orderByKey');\n    const newParams = this.queryParams_.orderBy(KEY_INDEX);\n    Query.validateQueryEndpoints_(newParams);\n    return new Query(this.repo, this.path, newParams, /*orderByCalled=*/ true);\n  }\n\n  /**\n   * Return a new query ordered by the PriorityIndex\n   * @return {!Query}\n   */\n  orderByPriority(): Query {\n    validateArgCount('Query.orderByPriority', 0, 0, arguments.length);\n    this.validateNoPreviousOrderByCall_('Query.orderByPriority');\n    const newParams = this.queryParams_.orderBy(PRIORITY_INDEX);\n    Query.validateQueryEndpoints_(newParams);\n    return new Query(this.repo, this.path, newParams, /*orderByCalled=*/ true);\n  }\n\n  /**\n   * Return a new query ordered by the ValueIndex\n   * @return {!Query}\n   */\n  orderByValue(): Query {\n    validateArgCount('Query.orderByValue', 0, 0, arguments.length);\n    this.validateNoPreviousOrderByCall_('Query.orderByValue');\n    const newParams = this.queryParams_.orderBy(VALUE_INDEX);\n    Query.validateQueryEndpoints_(newParams);\n    return new Query(this.repo, this.path, newParams, /*orderByCalled=*/ true);\n  }\n\n  /**\n   * @param {number|string|boolean|null} value\n   * @param {?string=} name\n   * @return {!Query}\n   */\n  startAt(\n    value: number | string | boolean | null = null,\n    name?: string | null\n  ): Query {\n    validateArgCount('Query.startAt', 0, 2, arguments.length);\n    validateFirebaseDataArg('Query.startAt', 1, value, this.path, true);\n    validateKey('Query.startAt', 2, name, true);\n\n    const newParams = this.queryParams_.startAt(value, name);\n    Query.validateLimit_(newParams);\n    Query.validateQueryEndpoints_(newParams);\n    if (this.queryParams_.hasStart()) {\n      throw new Error(\n        'Query.startAt: Starting point was already set (by another call to startAt ' +\n          'or equalTo).'\n      );\n    }\n\n    // Calling with no params tells us to start at the beginning.\n    if (value === undefined) {\n      value = null;\n      name = null;\n    }\n    return new Query(this.repo, this.path, newParams, this.orderByCalled_);\n  }\n\n  /**\n   * @param {number|string|boolean|null} value\n   * @param {?string=} name\n   * @return {!Query}\n   */\n  endAt(\n    value: number | string | boolean | null = null,\n    name?: string | null\n  ): Query {\n    validateArgCount('Query.endAt', 0, 2, arguments.length);\n    validateFirebaseDataArg('Query.endAt', 1, value, this.path, true);\n    validateKey('Query.endAt', 2, name, true);\n\n    const newParams = this.queryParams_.endAt(value, name);\n    Query.validateLimit_(newParams);\n    Query.validateQueryEndpoints_(newParams);\n    if (this.queryParams_.hasEnd()) {\n      throw new Error(\n        'Query.endAt: Ending point was already set (by another call to endAt or ' +\n          'equalTo).'\n      );\n    }\n\n    return new Query(this.repo, this.path, newParams, this.orderByCalled_);\n  }\n\n  /**\n   * Load the selection of children with exactly the specified value, and, optionally,\n   * the specified name.\n   * @param {number|string|boolean|null} value\n   * @param {string=} name\n   * @return {!Query}\n   */\n  equalTo(value: number | string | boolean | null, name?: string) {\n    validateArgCount('Query.equalTo', 1, 2, arguments.length);\n    validateFirebaseDataArg('Query.equalTo', 1, value, this.path, false);\n    validateKey('Query.equalTo', 2, name, true);\n    if (this.queryParams_.hasStart()) {\n      throw new Error(\n        'Query.equalTo: Starting point was already set (by another call to startAt or ' +\n          'equalTo).'\n      );\n    }\n    if (this.queryParams_.hasEnd()) {\n      throw new Error(\n        'Query.equalTo: Ending point was already set (by another call to endAt or ' +\n          'equalTo).'\n      );\n    }\n    return this.startAt(value, name).endAt(value, name);\n  }\n\n  /**\n   * @return {!string} URL for this location.\n   */\n  toString(): string {\n    validateArgCount('Query.toString', 0, 0, arguments.length);\n\n    return this.repo.toString() + this.path.toUrlEncodedString();\n  }\n\n  // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\n  // for end-users.\n  toJSON() {\n    // An optional spacer argument is unnecessary for a string.\n    validateArgCount('Query.toJSON', 0, 1, arguments.length);\n    return this.toString();\n  }\n\n  /**\n   * An object representation of the query parameters used by this Query.\n   * @return {!Object}\n   */\n  queryObject(): object {\n    return this.queryParams_.getQueryObject();\n  }\n\n  /**\n   * @return {!string}\n   */\n  queryIdentifier(): string {\n    const obj = this.queryObject();\n    const id = ObjectToUniqueKey(obj);\n    return id === '{}' ? 'default' : id;\n  }\n\n  /**\n   * Return true if this query and the provided query are equivalent; otherwise, return false.\n   * @param {Query} other\n   * @return {boolean}\n   */\n  isEqual(other: Query): boolean {\n    validateArgCount('Query.isEqual', 1, 1, arguments.length);\n    if (!(other instanceof Query)) {\n      const error =\n        'Query.isEqual failed: First argument must be an instance of firebase.database.Query.';\n      throw new Error(error);\n    }\n\n    const sameRepo = this.repo === other.repo;\n    const samePath = this.path.equals(other.path);\n    const sameQueryIdentifier =\n      this.queryIdentifier() === other.queryIdentifier();\n\n    return sameRepo && samePath && sameQueryIdentifier;\n  }\n\n  /**\n   * Helper used by .on and .once to extract the context and or cancel arguments.\n   * @param {!string} fnName The function name (on or once)\n   * @param {(function(Error)|Object)=} cancelOrContext\n   * @param {Object=} context\n   * @return {{cancel: ?function(Error), context: ?Object}}\n   * @private\n   */\n  private static getCancelAndContextArgs_(\n    fnName: string,\n    cancelOrContext?: ((a: Error) => void) | object | null,\n    context?: object | null\n  ): { cancel: ((a: Error) => void) | null; context: object | null } {\n    const ret: {\n      cancel: ((a: Error) => void) | null;\n      context: object | null;\n    } = { cancel: null, context: null };\n    if (cancelOrContext && context) {\n      ret.cancel = cancelOrContext as (a: Error) => void;\n      validateCallback(fnName, 3, ret.cancel, true);\n\n      ret.context = context;\n      validateContextObject(fnName, 4, ret.context, true);\n    } else if (cancelOrContext) {\n      // we have either a cancel callback or a context.\n      if (typeof cancelOrContext === 'object' && cancelOrContext !== null) {\n        // it's a context!\n        ret.context = cancelOrContext;\n      } else if (typeof cancelOrContext === 'function') {\n        ret.cancel = cancelOrContext as (a: Error) => void;\n      } else {\n        throw new Error(\n          errorPrefix(fnName, 3, true) +\n            ' must either be a cancel callback or a context object.'\n        );\n      }\n    }\n    return ret;\n  }\n\n  get ref(): Reference {\n    return this.getRef();\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { nameCompare, MAX_NAME } from '../../util/util';\nimport { Index } from './Index';\nimport { ChildrenNode, MAX_NODE } from '../ChildrenNode';\nimport { NamedNode, Node } from '../Node';\nimport { nodeFromJSON } from '../nodeFromJSON';\nimport { Path } from '../../util/Path';\n\n/**\n * @param {!Path} indexPath\n * @constructor\n * @extends {Index}\n */\nexport class PathIndex extends Index {\n  constructor(private indexPath_: Path) {\n    super();\n\n    assert(\n      !indexPath_.isEmpty() && indexPath_.getFront() !== '.priority',\n      \"Can't create PathIndex with empty path or .priority key\"\n    );\n  }\n\n  /**\n   * @param {!Node} snap\n   * @return {!Node}\n   * @protected\n   */\n  protected extractChild(snap: Node): Node {\n    return snap.getChild(this.indexPath_);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  isDefinedOn(node: Node): boolean {\n    return !node.getChild(this.indexPath_).isEmpty();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  compare(a: NamedNode, b: NamedNode): number {\n    const aChild = this.extractChild(a.node);\n    const bChild = this.extractChild(b.node);\n    const indexCmp = aChild.compareTo(bChild);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  makePost(indexValue: object, name: string): NamedNode {\n    const valueNode = nodeFromJSON(indexValue);\n    const node = ChildrenNode.EMPTY_NODE.updateChild(\n      this.indexPath_,\n      valueNode\n    );\n    return new NamedNode(name, node);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  maxPost(): NamedNode {\n    const node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, MAX_NODE);\n    return new NamedNode(MAX_NAME, node);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  toString(): string {\n    return this.indexPath_.slice().join('/');\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { validateArgCount, validateCallback } from '@firebase/util';\nimport { validatePathString } from '../core/util/validation';\nimport { Path } from '../core/util/Path';\nimport { PRIORITY_INDEX } from '../core/snap/indexes/PriorityIndex';\nimport { Node } from '../core/snap/Node';\nimport { Reference } from './Reference';\nimport { Index } from '../core/snap/indexes/Index';\nimport { ChildrenNode } from '../core/snap/ChildrenNode';\n\n/**\n * Class representing a firebase data snapshot.  It wraps a SnapshotNode and\n * surfaces the public methods (val, forEach, etc.) we want to expose.\n */\nexport class DataSnapshot {\n  /**\n   * @param {!Node} node_ A SnapshotNode to wrap.\n   * @param {!Reference} ref_ The ref of the location this snapshot came from.\n   * @param {!Index} index_ The iteration order for this snapshot\n   */\n  constructor(\n    private readonly node_: Node,\n    private readonly ref_: Reference,\n    private readonly index_: Index\n  ) {}\n\n  /**\n   * Retrieves the snapshot contents as JSON.  Returns null if the snapshot is\n   * empty.\n   *\n   * @return {*} JSON representation of the DataSnapshot contents, or null if empty.\n   */\n  val(): unknown {\n    validateArgCount('DataSnapshot.val', 0, 0, arguments.length);\n    return this.node_.val();\n  }\n\n  /**\n   * Returns the snapshot contents as JSON, including priorities of node.  Suitable for exporting\n   * the entire node contents.\n   * @return {*} JSON representation of the DataSnapshot contents, or null if empty.\n   */\n  exportVal(): unknown {\n    validateArgCount('DataSnapshot.exportVal', 0, 0, arguments.length);\n    return this.node_.val(true);\n  }\n\n  // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\n  // for end-users\n  toJSON(): unknown {\n    // Optional spacer argument is unnecessary because we're depending on recursion rather than stringifying the content\n    validateArgCount('DataSnapshot.toJSON', 0, 1, arguments.length);\n    return this.exportVal();\n  }\n\n  /**\n   * Returns whether the snapshot contains a non-null value.\n   *\n   * @return {boolean} Whether the snapshot contains a non-null value, or is empty.\n   */\n  exists(): boolean {\n    validateArgCount('DataSnapshot.exists', 0, 0, arguments.length);\n    return !this.node_.isEmpty();\n  }\n\n  /**\n   * Returns a DataSnapshot of the specified child node's contents.\n   *\n   * @param {!string} childPathString Path to a child.\n   * @return {!DataSnapshot} DataSnapshot for child node.\n   */\n  child(childPathString: string): DataSnapshot {\n    validateArgCount('DataSnapshot.child', 0, 1, arguments.length);\n    // Ensure the childPath is a string (can be a number)\n    childPathString = String(childPathString);\n    validatePathString('DataSnapshot.child', 1, childPathString, false);\n\n    const childPath = new Path(childPathString);\n    const childRef = this.ref_.child(childPath);\n    return new DataSnapshot(\n      this.node_.getChild(childPath),\n      childRef,\n      PRIORITY_INDEX\n    );\n  }\n\n  /**\n   * Returns whether the snapshot contains a child at the specified path.\n   *\n   * @param {!string} childPathString Path to a child.\n   * @return {boolean} Whether the child exists.\n   */\n  hasChild(childPathString: string): boolean {\n    validateArgCount('DataSnapshot.hasChild', 1, 1, arguments.length);\n    validatePathString('DataSnapshot.hasChild', 1, childPathString, false);\n\n    const childPath = new Path(childPathString);\n    return !this.node_.getChild(childPath).isEmpty();\n  }\n\n  /**\n   * Returns the priority of the object, or null if no priority was set.\n   *\n   * @return {string|number|null} The priority.\n   */\n  getPriority(): string | number | null {\n    validateArgCount('DataSnapshot.getPriority', 0, 0, arguments.length);\n\n    // typecast here because we never return deferred values or internal priorities (MAX_PRIORITY)\n    return this.node_.getPriority().val() as string | number | null;\n  }\n\n  /**\n   * Iterates through child nodes and calls the specified action for each one.\n   *\n   * @param {function(!DataSnapshot)} action Callback function to be called\n   * for each child.\n   * @return {boolean} True if forEach was canceled by action returning true for\n   * one of the child nodes.\n   */\n  forEach(action: (d: DataSnapshot) => boolean | void): boolean {\n    validateArgCount('DataSnapshot.forEach', 1, 1, arguments.length);\n    validateCallback('DataSnapshot.forEach', 1, action, false);\n\n    if (this.node_.isLeafNode()) {\n      return false;\n    }\n\n    const childrenNode = this.node_ as ChildrenNode;\n    // Sanitize the return value to a boolean. ChildrenNode.forEachChild has a weird return type...\n    return !!childrenNode.forEachChild(this.index_, (key, node) => {\n      return action(\n        new DataSnapshot(node, this.ref_.child(key), PRIORITY_INDEX)\n      );\n    });\n  }\n\n  /**\n   * Returns whether this DataSnapshot has children.\n   * @return {boolean} True if the DataSnapshot contains 1 or more child nodes.\n   */\n  hasChildren(): boolean {\n    validateArgCount('DataSnapshot.hasChildren', 0, 0, arguments.length);\n\n    if (this.node_.isLeafNode()) {\n      return false;\n    } else {\n      return !this.node_.isEmpty();\n    }\n  }\n\n  get key() {\n    return this.ref_.getKey();\n  }\n\n  /**\n   * Returns the number of children for this DataSnapshot.\n   * @return {number} The number of children that this DataSnapshot contains.\n   */\n  numChildren(): number {\n    validateArgCount('DataSnapshot.numChildren', 0, 0, arguments.length);\n\n    return this.node_.numChildren();\n  }\n\n  /**\n   * @return {Reference} The Firebase reference for the location this snapshot's data came from.\n   */\n  getRef(): Reference {\n    validateArgCount('DataSnapshot.ref', 0, 0, arguments.length);\n\n    return this.ref_;\n  }\n\n  get ref() {\n    return this.getRef();\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { stringify } from '@firebase/util';\nimport { Path } from '../util/Path';\nimport { EventRegistration } from './EventRegistration';\nimport { DataSnapshot } from '../../api/DataSnapshot';\n\n/**\n * Encapsulates the data needed to raise an event\n * @interface\n */\nexport interface Event {\n  /**\n   * @return {!Path}\n   */\n  getPath(): Path;\n\n  /**\n   * @return {!string}\n   */\n  getEventType(): string;\n\n  /**\n   * @return {!function()}\n   */\n  getEventRunner(): () => void;\n\n  /**\n   * @return {!string}\n   */\n  toString(): string;\n}\n\nexport type EventType =\n  | 'value'\n  | ' child_added'\n  | ' child_changed'\n  | ' child_moved'\n  | ' child_removed';\n\n/**\n * Encapsulates the data needed to raise an event\n * @implements {Event}\n */\nexport class DataEvent implements Event {\n  /**\n   * @param {!string} eventType One of: value, child_added, child_changed, child_moved, child_removed\n   * @param {!EventRegistration} eventRegistration The function to call to with the event data. User provided\n   * @param {!DataSnapshot} snapshot The data backing the event\n   * @param {?string=} prevName Optional, the name of the previous child for child_* events.\n   */\n  constructor(\n    public eventType: EventType,\n    public eventRegistration: EventRegistration,\n    public snapshot: DataSnapshot,\n    public prevName?: string | null\n  ) {}\n\n  /**\n   * @inheritDoc\n   */\n  getPath(): Path {\n    const ref = this.snapshot.getRef();\n    if (this.eventType === 'value') {\n      return ref.path;\n    } else {\n      return ref.getParent().path;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getEventType(): string {\n    return this.eventType;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getEventRunner(): () => void {\n    return this.eventRegistration.getEventRunner(this);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  toString(): string {\n    return (\n      this.getPath().toString() +\n      ':' +\n      this.eventType +\n      ':' +\n      stringify(this.snapshot.exportVal())\n    );\n  }\n}\n\nexport class CancelEvent implements Event {\n  /**\n   * @param {EventRegistration} eventRegistration\n   * @param {Error} error\n   * @param {!Path} path\n   */\n  constructor(\n    public eventRegistration: EventRegistration,\n    public error: Error,\n    public path: Path\n  ) {}\n\n  /**\n   * @inheritDoc\n   */\n  getPath(): Path {\n    return this.path;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getEventType(): string {\n    return 'cancel';\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getEventRunner(): () => void {\n    return this.eventRegistration.getEventRunner(this);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  toString(): string {\n    return this.path.toString() + ':cancel';\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DataSnapshot } from '../../api/DataSnapshot';\nimport { DataEvent, CancelEvent, Event, EventType } from './Event';\nimport { contains, assert } from '@firebase/util';\n\nimport { Path } from '../util/Path';\nimport { Change } from './Change';\nimport { Query } from '../../api/Query';\n\n/**\n * An EventRegistration is basically an event type ('value', 'child_added', etc.) and a callback\n * to be notified of that type of event.\n *\n * That said, it can also contain a cancel callback to be notified if the event is canceled.  And\n * currently, this code is organized around the idea that you would register multiple child_ callbacks\n * together, as a single EventRegistration.  Though currently we don't do that.\n */\nexport interface EventRegistration {\n  /**\n   * True if this container has a callback to trigger for this event type\n   * @param {!string} eventType\n   * @return {boolean}\n   */\n  respondsTo(eventType: string): boolean;\n\n  /**\n   * @param {!Change} change\n   * @param {!Query} query\n   * @return {!Event}\n   */\n  createEvent(change: Change, query: Query): Event;\n\n  /**\n   * Given event data, return a function to trigger the user's callback\n   * @param {!Event} eventData\n   * @return {function()}\n   */\n  getEventRunner(eventData: Event): () => void;\n\n  /**\n   * @param {!Error} error\n   * @param {!Path} path\n   * @return {?CancelEvent}\n   */\n  createCancelEvent(error: Error, path: Path): CancelEvent | null;\n\n  /**\n   * @param {!EventRegistration} other\n   * @return {boolean}\n   */\n  matches(other: EventRegistration): boolean;\n\n  /**\n   * False basically means this is a \"dummy\" callback container being used as a sentinel\n   * to remove all callback containers of a particular type.  (e.g. if the user does\n   * ref.off('value') without specifying a specific callback).\n   *\n   * (TODO: Rework this, since it's hacky)\n   *\n   * @return {boolean}\n   */\n  hasAnyCallback(): boolean;\n}\n\n/**\n * Represents registration for 'value' events.\n */\nexport class ValueEventRegistration implements EventRegistration {\n  /**\n   * @param {?function(!DataSnapshot)} callback_\n   * @param {?function(Error)} cancelCallback_\n   * @param {?Object} context_\n   */\n  constructor(\n    private callback_: ((d: DataSnapshot) => void) | null,\n    private cancelCallback_: ((e: Error) => void) | null,\n    private context_: {} | null\n  ) {}\n\n  /**\n   * @inheritDoc\n   */\n  respondsTo(eventType: string): boolean {\n    return eventType === 'value';\n  }\n\n  /**\n   * @inheritDoc\n   */\n  createEvent(change: Change, query: Query): DataEvent {\n    const index = query.getQueryParams().getIndex();\n    return new DataEvent(\n      'value',\n      this,\n      new DataSnapshot(change.snapshotNode, query.getRef(), index)\n    );\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getEventRunner(eventData: CancelEvent | DataEvent): () => void {\n    const ctx = this.context_;\n    if (eventData.getEventType() === 'cancel') {\n      assert(\n        this.cancelCallback_,\n        'Raising a cancel event on a listener with no cancel callback'\n      );\n      const cancelCB = this.cancelCallback_;\n      return function () {\n        // We know that error exists, we checked above that this is a cancel event\n        cancelCB.call(ctx, (eventData as CancelEvent).error);\n      };\n    } else {\n      const cb = this.callback_;\n      return function () {\n        cb.call(ctx, (eventData as DataEvent).snapshot);\n      };\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  createCancelEvent(error: Error, path: Path): CancelEvent | null {\n    if (this.cancelCallback_) {\n      return new CancelEvent(this, error, path);\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  matches(other: EventRegistration): boolean {\n    if (!(other instanceof ValueEventRegistration)) {\n      return false;\n    } else if (!other.callback_ || !this.callback_) {\n      // If no callback specified, we consider it to match any callback.\n      return true;\n    } else {\n      return (\n        other.callback_ === this.callback_ && other.context_ === this.context_\n      );\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  hasAnyCallback(): boolean {\n    return this.callback_ !== null;\n  }\n}\n\n/**\n * Represents the registration of 1 or more child_xxx events.\n *\n * Currently, it is always exactly 1 child_xxx event, but the idea is we might let you\n * register a group of callbacks together in the future.\n *\n * @constructor\n * @implements {EventRegistration}\n */\nexport class ChildEventRegistration implements EventRegistration {\n  /**\n   * @param {?Object.<string, function(!DataSnapshot, ?string=)>} callbacks_\n   * @param {?function(Error)} cancelCallback_\n   * @param {Object=} context_\n   */\n  constructor(\n    private callbacks_: {\n      [k: string]: (d: DataSnapshot, s?: string | null) => void;\n    } | null,\n    private cancelCallback_: ((e: Error) => void) | null,\n    private context_?: {}\n  ) {}\n\n  /**\n   * @inheritDoc\n   */\n  respondsTo(eventType: string): boolean {\n    let eventToCheck =\n      eventType === 'children_added' ? 'child_added' : eventType;\n    eventToCheck =\n      eventToCheck === 'children_removed' ? 'child_removed' : eventToCheck;\n    return contains(this.callbacks_, eventToCheck);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  createCancelEvent(error: Error, path: Path): CancelEvent | null {\n    if (this.cancelCallback_) {\n      return new CancelEvent(this, error, path);\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  createEvent(change: Change, query: Query): DataEvent {\n    assert(change.childName != null, 'Child events should have a childName.');\n    const ref = query.getRef().child(/** @type {!string} */ change.childName);\n    const index = query.getQueryParams().getIndex();\n    return new DataEvent(\n      change.type as EventType,\n      this,\n      new DataSnapshot(change.snapshotNode, ref, index),\n      change.prevName\n    );\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getEventRunner(eventData: CancelEvent | DataEvent): () => void {\n    const ctx = this.context_;\n    if (eventData.getEventType() === 'cancel') {\n      assert(\n        this.cancelCallback_,\n        'Raising a cancel event on a listener with no cancel callback'\n      );\n      const cancelCB = this.cancelCallback_;\n      return function () {\n        // We know that error exists, we checked above that this is a cancel event\n        cancelCB.call(ctx, (eventData as CancelEvent).error);\n      };\n    } else {\n      const cb = this.callbacks_[(eventData as DataEvent).eventType];\n      return function () {\n        cb.call(\n          ctx,\n          (eventData as DataEvent).snapshot,\n          (eventData as DataEvent).prevName\n        );\n      };\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  matches(other: EventRegistration): boolean {\n    if (other instanceof ChildEventRegistration) {\n      if (!this.callbacks_ || !other.callbacks_) {\n        return true;\n      } else if (this.context_ === other.context_) {\n        const otherKeys = Object.keys(other.callbacks_);\n        const thisKeys = Object.keys(this.callbacks_);\n        const otherCount = otherKeys.length;\n        const thisCount = thisKeys.length;\n        if (otherCount === thisCount) {\n          // If count is 1, do an exact match on eventType, if either is defined but null, it's a match.\n          // If event types don't match, not a match\n          // If count is not 1, exact match across all\n\n          if (otherCount === 1) {\n            const otherKey = otherKeys[0];\n            const thisKey = thisKeys[0];\n            return (\n              thisKey === otherKey &&\n              (!other.callbacks_[otherKey] ||\n                !this.callbacks_[thisKey] ||\n                other.callbacks_[otherKey] === this.callbacks_[thisKey])\n            );\n          } else {\n            // Exact match on each key.\n            return thisKeys.every(\n              eventType =>\n                other.callbacks_[eventType] === this.callbacks_[eventType]\n            );\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  hasAnyCallback(): boolean {\n    return this.callbacks_ !== null;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { Path } from './Path';\nimport { SparseSnapshotTree } from '../SparseSnapshotTree';\nimport { LeafNode } from '../snap/LeafNode';\nimport { nodeFromJSON } from '../snap/nodeFromJSON';\nimport { PRIORITY_INDEX } from '../snap/indexes/PriorityIndex';\nimport { Node } from '../snap/Node';\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { SyncTree } from '../SyncTree';\nimport { Indexable } from './misc';\n\n/* It's critical for performance that we do not calculate actual values from a SyncTree\n * unless and until the value is needed. Because we expose both a SyncTree and Node\n * version of deferred value resolution, we ned a wrapper class that will let us share\n * code.\n *\n * @see https://github.com/firebase/firebase-js-sdk/issues/2487\n */\ninterface ValueProvider {\n  getImmediateChild(childName: string): ValueProvider;\n  node(): Node;\n}\n\nclass ExistingValueProvider implements ValueProvider {\n  constructor(readonly node_: Node) {}\n\n  getImmediateChild(childName: string): ValueProvider {\n    const child = this.node_.getImmediateChild(childName);\n    return new ExistingValueProvider(child);\n  }\n\n  node(): Node {\n    return this.node_;\n  }\n}\n\nclass DeferredValueProvider implements ValueProvider {\n  private syncTree_: SyncTree;\n  private path_: Path;\n\n  constructor(syncTree: SyncTree, path: Path) {\n    this.syncTree_ = syncTree;\n    this.path_ = path;\n  }\n\n  getImmediateChild(childName: string): ValueProvider {\n    const childPath = this.path_.child(childName);\n    return new DeferredValueProvider(this.syncTree_, childPath);\n  }\n\n  node(): Node {\n    return this.syncTree_.calcCompleteEventCache(this.path_);\n  }\n}\n\n/**\n * Generate placeholders for deferred values.\n * @param {?Object} values\n * @return {!Object}\n */\nexport const generateWithValues = function (\n  values: {\n    [k: string]: unknown;\n  } | null\n): { [k: string]: unknown } {\n  values = values || {};\n  values['timestamp'] = values['timestamp'] || new Date().getTime();\n  return values;\n};\n\n/**\n * Value to use when firing local events. When writing server values, fire\n * local events with an approximate value, otherwise return value as-is.\n * @param {(Object|string|number|boolean)} value\n * @param {!Object} serverValues\n * @return {!(string|number|boolean)}\n */\nexport const resolveDeferredLeafValue = function (\n  value: { [k: string]: unknown } | string | number | boolean,\n  existingVal: ValueProvider,\n  serverValues: { [k: string]: unknown }\n): string | number | boolean {\n  if (!value || typeof value !== 'object') {\n    return value as string | number | boolean;\n  }\n  assert('.sv' in value, 'Unexpected leaf node or priority contents');\n\n  if (typeof value['.sv'] === 'string') {\n    return resolveScalarDeferredValue(value['.sv'], existingVal, serverValues);\n  } else if (typeof value['.sv'] === 'object') {\n    return resolveComplexDeferredValue(value['.sv'], existingVal, serverValues);\n  } else {\n    assert(false, 'Unexpected server value: ' + JSON.stringify(value, null, 2));\n  }\n};\n\nconst resolveScalarDeferredValue = function (\n  op: string,\n  existing: ValueProvider,\n  serverValues: { [k: string]: unknown }\n): string | number | boolean {\n  switch (op) {\n    case 'timestamp':\n      return serverValues['timestamp'] as string | number | boolean;\n    default:\n      assert(false, 'Unexpected server value: ' + op);\n  }\n};\n\nconst resolveComplexDeferredValue = function (\n  op: object,\n  existing: ValueProvider,\n  unused: { [k: string]: unknown }\n): string | number | boolean {\n  if (!op.hasOwnProperty('increment')) {\n    assert(false, 'Unexpected server value: ' + JSON.stringify(op, null, 2));\n  }\n  const delta = op['increment'];\n  if (typeof delta !== 'number') {\n    assert(false, 'Unexpected increment value: ' + delta);\n  }\n\n  const existingNode = existing.node();\n  assert(\n    existingNode !== null && typeof existingNode !== 'undefined',\n    'Expected ChildrenNode.EMPTY_NODE for nulls'\n  );\n\n  // Incrementing a non-number sets the value to the incremented amount\n  if (!existingNode.isLeafNode()) {\n    return delta;\n  }\n\n  const leaf = existingNode as LeafNode;\n  const existingVal = leaf.getValue();\n  if (typeof existingVal !== 'number') {\n    return delta;\n  }\n\n  // No need to do over/underflow arithmetic here because JS only handles floats under the covers\n  return existingVal + delta;\n};\n\n/**\n * Recursively replace all deferred values and priorities in the tree with the\n * specified generated replacement values.\n * @param {!Path} path path to which write is relative\n * @param {!Node} node new data written at path\n * @param {!SyncTree} syncTree current data\n * @param {!Object} serverValues\n * @return {!SparseSnapshotTree}\n */\nexport const resolveDeferredValueTree = function (\n  path: Path,\n  node: Node,\n  syncTree: SyncTree,\n  serverValues: Indexable\n): Node {\n  return resolveDeferredValue(\n    node,\n    new DeferredValueProvider(syncTree, path),\n    serverValues\n  );\n};\n\n/**\n * Recursively replace all deferred values and priorities in the node with the\n * specified generated replacement values.  If there are no server values in the node,\n * it'll be returned as-is.\n * @param {!Node} node\n * @param {!Object} serverValues\n * @return {!Node}\n */\nexport const resolveDeferredValueSnapshot = function (\n  node: Node,\n  existing: Node,\n  serverValues: Indexable\n): Node {\n  return resolveDeferredValue(\n    node,\n    new ExistingValueProvider(existing),\n    serverValues\n  );\n};\n\nfunction resolveDeferredValue(\n  node: Node,\n  existingVal: ValueProvider,\n  serverValues: Indexable\n): Node {\n  const rawPri = node.getPriority().val() as\n    | Indexable\n    | boolean\n    | null\n    | number\n    | string;\n  const priority = resolveDeferredLeafValue(\n    rawPri,\n    existingVal.getImmediateChild('.priority'),\n    serverValues\n  );\n  let newNode: Node;\n\n  if (node.isLeafNode()) {\n    const leafNode = node as LeafNode;\n    const value = resolveDeferredLeafValue(\n      leafNode.getValue(),\n      existingVal,\n      serverValues\n    );\n    if (\n      value !== leafNode.getValue() ||\n      priority !== leafNode.getPriority().val()\n    ) {\n      return new LeafNode(value, nodeFromJSON(priority));\n    } else {\n      return node;\n    }\n  } else {\n    const childrenNode = node as ChildrenNode;\n    newNode = childrenNode;\n    if (priority !== childrenNode.getPriority().val()) {\n      newNode = newNode.updatePriority(new LeafNode(priority));\n    }\n    childrenNode.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\n      const newChildNode = resolveDeferredValue(\n        childNode,\n        existingVal.getImmediateChild(childName),\n        serverValues\n      );\n      if (newChildNode !== childNode) {\n        newNode = newNode.updateImmediateChild(childName, newChildNode);\n      }\n    });\n    return newNode;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path } from './util/Path';\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { Node } from './snap/Node';\n\n/**\n * Helper class to store a sparse set of snapshots.\n */\nexport class SparseSnapshotTree {\n  private value: Node | null = null;\n\n  private readonly children: Map<string, SparseSnapshotTree> = new Map();\n\n  /**\n   * Gets the node stored at the given path if one exists.\n   *\n   * @param path Path to look up snapshot for.\n   * @return The retrieved node, or null.\n   */\n  find(path: Path): Node | null {\n    if (this.value != null) {\n      return this.value.getChild(path);\n    } else if (!path.isEmpty() && this.children.size > 0) {\n      const childKey = path.getFront();\n      path = path.popFront();\n      if (this.children.has(childKey)) {\n        const childTree = this.children.get(childKey);\n        return childTree.find(path);\n      } else {\n        return null;\n      }\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Stores the given node at the specified path. If there is already a node\n   * at a shallower path, it merges the new data into that snapshot node.\n   *\n   * @param path Path to look up snapshot for.\n   * @param data The new data, or null.\n   */\n  remember(path: Path, data: Node) {\n    if (path.isEmpty()) {\n      this.value = data;\n      this.children.clear();\n    } else if (this.value !== null) {\n      this.value = this.value.updateChild(path, data);\n    } else {\n      const childKey = path.getFront();\n      if (!this.children.has(childKey)) {\n        this.children.set(childKey, new SparseSnapshotTree());\n      }\n\n      const child = this.children.get(childKey);\n      path = path.popFront();\n      child.remember(path, data);\n    }\n  }\n\n  /**\n   * Purge the data at path from the cache.\n   *\n   * @param path Path to look up snapshot for.\n   * @return True if this node should now be removed.\n   */\n  forget(path: Path): boolean {\n    if (path.isEmpty()) {\n      this.value = null;\n      this.children.clear();\n      return true;\n    } else {\n      if (this.value !== null) {\n        if (this.value.isLeafNode()) {\n          // We're trying to forget a node that doesn't exist\n          return false;\n        } else {\n          const value = this.value;\n          this.value = null;\n\n          const self = this;\n          value.forEachChild(PRIORITY_INDEX, (key, tree) => {\n            self.remember(new Path(key), tree);\n          });\n\n          return this.forget(path);\n        }\n      } else if (this.children.size > 0) {\n        const childKey = path.getFront();\n        path = path.popFront();\n        if (this.children.has(childKey)) {\n          const safeToRemove = this.children.get(childKey).forget(path);\n          if (safeToRemove) {\n            this.children.delete(childKey);\n          }\n        }\n\n        return this.children.size === 0;\n      } else {\n        return true;\n      }\n    }\n  }\n\n  /**\n   * Recursively iterates through all of the stored tree and calls the\n   * callback on each one.\n   *\n   * @param prefixPath Path to look up node for.\n   * @param func The function to invoke for each tree.\n   */\n  forEachTree(prefixPath: Path, func: (a: Path, b: Node) => unknown) {\n    if (this.value !== null) {\n      func(prefixPath, this.value);\n    } else {\n      this.forEachChild((key, tree) => {\n        const path = new Path(prefixPath.toString() + '/' + key);\n        tree.forEachTree(path, func);\n      });\n    }\n  }\n\n  /**\n   * Iterates through each immediate child and triggers the callback.\n   *\n   * @param func The function to invoke for each child.\n   */\n  forEachChild(func: (a: string, b: SparseSnapshotTree) => void) {\n    this.children.forEach((tree, key) => {\n      func(key, tree);\n    });\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { Path } from '../util/Path';\n\n/**\n *\n * @enum\n */\nexport enum OperationType {\n  OVERWRITE,\n  MERGE,\n  ACK_USER_WRITE,\n  LISTEN_COMPLETE\n}\n\n/**\n * @interface\n */\nexport interface Operation {\n  /**\n   * @type {!OperationSource}\n   */\n  source: OperationSource;\n\n  /**\n   * @type {!OperationType}\n   */\n  type: OperationType;\n\n  /**\n   * @type {!Path}\n   */\n  path: Path;\n\n  /**\n   * @param {string} childName\n   * @return {?Operation}\n   */\n  operationForChild(childName: string): Operation | null;\n}\n\n/**\n * @param {boolean} fromUser\n * @param {boolean} fromServer\n * @param {?string} queryId\n * @param {boolean} tagged\n * @constructor\n */\nexport class OperationSource {\n  constructor(\n    public fromUser: boolean,\n    public fromServer: boolean,\n    public queryId: string | null,\n    public tagged: boolean\n  ) {\n    assert(!tagged || fromServer, 'Tagged queries must be from server.');\n  }\n  /**\n   * @const\n   * @type {!OperationSource}\n   */\n  static User = new OperationSource(\n    /*fromUser=*/ true,\n    false,\n    null,\n    /*tagged=*/ false\n  );\n\n  /**\n   * @const\n   * @type {!OperationSource}\n   */\n  static Server = new OperationSource(\n    false,\n    /*fromServer=*/ true,\n    null,\n    /*tagged=*/ false\n  );\n\n  /**\n   * @param {string} queryId\n   * @return {!OperationSource}\n   */\n  static forServerTaggedQuery = function (queryId: string): OperationSource {\n    return new OperationSource(\n      false,\n      /*fromServer=*/ true,\n      queryId,\n      /*tagged=*/ true\n    );\n  };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SortedMap } from './SortedMap';\nimport { Path } from './Path';\nimport { stringCompare, each } from './util';\n\nlet emptyChildrenSingleton: SortedMap<string, ImmutableTree<null>>;\n\n/**\n * Singleton empty children collection.\n *\n * @const\n * @type {!SortedMap.<string, !ImmutableTree.<?>>}\n */\nconst EmptyChildren = (): SortedMap<string, ImmutableTree<null>> => {\n  if (!emptyChildrenSingleton) {\n    emptyChildrenSingleton = new SortedMap<string, ImmutableTree<null>>(\n      stringCompare\n    );\n  }\n  return emptyChildrenSingleton;\n};\n\n/**\n * A tree with immutable elements.\n */\nexport class ImmutableTree<T> {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  static Empty = new ImmutableTree<any>(null);\n\n  /**\n   * @template T\n   * @param {!Object.<string, !T>} obj\n   * @return {!ImmutableTree.<!T>}\n   */\n  static fromObject<T>(obj: { [k: string]: T }): ImmutableTree<T> {\n    let tree: ImmutableTree<T> = ImmutableTree.Empty;\n    each(obj, (childPath: string, childSnap: T) => {\n      tree = tree.set(new Path(childPath), childSnap);\n    });\n    return tree;\n  }\n\n  /**\n   * @template T\n   * @param {?T} value\n   * @param {SortedMap.<string, !ImmutableTree.<T>>=} children\n   */\n  constructor(\n    public readonly value: T | null,\n    public readonly children: SortedMap<\n      string,\n      ImmutableTree<T>\n    > = EmptyChildren()\n  ) {}\n\n  /**\n   * True if the value is empty and there are no children\n   * @return {boolean}\n   */\n  isEmpty(): boolean {\n    return this.value === null && this.children.isEmpty();\n  }\n\n  /**\n   * Given a path and predicate, return the first node and the path to that node\n   * where the predicate returns true.\n   *\n   * TODO Do a perf test -- If we're creating a bunch of {path: value:} objects\n   * on the way back out, it may be better to pass down a pathSoFar obj.\n   *\n   * @param {!Path} relativePath The remainder of the path\n   * @param {function(T):boolean} predicate The predicate to satisfy to return a\n   *   node\n   * @return {?{path:!Path, value:!T}}\n   */\n  findRootMostMatchingPathAndValue(\n    relativePath: Path,\n    predicate: (a: T) => boolean\n  ): { path: Path; value: T } | null {\n    if (this.value != null && predicate(this.value)) {\n      return { path: Path.Empty, value: this.value };\n    } else {\n      if (relativePath.isEmpty()) {\n        return null;\n      } else {\n        const front = relativePath.getFront();\n        const child = this.children.get(front);\n        if (child !== null) {\n          const childExistingPathAndValue = child.findRootMostMatchingPathAndValue(\n            relativePath.popFront(),\n            predicate\n          );\n          if (childExistingPathAndValue != null) {\n            const fullPath = new Path(front).child(\n              childExistingPathAndValue.path\n            );\n            return { path: fullPath, value: childExistingPathAndValue.value };\n          } else {\n            return null;\n          }\n        } else {\n          return null;\n        }\n      }\n    }\n  }\n\n  /**\n   * Find, if it exists, the shortest subpath of the given path that points a defined\n   * value in the tree\n   * @param {!Path} relativePath\n   * @return {?{path: !Path, value: !T}}\n   */\n  findRootMostValueAndPath(\n    relativePath: Path\n  ): { path: Path; value: T } | null {\n    return this.findRootMostMatchingPathAndValue(relativePath, () => true);\n  }\n\n  /**\n   * @param {!Path} relativePath\n   * @return {!ImmutableTree.<T>} The subtree at the given path\n   */\n  subtree(relativePath: Path): ImmutableTree<T> {\n    if (relativePath.isEmpty()) {\n      return this;\n    } else {\n      const front = relativePath.getFront();\n      const childTree = this.children.get(front);\n      if (childTree !== null) {\n        return childTree.subtree(relativePath.popFront());\n      } else {\n        return ImmutableTree.Empty;\n      }\n    }\n  }\n\n  /**\n   * Sets a value at the specified path.\n   *\n   * @param {!Path} relativePath Path to set value at.\n   * @param {?T} toSet Value to set.\n   * @return {!ImmutableTree.<T>} Resulting tree.\n   */\n  set(relativePath: Path, toSet: T | null): ImmutableTree<T> {\n    if (relativePath.isEmpty()) {\n      return new ImmutableTree(toSet, this.children);\n    } else {\n      const front = relativePath.getFront();\n      const child = this.children.get(front) || ImmutableTree.Empty;\n      const newChild = child.set(relativePath.popFront(), toSet);\n      const newChildren = this.children.insert(front, newChild);\n      return new ImmutableTree(this.value, newChildren);\n    }\n  }\n\n  /**\n   * Removes the value at the specified path.\n   *\n   * @param {!Path} relativePath Path to value to remove.\n   * @return {!ImmutableTree.<T>} Resulting tree.\n   */\n  remove(relativePath: Path): ImmutableTree<T> {\n    if (relativePath.isEmpty()) {\n      if (this.children.isEmpty()) {\n        return ImmutableTree.Empty;\n      } else {\n        return new ImmutableTree(null, this.children);\n      }\n    } else {\n      const front = relativePath.getFront();\n      const child = this.children.get(front);\n      if (child) {\n        const newChild = child.remove(relativePath.popFront());\n        let newChildren;\n        if (newChild.isEmpty()) {\n          newChildren = this.children.remove(front);\n        } else {\n          newChildren = this.children.insert(front, newChild);\n        }\n        if (this.value === null && newChildren.isEmpty()) {\n          return ImmutableTree.Empty;\n        } else {\n          return new ImmutableTree(this.value, newChildren);\n        }\n      } else {\n        return this;\n      }\n    }\n  }\n\n  /**\n   * Gets a value from the tree.\n   *\n   * @param {!Path} relativePath Path to get value for.\n   * @return {?T} Value at path, or null.\n   */\n  get(relativePath: Path): T | null {\n    if (relativePath.isEmpty()) {\n      return this.value;\n    } else {\n      const front = relativePath.getFront();\n      const child = this.children.get(front);\n      if (child) {\n        return child.get(relativePath.popFront());\n      } else {\n        return null;\n      }\n    }\n  }\n\n  /**\n   * Replace the subtree at the specified path with the given new tree.\n   *\n   * @param {!Path} relativePath Path to replace subtree for.\n   * @param {!ImmutableTree} newTree New tree.\n   * @return {!ImmutableTree} Resulting tree.\n   */\n  setTree(relativePath: Path, newTree: ImmutableTree<T>): ImmutableTree<T> {\n    if (relativePath.isEmpty()) {\n      return newTree;\n    } else {\n      const front = relativePath.getFront();\n      const child = this.children.get(front) || ImmutableTree.Empty;\n      const newChild = child.setTree(relativePath.popFront(), newTree);\n      let newChildren;\n      if (newChild.isEmpty()) {\n        newChildren = this.children.remove(front);\n      } else {\n        newChildren = this.children.insert(front, newChild);\n      }\n      return new ImmutableTree(this.value, newChildren);\n    }\n  }\n\n  /**\n   * Performs a depth first fold on this tree. Transforms a tree into a single\n   * value, given a function that operates on the path to a node, an optional\n   * current value, and a map of child names to folded subtrees\n   * @template V\n   * @param {function(Path, ?T, Object.<string, V>):V} fn\n   * @return {V}\n   */\n  fold<V>(fn: (path: Path, value: T, children: { [k: string]: V }) => V): V {\n    return this.fold_(Path.Empty, fn);\n  }\n\n  /**\n   * Recursive helper for public-facing fold() method\n   * @template V\n   * @param {!Path} pathSoFar\n   * @param {function(Path, ?T, Object.<string, V>):V} fn\n   * @return {V}\n   * @private\n   */\n  private fold_<V>(\n    pathSoFar: Path,\n    fn: (path: Path, value: T | null, children: { [k: string]: V }) => V\n  ): V {\n    const accum: { [k: string]: V } = {};\n    this.children.inorderTraversal(\n      (childKey: string, childTree: ImmutableTree<T>) => {\n        accum[childKey] = childTree.fold_(pathSoFar.child(childKey), fn);\n      }\n    );\n    return fn(pathSoFar, this.value, accum);\n  }\n\n  /**\n   * Find the first matching value on the given path. Return the result of applying f to it.\n   * @template V\n   * @param {!Path} path\n   * @param {!function(!Path, !T):?V} f\n   * @return {?V}\n   */\n  findOnPath<V>(path: Path, f: (path: Path, value: T) => V | null): V | null {\n    return this.findOnPath_(path, Path.Empty, f);\n  }\n\n  private findOnPath_<V>(\n    pathToFollow: Path,\n    pathSoFar: Path,\n    f: (path: Path, value: T) => V | null\n  ): V | null {\n    const result = this.value ? f(pathSoFar, this.value) : false;\n    if (result) {\n      return result;\n    } else {\n      if (pathToFollow.isEmpty()) {\n        return null;\n      } else {\n        const front = pathToFollow.getFront()!;\n        const nextChild = this.children.get(front);\n        if (nextChild) {\n          return nextChild.findOnPath_(\n            pathToFollow.popFront(),\n            pathSoFar.child(front),\n            f\n          );\n        } else {\n          return null;\n        }\n      }\n    }\n  }\n\n  /**\n   *\n   * @param {!Path} path\n   * @param {!function(!Path, !T)} f\n   * @returns {!ImmutableTree.<T>}\n   */\n  foreachOnPath(\n    path: Path,\n    f: (path: Path, value: T) => void\n  ): ImmutableTree<T> {\n    return this.foreachOnPath_(path, Path.Empty, f);\n  }\n\n  private foreachOnPath_(\n    pathToFollow: Path,\n    currentRelativePath: Path,\n    f: (path: Path, value: T) => void\n  ): ImmutableTree<T> {\n    if (pathToFollow.isEmpty()) {\n      return this;\n    } else {\n      if (this.value) {\n        f(currentRelativePath, this.value);\n      }\n      const front = pathToFollow.getFront();\n      const nextChild = this.children.get(front);\n      if (nextChild) {\n        return nextChild.foreachOnPath_(\n          pathToFollow.popFront(),\n          currentRelativePath.child(front),\n          f\n        );\n      } else {\n        return ImmutableTree.Empty;\n      }\n    }\n  }\n\n  /**\n   * Calls the given function for each node in the tree that has a value.\n   *\n   * @param {function(!Path, !T)} f A function to be called with\n   *   the path from the root of the tree to a node, and the value at that node.\n   *   Called in depth-first order.\n   */\n  foreach(f: (path: Path, value: T) => void) {\n    this.foreach_(Path.Empty, f);\n  }\n\n  private foreach_(\n    currentRelativePath: Path,\n    f: (path: Path, value: T) => void\n  ) {\n    this.children.inorderTraversal((childName, childTree) => {\n      childTree.foreach_(currentRelativePath.child(childName), f);\n    });\n    if (this.value) {\n      f(currentRelativePath, this.value);\n    }\n  }\n\n  /**\n   *\n   * @param {function(string, !T)} f\n   */\n  foreachChild(f: (name: string, value: T) => void) {\n    this.children.inorderTraversal(\n      (childName: string, childTree: ImmutableTree<T>) => {\n        if (childTree.value) {\n          f(childName, childTree.value);\n        }\n      }\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CacheNode } from './view/CacheNode';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { assert } from '@firebase/util';\nimport { ViewCache } from './view/ViewCache';\nimport { View } from './view/View';\nimport { Operation } from './operation/Operation';\nimport { WriteTreeRef } from './WriteTree';\nimport { Query } from '../api/Query';\nimport { EventRegistration } from './view/EventRegistration';\nimport { Node } from './snap/Node';\nimport { Path } from './util/Path';\nimport { Event } from './view/Event';\nimport { Reference, ReferenceConstructor } from '../api/Reference';\n\nlet __referenceConstructor: ReferenceConstructor;\n\n/**\n * SyncPoint represents a single location in a SyncTree with 1 or more event registrations, meaning we need to\n * maintain 1 or more Views at this location to cache server data and raise appropriate events for server changes\n * and user writes (set, transaction, update).\n *\n * It's responsible for:\n *  - Maintaining the set of 1 or more views necessary at this location (a SyncPoint with 0 views should be removed).\n *  - Proxying user / server operations to the views as appropriate (i.e. applyServerOverwrite,\n *    applyUserOverwrite, etc.)\n */\nexport class SyncPoint {\n  static set __referenceConstructor(val: ReferenceConstructor) {\n    assert(\n      !__referenceConstructor,\n      '__referenceConstructor has already been defined'\n    );\n    __referenceConstructor = val;\n  }\n\n  static get __referenceConstructor() {\n    assert(__referenceConstructor, 'Reference.ts has not been loaded');\n    return __referenceConstructor;\n  }\n\n  /**\n   * The Views being tracked at this location in the tree, stored as a map where the key is a\n   * queryId and the value is the View for that query.\n   *\n   * NOTE: This list will be quite small (usually 1, but perhaps 2 or 3; any more is an odd use case).\n   */\n  private readonly views: Map<string, View> = new Map();\n\n  isEmpty(): boolean {\n    return this.views.size === 0;\n  }\n\n  applyOperation(\n    operation: Operation,\n    writesCache: WriteTreeRef,\n    optCompleteServerCache: Node | null\n  ): Event[] {\n    const queryId = operation.source.queryId;\n    if (queryId !== null) {\n      const view = this.views.get(queryId);\n      assert(view != null, 'SyncTree gave us an op for an invalid query.');\n      return view.applyOperation(\n        operation,\n        writesCache,\n        optCompleteServerCache\n      );\n    } else {\n      let events: Event[] = [];\n\n      for (const view of this.views.values()) {\n        events = events.concat(\n          view.applyOperation(operation, writesCache, optCompleteServerCache)\n        );\n      }\n\n      return events;\n    }\n  }\n\n  /**\n   * Add an event callback for the specified query.\n   *\n   * @param {!Query} query\n   * @param {!EventRegistration} eventRegistration\n   * @param {!WriteTreeRef} writesCache\n   * @param {?Node} serverCache Complete server cache, if we have it.\n   * @param {boolean} serverCacheComplete\n   * @return {!Array.<!Event>} Events to raise.\n   */\n  addEventRegistration(\n    query: Query,\n    eventRegistration: EventRegistration,\n    writesCache: WriteTreeRef,\n    serverCache: Node | null,\n    serverCacheComplete: boolean\n  ): Event[] {\n    const queryId = query.queryIdentifier();\n    let view = this.views.get(queryId);\n    if (!view) {\n      // TODO: make writesCache take flag for complete server node\n      let eventCache = writesCache.calcCompleteEventCache(\n        serverCacheComplete ? serverCache : null\n      );\n      let eventCacheComplete = false;\n      if (eventCache) {\n        eventCacheComplete = true;\n      } else if (serverCache instanceof ChildrenNode) {\n        eventCache = writesCache.calcCompleteEventChildren(serverCache);\n        eventCacheComplete = false;\n      } else {\n        eventCache = ChildrenNode.EMPTY_NODE;\n        eventCacheComplete = false;\n      }\n      const viewCache = new ViewCache(\n        new CacheNode(\n          /** @type {!Node} */ eventCache,\n          eventCacheComplete,\n          false\n        ),\n        new CacheNode(\n          /** @type {!Node} */ serverCache,\n          serverCacheComplete,\n          false\n        )\n      );\n      view = new View(query, viewCache);\n      this.views.set(queryId, view);\n    }\n\n    // This is guaranteed to exist now, we just created anything that was missing\n    view.addEventRegistration(eventRegistration);\n    return view.getInitialEvents(eventRegistration);\n  }\n\n  /**\n   * Remove event callback(s).  Return cancelEvents if a cancelError is specified.\n   *\n   * If query is the default query, we'll check all views for the specified eventRegistration.\n   * If eventRegistration is null, we'll remove all callbacks for the specified view(s).\n   *\n   * @param {!Query} query\n   * @param {?EventRegistration} eventRegistration If null, remove all callbacks.\n   * @param {Error=} cancelError If a cancelError is provided, appropriate cancel events will be returned.\n   * @return {{removed:!Array.<!Query>, events:!Array.<!Event>}} removed queries and any cancel events\n   */\n  removeEventRegistration(\n    query: Query,\n    eventRegistration: EventRegistration | null,\n    cancelError?: Error\n  ): { removed: Query[]; events: Event[] } {\n    const queryId = query.queryIdentifier();\n    const removed: Query[] = [];\n    let cancelEvents: Event[] = [];\n    const hadCompleteView = this.hasCompleteView();\n    if (queryId === 'default') {\n      // When you do ref.off(...), we search all views for the registration to remove.\n      for (const [viewQueryId, view] of this.views.entries()) {\n        cancelEvents = cancelEvents.concat(\n          view.removeEventRegistration(eventRegistration, cancelError)\n        );\n        if (view.isEmpty()) {\n          this.views.delete(viewQueryId);\n\n          // We'll deal with complete views later.\n          if (!view.getQuery().getQueryParams().loadsAllData()) {\n            removed.push(view.getQuery());\n          }\n        }\n      }\n    } else {\n      // remove the callback from the specific view.\n      const view = this.views.get(queryId);\n      if (view) {\n        cancelEvents = cancelEvents.concat(\n          view.removeEventRegistration(eventRegistration, cancelError)\n        );\n        if (view.isEmpty()) {\n          this.views.delete(queryId);\n\n          // We'll deal with complete views later.\n          if (!view.getQuery().getQueryParams().loadsAllData()) {\n            removed.push(view.getQuery());\n          }\n        }\n      }\n    }\n\n    if (hadCompleteView && !this.hasCompleteView()) {\n      // We removed our last complete view.\n      removed.push(\n        new SyncPoint.__referenceConstructor(query.repo, query.path)\n      );\n    }\n\n    return { removed, events: cancelEvents };\n  }\n\n  getQueryViews(): View[] {\n    const result = [];\n    for (const view of this.views.values()) {\n      if (!view.getQuery().getQueryParams().loadsAllData()) {\n        result.push(view);\n      }\n    }\n    return result;\n  }\n\n  /**\n   * @param path The path to the desired complete snapshot\n   * @return A complete cache, if it exists\n   */\n  getCompleteServerCache(path: Path): Node | null {\n    let serverCache: Node | null = null;\n    for (const view of this.views.values()) {\n      serverCache = serverCache || view.getCompleteServerCache(path);\n    }\n    return serverCache;\n  }\n\n  viewForQuery(query: Query): View | null {\n    const params = query.getQueryParams();\n    if (params.loadsAllData()) {\n      return this.getCompleteView();\n    } else {\n      const queryId = query.queryIdentifier();\n      return this.views.get(queryId);\n    }\n  }\n\n  viewExistsForQuery(query: Query): boolean {\n    return this.viewForQuery(query) != null;\n  }\n\n  hasCompleteView(): boolean {\n    return this.getCompleteView() != null;\n  }\n\n  getCompleteView(): View | null {\n    for (const view of this.views.values()) {\n      if (view.getQuery().getQueryParams().loadsAllData()) {\n        return view;\n      }\n    }\n    return null;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { Path } from '../util/Path';\nimport { Operation, OperationSource, OperationType } from './Operation';\nimport { ImmutableTree } from '../util/ImmutableTree';\n\nexport class AckUserWrite implements Operation {\n  /** @inheritDoc */\n  type = OperationType.ACK_USER_WRITE;\n\n  /** @inheritDoc */\n  source = OperationSource.User;\n\n  /**\n   *\n   * @param {!Path} path\n   * @param {!ImmutableTree<!boolean>} affectedTree A tree containing true for each affected path. Affected paths can't overlap.\n   * @param {!boolean} revert\n   */\n  constructor(\n    /** @inheritDoc */ public path: Path,\n    /** @inheritDoc */ public affectedTree: ImmutableTree<boolean>,\n    /** @inheritDoc */ public revert: boolean\n  ) {}\n\n  /**\n   * @inheritDoc\n   */\n  operationForChild(childName: string): AckUserWrite {\n    if (!this.path.isEmpty()) {\n      assert(\n        this.path.getFront() === childName,\n        'operationForChild called for unrelated child.'\n      );\n      return new AckUserWrite(\n        this.path.popFront(),\n        this.affectedTree,\n        this.revert\n      );\n    } else if (this.affectedTree.value != null) {\n      assert(\n        this.affectedTree.children.isEmpty(),\n        'affectedTree should not have overlapping affected paths.'\n      );\n      // All child locations are affected as well; just return same operation.\n      return this;\n    } else {\n      const childTree = this.affectedTree.subtree(new Path(childName));\n      return new AckUserWrite(Path.Empty, childTree, this.revert);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path } from '../util/Path';\nimport { Operation, OperationSource, OperationType } from './Operation';\n\n/**\n * @param {!OperationSource} source\n * @param {!Path} path\n * @constructor\n * @implements {Operation}\n */\nexport class ListenComplete implements Operation {\n  /** @inheritDoc */\n  type = OperationType.LISTEN_COMPLETE;\n\n  constructor(public source: OperationSource, public path: Path) {}\n\n  operationForChild(childName: string): ListenComplete {\n    if (this.path.isEmpty()) {\n      return new ListenComplete(this.source, Path.Empty);\n    } else {\n      return new ListenComplete(this.source, this.path.popFront());\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Operation, OperationSource, OperationType } from './Operation';\nimport { Path } from '../util/Path';\nimport { Node } from '../snap/Node';\n\n/**\n * @param {!OperationSource} source\n * @param {!Path} path\n * @param {!Node} snap\n * @constructor\n * @implements {Operation}\n */\nexport class Overwrite implements Operation {\n  /** @inheritDoc */\n  type = OperationType.OVERWRITE;\n\n  constructor(\n    public source: OperationSource,\n    public path: Path,\n    public snap: Node\n  ) {}\n\n  operationForChild(childName: string): Overwrite {\n    if (this.path.isEmpty()) {\n      return new Overwrite(\n        this.source,\n        Path.Empty,\n        this.snap.getImmediateChild(childName)\n      );\n    } else {\n      return new Overwrite(this.source, this.path.popFront(), this.snap);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Operation, OperationSource, OperationType } from './Operation';\nimport { Overwrite } from './Overwrite';\nimport { Path } from '../util/Path';\nimport { assert } from '@firebase/util';\nimport { ImmutableTree } from '../util/ImmutableTree';\nimport { Node } from '../snap/Node';\n\n/**\n * @param {!OperationSource} source\n * @param {!Path} path\n * @param {!ImmutableTree.<!Node>} children\n * @constructor\n * @implements {Operation}\n */\nexport class Merge implements Operation {\n  /** @inheritDoc */\n  type = OperationType.MERGE;\n\n  constructor(\n    /** @inheritDoc */ public source: OperationSource,\n    /** @inheritDoc */ public path: Path,\n    /** @inheritDoc */ public children: ImmutableTree<Node>\n  ) {}\n\n  /**\n   * @inheritDoc\n   */\n  operationForChild(childName: string): Operation {\n    if (this.path.isEmpty()) {\n      const childTree = this.children.subtree(new Path(childName));\n      if (childTree.isEmpty()) {\n        // This child is unaffected\n        return null;\n      } else if (childTree.value) {\n        // We have a snapshot for the child in question.  This becomes an overwrite of the child.\n        return new Overwrite(this.source, Path.Empty, childTree.value);\n      } else {\n        // This is a merge at a deeper level\n        return new Merge(this.source, Path.Empty, childTree);\n      }\n    } else {\n      assert(\n        this.path.getFront() === childName,\n        \"Can't get a merge for a child not on the path of the operation\"\n      );\n      return new Merge(this.source, this.path.popFront(), this.children);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  toString(): string {\n    return (\n      'Operation(' +\n      this.path +\n      ': ' +\n      this.source.toString() +\n      ' merge: ' +\n      this.children.toString() +\n      ')'\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\nimport { Path } from '../util/Path';\n\n/**\n * A cache node only stores complete children. Additionally it holds a flag whether the node can be considered fully\n * initialized in the sense that we know at one point in time this represented a valid state of the world, e.g.\n * initialized with data from the server, or a complete overwrite by the client. The filtered flag also tracks\n * whether a node potentially had children removed due to a filter.\n */\nexport class CacheNode {\n  /**\n   * @param {!Node} node_\n   * @param {boolean} fullyInitialized_\n   * @param {boolean} filtered_\n   */\n  constructor(\n    private node_: Node,\n    private fullyInitialized_: boolean,\n    private filtered_: boolean\n  ) {}\n\n  /**\n   * Returns whether this node was fully initialized with either server data or a complete overwrite by the client\n   * @return {boolean}\n   */\n  isFullyInitialized(): boolean {\n    return this.fullyInitialized_;\n  }\n\n  /**\n   * Returns whether this node is potentially missing children due to a filter applied to the node\n   * @return {boolean}\n   */\n  isFiltered(): boolean {\n    return this.filtered_;\n  }\n\n  /**\n   * @param {!Path} path\n   * @return {boolean}\n   */\n  isCompleteForPath(path: Path): boolean {\n    if (path.isEmpty()) {\n      return this.isFullyInitialized() && !this.filtered_;\n    }\n\n    const childKey = path.getFront();\n    return this.isCompleteForChild(childKey);\n  }\n\n  /**\n   * @param {!string} key\n   * @return {boolean}\n   */\n  isCompleteForChild(key: string): boolean {\n    return (\n      (this.isFullyInitialized() && !this.filtered_) || this.node_.hasChild(key)\n    );\n  }\n\n  /**\n   * @return {!Node}\n   */\n  getNode(): Node {\n    return this.node_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { CacheNode } from './CacheNode';\nimport { Node } from '../snap/Node';\n\n/**\n * Stores the data we have cached for a view.\n *\n * serverSnap is the cached server data, eventSnap is the cached event data (server data plus any local writes).\n *\n * @constructor\n */\nexport class ViewCache {\n  /**\n   *\n   * @param {!CacheNode} eventCache_\n   * @param {!CacheNode} serverCache_\n   */\n  constructor(\n    private readonly eventCache_: CacheNode,\n    private readonly serverCache_: CacheNode\n  ) {}\n\n  /**\n   * @const\n   * @type {ViewCache}\n   */\n  static Empty = new ViewCache(\n    new CacheNode(\n      ChildrenNode.EMPTY_NODE,\n      /*fullyInitialized=*/ false,\n      /*filtered=*/ false\n    ),\n    new CacheNode(\n      ChildrenNode.EMPTY_NODE,\n      /*fullyInitialized=*/ false,\n      /*filtered=*/ false\n    )\n  );\n\n  /**\n   * @param {!Node} eventSnap\n   * @param {boolean} complete\n   * @param {boolean} filtered\n   * @return {!ViewCache}\n   */\n  updateEventSnap(\n    eventSnap: Node,\n    complete: boolean,\n    filtered: boolean\n  ): ViewCache {\n    return new ViewCache(\n      new CacheNode(eventSnap, complete, filtered),\n      this.serverCache_\n    );\n  }\n\n  /**\n   * @param {!Node} serverSnap\n   * @param {boolean} complete\n   * @param {boolean} filtered\n   * @return {!ViewCache}\n   */\n  updateServerSnap(\n    serverSnap: Node,\n    complete: boolean,\n    filtered: boolean\n  ): ViewCache {\n    return new ViewCache(\n      this.eventCache_,\n      new CacheNode(serverSnap, complete, filtered)\n    );\n  }\n\n  /**\n   * @return {!CacheNode}\n   */\n  getEventCache(): CacheNode {\n    return this.eventCache_;\n  }\n\n  /**\n   * @return {?Node}\n   */\n  getCompleteEventSnap(): Node | null {\n    return this.eventCache_.isFullyInitialized()\n      ? this.eventCache_.getNode()\n      : null;\n  }\n\n  /**\n   * @return {!CacheNode}\n   */\n  getServerCache(): CacheNode {\n    return this.serverCache_;\n  }\n\n  /**\n   * @return {?Node}\n   */\n  getCompleteServerSnap(): Node | null {\n    return this.serverCache_.isFullyInitialized()\n      ? this.serverCache_.getNode()\n      : null;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\n\n/**\n * @constructor\n * @struct\n * @param {!string} type The event type\n * @param {!Node} snapshotNode The data\n * @param {string=} childName The name for this child, if it's a child event\n * @param {Node=} oldSnap Used for intermediate processing of child changed events\n * @param {string=} prevName The name for the previous child, if applicable\n */\nexport class Change {\n  constructor(\n    public type: string,\n    public snapshotNode: Node,\n    public childName?: string,\n    public oldSnap?: Node,\n    public prevName?: string | null\n  ) {}\n\n  /**\n   * @param {!Node} snapshot\n   * @return {!Change}\n   */\n  static valueChange(snapshot: Node): Change {\n    return new Change(Change.VALUE, snapshot);\n  }\n\n  /**\n   * @param {string} childKey\n   * @param {!Node} snapshot\n   * @return {!Change}\n   */\n  static childAddedChange(childKey: string, snapshot: Node): Change {\n    return new Change(Change.CHILD_ADDED, snapshot, childKey);\n  }\n\n  /**\n   * @param {string} childKey\n   * @param {!Node} snapshot\n   * @return {!Change}\n   */\n  static childRemovedChange(childKey: string, snapshot: Node): Change {\n    return new Change(Change.CHILD_REMOVED, snapshot, childKey);\n  }\n\n  /**\n   * @param {string} childKey\n   * @param {!Node} newSnapshot\n   * @param {!Node} oldSnapshot\n   * @return {!Change}\n   */\n  static childChangedChange(\n    childKey: string,\n    newSnapshot: Node,\n    oldSnapshot: Node\n  ): Change {\n    return new Change(Change.CHILD_CHANGED, newSnapshot, childKey, oldSnapshot);\n  }\n\n  /**\n   * @param {string} childKey\n   * @param {!Node} snapshot\n   * @return {!Change}\n   */\n  static childMovedChange(childKey: string, snapshot: Node): Change {\n    return new Change(Change.CHILD_MOVED, snapshot, childKey);\n  }\n\n  //event types\n  /** Event type for a child added */\n  static CHILD_ADDED = 'child_added';\n\n  /** Event type for a child removed */\n  static CHILD_REMOVED = 'child_removed';\n\n  /** Event type for a child changed */\n  static CHILD_CHANGED = 'child_changed';\n\n  /** Event type for a child moved */\n  static CHILD_MOVED = 'child_moved';\n\n  /** Event type for a value change */\n  static VALUE = 'value';\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { Change } from '../Change';\nimport { ChildrenNode } from '../../snap/ChildrenNode';\nimport { PRIORITY_INDEX } from '../../snap/indexes/PriorityIndex';\nimport { NodeFilter } from './NodeFilter';\nimport { Index } from '../../snap/indexes/Index';\nimport { Path } from '../../util/Path';\nimport { CompleteChildSource } from '../CompleteChildSource';\nimport { ChildChangeAccumulator } from '../ChildChangeAccumulator';\nimport { Node } from '../../snap/Node';\n\n/**\n * Doesn't really filter nodes but applies an index to the node and keeps track of any changes\n *\n * @constructor\n * @implements {NodeFilter}\n * @param {!Index} index\n */\nexport class IndexedFilter implements NodeFilter {\n  constructor(private readonly index_: Index) {}\n\n  updateChild(\n    snap: Node,\n    key: string,\n    newChild: Node,\n    affectedPath: Path,\n    source: CompleteChildSource,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    assert(\n      snap.isIndexed(this.index_),\n      'A node must be indexed if only a child is updated'\n    );\n    const oldChild = snap.getImmediateChild(key);\n    // Check if anything actually changed.\n    if (\n      oldChild.getChild(affectedPath).equals(newChild.getChild(affectedPath))\n    ) {\n      // There's an edge case where a child can enter or leave the view because affectedPath was set to null.\n      // In this case, affectedPath will appear null in both the old and new snapshots.  So we need\n      // to avoid treating these cases as \"nothing changed.\"\n      if (oldChild.isEmpty() === newChild.isEmpty()) {\n        // Nothing changed.\n\n        // This assert should be valid, but it's expensive (can dominate perf testing) so don't actually do it.\n        //assert(oldChild.equals(newChild), 'Old and new snapshots should be equal.');\n        return snap;\n      }\n    }\n\n    if (optChangeAccumulator != null) {\n      if (newChild.isEmpty()) {\n        if (snap.hasChild(key)) {\n          optChangeAccumulator.trackChildChange(\n            Change.childRemovedChange(key, oldChild)\n          );\n        } else {\n          assert(\n            snap.isLeafNode(),\n            'A child remove without an old child only makes sense on a leaf node'\n          );\n        }\n      } else if (oldChild.isEmpty()) {\n        optChangeAccumulator.trackChildChange(\n          Change.childAddedChange(key, newChild)\n        );\n      } else {\n        optChangeAccumulator.trackChildChange(\n          Change.childChangedChange(key, newChild, oldChild)\n        );\n      }\n    }\n    if (snap.isLeafNode() && newChild.isEmpty()) {\n      return snap;\n    } else {\n      // Make sure the node is indexed\n      return snap.updateImmediateChild(key, newChild).withIndex(this.index_);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  updateFullNode(\n    oldSnap: Node,\n    newSnap: Node,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (optChangeAccumulator != null) {\n      if (!oldSnap.isLeafNode()) {\n        oldSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n          if (!newSnap.hasChild(key)) {\n            optChangeAccumulator.trackChildChange(\n              Change.childRemovedChange(key, childNode)\n            );\n          }\n        });\n      }\n      if (!newSnap.isLeafNode()) {\n        newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n          if (oldSnap.hasChild(key)) {\n            const oldChild = oldSnap.getImmediateChild(key);\n            if (!oldChild.equals(childNode)) {\n              optChangeAccumulator.trackChildChange(\n                Change.childChangedChange(key, childNode, oldChild)\n              );\n            }\n          } else {\n            optChangeAccumulator.trackChildChange(\n              Change.childAddedChange(key, childNode)\n            );\n          }\n        });\n      }\n    }\n    return newSnap.withIndex(this.index_);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  updatePriority(oldSnap: Node, newPriority: Node): Node {\n    if (oldSnap.isEmpty()) {\n      return ChildrenNode.EMPTY_NODE;\n    } else {\n      return oldSnap.updatePriority(newPriority);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  filtersNodes(): boolean {\n    return false;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getIndexedFilter(): IndexedFilter {\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getIndex(): Index {\n    return this.index_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Change } from './Change';\nimport { assert, assertionError } from '@firebase/util';\n\nexport class ChildChangeAccumulator {\n  private readonly changeMap: Map<string, Change> = new Map();\n\n  trackChildChange(change: Change) {\n    const type = change.type;\n    const childKey = change.childName!;\n    assert(\n      type === Change.CHILD_ADDED ||\n        type === Change.CHILD_CHANGED ||\n        type === Change.CHILD_REMOVED,\n      'Only child changes supported for tracking'\n    );\n    assert(\n      childKey !== '.priority',\n      'Only non-priority child changes can be tracked.'\n    );\n    const oldChange = this.changeMap.get(childKey);\n    if (oldChange) {\n      const oldType = oldChange.type;\n      if (type === Change.CHILD_ADDED && oldType === Change.CHILD_REMOVED) {\n        this.changeMap.set(\n          childKey,\n          Change.childChangedChange(\n            childKey,\n            change.snapshotNode,\n            oldChange.snapshotNode\n          )\n        );\n      } else if (\n        type === Change.CHILD_REMOVED &&\n        oldType === Change.CHILD_ADDED\n      ) {\n        this.changeMap.delete(childKey);\n      } else if (\n        type === Change.CHILD_REMOVED &&\n        oldType === Change.CHILD_CHANGED\n      ) {\n        this.changeMap.set(\n          childKey,\n          Change.childRemovedChange(childKey, oldChange.oldSnap)\n        );\n      } else if (\n        type === Change.CHILD_CHANGED &&\n        oldType === Change.CHILD_ADDED\n      ) {\n        this.changeMap.set(\n          childKey,\n          Change.childAddedChange(childKey, change.snapshotNode)\n        );\n      } else if (\n        type === Change.CHILD_CHANGED &&\n        oldType === Change.CHILD_CHANGED\n      ) {\n        this.changeMap.set(\n          childKey,\n          Change.childChangedChange(\n            childKey,\n            change.snapshotNode,\n            oldChange.oldSnap\n          )\n        );\n      } else {\n        throw assertionError(\n          'Illegal combination of changes: ' +\n            change +\n            ' occurred after ' +\n            oldChange\n        );\n      }\n    } else {\n      this.changeMap.set(childKey, change);\n    }\n  }\n\n  getChanges(): Change[] {\n    return Array.from(this.changeMap.values());\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CacheNode } from './CacheNode';\nimport { NamedNode, Node } from '../snap/Node';\nimport { Index } from '../snap/indexes/Index';\nimport { WriteTreeRef } from '../WriteTree';\nimport { ViewCache } from './ViewCache';\n\n/**\n * Since updates to filtered nodes might require nodes to be pulled in from \"outside\" the node, this interface\n * can help to get complete children that can be pulled in.\n * A class implementing this interface takes potentially multiple sources (e.g. user writes, server data from\n * other views etc.) to try it's best to get a complete child that might be useful in pulling into the view.\n *\n * @interface\n */\nexport interface CompleteChildSource {\n  /**\n   * @param {!string} childKey\n   * @return {?Node}\n   */\n  getCompleteChild(childKey: string): Node | null;\n\n  /**\n   * @param {!Index} index\n   * @param {!NamedNode} child\n   * @param {boolean} reverse\n   * @return {?NamedNode}\n   */\n  getChildAfterChild(\n    index: Index,\n    child: NamedNode,\n    reverse: boolean\n  ): NamedNode | null;\n}\n\n/**\n * An implementation of CompleteChildSource that never returns any additional children\n *\n * @private\n * @constructor\n * @implements CompleteChildSource\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport class NoCompleteChildSource_ implements CompleteChildSource {\n  /**\n   * @inheritDoc\n   */\n  getCompleteChild(childKey?: string): Node | null {\n    return null;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getChildAfterChild(\n    index?: Index,\n    child?: NamedNode,\n    reverse?: boolean\n  ): NamedNode | null {\n    return null;\n  }\n}\n\n/**\n * Singleton instance.\n * @const\n * @type {!CompleteChildSource}\n */\nexport const NO_COMPLETE_CHILD_SOURCE = new NoCompleteChildSource_();\n\n/**\n * An implementation of CompleteChildSource that uses a WriteTree in addition to any other server data or\n * old event caches available to calculate complete children.\n *\n *\n * @implements CompleteChildSource\n */\nexport class WriteTreeCompleteChildSource implements CompleteChildSource {\n  /**\n   * @param {!WriteTreeRef} writes_\n   * @param {!ViewCache} viewCache_\n   * @param {?Node} optCompleteServerCache_\n   */\n  constructor(\n    private writes_: WriteTreeRef,\n    private viewCache_: ViewCache,\n    private optCompleteServerCache_: Node | null = null\n  ) {}\n\n  /**\n   * @inheritDoc\n   */\n  getCompleteChild(childKey: string): Node | null {\n    const node = this.viewCache_.getEventCache();\n    if (node.isCompleteForChild(childKey)) {\n      return node.getNode().getImmediateChild(childKey);\n    } else {\n      const serverNode =\n        this.optCompleteServerCache_ != null\n          ? new CacheNode(this.optCompleteServerCache_, true, false)\n          : this.viewCache_.getServerCache();\n      return this.writes_.calcCompleteChild(childKey, serverNode);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getChildAfterChild(\n    index: Index,\n    child: NamedNode,\n    reverse: boolean\n  ): NamedNode | null {\n    const completeServerData =\n      this.optCompleteServerCache_ != null\n        ? this.optCompleteServerCache_\n        : this.viewCache_.getCompleteServerSnap();\n    const nodes = this.writes_.calcIndexedSlice(\n      completeServerData,\n      child,\n      1,\n      reverse,\n      index\n    );\n    if (nodes.length === 0) {\n      return null;\n    } else {\n      return nodes[0];\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Operation, OperationType } from '../operation/Operation';\nimport { assert, assertionError } from '@firebase/util';\nimport { ChildChangeAccumulator } from './ChildChangeAccumulator';\nimport { Change } from './Change';\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { KEY_INDEX } from '../snap/indexes/KeyIndex';\nimport { ImmutableTree } from '../util/ImmutableTree';\nimport { Path } from '../util/Path';\nimport {\n  WriteTreeCompleteChildSource,\n  NO_COMPLETE_CHILD_SOURCE,\n  CompleteChildSource\n} from './CompleteChildSource';\nimport { ViewCache } from './ViewCache';\nimport { NodeFilter } from './filter/NodeFilter';\nimport { WriteTreeRef } from '../WriteTree';\nimport { Overwrite } from '../operation/Overwrite';\nimport { Merge } from '../operation/Merge';\nimport { AckUserWrite } from '../operation/AckUserWrite';\nimport { Node } from '../snap/Node';\n\n/**\n * @constructor\n * @struct\n */\nexport class ProcessorResult {\n  /**\n   * @param {!ViewCache} viewCache\n   * @param {!Array.<!Change>} changes\n   */\n  constructor(\n    public readonly viewCache: ViewCache,\n    public readonly changes: Change[]\n  ) {}\n}\n\n/**\n * @constructor\n */\nexport class ViewProcessor {\n  /**\n   * @param {!NodeFilter} filter_\n   */\n  constructor(private readonly filter_: NodeFilter) {}\n\n  /**\n   * @param {!ViewCache} viewCache\n   */\n  assertIndexed(viewCache: ViewCache) {\n    assert(\n      viewCache.getEventCache().getNode().isIndexed(this.filter_.getIndex()),\n      'Event snap not indexed'\n    );\n    assert(\n      viewCache.getServerCache().getNode().isIndexed(this.filter_.getIndex()),\n      'Server snap not indexed'\n    );\n  }\n\n  /**\n   * @param {!ViewCache} oldViewCache\n   * @param {!Operation} operation\n   * @param {!WriteTreeRef} writesCache\n   * @param {?Node} completeCache\n   * @return {!ProcessorResult}\n   */\n  applyOperation(\n    oldViewCache: ViewCache,\n    operation: Operation,\n    writesCache: WriteTreeRef,\n    completeCache: Node | null\n  ): ProcessorResult {\n    const accumulator = new ChildChangeAccumulator();\n    let newViewCache, filterServerNode;\n    if (operation.type === OperationType.OVERWRITE) {\n      const overwrite = operation as Overwrite;\n      if (overwrite.source.fromUser) {\n        newViewCache = this.applyUserOverwrite_(\n          oldViewCache,\n          overwrite.path,\n          overwrite.snap,\n          writesCache,\n          completeCache,\n          accumulator\n        );\n      } else {\n        assert(overwrite.source.fromServer, 'Unknown source.');\n        // We filter the node if it's a tagged update or the node has been previously filtered  and the\n        // update is not at the root in which case it is ok (and necessary) to mark the node unfiltered\n        // again\n        filterServerNode =\n          overwrite.source.tagged ||\n          (oldViewCache.getServerCache().isFiltered() &&\n            !overwrite.path.isEmpty());\n        newViewCache = this.applyServerOverwrite_(\n          oldViewCache,\n          overwrite.path,\n          overwrite.snap,\n          writesCache,\n          completeCache,\n          filterServerNode,\n          accumulator\n        );\n      }\n    } else if (operation.type === OperationType.MERGE) {\n      const merge = operation as Merge;\n      if (merge.source.fromUser) {\n        newViewCache = this.applyUserMerge_(\n          oldViewCache,\n          merge.path,\n          merge.children,\n          writesCache,\n          completeCache,\n          accumulator\n        );\n      } else {\n        assert(merge.source.fromServer, 'Unknown source.');\n        // We filter the node if it's a tagged update or the node has been previously filtered\n        filterServerNode =\n          merge.source.tagged || oldViewCache.getServerCache().isFiltered();\n        newViewCache = this.applyServerMerge_(\n          oldViewCache,\n          merge.path,\n          merge.children,\n          writesCache,\n          completeCache,\n          filterServerNode,\n          accumulator\n        );\n      }\n    } else if (operation.type === OperationType.ACK_USER_WRITE) {\n      const ackUserWrite = operation as AckUserWrite;\n      if (!ackUserWrite.revert) {\n        newViewCache = this.ackUserWrite_(\n          oldViewCache,\n          ackUserWrite.path,\n          ackUserWrite.affectedTree,\n          writesCache,\n          completeCache,\n          accumulator\n        );\n      } else {\n        newViewCache = this.revertUserWrite_(\n          oldViewCache,\n          ackUserWrite.path,\n          writesCache,\n          completeCache,\n          accumulator\n        );\n      }\n    } else if (operation.type === OperationType.LISTEN_COMPLETE) {\n      newViewCache = this.listenComplete_(\n        oldViewCache,\n        operation.path,\n        writesCache,\n        accumulator\n      );\n    } else {\n      throw assertionError('Unknown operation type: ' + operation.type);\n    }\n    const changes = accumulator.getChanges();\n    ViewProcessor.maybeAddValueEvent_(oldViewCache, newViewCache, changes);\n    return new ProcessorResult(newViewCache, changes);\n  }\n\n  /**\n   * @param {!ViewCache} oldViewCache\n   * @param {!ViewCache} newViewCache\n   * @param {!Array.<!Change>} accumulator\n   * @private\n   */\n  private static maybeAddValueEvent_(\n    oldViewCache: ViewCache,\n    newViewCache: ViewCache,\n    accumulator: Change[]\n  ) {\n    const eventSnap = newViewCache.getEventCache();\n    if (eventSnap.isFullyInitialized()) {\n      const isLeafOrEmpty =\n        eventSnap.getNode().isLeafNode() || eventSnap.getNode().isEmpty();\n      const oldCompleteSnap = oldViewCache.getCompleteEventSnap();\n      if (\n        accumulator.length > 0 ||\n        !oldViewCache.getEventCache().isFullyInitialized() ||\n        (isLeafOrEmpty &&\n          !eventSnap.getNode().equals(/** @type {!Node} */ oldCompleteSnap)) ||\n        !eventSnap.getNode().getPriority().equals(oldCompleteSnap.getPriority())\n      ) {\n        accumulator.push(\n          Change.valueChange(\n            /** @type {!Node} */ newViewCache.getCompleteEventSnap()\n          )\n        );\n      }\n    }\n  }\n\n  /**\n   * @param {!ViewCache} viewCache\n   * @param {!Path} changePath\n   * @param {!WriteTreeRef} writesCache\n   * @param {!CompleteChildSource} source\n   * @param {!ChildChangeAccumulator} accumulator\n   * @return {!ViewCache}\n   * @private\n   */\n  private generateEventCacheAfterServerEvent_(\n    viewCache: ViewCache,\n    changePath: Path,\n    writesCache: WriteTreeRef,\n    source: CompleteChildSource,\n    accumulator: ChildChangeAccumulator\n  ): ViewCache {\n    const oldEventSnap = viewCache.getEventCache();\n    if (writesCache.shadowingWrite(changePath) != null) {\n      // we have a shadowing write, ignore changes\n      return viewCache;\n    } else {\n      let newEventCache, serverNode;\n      if (changePath.isEmpty()) {\n        // TODO: figure out how this plays with \"sliding ack windows\"\n        assert(\n          viewCache.getServerCache().isFullyInitialized(),\n          'If change path is empty, we must have complete server data'\n        );\n        if (viewCache.getServerCache().isFiltered()) {\n          // We need to special case this, because we need to only apply writes to complete children, or\n          // we might end up raising events for incomplete children. If the server data is filtered deep\n          // writes cannot be guaranteed to be complete\n          const serverCache = viewCache.getCompleteServerSnap();\n          const completeChildren =\n            serverCache instanceof ChildrenNode\n              ? serverCache\n              : ChildrenNode.EMPTY_NODE;\n          const completeEventChildren = writesCache.calcCompleteEventChildren(\n            completeChildren\n          );\n          newEventCache = this.filter_.updateFullNode(\n            viewCache.getEventCache().getNode(),\n            completeEventChildren,\n            accumulator\n          );\n        } else {\n          const completeNode = writesCache.calcCompleteEventCache(\n            viewCache.getCompleteServerSnap()\n          );\n          newEventCache = this.filter_.updateFullNode(\n            viewCache.getEventCache().getNode(),\n            completeNode,\n            accumulator\n          );\n        }\n      } else {\n        const childKey = changePath.getFront();\n        if (childKey === '.priority') {\n          assert(\n            changePath.getLength() === 1,\n            \"Can't have a priority with additional path components\"\n          );\n          const oldEventNode = oldEventSnap.getNode();\n          serverNode = viewCache.getServerCache().getNode();\n          // we might have overwrites for this priority\n          const updatedPriority = writesCache.calcEventCacheAfterServerOverwrite(\n            changePath,\n            oldEventNode,\n            serverNode\n          );\n          if (updatedPriority != null) {\n            newEventCache = this.filter_.updatePriority(\n              oldEventNode,\n              updatedPriority\n            );\n          } else {\n            // priority didn't change, keep old node\n            newEventCache = oldEventSnap.getNode();\n          }\n        } else {\n          const childChangePath = changePath.popFront();\n          // update child\n          let newEventChild;\n          if (oldEventSnap.isCompleteForChild(childKey)) {\n            serverNode = viewCache.getServerCache().getNode();\n            const eventChildUpdate = writesCache.calcEventCacheAfterServerOverwrite(\n              changePath,\n              oldEventSnap.getNode(),\n              serverNode\n            );\n            if (eventChildUpdate != null) {\n              newEventChild = oldEventSnap\n                .getNode()\n                .getImmediateChild(childKey)\n                .updateChild(childChangePath, eventChildUpdate);\n            } else {\n              // Nothing changed, just keep the old child\n              newEventChild = oldEventSnap\n                .getNode()\n                .getImmediateChild(childKey);\n            }\n          } else {\n            newEventChild = writesCache.calcCompleteChild(\n              childKey,\n              viewCache.getServerCache()\n            );\n          }\n          if (newEventChild != null) {\n            newEventCache = this.filter_.updateChild(\n              oldEventSnap.getNode(),\n              childKey,\n              newEventChild,\n              childChangePath,\n              source,\n              accumulator\n            );\n          } else {\n            // no complete child available or no change\n            newEventCache = oldEventSnap.getNode();\n          }\n        }\n      }\n      return viewCache.updateEventSnap(\n        newEventCache,\n        oldEventSnap.isFullyInitialized() || changePath.isEmpty(),\n        this.filter_.filtersNodes()\n      );\n    }\n  }\n\n  /**\n   * @param {!ViewCache} oldViewCache\n   * @param {!Path} changePath\n   * @param {!Node} changedSnap\n   * @param {!WriteTreeRef} writesCache\n   * @param {?Node} completeCache\n   * @param {boolean} filterServerNode\n   * @param {!ChildChangeAccumulator} accumulator\n   * @return {!ViewCache}\n   * @private\n   */\n  applyServerOverwrite_(\n    oldViewCache: ViewCache,\n    changePath: Path,\n    changedSnap: Node,\n    writesCache: WriteTreeRef,\n    completeCache: Node | null,\n    filterServerNode: boolean,\n    accumulator: ChildChangeAccumulator\n  ): ViewCache {\n    const oldServerSnap = oldViewCache.getServerCache();\n    let newServerCache;\n    const serverFilter = filterServerNode\n      ? this.filter_\n      : this.filter_.getIndexedFilter();\n    if (changePath.isEmpty()) {\n      newServerCache = serverFilter.updateFullNode(\n        oldServerSnap.getNode(),\n        changedSnap,\n        null\n      );\n    } else if (serverFilter.filtersNodes() && !oldServerSnap.isFiltered()) {\n      // we want to filter the server node, but we didn't filter the server node yet, so simulate a full update\n      const newServerNode = oldServerSnap\n        .getNode()\n        .updateChild(changePath, changedSnap);\n      newServerCache = serverFilter.updateFullNode(\n        oldServerSnap.getNode(),\n        newServerNode,\n        null\n      );\n    } else {\n      const childKey = changePath.getFront();\n      if (\n        !oldServerSnap.isCompleteForPath(changePath) &&\n        changePath.getLength() > 1\n      ) {\n        // We don't update incomplete nodes with updates intended for other listeners\n        return oldViewCache;\n      }\n      const childChangePath = changePath.popFront();\n      const childNode = oldServerSnap.getNode().getImmediateChild(childKey);\n      const newChildNode = childNode.updateChild(childChangePath, changedSnap);\n      if (childKey === '.priority') {\n        newServerCache = serverFilter.updatePriority(\n          oldServerSnap.getNode(),\n          newChildNode\n        );\n      } else {\n        newServerCache = serverFilter.updateChild(\n          oldServerSnap.getNode(),\n          childKey,\n          newChildNode,\n          childChangePath,\n          NO_COMPLETE_CHILD_SOURCE,\n          null\n        );\n      }\n    }\n    const newViewCache = oldViewCache.updateServerSnap(\n      newServerCache,\n      oldServerSnap.isFullyInitialized() || changePath.isEmpty(),\n      serverFilter.filtersNodes()\n    );\n    const source = new WriteTreeCompleteChildSource(\n      writesCache,\n      newViewCache,\n      completeCache\n    );\n    return this.generateEventCacheAfterServerEvent_(\n      newViewCache,\n      changePath,\n      writesCache,\n      source,\n      accumulator\n    );\n  }\n\n  /**\n   * @param {!ViewCache} oldViewCache\n   * @param {!Path} changePath\n   * @param {!Node} changedSnap\n   * @param {!WriteTreeRef} writesCache\n   * @param {?Node} completeCache\n   * @param {!ChildChangeAccumulator} accumulator\n   * @return {!ViewCache}\n   * @private\n   */\n  applyUserOverwrite_(\n    oldViewCache: ViewCache,\n    changePath: Path,\n    changedSnap: Node,\n    writesCache: WriteTreeRef,\n    completeCache: Node | null,\n    accumulator: ChildChangeAccumulator\n  ): ViewCache {\n    const oldEventSnap = oldViewCache.getEventCache();\n    let newViewCache, newEventCache;\n    const source = new WriteTreeCompleteChildSource(\n      writesCache,\n      oldViewCache,\n      completeCache\n    );\n    if (changePath.isEmpty()) {\n      newEventCache = this.filter_.updateFullNode(\n        oldViewCache.getEventCache().getNode(),\n        changedSnap,\n        accumulator\n      );\n      newViewCache = oldViewCache.updateEventSnap(\n        newEventCache,\n        true,\n        this.filter_.filtersNodes()\n      );\n    } else {\n      const childKey = changePath.getFront();\n      if (childKey === '.priority') {\n        newEventCache = this.filter_.updatePriority(\n          oldViewCache.getEventCache().getNode(),\n          changedSnap\n        );\n        newViewCache = oldViewCache.updateEventSnap(\n          newEventCache,\n          oldEventSnap.isFullyInitialized(),\n          oldEventSnap.isFiltered()\n        );\n      } else {\n        const childChangePath = changePath.popFront();\n        const oldChild = oldEventSnap.getNode().getImmediateChild(childKey);\n        let newChild;\n        if (childChangePath.isEmpty()) {\n          // Child overwrite, we can replace the child\n          newChild = changedSnap;\n        } else {\n          const childNode = source.getCompleteChild(childKey);\n          if (childNode != null) {\n            if (\n              childChangePath.getBack() === '.priority' &&\n              childNode.getChild(childChangePath.parent()).isEmpty()\n            ) {\n              // This is a priority update on an empty node. If this node exists on the server, the\n              // server will send down the priority in the update, so ignore for now\n              newChild = childNode;\n            } else {\n              newChild = childNode.updateChild(childChangePath, changedSnap);\n            }\n          } else {\n            // There is no complete child node available\n            newChild = ChildrenNode.EMPTY_NODE;\n          }\n        }\n        if (!oldChild.equals(newChild)) {\n          const newEventSnap = this.filter_.updateChild(\n            oldEventSnap.getNode(),\n            childKey,\n            newChild,\n            childChangePath,\n            source,\n            accumulator\n          );\n          newViewCache = oldViewCache.updateEventSnap(\n            newEventSnap,\n            oldEventSnap.isFullyInitialized(),\n            this.filter_.filtersNodes()\n          );\n        } else {\n          newViewCache = oldViewCache;\n        }\n      }\n    }\n    return newViewCache;\n  }\n\n  /**\n   * @param {!ViewCache} viewCache\n   * @param {string} childKey\n   * @return {boolean}\n   * @private\n   */\n  private static cacheHasChild_(\n    viewCache: ViewCache,\n    childKey: string\n  ): boolean {\n    return viewCache.getEventCache().isCompleteForChild(childKey);\n  }\n\n  /**\n   * @param {!ViewCache} viewCache\n   * @param {!Path} path\n   * @param {ImmutableTree.<!Node>} changedChildren\n   * @param {!WriteTreeRef} writesCache\n   * @param {?Node} serverCache\n   * @param {!ChildChangeAccumulator} accumulator\n   * @return {!ViewCache}\n   * @private\n   */\n  private applyUserMerge_(\n    viewCache: ViewCache,\n    path: Path,\n    changedChildren: ImmutableTree<Node>,\n    writesCache: WriteTreeRef,\n    serverCache: Node | null,\n    accumulator: ChildChangeAccumulator\n  ): ViewCache {\n    // HACK: In the case of a limit query, there may be some changes that bump things out of the\n    // window leaving room for new items.  It's important we process these changes first, so we\n    // iterate the changes twice, first processing any that affect items currently in view.\n    // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n    // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n    // not the other.\n    let curViewCache = viewCache;\n    changedChildren.foreach((relativePath, childNode) => {\n      const writePath = path.child(relativePath);\n      if (ViewProcessor.cacheHasChild_(viewCache, writePath.getFront())) {\n        curViewCache = this.applyUserOverwrite_(\n          curViewCache,\n          writePath,\n          childNode,\n          writesCache,\n          serverCache,\n          accumulator\n        );\n      }\n    });\n\n    changedChildren.foreach((relativePath, childNode) => {\n      const writePath = path.child(relativePath);\n      if (!ViewProcessor.cacheHasChild_(viewCache, writePath.getFront())) {\n        curViewCache = this.applyUserOverwrite_(\n          curViewCache,\n          writePath,\n          childNode,\n          writesCache,\n          serverCache,\n          accumulator\n        );\n      }\n    });\n\n    return curViewCache;\n  }\n\n  /**\n   * @param {!Node} node\n   * @param {ImmutableTree.<!Node>} merge\n   * @return {!Node}\n   * @private\n   */\n  private applyMerge_(node: Node, merge: ImmutableTree<Node>): Node {\n    merge.foreach((relativePath, childNode) => {\n      node = node.updateChild(relativePath, childNode);\n    });\n    return node;\n  }\n\n  /**\n   * @param {!ViewCache} viewCache\n   * @param {!Path} path\n   * @param {!ImmutableTree.<!Node>} changedChildren\n   * @param {!WriteTreeRef} writesCache\n   * @param {?Node} serverCache\n   * @param {boolean} filterServerNode\n   * @param {!ChildChangeAccumulator} accumulator\n   * @return {!ViewCache}\n   * @private\n   */\n  private applyServerMerge_(\n    viewCache: ViewCache,\n    path: Path,\n    changedChildren: ImmutableTree<Node>,\n    writesCache: WriteTreeRef,\n    serverCache: Node | null,\n    filterServerNode: boolean,\n    accumulator: ChildChangeAccumulator\n  ): ViewCache {\n    // If we don't have a cache yet, this merge was intended for a previously listen in the same location. Ignore it and\n    // wait for the complete data update coming soon.\n    if (\n      viewCache.getServerCache().getNode().isEmpty() &&\n      !viewCache.getServerCache().isFullyInitialized()\n    ) {\n      return viewCache;\n    }\n\n    // HACK: In the case of a limit query, there may be some changes that bump things out of the\n    // window leaving room for new items.  It's important we process these changes first, so we\n    // iterate the changes twice, first processing any that affect items currently in view.\n    // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n    // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n    // not the other.\n    let curViewCache = viewCache;\n    let viewMergeTree;\n    if (path.isEmpty()) {\n      viewMergeTree = changedChildren;\n    } else {\n      viewMergeTree = ImmutableTree.Empty.setTree(path, changedChildren);\n    }\n    const serverNode = viewCache.getServerCache().getNode();\n    viewMergeTree.children.inorderTraversal((childKey, childTree) => {\n      if (serverNode.hasChild(childKey)) {\n        const serverChild = viewCache\n          .getServerCache()\n          .getNode()\n          .getImmediateChild(childKey);\n        const newChild = this.applyMerge_(serverChild, childTree);\n        curViewCache = this.applyServerOverwrite_(\n          curViewCache,\n          new Path(childKey),\n          newChild,\n          writesCache,\n          serverCache,\n          filterServerNode,\n          accumulator\n        );\n      }\n    });\n    viewMergeTree.children.inorderTraversal((childKey, childMergeTree) => {\n      const isUnknownDeepMerge =\n        !viewCache.getServerCache().isCompleteForChild(childKey) &&\n        childMergeTree.value == null;\n      if (!serverNode.hasChild(childKey) && !isUnknownDeepMerge) {\n        const serverChild = viewCache\n          .getServerCache()\n          .getNode()\n          .getImmediateChild(childKey);\n        const newChild = this.applyMerge_(serverChild, childMergeTree);\n        curViewCache = this.applyServerOverwrite_(\n          curViewCache,\n          new Path(childKey),\n          newChild,\n          writesCache,\n          serverCache,\n          filterServerNode,\n          accumulator\n        );\n      }\n    });\n\n    return curViewCache;\n  }\n\n  /**\n   * @param {!ViewCache} viewCache\n   * @param {!Path} ackPath\n   * @param {!ImmutableTree<!boolean>} affectedTree\n   * @param {!WriteTreeRef} writesCache\n   * @param {?Node} completeCache\n   * @param {!ChildChangeAccumulator} accumulator\n   * @return {!ViewCache}\n   * @private\n   */\n  private ackUserWrite_(\n    viewCache: ViewCache,\n    ackPath: Path,\n    affectedTree: ImmutableTree<boolean>,\n    writesCache: WriteTreeRef,\n    completeCache: Node | null,\n    accumulator: ChildChangeAccumulator\n  ): ViewCache {\n    if (writesCache.shadowingWrite(ackPath) != null) {\n      return viewCache;\n    }\n\n    // Only filter server node if it is currently filtered\n    const filterServerNode = viewCache.getServerCache().isFiltered();\n\n    // Essentially we'll just get our existing server cache for the affected paths and re-apply it as a server update\n    // now that it won't be shadowed.\n    const serverCache = viewCache.getServerCache();\n    if (affectedTree.value != null) {\n      // This is an overwrite.\n      if (\n        (ackPath.isEmpty() && serverCache.isFullyInitialized()) ||\n        serverCache.isCompleteForPath(ackPath)\n      ) {\n        return this.applyServerOverwrite_(\n          viewCache,\n          ackPath,\n          serverCache.getNode().getChild(ackPath),\n          writesCache,\n          completeCache,\n          filterServerNode,\n          accumulator\n        );\n      } else if (ackPath.isEmpty()) {\n        // This is a goofy edge case where we are acking data at this location but don't have full data.  We\n        // should just re-apply whatever we have in our cache as a merge.\n        let changedChildren = ImmutableTree.Empty;\n        serverCache.getNode().forEachChild(KEY_INDEX, (name, node) => {\n          changedChildren = changedChildren.set(new Path(name), node);\n        });\n        return this.applyServerMerge_(\n          viewCache,\n          ackPath,\n          changedChildren,\n          writesCache,\n          completeCache,\n          filterServerNode,\n          accumulator\n        );\n      } else {\n        return viewCache;\n      }\n    } else {\n      // This is a merge.\n      let changedChildren = ImmutableTree.Empty;\n      affectedTree.foreach((mergePath, value) => {\n        const serverCachePath = ackPath.child(mergePath);\n        if (serverCache.isCompleteForPath(serverCachePath)) {\n          changedChildren = changedChildren.set(\n            mergePath,\n            serverCache.getNode().getChild(serverCachePath)\n          );\n        }\n      });\n      return this.applyServerMerge_(\n        viewCache,\n        ackPath,\n        changedChildren,\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  }\n\n  /**\n   * @param {!ViewCache} viewCache\n   * @param {!Path} path\n   * @param {!WriteTreeRef} writesCache\n   * @param {!ChildChangeAccumulator} accumulator\n   * @return {!ViewCache}\n   * @private\n   */\n  private listenComplete_(\n    viewCache: ViewCache,\n    path: Path,\n    writesCache: WriteTreeRef,\n    accumulator: ChildChangeAccumulator\n  ): ViewCache {\n    const oldServerNode = viewCache.getServerCache();\n    const newViewCache = viewCache.updateServerSnap(\n      oldServerNode.getNode(),\n      oldServerNode.isFullyInitialized() || path.isEmpty(),\n      oldServerNode.isFiltered()\n    );\n    return this.generateEventCacheAfterServerEvent_(\n      newViewCache,\n      path,\n      writesCache,\n      NO_COMPLETE_CHILD_SOURCE,\n      accumulator\n    );\n  }\n\n  /**\n   * @param {!ViewCache} viewCache\n   * @param {!Path} path\n   * @param {!WriteTreeRef} writesCache\n   * @param {?Node} completeServerCache\n   * @param {!ChildChangeAccumulator} accumulator\n   * @return {!ViewCache}\n   * @private\n   */\n  private revertUserWrite_(\n    viewCache: ViewCache,\n    path: Path,\n    writesCache: WriteTreeRef,\n    completeServerCache: Node | null,\n    accumulator: ChildChangeAccumulator\n  ): ViewCache {\n    let complete;\n    if (writesCache.shadowingWrite(path) != null) {\n      return viewCache;\n    } else {\n      const source = new WriteTreeCompleteChildSource(\n        writesCache,\n        viewCache,\n        completeServerCache\n      );\n      const oldEventCache = viewCache.getEventCache().getNode();\n      let newEventCache;\n      if (path.isEmpty() || path.getFront() === '.priority') {\n        let newNode;\n        if (viewCache.getServerCache().isFullyInitialized()) {\n          newNode = writesCache.calcCompleteEventCache(\n            viewCache.getCompleteServerSnap()\n          );\n        } else {\n          const serverChildren = viewCache.getServerCache().getNode();\n          assert(\n            serverChildren instanceof ChildrenNode,\n            'serverChildren would be complete if leaf node'\n          );\n          newNode = writesCache.calcCompleteEventChildren(\n            serverChildren as ChildrenNode\n          );\n        }\n        newNode = newNode as Node;\n        newEventCache = this.filter_.updateFullNode(\n          oldEventCache,\n          newNode,\n          accumulator\n        );\n      } else {\n        const childKey = path.getFront();\n        let newChild = writesCache.calcCompleteChild(\n          childKey,\n          viewCache.getServerCache()\n        );\n        if (\n          newChild == null &&\n          viewCache.getServerCache().isCompleteForChild(childKey)\n        ) {\n          newChild = oldEventCache.getImmediateChild(childKey);\n        }\n        if (newChild != null) {\n          newEventCache = this.filter_.updateChild(\n            oldEventCache,\n            childKey,\n            newChild,\n            path.popFront(),\n            source,\n            accumulator\n          );\n        } else if (viewCache.getEventCache().getNode().hasChild(childKey)) {\n          // No complete child available, delete the existing one, if any\n          newEventCache = this.filter_.updateChild(\n            oldEventCache,\n            childKey,\n            ChildrenNode.EMPTY_NODE,\n            path.popFront(),\n            source,\n            accumulator\n          );\n        } else {\n          newEventCache = oldEventCache;\n        }\n        if (\n          newEventCache.isEmpty() &&\n          viewCache.getServerCache().isFullyInitialized()\n        ) {\n          // We might have reverted all child writes. Maybe the old event was a leaf node\n          complete = writesCache.calcCompleteEventCache(\n            viewCache.getCompleteServerSnap()\n          );\n          if (complete.isLeafNode()) {\n            newEventCache = this.filter_.updateFullNode(\n              newEventCache,\n              complete,\n              accumulator\n            );\n          }\n        }\n      }\n      complete =\n        viewCache.getServerCache().isFullyInitialized() ||\n        writesCache.shadowingWrite(Path.Empty) != null;\n      return viewCache.updateEventSnap(\n        newEventCache,\n        complete,\n        this.filter_.filtersNodes()\n      );\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NamedNode, Node } from '../snap/Node';\nimport { Change } from './Change';\nimport { assertionError } from '@firebase/util';\nimport { Query } from '../../api/Query';\nimport { Index } from '../snap/indexes/Index';\nimport { EventRegistration } from './EventRegistration';\nimport { Event } from './Event';\n\n/**\n * An EventGenerator is used to convert \"raw\" changes (Change) as computed by the\n * CacheDiffer into actual events (Event) that can be raised.  See generateEventsForChanges()\n * for details.\n *\n * @constructor\n */\nexport class EventGenerator {\n  private index_: Index;\n\n  /**\n   *\n   * @param {!Query} query_\n   */\n  constructor(private query_: Query) {\n    /**\n     * @private\n     * @type {!Index}\n     */\n    this.index_ = this.query_.getQueryParams().getIndex();\n  }\n\n  /**\n   * Given a set of raw changes (no moved events and prevName not specified yet), and a set of\n   * EventRegistrations that should be notified of these changes, generate the actual events to be raised.\n   *\n   * Notes:\n   *  - child_moved events will be synthesized at this time for any child_changed events that affect\n   *    our index.\n   *  - prevName will be calculated based on the index ordering.\n   *\n   * @param {!Array.<!Change>} changes\n   * @param {!Node} eventCache\n   * @param {!Array.<!EventRegistration>} eventRegistrations\n   * @return {!Array.<!Event>}\n   */\n  generateEventsForChanges(\n    changes: Change[],\n    eventCache: Node,\n    eventRegistrations: EventRegistration[]\n  ): Event[] {\n    const events: Event[] = [];\n    const moves: Change[] = [];\n\n    changes.forEach(change => {\n      if (\n        change.type === Change.CHILD_CHANGED &&\n        this.index_.indexedValueChanged(\n          change.oldSnap as Node,\n          change.snapshotNode\n        )\n      ) {\n        moves.push(\n          Change.childMovedChange(\n            change.childName as string,\n            change.snapshotNode\n          )\n        );\n      }\n    });\n\n    this.generateEventsForType_(\n      events,\n      Change.CHILD_REMOVED,\n      changes,\n      eventRegistrations,\n      eventCache\n    );\n    this.generateEventsForType_(\n      events,\n      Change.CHILD_ADDED,\n      changes,\n      eventRegistrations,\n      eventCache\n    );\n    this.generateEventsForType_(\n      events,\n      Change.CHILD_MOVED,\n      moves,\n      eventRegistrations,\n      eventCache\n    );\n    this.generateEventsForType_(\n      events,\n      Change.CHILD_CHANGED,\n      changes,\n      eventRegistrations,\n      eventCache\n    );\n    this.generateEventsForType_(\n      events,\n      Change.VALUE,\n      changes,\n      eventRegistrations,\n      eventCache\n    );\n\n    return events;\n  }\n\n  /**\n   * Given changes of a single change type, generate the corresponding events.\n   *\n   * @param {!Array.<!Event>} events\n   * @param {!string} eventType\n   * @param {!Array.<!Change>} changes\n   * @param {!Array.<!EventRegistration>} registrations\n   * @param {!Node} eventCache\n   * @private\n   */\n  private generateEventsForType_(\n    events: Event[],\n    eventType: string,\n    changes: Change[],\n    registrations: EventRegistration[],\n    eventCache: Node\n  ) {\n    const filteredChanges = changes.filter(change => change.type === eventType);\n\n    filteredChanges.sort(this.compareChanges_.bind(this));\n    filteredChanges.forEach(change => {\n      const materializedChange = this.materializeSingleChange_(\n        change,\n        eventCache\n      );\n      registrations.forEach(registration => {\n        if (registration.respondsTo(change.type)) {\n          events.push(\n            registration.createEvent(materializedChange, this.query_)\n          );\n        }\n      });\n    });\n  }\n\n  /**\n   * @param {!Change} change\n   * @param {!Node} eventCache\n   * @return {!Change}\n   * @private\n   */\n  private materializeSingleChange_(change: Change, eventCache: Node): Change {\n    if (change.type === 'value' || change.type === 'child_removed') {\n      return change;\n    } else {\n      change.prevName = eventCache.getPredecessorChildName(\n        /** @type {!string} */\n        change.childName,\n        change.snapshotNode,\n        this.index_\n      );\n      return change;\n    }\n  }\n\n  /**\n   * @param {!Change} a\n   * @param {!Change} b\n   * @return {number}\n   * @private\n   */\n  private compareChanges_(a: Change, b: Change) {\n    if (a.childName == null || b.childName == null) {\n      throw assertionError('Should only compare child_ events.');\n    }\n    const aWrapped = new NamedNode(a.childName, a.snapshotNode);\n    const bWrapped = new NamedNode(b.childName, b.snapshotNode);\n    return this.index_.compare(aWrapped, bWrapped);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { IndexedFilter } from './filter/IndexedFilter';\nimport { ViewProcessor } from './ViewProcessor';\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { CacheNode } from './CacheNode';\nimport { ViewCache } from './ViewCache';\nimport { EventGenerator } from './EventGenerator';\nimport { assert } from '@firebase/util';\nimport { Operation, OperationType } from '../operation/Operation';\nimport { Change } from './Change';\nimport { PRIORITY_INDEX } from '../snap/indexes/PriorityIndex';\nimport { Query } from '../../api/Query';\nimport { EventRegistration } from './EventRegistration';\nimport { Node } from '../snap/Node';\nimport { Path } from '../util/Path';\nimport { WriteTreeRef } from '../WriteTree';\nimport { CancelEvent, Event } from './Event';\n\n/**\n * A view represents a specific location and query that has 1 or more event registrations.\n *\n * It does several things:\n *  - Maintains the list of event registrations for this location/query.\n *  - Maintains a cache of the data visible for this location/query.\n *  - Applies new operations (via applyOperation), updates the cache, and based on the event\n *    registrations returns the set of events to be raised.\n * @constructor\n */\nexport class View {\n  private processor_: ViewProcessor;\n  private viewCache_: ViewCache;\n  private eventRegistrations_: EventRegistration[] = [];\n  private eventGenerator_: EventGenerator;\n\n  /**\n   *\n   * @param {!Query} query_\n   * @param {!ViewCache} initialViewCache\n   */\n  constructor(private query_: Query, initialViewCache: ViewCache) {\n    const params = this.query_.getQueryParams();\n\n    const indexFilter = new IndexedFilter(params.getIndex());\n    const filter = params.getNodeFilter();\n\n    /**\n     * @type {ViewProcessor}\n     * @private\n     */\n    this.processor_ = new ViewProcessor(filter);\n\n    const initialServerCache = initialViewCache.getServerCache();\n    const initialEventCache = initialViewCache.getEventCache();\n\n    // Don't filter server node with other filter than index, wait for tagged listen\n    const serverSnap = indexFilter.updateFullNode(\n      ChildrenNode.EMPTY_NODE,\n      initialServerCache.getNode(),\n      null\n    );\n    const eventSnap = filter.updateFullNode(\n      ChildrenNode.EMPTY_NODE,\n      initialEventCache.getNode(),\n      null\n    );\n    const newServerCache = new CacheNode(\n      serverSnap,\n      initialServerCache.isFullyInitialized(),\n      indexFilter.filtersNodes()\n    );\n    const newEventCache = new CacheNode(\n      eventSnap,\n      initialEventCache.isFullyInitialized(),\n      filter.filtersNodes()\n    );\n\n    /**\n     * @type {!ViewCache}\n     * @private\n     */\n    this.viewCache_ = new ViewCache(newEventCache, newServerCache);\n\n    /**\n     * @type {!EventGenerator}\n     * @private\n     */\n    this.eventGenerator_ = new EventGenerator(this.query_);\n  }\n\n  /**\n   * @return {!Query}\n   */\n  getQuery(): Query {\n    return this.query_;\n  }\n\n  /**\n   * @return {?Node}\n   */\n  getServerCache(): Node | null {\n    return this.viewCache_.getServerCache().getNode();\n  }\n\n  /**\n   * @param {!Path} path\n   * @return {?Node}\n   */\n  getCompleteServerCache(path: Path): Node | null {\n    const cache = this.viewCache_.getCompleteServerSnap();\n    if (cache) {\n      // If this isn't a \"loadsAllData\" view, then cache isn't actually a complete cache and\n      // we need to see if it contains the child we're interested in.\n      if (\n        this.query_.getQueryParams().loadsAllData() ||\n        (!path.isEmpty() && !cache.getImmediateChild(path.getFront()).isEmpty())\n      ) {\n        return cache.getChild(path);\n      }\n    }\n    return null;\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isEmpty(): boolean {\n    return this.eventRegistrations_.length === 0;\n  }\n\n  /**\n   * @param {!EventRegistration} eventRegistration\n   */\n  addEventRegistration(eventRegistration: EventRegistration) {\n    this.eventRegistrations_.push(eventRegistration);\n  }\n\n  /**\n   * @param {?EventRegistration} eventRegistration If null, remove all callbacks.\n   * @param {Error=} cancelError If a cancelError is provided, appropriate cancel events will be returned.\n   * @return {!Array.<!Event>} Cancel events, if cancelError was provided.\n   */\n  removeEventRegistration(\n    eventRegistration: EventRegistration | null,\n    cancelError?: Error\n  ): Event[] {\n    const cancelEvents: CancelEvent[] = [];\n    if (cancelError) {\n      assert(\n        eventRegistration == null,\n        'A cancel should cancel all event registrations.'\n      );\n      const path = this.query_.path;\n      this.eventRegistrations_.forEach(registration => {\n        cancelError /** @type {!Error} */ = cancelError;\n        const maybeEvent = registration.createCancelEvent(cancelError, path);\n        if (maybeEvent) {\n          cancelEvents.push(maybeEvent);\n        }\n      });\n    }\n\n    if (eventRegistration) {\n      let remaining = [];\n      for (let i = 0; i < this.eventRegistrations_.length; ++i) {\n        const existing = this.eventRegistrations_[i];\n        if (!existing.matches(eventRegistration)) {\n          remaining.push(existing);\n        } else if (eventRegistration.hasAnyCallback()) {\n          // We're removing just this one\n          remaining = remaining.concat(this.eventRegistrations_.slice(i + 1));\n          break;\n        }\n      }\n      this.eventRegistrations_ = remaining;\n    } else {\n      this.eventRegistrations_ = [];\n    }\n    return cancelEvents;\n  }\n\n  /**\n   * Applies the given Operation, updates our cache, and returns the appropriate events.\n   *\n   * @param {!Operation} operation\n   * @param {!WriteTreeRef} writesCache\n   * @param {?Node} completeServerCache\n   * @return {!Array.<!Event>}\n   */\n  applyOperation(\n    operation: Operation,\n    writesCache: WriteTreeRef,\n    completeServerCache: Node | null\n  ): Event[] {\n    if (\n      operation.type === OperationType.MERGE &&\n      operation.source.queryId !== null\n    ) {\n      assert(\n        this.viewCache_.getCompleteServerSnap(),\n        'We should always have a full cache before handling merges'\n      );\n      assert(\n        this.viewCache_.getCompleteEventSnap(),\n        'Missing event cache, even though we have a server cache'\n      );\n    }\n\n    const oldViewCache = this.viewCache_;\n    const result = this.processor_.applyOperation(\n      oldViewCache,\n      operation,\n      writesCache,\n      completeServerCache\n    );\n    this.processor_.assertIndexed(result.viewCache);\n\n    assert(\n      result.viewCache.getServerCache().isFullyInitialized() ||\n        !oldViewCache.getServerCache().isFullyInitialized(),\n      'Once a server snap is complete, it should never go back'\n    );\n\n    this.viewCache_ = result.viewCache;\n\n    return this.generateEventsForChanges_(\n      result.changes,\n      result.viewCache.getEventCache().getNode(),\n      null\n    );\n  }\n\n  /**\n   * @param {!EventRegistration} registration\n   * @return {!Array.<!Event>}\n   */\n  getInitialEvents(registration: EventRegistration): Event[] {\n    const eventSnap = this.viewCache_.getEventCache();\n    const initialChanges: Change[] = [];\n    if (!eventSnap.getNode().isLeafNode()) {\n      const eventNode = eventSnap.getNode() as ChildrenNode;\n      eventNode.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n        initialChanges.push(Change.childAddedChange(key, childNode));\n      });\n    }\n    if (eventSnap.isFullyInitialized()) {\n      initialChanges.push(Change.valueChange(eventSnap.getNode()));\n    }\n    return this.generateEventsForChanges_(\n      initialChanges,\n      eventSnap.getNode(),\n      registration\n    );\n  }\n\n  /**\n   * @private\n   * @param {!Array.<!Change>} changes\n   * @param {!Node} eventCache\n   * @param {EventRegistration=} eventRegistration\n   * @return {!Array.<!Event>}\n   */\n  generateEventsForChanges_(\n    changes: Change[],\n    eventCache: Node,\n    eventRegistration?: EventRegistration\n  ): Event[] {\n    const registrations = eventRegistration\n      ? [eventRegistration]\n      : this.eventRegistrations_;\n    return this.eventGenerator_.generateEventsForChanges(\n      changes,\n      eventCache,\n      registrations\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ImmutableTree } from './util/ImmutableTree';\nimport { Path } from './util/Path';\nimport { Node, NamedNode } from './snap/Node';\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { assert } from '@firebase/util';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { each } from './util/util';\n\n/**\n * This class holds a collection of writes that can be applied to nodes in unison. It abstracts away the logic with\n * dealing with priority writes and multiple nested writes. At any given path there is only allowed to be one write\n * modifying that path. Any write to an existing path or shadowing an existing path will modify that existing write\n * to reflect the write added.\n */\nexport class CompoundWrite {\n  constructor(private writeTree_: ImmutableTree<Node>) {}\n\n  static Empty = new CompoundWrite(new ImmutableTree(null));\n\n  addWrite(path: Path, node: Node): CompoundWrite {\n    if (path.isEmpty()) {\n      return new CompoundWrite(new ImmutableTree(node));\n    } else {\n      const rootmost = this.writeTree_.findRootMostValueAndPath(path);\n      if (rootmost != null) {\n        const rootMostPath = rootmost.path;\n        let value = rootmost.value;\n        const relativePath = Path.relativePath(rootMostPath, path);\n        value = value.updateChild(relativePath, node);\n        return new CompoundWrite(this.writeTree_.set(rootMostPath, value));\n      } else {\n        const subtree = new ImmutableTree(node);\n        const newWriteTree = this.writeTree_.setTree(path, subtree);\n        return new CompoundWrite(newWriteTree);\n      }\n    }\n  }\n\n  addWrites(path: Path, updates: { [name: string]: Node }): CompoundWrite {\n    let newWrite = this as CompoundWrite;\n    each(updates, (childKey: string, node: Node) => {\n      newWrite = newWrite.addWrite(path.child(childKey), node);\n    });\n    return newWrite;\n  }\n\n  /**\n   * Will remove a write at the given path and deeper paths. This will <em>not</em> modify a write at a higher\n   * location, which must be removed by calling this method with that path.\n   *\n   * @param path The path at which a write and all deeper writes should be removed\n   * @return {!CompoundWrite} The new CompoundWrite with the removed path\n   */\n  removeWrite(path: Path): CompoundWrite {\n    if (path.isEmpty()) {\n      return CompoundWrite.Empty;\n    } else {\n      const newWriteTree = this.writeTree_.setTree(path, ImmutableTree.Empty);\n      return new CompoundWrite(newWriteTree);\n    }\n  }\n\n  /**\n   * Returns whether this CompoundWrite will fully overwrite a node at a given location and can therefore be\n   * considered \"complete\".\n   *\n   * @param path The path to check for\n   * @return Whether there is a complete write at that path\n   */\n  hasCompleteWrite(path: Path): boolean {\n    return this.getCompleteNode(path) != null;\n  }\n\n  /**\n   * Returns a node for a path if and only if the node is a \"complete\" overwrite at that path. This will not aggregate\n   * writes from deeper paths, but will return child nodes from a more shallow path.\n   *\n   * @param path The path to get a complete write\n   * @return The node if complete at that path, or null otherwise.\n   */\n  getCompleteNode(path: Path): Node | null {\n    const rootmost = this.writeTree_.findRootMostValueAndPath(path);\n    if (rootmost != null) {\n      return this.writeTree_\n        .get(rootmost.path)\n        .getChild(Path.relativePath(rootmost.path, path));\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Returns all children that are guaranteed to be a complete overwrite.\n   *\n   * @return A list of all complete children.\n   */\n  getCompleteChildren(): NamedNode[] {\n    const children: NamedNode[] = [];\n    const node = this.writeTree_.value;\n    if (node != null) {\n      // If it's a leaf node, it has no children; so nothing to do.\n      if (!node.isLeafNode()) {\n        (node as ChildrenNode).forEachChild(\n          PRIORITY_INDEX,\n          (childName, childNode) => {\n            children.push(new NamedNode(childName, childNode));\n          }\n        );\n      }\n    } else {\n      this.writeTree_.children.inorderTraversal((childName, childTree) => {\n        if (childTree.value != null) {\n          children.push(new NamedNode(childName, childTree.value));\n        }\n      });\n    }\n    return children;\n  }\n\n  childCompoundWrite(path: Path): CompoundWrite {\n    if (path.isEmpty()) {\n      return this;\n    } else {\n      const shadowingNode = this.getCompleteNode(path);\n      if (shadowingNode != null) {\n        return new CompoundWrite(new ImmutableTree(shadowingNode));\n      } else {\n        return new CompoundWrite(this.writeTree_.subtree(path));\n      }\n    }\n  }\n\n  /**\n   * Returns true if this CompoundWrite is empty and therefore does not modify any nodes.\n   * @return Whether this CompoundWrite is empty\n   */\n  isEmpty(): boolean {\n    return this.writeTree_.isEmpty();\n  }\n\n  /**\n   * Applies this CompoundWrite to a node. The node is returned with all writes from this CompoundWrite applied to the\n   * node\n   * @param node The node to apply this CompoundWrite to\n   * @return The node with all writes applied\n   */\n  apply(node: Node): Node {\n    return applySubtreeWrite(Path.Empty, this.writeTree_, node);\n  }\n}\n\nfunction applySubtreeWrite(\n  relativePath: Path,\n  writeTree: ImmutableTree<Node>,\n  node: Node\n): Node {\n  if (writeTree.value != null) {\n    // Since there a write is always a leaf, we're done here\n    return node.updateChild(relativePath, writeTree.value);\n  } else {\n    let priorityWrite = null;\n    writeTree.children.inorderTraversal((childKey, childTree) => {\n      if (childKey === '.priority') {\n        // Apply priorities at the end so we don't update priorities for either empty nodes or forget\n        // to apply priorities to empty nodes that are later filled\n        assert(\n          childTree.value !== null,\n          'Priority writes must always be leaf nodes'\n        );\n        priorityWrite = childTree.value;\n      } else {\n        node = applySubtreeWrite(relativePath.child(childKey), childTree, node);\n      }\n    });\n    // If there was a priority write, we only apply it if the node is not empty\n    if (!node.getChild(relativePath).isEmpty() && priorityWrite !== null) {\n      node = node.updateChild(relativePath.child('.priority'), priorityWrite);\n    }\n    return node;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { safeGet, assert, assertionError } from '@firebase/util';\n\nimport { Path } from './util/Path';\nimport { CompoundWrite } from './CompoundWrite';\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { NamedNode, Node } from './snap/Node';\nimport { CacheNode } from './view/CacheNode';\nimport { Index } from './snap/indexes/Index';\nimport { each } from './util/util';\n\n/**\n * Defines a single user-initiated write operation. May be the result of a set(), transaction(), or update() call. In\n * the case of a set() or transaction, snap wil be non-null.  In the case of an update(), children will be non-null.\n */\nexport interface WriteRecord {\n  writeId: number;\n  path: Path;\n  snap?: Node | null;\n  children?: { [k: string]: Node } | null;\n  visible: boolean;\n}\n\n/**\n * WriteTree tracks all pending user-initiated writes and has methods to calculate the result of merging them\n * with underlying server data (to create \"event cache\" data).  Pending writes are added with addOverwrite()\n * and addMerge(), and removed with removeWrite().\n *\n * @constructor\n */\nexport class WriteTree {\n  /**\n   * A tree tracking the result of applying all visible writes.  This does not include transactions with\n   * applyLocally=false or writes that are completely shadowed by other writes.\n   *\n   * @type {!CompoundWrite}\n   * @private\n   */\n  private visibleWrites_: CompoundWrite = CompoundWrite.Empty;\n\n  /**\n   * A list of all pending writes, regardless of visibility and shadowed-ness.  Used to calculate arbitrary\n   * sets of the changed data, such as hidden writes (from transactions) or changes with certain writes excluded (also\n   * used by transactions).\n   *\n   * @type {!Array.<!WriteRecord>}\n   * @private\n   */\n  private allWrites_: WriteRecord[] = [];\n\n  private lastWriteId_ = -1;\n\n  /**\n   * Create a new WriteTreeRef for the given path. For use with a new sync point at the given path.\n   *\n   * @param {!Path} path\n   * @return {!WriteTreeRef}\n   */\n  childWrites(path: Path): WriteTreeRef {\n    return new WriteTreeRef(path, this);\n  }\n\n  /**\n   * Record a new overwrite from user code.\n   *\n   * @param {!Path} path\n   * @param {!Node} snap\n   * @param {!number} writeId\n   * @param {boolean=} visible This is set to false by some transactions. It should be excluded from event caches\n   */\n  addOverwrite(path: Path, snap: Node, writeId: number, visible?: boolean) {\n    assert(\n      writeId > this.lastWriteId_,\n      'Stacking an older write on top of newer ones'\n    );\n    if (visible === undefined) {\n      visible = true;\n    }\n    this.allWrites_.push({\n      path,\n      snap,\n      writeId,\n      visible\n    });\n\n    if (visible) {\n      this.visibleWrites_ = this.visibleWrites_.addWrite(path, snap);\n    }\n    this.lastWriteId_ = writeId;\n  }\n\n  /**\n   * Record a new merge from user code.\n   *\n   * @param {!Path} path\n   * @param {!Object.<string, !Node>} changedChildren\n   * @param {!number} writeId\n   */\n  addMerge(\n    path: Path,\n    changedChildren: { [k: string]: Node },\n    writeId: number\n  ) {\n    assert(\n      writeId > this.lastWriteId_,\n      'Stacking an older merge on top of newer ones'\n    );\n    this.allWrites_.push({\n      path,\n      children: changedChildren,\n      writeId,\n      visible: true\n    });\n\n    this.visibleWrites_ = this.visibleWrites_.addWrites(path, changedChildren);\n    this.lastWriteId_ = writeId;\n  }\n\n  /**\n   * @param {!number} writeId\n   * @return {?WriteRecord}\n   */\n  getWrite(writeId: number): WriteRecord | null {\n    for (let i = 0; i < this.allWrites_.length; i++) {\n      const record = this.allWrites_[i];\n      if (record.writeId === writeId) {\n        return record;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Remove a write (either an overwrite or merge) that has been successfully acknowledge by the server. Recalculates\n   * the tree if necessary.  We return true if it may have been visible, meaning views need to reevaluate.\n   *\n   * @param {!number} writeId\n   * @return {boolean} true if the write may have been visible (meaning we'll need to reevaluate / raise\n   * events as a result).\n   */\n  removeWrite(writeId: number): boolean {\n    // Note: disabling this check. It could be a transaction that preempted another transaction, and thus was applied\n    // out of order.\n    //const validClear = revert || this.allWrites_.length === 0 || writeId <= this.allWrites_[0].writeId;\n    //assert(validClear, \"Either we don't have this write, or it's the first one in the queue\");\n\n    const idx = this.allWrites_.findIndex(s => {\n      return s.writeId === writeId;\n    });\n    assert(idx >= 0, 'removeWrite called with nonexistent writeId.');\n    const writeToRemove = this.allWrites_[idx];\n    this.allWrites_.splice(idx, 1);\n\n    let removedWriteWasVisible = writeToRemove.visible;\n    let removedWriteOverlapsWithOtherWrites = false;\n\n    let i = this.allWrites_.length - 1;\n\n    while (removedWriteWasVisible && i >= 0) {\n      const currentWrite = this.allWrites_[i];\n      if (currentWrite.visible) {\n        if (\n          i >= idx &&\n          this.recordContainsPath_(currentWrite, writeToRemove.path)\n        ) {\n          // The removed write was completely shadowed by a subsequent write.\n          removedWriteWasVisible = false;\n        } else if (writeToRemove.path.contains(currentWrite.path)) {\n          // Either we're covering some writes or they're covering part of us (depending on which came first).\n          removedWriteOverlapsWithOtherWrites = true;\n        }\n      }\n      i--;\n    }\n\n    if (!removedWriteWasVisible) {\n      return false;\n    } else if (removedWriteOverlapsWithOtherWrites) {\n      // There's some shadowing going on. Just rebuild the visible writes from scratch.\n      this.resetTree_();\n      return true;\n    } else {\n      // There's no shadowing.  We can safely just remove the write(s) from visibleWrites.\n      if (writeToRemove.snap) {\n        this.visibleWrites_ = this.visibleWrites_.removeWrite(\n          writeToRemove.path\n        );\n      } else {\n        const children = writeToRemove.children;\n        each(children, (childName: string) => {\n          this.visibleWrites_ = this.visibleWrites_.removeWrite(\n            writeToRemove.path.child(childName)\n          );\n        });\n      }\n      return true;\n    }\n  }\n\n  /**\n   * Return a complete snapshot for the given path if there's visible write data at that path, else null.\n   * No server data is considered.\n   *\n   * @param {!Path} path\n   * @return {?Node}\n   */\n  getCompleteWriteData(path: Path): Node | null {\n    return this.visibleWrites_.getCompleteNode(path);\n  }\n\n  /**\n   * Given optional, underlying server data, and an optional set of constraints (exclude some sets, include hidden\n   * writes), attempt to calculate a complete snapshot for the given path\n   *\n   * @param {!Path} treePath\n   * @param {?Node} completeServerCache\n   * @param {Array.<number>=} writeIdsToExclude An optional set to be excluded\n   * @param {boolean=} includeHiddenWrites Defaults to false, whether or not to layer on writes with visible set to false\n   * @return {?Node}\n   */\n  calcCompleteEventCache(\n    treePath: Path,\n    completeServerCache: Node | null,\n    writeIdsToExclude?: number[],\n    includeHiddenWrites?: boolean\n  ): Node | null {\n    if (!writeIdsToExclude && !includeHiddenWrites) {\n      const shadowingNode = this.visibleWrites_.getCompleteNode(treePath);\n      if (shadowingNode != null) {\n        return shadowingNode;\n      } else {\n        const subMerge = this.visibleWrites_.childCompoundWrite(treePath);\n        if (subMerge.isEmpty()) {\n          return completeServerCache;\n        } else if (\n          completeServerCache == null &&\n          !subMerge.hasCompleteWrite(Path.Empty)\n        ) {\n          // We wouldn't have a complete snapshot, since there's no underlying data and no complete shadow\n          return null;\n        } else {\n          const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n          return subMerge.apply(layeredCache);\n        }\n      }\n    } else {\n      const merge = this.visibleWrites_.childCompoundWrite(treePath);\n      if (!includeHiddenWrites && merge.isEmpty()) {\n        return completeServerCache;\n      } else {\n        // If the server cache is null, and we don't have a complete cache, we need to return null\n        if (\n          !includeHiddenWrites &&\n          completeServerCache == null &&\n          !merge.hasCompleteWrite(Path.Empty)\n        ) {\n          return null;\n        } else {\n          const filter = function (write: WriteRecord) {\n            return (\n              (write.visible || includeHiddenWrites) &&\n              (!writeIdsToExclude ||\n                !~writeIdsToExclude.indexOf(write.writeId)) &&\n              (write.path.contains(treePath) || treePath.contains(write.path))\n            );\n          };\n          const mergeAtPath = WriteTree.layerTree_(\n            this.allWrites_,\n            filter,\n            treePath\n          );\n          const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n          return mergeAtPath.apply(layeredCache);\n        }\n      }\n    }\n  }\n\n  /**\n   * With optional, underlying server data, attempt to return a children node of children that we have complete data for.\n   * Used when creating new views, to pre-fill their complete event children snapshot.\n   *\n   * @param {!Path} treePath\n   * @param {?ChildrenNode} completeServerChildren\n   * @return {!ChildrenNode}\n   */\n  calcCompleteEventChildren(\n    treePath: Path,\n    completeServerChildren: ChildrenNode | null\n  ) {\n    let completeChildren = ChildrenNode.EMPTY_NODE as Node;\n    const topLevelSet = this.visibleWrites_.getCompleteNode(treePath);\n    if (topLevelSet) {\n      if (!topLevelSet.isLeafNode()) {\n        // we're shadowing everything. Return the children.\n        topLevelSet.forEachChild(PRIORITY_INDEX, (childName, childSnap) => {\n          completeChildren = completeChildren.updateImmediateChild(\n            childName,\n            childSnap\n          );\n        });\n      }\n      return completeChildren;\n    } else if (completeServerChildren) {\n      // Layer any children we have on top of this\n      // We know we don't have a top-level set, so just enumerate existing children\n      const merge = this.visibleWrites_.childCompoundWrite(treePath);\n      completeServerChildren.forEachChild(\n        PRIORITY_INDEX,\n        (childName, childNode) => {\n          const node = merge\n            .childCompoundWrite(new Path(childName))\n            .apply(childNode);\n          completeChildren = completeChildren.updateImmediateChild(\n            childName,\n            node\n          );\n        }\n      );\n      // Add any complete children we have from the set\n      merge.getCompleteChildren().forEach(namedNode => {\n        completeChildren = completeChildren.updateImmediateChild(\n          namedNode.name,\n          namedNode.node\n        );\n      });\n      return completeChildren;\n    } else {\n      // We don't have anything to layer on top of. Layer on any children we have\n      // Note that we can return an empty snap if we have a defined delete\n      const merge = this.visibleWrites_.childCompoundWrite(treePath);\n      merge.getCompleteChildren().forEach(namedNode => {\n        completeChildren = completeChildren.updateImmediateChild(\n          namedNode.name,\n          namedNode.node\n        );\n      });\n      return completeChildren;\n    }\n  }\n\n  /**\n   * Given that the underlying server data has updated, determine what, if anything, needs to be\n   * applied to the event cache.\n   *\n   * Possibilities:\n   *\n   * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\n   *\n   * 2. Some write is completely shadowing. No events to be raised\n   *\n   * 3. Is partially shadowed. Events\n   *\n   * Either existingEventSnap or existingServerSnap must exist\n   *\n   * @param {!Path} treePath\n   * @param {!Path} childPath\n   * @param {?Node} existingEventSnap\n   * @param {?Node} existingServerSnap\n   * @return {?Node}\n   */\n  calcEventCacheAfterServerOverwrite(\n    treePath: Path,\n    childPath: Path,\n    existingEventSnap: Node | null,\n    existingServerSnap: Node | null\n  ): Node | null {\n    assert(\n      existingEventSnap || existingServerSnap,\n      'Either existingEventSnap or existingServerSnap must exist'\n    );\n    const path = treePath.child(childPath);\n    if (this.visibleWrites_.hasCompleteWrite(path)) {\n      // At this point we can probably guarantee that we're in case 2, meaning no events\n      // May need to check visibility while doing the findRootMostValueAndPath call\n      return null;\n    } else {\n      // No complete shadowing. We're either partially shadowing or not shadowing at all.\n      const childMerge = this.visibleWrites_.childCompoundWrite(path);\n      if (childMerge.isEmpty()) {\n        // We're not shadowing at all. Case 1\n        return existingServerSnap.getChild(childPath);\n      } else {\n        // This could be more efficient if the serverNode + updates doesn't change the eventSnap\n        // However this is tricky to find out, since user updates don't necessary change the server\n        // snap, e.g. priority updates on empty nodes, or deep deletes. Another special case is if the server\n        // adds nodes, but doesn't change any existing writes. It is therefore not enough to\n        // only check if the updates change the serverNode.\n        // Maybe check if the merge tree contains these special cases and only do a full overwrite in that case?\n        return childMerge.apply(existingServerSnap.getChild(childPath));\n      }\n    }\n  }\n\n  /**\n   * Returns a complete child for a given server snap after applying all user writes or null if there is no\n   * complete child for this ChildKey.\n   *\n   * @param {!Path} treePath\n   * @param {!string} childKey\n   * @param {!CacheNode} existingServerSnap\n   * @return {?Node}\n   */\n  calcCompleteChild(\n    treePath: Path,\n    childKey: string,\n    existingServerSnap: CacheNode\n  ): Node | null {\n    const path = treePath.child(childKey);\n    const shadowingNode = this.visibleWrites_.getCompleteNode(path);\n    if (shadowingNode != null) {\n      return shadowingNode;\n    } else {\n      if (existingServerSnap.isCompleteForChild(childKey)) {\n        const childMerge = this.visibleWrites_.childCompoundWrite(path);\n        return childMerge.apply(\n          existingServerSnap.getNode().getImmediateChild(childKey)\n        );\n      } else {\n        return null;\n      }\n    }\n  }\n\n  /**\n   * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\n   * a higher path, this will return the child of that write relative to the write and this path.\n   * Returns null if there is no write at this path.\n   */\n  shadowingWrite(path: Path): Node | null {\n    return this.visibleWrites_.getCompleteNode(path);\n  }\n\n  /**\n   * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\n   * the window, but may now be in the window.\n   */\n  calcIndexedSlice(\n    treePath: Path,\n    completeServerData: Node | null,\n    startPost: NamedNode,\n    count: number,\n    reverse: boolean,\n    index: Index\n  ): NamedNode[] {\n    let toIterate: Node;\n    const merge = this.visibleWrites_.childCompoundWrite(treePath);\n    const shadowingNode = merge.getCompleteNode(Path.Empty);\n    if (shadowingNode != null) {\n      toIterate = shadowingNode;\n    } else if (completeServerData != null) {\n      toIterate = merge.apply(completeServerData);\n    } else {\n      // no children to iterate on\n      return [];\n    }\n    toIterate = toIterate.withIndex(index);\n    if (!toIterate.isEmpty() && !toIterate.isLeafNode()) {\n      const nodes = [];\n      const cmp = index.getCompare();\n      const iter = reverse\n        ? (toIterate as ChildrenNode).getReverseIteratorFrom(startPost, index)\n        : (toIterate as ChildrenNode).getIteratorFrom(startPost, index);\n      let next = iter.getNext();\n      while (next && nodes.length < count) {\n        if (cmp(next, startPost) !== 0) {\n          nodes.push(next);\n        }\n        next = iter.getNext();\n      }\n      return nodes;\n    } else {\n      return [];\n    }\n  }\n\n  private recordContainsPath_(writeRecord: WriteRecord, path: Path): boolean {\n    if (writeRecord.snap) {\n      return writeRecord.path.contains(path);\n    } else {\n      for (const childName in writeRecord.children) {\n        if (\n          writeRecord.children.hasOwnProperty(childName) &&\n          writeRecord.path.child(childName).contains(path)\n        ) {\n          return true;\n        }\n      }\n      return false;\n    }\n  }\n\n  /**\n   * Re-layer the writes and merges into a tree so we can efficiently calculate event snapshots\n   */\n  private resetTree_() {\n    this.visibleWrites_ = WriteTree.layerTree_(\n      this.allWrites_,\n      WriteTree.DefaultFilter_,\n      Path.Empty\n    );\n    if (this.allWrites_.length > 0) {\n      this.lastWriteId_ = this.allWrites_[this.allWrites_.length - 1].writeId;\n    } else {\n      this.lastWriteId_ = -1;\n    }\n  }\n\n  /**\n   * The default filter used when constructing the tree. Keep everything that's visible.\n   */\n  private static DefaultFilter_(write: WriteRecord) {\n    return write.visible;\n  }\n\n  /**\n   * Static method. Given an array of WriteRecords, a filter for which ones to include, and a path, construct the tree of\n   * event data at that path.\n   */\n  private static layerTree_(\n    writes: WriteRecord[],\n    filter: (w: WriteRecord) => boolean,\n    treeRoot: Path\n  ): CompoundWrite {\n    let compoundWrite = CompoundWrite.Empty;\n    for (let i = 0; i < writes.length; ++i) {\n      const write = writes[i];\n      // Theory, a later set will either:\n      // a) abort a relevant transaction, so no need to worry about excluding it from calculating that transaction\n      // b) not be relevant to a transaction (separate branch), so again will not affect the data for that transaction\n      if (filter(write)) {\n        const writePath = write.path;\n        let relativePath;\n        if (write.snap) {\n          if (treeRoot.contains(writePath)) {\n            relativePath = Path.relativePath(treeRoot, writePath);\n            compoundWrite = compoundWrite.addWrite(relativePath, write.snap);\n          } else if (writePath.contains(treeRoot)) {\n            relativePath = Path.relativePath(writePath, treeRoot);\n            compoundWrite = compoundWrite.addWrite(\n              Path.Empty,\n              write.snap.getChild(relativePath)\n            );\n          } else {\n            // There is no overlap between root path and write path, ignore write\n          }\n        } else if (write.children) {\n          if (treeRoot.contains(writePath)) {\n            relativePath = Path.relativePath(treeRoot, writePath);\n            compoundWrite = compoundWrite.addWrites(\n              relativePath,\n              write.children\n            );\n          } else if (writePath.contains(treeRoot)) {\n            relativePath = Path.relativePath(writePath, treeRoot);\n            if (relativePath.isEmpty()) {\n              compoundWrite = compoundWrite.addWrites(\n                Path.Empty,\n                write.children\n              );\n            } else {\n              const child = safeGet(write.children, relativePath.getFront());\n              if (child) {\n                // There exists a child in this node that matches the root path\n                const deepNode = child.getChild(relativePath.popFront());\n                compoundWrite = compoundWrite.addWrite(Path.Empty, deepNode);\n              }\n            }\n          } else {\n            // There is no overlap between root path and write path, ignore write\n          }\n        } else {\n          throw assertionError('WriteRecord should have .snap or .children');\n        }\n      }\n    }\n    return compoundWrite;\n  }\n}\n\n/**\n * A WriteTreeRef wraps a WriteTree and a path, for convenient access to a particular subtree.  All of the methods\n * just proxy to the underlying WriteTree.\n *\n * @constructor\n */\nexport class WriteTreeRef {\n  /**\n   * The path to this particular write tree ref. Used for calling methods on writeTree_ while exposing a simpler\n   * interface to callers.\n   *\n   * @type {!Path}\n   * @private\n   * @const\n   */\n  private readonly treePath_: Path;\n\n  /**\n   * * A reference to the actual tree of write data. All methods are pass-through to the tree, but with the appropriate\n   * path prefixed.\n   *\n   * This lets us make cheap references to points in the tree for sync points without having to copy and maintain all of\n   * the data.\n   *\n   * @type {!WriteTree}\n   * @private\n   * @const\n   */\n  private readonly writeTree_: WriteTree;\n\n  /**\n   * @param {!Path} path\n   * @param {!WriteTree} writeTree\n   */\n  constructor(path: Path, writeTree: WriteTree) {\n    this.treePath_ = path;\n    this.writeTree_ = writeTree;\n  }\n\n  /**\n   * If possible, returns a complete event cache, using the underlying server data if possible. In addition, can be used\n   * to get a cache that includes hidden writes, and excludes arbitrary writes. Note that customizing the returned node\n   * can lead to a more expensive calculation.\n   *\n   * @param {?Node} completeServerCache\n   * @param {Array.<number>=} writeIdsToExclude Optional writes to exclude.\n   * @param {boolean=} includeHiddenWrites Defaults to false, whether or not to layer on writes with visible set to false\n   * @return {?Node}\n   */\n  calcCompleteEventCache(\n    completeServerCache: Node | null,\n    writeIdsToExclude?: number[],\n    includeHiddenWrites?: boolean\n  ): Node | null {\n    return this.writeTree_.calcCompleteEventCache(\n      this.treePath_,\n      completeServerCache,\n      writeIdsToExclude,\n      includeHiddenWrites\n    );\n  }\n\n  /**\n   * If possible, returns a children node containing all of the complete children we have data for. The returned data is a\n   * mix of the given server data and write data.\n   *\n   * @param {?ChildrenNode} completeServerChildren\n   * @return {!ChildrenNode}\n   */\n  calcCompleteEventChildren(\n    completeServerChildren: ChildrenNode | null\n  ): ChildrenNode {\n    return this.writeTree_.calcCompleteEventChildren(\n      this.treePath_,\n      completeServerChildren\n    ) as ChildrenNode;\n  }\n\n  /**\n   * Given that either the underlying server data has updated or the outstanding writes have updated, determine what,\n   * if anything, needs to be applied to the event cache.\n   *\n   * Possibilities:\n   *\n   * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\n   *\n   * 2. Some write is completely shadowing. No events to be raised\n   *\n   * 3. Is partially shadowed. Events should be raised\n   *\n   * Either existingEventSnap or existingServerSnap must exist, this is validated via an assert\n   *\n   * @param {!Path} path\n   * @param {?Node} existingEventSnap\n   * @param {?Node} existingServerSnap\n   * @return {?Node}\n   */\n  calcEventCacheAfterServerOverwrite(\n    path: Path,\n    existingEventSnap: Node | null,\n    existingServerSnap: Node | null\n  ): Node | null {\n    return this.writeTree_.calcEventCacheAfterServerOverwrite(\n      this.treePath_,\n      path,\n      existingEventSnap,\n      existingServerSnap\n    );\n  }\n\n  /**\n   * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\n   * a higher path, this will return the child of that write relative to the write and this path.\n   * Returns null if there is no write at this path.\n   *\n   * @param {!Path} path\n   * @return {?Node}\n   */\n  shadowingWrite(path: Path): Node | null {\n    return this.writeTree_.shadowingWrite(this.treePath_.child(path));\n  }\n\n  /**\n   * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\n   * the window, but may now be in the window\n   *\n   * @param {?Node} completeServerData\n   * @param {!NamedNode} startPost\n   * @param {!number} count\n   * @param {boolean} reverse\n   * @param {!Index} index\n   * @return {!Array.<!NamedNode>}\n   */\n  calcIndexedSlice(\n    completeServerData: Node | null,\n    startPost: NamedNode,\n    count: number,\n    reverse: boolean,\n    index: Index\n  ): NamedNode[] {\n    return this.writeTree_.calcIndexedSlice(\n      this.treePath_,\n      completeServerData,\n      startPost,\n      count,\n      reverse,\n      index\n    );\n  }\n\n  /**\n   * Returns a complete child for a given server snap after applying all user writes or null if there is no\n   * complete child for this ChildKey.\n   *\n   * @param {!string} childKey\n   * @param {!CacheNode} existingServerCache\n   * @return {?Node}\n   */\n  calcCompleteChild(\n    childKey: string,\n    existingServerCache: CacheNode\n  ): Node | null {\n    return this.writeTree_.calcCompleteChild(\n      this.treePath_,\n      childKey,\n      existingServerCache\n    );\n  }\n\n  /**\n   * Return a WriteTreeRef for a child.\n   *\n   * @param {string} childName\n   * @return {!WriteTreeRef}\n   */\n  child(childName: string): WriteTreeRef {\n    return new WriteTreeRef(this.treePath_.child(childName), this.writeTree_);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { errorForServerCode, each } from './util/util';\nimport { AckUserWrite } from './operation/AckUserWrite';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { ImmutableTree } from './util/ImmutableTree';\nimport { ListenComplete } from './operation/ListenComplete';\nimport { Merge } from './operation/Merge';\nimport { Operation, OperationSource } from './operation/Operation';\nimport { Overwrite } from './operation/Overwrite';\nimport { Path } from './util/Path';\nimport { SyncPoint } from './SyncPoint';\nimport { WriteTree, WriteTreeRef } from './WriteTree';\nimport { Query } from '../api/Query';\nimport { Node } from './snap/Node';\nimport { Event } from './view/Event';\nimport { EventRegistration } from './view/EventRegistration';\nimport { View } from './view/View';\n\n/**\n * @typedef {{\n *   startListening: function(\n *     !Query,\n *     ?number,\n *     function():string,\n *     function(!string, *):!Array.<!Event>\n *   ):!Array.<!Event>,\n *\n *   stopListening: function(!Query, ?number)\n * }}\n */\nexport interface ListenProvider {\n  startListening(\n    query: Query,\n    tag: number | null,\n    hashFn: () => string,\n    onComplete: (a: string, b?: unknown) => Event[]\n  ): Event[];\n\n  stopListening(a: Query, b: number | null): void;\n}\n\n/**\n * SyncTree is the central class for managing event callback registration, data caching, views\n * (query processing), and event generation.  There are typically two SyncTree instances for\n * each Repo, one for the normal Firebase data, and one for the .info data.\n *\n * It has a number of responsibilities, including:\n *  - Tracking all user event callbacks (registered via addEventRegistration() and removeEventRegistration()).\n *  - Applying and caching data changes for user set(), transaction(), and update() calls\n *    (applyUserOverwrite(), applyUserMerge()).\n *  - Applying and caching data changes for server data changes (applyServerOverwrite(),\n *    applyServerMerge()).\n *  - Generating user-facing events for server and user changes (all of the apply* methods\n *    return the set of events that need to be raised as a result).\n *  - Maintaining the appropriate set of server listens to ensure we are always subscribed\n *    to the correct set of paths and queries to satisfy the current set of user event\n *    callbacks (listens are started/stopped using the provided listenProvider).\n *\n * NOTE: Although SyncTree tracks event callbacks and calculates events to raise, the actual\n * events are returned to the caller rather than raised synchronously.\n *\n * @constructor\n */\nexport class SyncTree {\n  /**\n   * Tree of SyncPoints.  There's a SyncPoint at any location that has 1 or more views.\n   */\n  private syncPointTree_: ImmutableTree<SyncPoint> = ImmutableTree.Empty;\n\n  /**\n   * A tree of all pending user writes (user-initiated set()'s, transaction()'s, update()'s, etc.).\n   */\n  private pendingWriteTree_ = new WriteTree();\n\n  private readonly tagToQueryMap: Map<number, string> = new Map();\n  private readonly queryToTagMap: Map<string, number> = new Map();\n\n  /**\n   * @param {!ListenProvider} listenProvider_ Used by SyncTree to start / stop listening\n   *   to server data.\n   */\n  constructor(private listenProvider_: ListenProvider) {}\n\n  /**\n   * Apply the data changes for a user-generated set() or transaction() call.\n   *\n   * @return Events to raise.\n   */\n  applyUserOverwrite(\n    path: Path,\n    newData: Node,\n    writeId: number,\n    visible?: boolean\n  ): Event[] {\n    // Record pending write.\n    this.pendingWriteTree_.addOverwrite(path, newData, writeId, visible);\n\n    if (!visible) {\n      return [];\n    } else {\n      return this.applyOperationToSyncPoints_(\n        new Overwrite(OperationSource.User, path, newData)\n      );\n    }\n  }\n\n  /**\n   * Apply the data from a user-generated update() call\n   *\n   * @return Events to raise.\n   */\n  applyUserMerge(\n    path: Path,\n    changedChildren: { [k: string]: Node },\n    writeId: number\n  ): Event[] {\n    // Record pending merge.\n    this.pendingWriteTree_.addMerge(path, changedChildren, writeId);\n\n    const changeTree = ImmutableTree.fromObject(changedChildren);\n\n    return this.applyOperationToSyncPoints_(\n      new Merge(OperationSource.User, path, changeTree)\n    );\n  }\n\n  /**\n   * Acknowledge a pending user write that was previously registered with applyUserOverwrite() or applyUserMerge().\n   *\n   * @param revert True if the given write failed and needs to be reverted\n   * @return Events to raise.\n   */\n  ackUserWrite(writeId: number, revert: boolean = false) {\n    const write = this.pendingWriteTree_.getWrite(writeId);\n    const needToReevaluate = this.pendingWriteTree_.removeWrite(writeId);\n    if (!needToReevaluate) {\n      return [];\n    } else {\n      let affectedTree = ImmutableTree.Empty;\n      if (write.snap != null) {\n        // overwrite\n        affectedTree = affectedTree.set(Path.Empty, true);\n      } else {\n        each(write.children, (pathString: string, node: Node) => {\n          affectedTree = affectedTree.set(new Path(pathString), node);\n        });\n      }\n      return this.applyOperationToSyncPoints_(\n        new AckUserWrite(write.path, affectedTree, revert)\n      );\n    }\n  }\n\n  /**\n   * Apply new server data for the specified path..\n   *\n   * @return Events to raise.\n   */\n  applyServerOverwrite(path: Path, newData: Node): Event[] {\n    return this.applyOperationToSyncPoints_(\n      new Overwrite(OperationSource.Server, path, newData)\n    );\n  }\n\n  /**\n   * Apply new server data to be merged in at the specified path.\n   *\n   * @return Events to raise.\n   */\n  applyServerMerge(\n    path: Path,\n    changedChildren: { [k: string]: Node }\n  ): Event[] {\n    const changeTree = ImmutableTree.fromObject(changedChildren);\n\n    return this.applyOperationToSyncPoints_(\n      new Merge(OperationSource.Server, path, changeTree)\n    );\n  }\n\n  /**\n   * Apply a listen complete for a query\n   *\n   * @return Events to raise.\n   */\n  applyListenComplete(path: Path): Event[] {\n    return this.applyOperationToSyncPoints_(\n      new ListenComplete(OperationSource.Server, path)\n    );\n  }\n\n  /**\n   * Apply new server data for the specified tagged query.\n   *\n   * @return Events to raise.\n   */\n  applyTaggedQueryOverwrite(path: Path, snap: Node, tag: number): Event[] {\n    const queryKey = this.queryKeyForTag_(tag);\n    if (queryKey != null) {\n      const r = SyncTree.parseQueryKey_(queryKey);\n      const queryPath = r.path,\n        queryId = r.queryId;\n      const relativePath = Path.relativePath(queryPath, path);\n      const op = new Overwrite(\n        OperationSource.forServerTaggedQuery(queryId),\n        relativePath,\n        snap\n      );\n      return this.applyTaggedOperation_(queryPath, op);\n    } else {\n      // Query must have been removed already\n      return [];\n    }\n  }\n\n  /**\n   * Apply server data to be merged in for the specified tagged query.\n   *\n   * @return Events to raise.\n   */\n  applyTaggedQueryMerge(\n    path: Path,\n    changedChildren: { [k: string]: Node },\n    tag: number\n  ): Event[] {\n    const queryKey = this.queryKeyForTag_(tag);\n    if (queryKey) {\n      const r = SyncTree.parseQueryKey_(queryKey);\n      const queryPath = r.path,\n        queryId = r.queryId;\n      const relativePath = Path.relativePath(queryPath, path);\n      const changeTree = ImmutableTree.fromObject(changedChildren);\n      const op = new Merge(\n        OperationSource.forServerTaggedQuery(queryId),\n        relativePath,\n        changeTree\n      );\n      return this.applyTaggedOperation_(queryPath, op);\n    } else {\n      // We've already removed the query. No big deal, ignore the update\n      return [];\n    }\n  }\n\n  /**\n   * Apply a listen complete for a tagged query\n   *\n   * @return Events to raise.\n   */\n  applyTaggedListenComplete(path: Path, tag: number): Event[] {\n    const queryKey = this.queryKeyForTag_(tag);\n    if (queryKey) {\n      const r = SyncTree.parseQueryKey_(queryKey);\n      const queryPath = r.path,\n        queryId = r.queryId;\n      const relativePath = Path.relativePath(queryPath, path);\n      const op = new ListenComplete(\n        OperationSource.forServerTaggedQuery(queryId),\n        relativePath\n      );\n      return this.applyTaggedOperation_(queryPath, op);\n    } else {\n      // We've already removed the query. No big deal, ignore the update\n      return [];\n    }\n  }\n\n  /**\n   * Add an event callback for the specified query.\n   *\n   * @return Events to raise.\n   */\n  addEventRegistration(\n    query: Query,\n    eventRegistration: EventRegistration\n  ): Event[] {\n    const path = query.path;\n\n    let serverCache: Node | null = null;\n    let foundAncestorDefaultView = false;\n    // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\n    // Consider optimizing this once there's a better understanding of what actual behavior will be.\n    this.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\n      const relativePath = Path.relativePath(pathToSyncPoint, path);\n      serverCache = serverCache || sp.getCompleteServerCache(relativePath);\n      foundAncestorDefaultView =\n        foundAncestorDefaultView || sp.hasCompleteView();\n    });\n    let syncPoint = this.syncPointTree_.get(path);\n    if (!syncPoint) {\n      syncPoint = new SyncPoint();\n      this.syncPointTree_ = this.syncPointTree_.set(path, syncPoint);\n    } else {\n      foundAncestorDefaultView =\n        foundAncestorDefaultView || syncPoint.hasCompleteView();\n      serverCache = serverCache || syncPoint.getCompleteServerCache(Path.Empty);\n    }\n\n    let serverCacheComplete;\n    if (serverCache != null) {\n      serverCacheComplete = true;\n    } else {\n      serverCacheComplete = false;\n      serverCache = ChildrenNode.EMPTY_NODE;\n      const subtree = this.syncPointTree_.subtree(path);\n      subtree.foreachChild((childName, childSyncPoint) => {\n        const completeCache = childSyncPoint.getCompleteServerCache(Path.Empty);\n        if (completeCache) {\n          serverCache = serverCache.updateImmediateChild(\n            childName,\n            completeCache\n          );\n        }\n      });\n    }\n\n    const viewAlreadyExists = syncPoint.viewExistsForQuery(query);\n    if (!viewAlreadyExists && !query.getQueryParams().loadsAllData()) {\n      // We need to track a tag for this query\n      const queryKey = SyncTree.makeQueryKey_(query);\n      assert(\n        !this.queryToTagMap.has(queryKey),\n        'View does not exist, but we have a tag'\n      );\n      const tag = SyncTree.getNextQueryTag_();\n      this.queryToTagMap.set(queryKey, tag);\n      this.tagToQueryMap.set(tag, queryKey);\n    }\n    const writesCache = this.pendingWriteTree_.childWrites(path);\n    let events = syncPoint.addEventRegistration(\n      query,\n      eventRegistration,\n      writesCache,\n      serverCache,\n      serverCacheComplete\n    );\n    if (!viewAlreadyExists && !foundAncestorDefaultView) {\n      const view /** @type !View */ = syncPoint.viewForQuery(query);\n      events = events.concat(this.setupListener_(query, view));\n    }\n    return events;\n  }\n\n  /**\n   * Remove event callback(s).\n   *\n   * If query is the default query, we'll check all queries for the specified eventRegistration.\n   * If eventRegistration is null, we'll remove all callbacks for the specified query/queries.\n   *\n   * @param eventRegistration If null, all callbacks are removed.\n   * @param cancelError If a cancelError is provided, appropriate cancel events will be returned.\n   * @return Cancel events, if cancelError was provided.\n   */\n  removeEventRegistration(\n    query: Query,\n    eventRegistration: EventRegistration | null,\n    cancelError?: Error\n  ): Event[] {\n    // Find the syncPoint first. Then deal with whether or not it has matching listeners\n    const path = query.path;\n    const maybeSyncPoint = this.syncPointTree_.get(path);\n    let cancelEvents: Event[] = [];\n    // A removal on a default query affects all queries at that location. A removal on an indexed query, even one without\n    // other query constraints, does *not* affect all queries at that location. So this check must be for 'default', and\n    // not loadsAllData().\n    if (\n      maybeSyncPoint &&\n      (query.queryIdentifier() === 'default' ||\n        maybeSyncPoint.viewExistsForQuery(query))\n    ) {\n      /**\n       * @type {{removed: !Array.<!Query>, events: !Array.<!Event>}}\n       */\n      const removedAndEvents = maybeSyncPoint.removeEventRegistration(\n        query,\n        eventRegistration,\n        cancelError\n      );\n      if (maybeSyncPoint.isEmpty()) {\n        this.syncPointTree_ = this.syncPointTree_.remove(path);\n      }\n      const removed = removedAndEvents.removed;\n      cancelEvents = removedAndEvents.events;\n      // We may have just removed one of many listeners and can short-circuit this whole process\n      // We may also not have removed a default listener, in which case all of the descendant listeners should already be\n      // properly set up.\n      //\n      // Since indexed queries can shadow if they don't have other query constraints, check for loadsAllData(), instead of\n      // queryId === 'default'\n      const removingDefault =\n        -1 !==\n        removed.findIndex(query => {\n          return query.getQueryParams().loadsAllData();\n        });\n      const covered = this.syncPointTree_.findOnPath(\n        path,\n        (relativePath, parentSyncPoint) => {\n          return parentSyncPoint.hasCompleteView();\n        }\n      );\n\n      if (removingDefault && !covered) {\n        const subtree = this.syncPointTree_.subtree(path);\n        // There are potentially child listeners. Determine what if any listens we need to send before executing the\n        // removal\n        if (!subtree.isEmpty()) {\n          // We need to fold over our subtree and collect the listeners to send\n          const newViews = this.collectDistinctViewsForSubTree_(subtree);\n\n          // Ok, we've collected all the listens we need. Set them up.\n          for (let i = 0; i < newViews.length; ++i) {\n            const view = newViews[i],\n              newQuery = view.getQuery();\n            const listener = this.createListenerForView_(view);\n            this.listenProvider_.startListening(\n              SyncTree.queryForListening_(newQuery),\n              this.tagForQuery_(newQuery),\n              listener.hashFn,\n              listener.onComplete\n            );\n          }\n        } else {\n          // There's nothing below us, so nothing we need to start listening on\n        }\n      }\n      // If we removed anything and we're not covered by a higher up listen, we need to stop listening on this query\n      // The above block has us covered in terms of making sure we're set up on listens lower in the tree.\n      // Also, note that if we have a cancelError, it's already been removed at the provider level.\n      if (!covered && removed.length > 0 && !cancelError) {\n        // If we removed a default, then we weren't listening on any of the other queries here. Just cancel the one\n        // default. Otherwise, we need to iterate through and cancel each individual query\n        if (removingDefault) {\n          // We don't tag default listeners\n          const defaultTag: number | null = null;\n          this.listenProvider_.stopListening(\n            SyncTree.queryForListening_(query),\n            defaultTag\n          );\n        } else {\n          removed.forEach((queryToRemove: Query) => {\n            const tagToRemove = this.queryToTagMap.get(\n              SyncTree.makeQueryKey_(queryToRemove)\n            );\n            this.listenProvider_.stopListening(\n              SyncTree.queryForListening_(queryToRemove),\n              tagToRemove\n            );\n          });\n        }\n      }\n      // Now, clear all of the tags we're tracking for the removed listens\n      this.removeTags_(removed);\n    } else {\n      // No-op, this listener must've been already removed\n    }\n    return cancelEvents;\n  }\n\n  /**\n   * Returns a complete cache, if we have one, of the data at a particular path. If the location does not have a\n   * listener above it, we will get a false \"null\". This shouldn't be a problem because transactions will always\n   * have a listener above, and atomic operations would correctly show a jitter of <increment value> ->\n   *     <incremented total> as the write is applied locally and then acknowledged at the server.\n   *\n   * Note: this method will *include* hidden writes from transaction with applyLocally set to false.\n   *\n   * @param path The path to the data we want\n   * @param writeIdsToExclude A specific set to be excluded\n   */\n  calcCompleteEventCache(path: Path, writeIdsToExclude?: number[]): Node {\n    const includeHiddenSets = true;\n    const writeTree = this.pendingWriteTree_;\n    const serverCache = this.syncPointTree_.findOnPath(\n      path,\n      (pathSoFar, syncPoint) => {\n        const relativePath = Path.relativePath(pathSoFar, path);\n        const serverCache = syncPoint.getCompleteServerCache(relativePath);\n        if (serverCache) {\n          return serverCache;\n        }\n      }\n    );\n    return writeTree.calcCompleteEventCache(\n      path,\n      serverCache,\n      writeIdsToExclude,\n      includeHiddenSets\n    );\n  }\n\n  /**\n   * This collapses multiple unfiltered views into a single view, since we only need a single\n   * listener for them.\n   */\n  private collectDistinctViewsForSubTree_(\n    subtree: ImmutableTree<SyncPoint>\n  ): View[] {\n    return subtree.fold<View[]>(\n      (relativePath, maybeChildSyncPoint, childMap) => {\n        if (maybeChildSyncPoint && maybeChildSyncPoint.hasCompleteView()) {\n          const completeView = maybeChildSyncPoint.getCompleteView();\n          return [completeView];\n        } else {\n          // No complete view here, flatten any deeper listens into an array\n          let views: View[] = [];\n          if (maybeChildSyncPoint) {\n            views = maybeChildSyncPoint.getQueryViews();\n          }\n          each(childMap, (_key: string, childViews: View[]) => {\n            views = views.concat(childViews);\n          });\n          return views;\n        }\n      }\n    );\n  }\n\n  private removeTags_(queries: Query[]) {\n    for (let j = 0; j < queries.length; ++j) {\n      const removedQuery = queries[j];\n      if (!removedQuery.getQueryParams().loadsAllData()) {\n        // We should have a tag for this\n        const removedQueryKey = SyncTree.makeQueryKey_(removedQuery);\n        const removedQueryTag = this.queryToTagMap.get(removedQueryKey);\n        this.queryToTagMap.delete(removedQueryKey);\n        this.tagToQueryMap.delete(removedQueryTag);\n      }\n    }\n  }\n\n  /**\n   * Normalizes a query to a query we send the server for listening\n   *\n   * @return The normalized query\n   */\n  private static queryForListening_(query: Query): Query {\n    if (\n      query.getQueryParams().loadsAllData() &&\n      !query.getQueryParams().isDefault()\n    ) {\n      // We treat queries that load all data as default queries\n      // Cast is necessary because ref() technically returns Firebase which is actually fb.api.Firebase which inherits\n      // from Query\n      return query.getRef()!;\n    } else {\n      return query;\n    }\n  }\n\n  /**\n   * For a given new listen, manage the de-duplication of outstanding subscriptions.\n   *\n   * @return This method can return events to support synchronous data sources\n   */\n  private setupListener_(query: Query, view: View): Event[] {\n    const path = query.path;\n    const tag = this.tagForQuery_(query);\n    const listener = this.createListenerForView_(view);\n\n    const events = this.listenProvider_.startListening(\n      SyncTree.queryForListening_(query),\n      tag,\n      listener.hashFn,\n      listener.onComplete\n    );\n\n    const subtree = this.syncPointTree_.subtree(path);\n    // The root of this subtree has our query. We're here because we definitely need to send a listen for that, but we\n    // may need to shadow other listens as well.\n    if (tag) {\n      assert(\n        !subtree.value.hasCompleteView(),\n        \"If we're adding a query, it shouldn't be shadowed\"\n      );\n    } else {\n      // Shadow everything at or below this location, this is a default listener.\n      const queriesToStop = subtree.fold<Query[]>(\n        (relativePath, maybeChildSyncPoint, childMap) => {\n          if (\n            !relativePath.isEmpty() &&\n            maybeChildSyncPoint &&\n            maybeChildSyncPoint.hasCompleteView()\n          ) {\n            return [maybeChildSyncPoint.getCompleteView().getQuery()];\n          } else {\n            // No default listener here, flatten any deeper queries into an array\n            let queries: Query[] = [];\n            if (maybeChildSyncPoint) {\n              queries = queries.concat(\n                maybeChildSyncPoint.getQueryViews().map(view => view.getQuery())\n              );\n            }\n            each(childMap, (_key: string, childQueries: Query[]) => {\n              queries = queries.concat(childQueries);\n            });\n            return queries;\n          }\n        }\n      );\n      for (let i = 0; i < queriesToStop.length; ++i) {\n        const queryToStop = queriesToStop[i];\n        this.listenProvider_.stopListening(\n          SyncTree.queryForListening_(queryToStop),\n          this.tagForQuery_(queryToStop)\n        );\n      }\n    }\n    return events;\n  }\n\n  private createListenerForView_(\n    view: View\n  ): { hashFn(): string; onComplete(a: string, b?: unknown): Event[] } {\n    const query = view.getQuery();\n    const tag = this.tagForQuery_(query);\n\n    return {\n      hashFn: () => {\n        const cache = view.getServerCache() || ChildrenNode.EMPTY_NODE;\n        return cache.hash();\n      },\n      onComplete: (status: string): Event[] => {\n        if (status === 'ok') {\n          if (tag) {\n            return this.applyTaggedListenComplete(query.path, tag);\n          } else {\n            return this.applyListenComplete(query.path);\n          }\n        } else {\n          // If a listen failed, kill all of the listeners here, not just the one that triggered the error.\n          // Note that this may need to be scoped to just this listener if we change permissions on filtered children\n          const error = errorForServerCode(status, query);\n          return this.removeEventRegistration(\n            query,\n            /*eventRegistration*/ null,\n            error\n          );\n        }\n      }\n    };\n  }\n\n  /**\n   * Given a query, computes a \"queryKey\" suitable for use in our queryToTagMap_.\n   */\n  private static makeQueryKey_(query: Query): string {\n    return query.path.toString() + '$' + query.queryIdentifier();\n  }\n\n  /**\n   * Given a queryKey (created by makeQueryKey), parse it back into a path and queryId.\n   */\n  private static parseQueryKey_(\n    queryKey: string\n  ): { queryId: string; path: Path } {\n    const splitIndex = queryKey.indexOf('$');\n    assert(\n      splitIndex !== -1 && splitIndex < queryKey.length - 1,\n      'Bad queryKey.'\n    );\n    return {\n      queryId: queryKey.substr(splitIndex + 1),\n      path: new Path(queryKey.substr(0, splitIndex))\n    };\n  }\n\n  /**\n   * Return the query associated with the given tag, if we have one\n   */\n  private queryKeyForTag_(tag: number): string | null {\n    return this.tagToQueryMap.get(tag);\n  }\n\n  /**\n   * Return the tag associated with the given query.\n   */\n  private tagForQuery_(query: Query): number | null {\n    const queryKey = SyncTree.makeQueryKey_(query);\n    return this.queryToTagMap.get(queryKey);\n  }\n\n  /**\n   * Static tracker for next query tag.\n   */\n  private static nextQueryTag_ = 1;\n\n  /**\n   * Static accessor for query tags.\n   */\n  private static getNextQueryTag_(): number {\n    return SyncTree.nextQueryTag_++;\n  }\n\n  /**\n   * A helper method to apply tagged operations\n   */\n  private applyTaggedOperation_(\n    queryPath: Path,\n    operation: Operation\n  ): Event[] {\n    const syncPoint = this.syncPointTree_.get(queryPath);\n    assert(syncPoint, \"Missing sync point for query tag that we're tracking\");\n    const writesCache = this.pendingWriteTree_.childWrites(queryPath);\n    return syncPoint.applyOperation(\n      operation,\n      writesCache,\n      /*serverCache=*/ null\n    );\n  }\n\n  /**\n   * A helper method that visits all descendant and ancestor SyncPoints, applying the operation.\n   *\n   * NOTES:\n   * - Descendant SyncPoints will be visited first (since we raise events depth-first).\n   *\n   * - We call applyOperation() on each SyncPoint passing three things:\n   *   1. A version of the Operation that has been made relative to the SyncPoint location.\n   *   2. A WriteTreeRef of any writes we have cached at the SyncPoint location.\n   *   3. A snapshot Node with cached server data, if we have it.\n   *\n   * - We concatenate all of the events returned by each SyncPoint and return the result.\n   */\n  private applyOperationToSyncPoints_(operation: Operation): Event[] {\n    return this.applyOperationHelper_(\n      operation,\n      this.syncPointTree_,\n      /*serverCache=*/ null,\n      this.pendingWriteTree_.childWrites(Path.Empty)\n    );\n  }\n\n  /**\n   * Recursive helper for applyOperationToSyncPoints_\n   */\n  private applyOperationHelper_(\n    operation: Operation,\n    syncPointTree: ImmutableTree<SyncPoint>,\n    serverCache: Node | null,\n    writesCache: WriteTreeRef\n  ): Event[] {\n    if (operation.path.isEmpty()) {\n      return this.applyOperationDescendantsHelper_(\n        operation,\n        syncPointTree,\n        serverCache,\n        writesCache\n      );\n    } else {\n      const syncPoint = syncPointTree.get(Path.Empty);\n\n      // If we don't have cached server data, see if we can get it from this SyncPoint.\n      if (serverCache == null && syncPoint != null) {\n        serverCache = syncPoint.getCompleteServerCache(Path.Empty);\n      }\n\n      let events: Event[] = [];\n      const childName = operation.path.getFront();\n      const childOperation = operation.operationForChild(childName);\n      const childTree = syncPointTree.children.get(childName);\n      if (childTree && childOperation) {\n        const childServerCache = serverCache\n          ? serverCache.getImmediateChild(childName)\n          : null;\n        const childWritesCache = writesCache.child(childName);\n        events = events.concat(\n          this.applyOperationHelper_(\n            childOperation,\n            childTree,\n            childServerCache,\n            childWritesCache\n          )\n        );\n      }\n\n      if (syncPoint) {\n        events = events.concat(\n          syncPoint.applyOperation(operation, writesCache, serverCache)\n        );\n      }\n\n      return events;\n    }\n  }\n\n  /**\n   * Recursive helper for applyOperationToSyncPoints_\n   */\n  private applyOperationDescendantsHelper_(\n    operation: Operation,\n    syncPointTree: ImmutableTree<SyncPoint>,\n    serverCache: Node | null,\n    writesCache: WriteTreeRef\n  ): Event[] {\n    const syncPoint = syncPointTree.get(Path.Empty);\n\n    // If we don't have cached server data, see if we can get it from this SyncPoint.\n    if (serverCache == null && syncPoint != null) {\n      serverCache = syncPoint.getCompleteServerCache(Path.Empty);\n    }\n\n    let events: Event[] = [];\n    syncPointTree.children.inorderTraversal((childName, childTree) => {\n      const childServerCache = serverCache\n        ? serverCache.getImmediateChild(childName)\n        : null;\n      const childWritesCache = writesCache.child(childName);\n      const childOperation = operation.operationForChild(childName);\n      if (childOperation) {\n        events = events.concat(\n          this.applyOperationDescendantsHelper_(\n            childOperation,\n            childTree,\n            childServerCache,\n            childWritesCache\n          )\n        );\n      }\n    });\n\n    if (syncPoint) {\n      events = events.concat(\n        syncPoint.applyOperation(operation, writesCache, serverCache)\n      );\n    }\n\n    return events;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Path } from './util/Path';\nimport { Node } from './snap/Node';\n\n/**\n * Mutable object which basically just stores a reference to the \"latest\" immutable snapshot.\n *\n * @constructor\n */\nexport class SnapshotHolder {\n  private rootNode_: Node = ChildrenNode.EMPTY_NODE;\n\n  getNode(path: Path): Node {\n    return this.rootNode_.getChild(path);\n  }\n\n  updateSnapshot(path: Path, newSnapshotNode: Node) {\n    this.rootNode_ = this.rootNode_.updateChild(path, newSnapshotNode);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { deepCopy, contains } from '@firebase/util';\n\n/**\n * Tracks a collection of stats.\n *\n * @constructor\n */\nexport class StatsCollection {\n  private counters_: { [k: string]: number } = {};\n\n  incrementCounter(name: string, amount: number = 1) {\n    if (!contains(this.counters_, name)) {\n      this.counters_[name] = 0;\n    }\n\n    this.counters_[name] += amount;\n  }\n\n  get() {\n    return deepCopy(this.counters_);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { StatsCollection } from './StatsCollection';\nimport { RepoInfo } from '../RepoInfo';\n\nexport class StatsManager {\n  private static collections_: { [k: string]: StatsCollection } = {};\n  private static reporters_: { [k: string]: unknown } = {};\n\n  static getCollection(repoInfo: RepoInfo): StatsCollection {\n    const hashString = repoInfo.toString();\n\n    if (!this.collections_[hashString]) {\n      this.collections_[hashString] = new StatsCollection();\n    }\n\n    return this.collections_[hashString];\n  }\n\n  static getOrCreateReporter<T>(\n    repoInfo: RepoInfo,\n    creatorFunction: () => T\n  ): T {\n    const hashString = repoInfo.toString();\n\n    if (!this.reporters_[hashString]) {\n      this.reporters_[hashString] = creatorFunction();\n    }\n\n    return this.reporters_[hashString] as T;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { StatsCollection } from './StatsCollection';\nimport { each } from '../util/util';\n\n/**\n * Returns the delta from the previous call to get stats.\n *\n * @param collection_ The collection to \"listen\" to.\n * @constructor\n */\nexport class StatsListener {\n  private last_: { [k: string]: number } | null = null;\n\n  constructor(private collection_: StatsCollection) {}\n\n  get(): { [k: string]: number } {\n    const newStats = this.collection_.get();\n\n    const delta = { ...newStats };\n    if (this.last_) {\n      each(this.last_, (stat: string, value: number) => {\n        delta[stat] = delta[stat] - value;\n      });\n    }\n    this.last_ = newStats;\n\n    return delta;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains } from '@firebase/util';\nimport { setTimeoutNonBlocking, each } from '../util/util';\nimport { StatsListener } from './StatsListener';\nimport { StatsCollection } from './StatsCollection';\nimport { ServerActions } from '../ServerActions';\n\n// Assuming some apps may have a short amount of time on page, and a bulk of firebase operations probably\n// happen on page load, we try to report our first set of stats pretty quickly, but we wait at least 10\n// seconds to try to ensure the Firebase connection is established / settled.\nconst FIRST_STATS_MIN_TIME = 10 * 1000;\nconst FIRST_STATS_MAX_TIME = 30 * 1000;\n\n// We'll continue to report stats on average every 5 minutes.\nconst REPORT_STATS_INTERVAL = 5 * 60 * 1000;\n\n/**\n * @constructor\n */\nexport class StatsReporter {\n  private statsListener_: StatsListener;\n  private statsToReport_: { [k: string]: boolean } = {};\n\n  /**\n   * @param collection\n   * @param server_\n   */\n  constructor(collection: StatsCollection, private server_: ServerActions) {\n    this.statsListener_ = new StatsListener(collection);\n\n    const timeout =\n      FIRST_STATS_MIN_TIME +\n      (FIRST_STATS_MAX_TIME - FIRST_STATS_MIN_TIME) * Math.random();\n    setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(timeout));\n  }\n\n  includeStat(stat: string) {\n    this.statsToReport_[stat] = true;\n  }\n\n  private reportStats_() {\n    const stats = this.statsListener_.get();\n    const reportedStats: typeof stats = {};\n    let haveStatsToReport = false;\n\n    each(stats, (stat: string, value: number) => {\n      if (value > 0 && contains(this.statsToReport_, stat)) {\n        reportedStats[stat] = value;\n        haveStatsToReport = true;\n      }\n    });\n\n    if (haveStatsToReport) {\n      this.server_.reportStats(reportedStats);\n    }\n\n    // queue our next run.\n    setTimeoutNonBlocking(\n      this.reportStats_.bind(this),\n      Math.floor(Math.random() * 2 * REPORT_STATS_INTERVAL)\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path } from '../util/Path';\nimport { log, logger, exceptionGuard } from '../util/util';\nimport { Event } from './Event';\n\n/**\n * The event queue serves a few purposes:\n * 1. It ensures we maintain event order in the face of event callbacks doing operations that result in more\n *    events being queued.\n * 2. raiseQueuedEvents() handles being called reentrantly nicely.  That is, if in the course of raising events,\n *    raiseQueuedEvents() is called again, the \"inner\" call will pick up raising events where the \"outer\" call\n *    left off, ensuring that the events are still raised synchronously and in order.\n * 3. You can use raiseEventsAtPath and raiseEventsForChangedPath to ensure only relevant previously-queued\n *    events are raised synchronously.\n *\n * NOTE: This can all go away if/when we move to async events.\n *\n * @constructor\n */\nexport class EventQueue {\n  /**\n   * @private\n   * @type {!Array.<EventList>}\n   */\n  private eventLists_: EventList[] = [];\n\n  /**\n   * Tracks recursion depth of raiseQueuedEvents_, for debugging purposes.\n   * @private\n   * @type {!number}\n   */\n  private recursionDepth_ = 0;\n\n  /**\n   * @param {!Array.<Event>} eventDataList The new events to queue.\n   */\n  queueEvents(eventDataList: Event[]) {\n    // We group events by path, storing them in a single EventList, to make it easier to skip over them quickly.\n    let currList = null;\n    for (let i = 0; i < eventDataList.length; i++) {\n      const eventData = eventDataList[i];\n      const eventPath = eventData.getPath();\n      if (currList !== null && !eventPath.equals(currList.getPath())) {\n        this.eventLists_.push(currList);\n        currList = null;\n      }\n\n      if (currList === null) {\n        currList = new EventList(eventPath);\n      }\n\n      currList.add(eventData);\n    }\n    if (currList) {\n      this.eventLists_.push(currList);\n    }\n  }\n\n  /**\n   * Queues the specified events and synchronously raises all events (including previously queued ones)\n   * for the specified path.\n   *\n   * It is assumed that the new events are all for the specified path.\n   *\n   * @param {!Path} path The path to raise events for.\n   * @param {!Array.<Event>} eventDataList The new events to raise.\n   */\n  raiseEventsAtPath(path: Path, eventDataList: Event[]) {\n    this.queueEvents(eventDataList);\n    this.raiseQueuedEventsMatchingPredicate_((eventPath: Path) =>\n      eventPath.equals(path)\n    );\n  }\n\n  /**\n   * Queues the specified events and synchronously raises all events (including previously queued ones) for\n   * locations related to the specified change path (i.e. all ancestors and descendants).\n   *\n   * It is assumed that the new events are all related (ancestor or descendant) to the specified path.\n   *\n   * @param {!Path} changedPath The path to raise events for.\n   * @param {!Array.<!Event>} eventDataList The events to raise\n   */\n  raiseEventsForChangedPath(changedPath: Path, eventDataList: Event[]) {\n    this.queueEvents(eventDataList);\n\n    this.raiseQueuedEventsMatchingPredicate_((eventPath: Path) => {\n      return eventPath.contains(changedPath) || changedPath.contains(eventPath);\n    });\n  }\n\n  /**\n   * @param {!function(!Path):boolean} predicate\n   * @private\n   */\n  private raiseQueuedEventsMatchingPredicate_(\n    predicate: (path: Path) => boolean\n  ) {\n    this.recursionDepth_++;\n\n    let sentAll = true;\n    for (let i = 0; i < this.eventLists_.length; i++) {\n      const eventList = this.eventLists_[i];\n      if (eventList) {\n        const eventPath = eventList.getPath();\n        if (predicate(eventPath)) {\n          this.eventLists_[i].raise();\n          this.eventLists_[i] = null;\n        } else {\n          sentAll = false;\n        }\n      }\n    }\n\n    if (sentAll) {\n      this.eventLists_ = [];\n    }\n\n    this.recursionDepth_--;\n  }\n}\n\n/**\n * @param {!Path} path\n * @constructor\n */\nexport class EventList {\n  /**\n   * @type {!Array.<Event>}\n   * @private\n   */\n  private events_: Event[] = [];\n\n  constructor(private readonly path_: Path) {}\n\n  /**\n   * @param {!Event} eventData\n   */\n  add(eventData: Event) {\n    this.events_.push(eventData);\n  }\n\n  /**\n   * Iterates through the list and raises each event\n   */\n  raise() {\n    for (let i = 0; i < this.events_.length; i++) {\n      const eventData = this.events_[i];\n      if (eventData !== null) {\n        this.events_[i] = null;\n        const eventFn = eventData.getEventRunner();\n        if (logger) {\n          log('event: ' + eventData.toString());\n        }\n        exceptionGuard(eventFn);\n      }\n    }\n  }\n\n  /**\n   * @return {!Path}\n   */\n  getPath(): Path {\n    return this.path_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\n/**\n * Base class to be used if you want to emit events. Call the constructor with\n * the set of allowed event names.\n */\nexport abstract class EventEmitter {\n  private listeners_: {\n    [eventType: string]: Array<{\n      callback(...args: unknown[]): void;\n      context: unknown;\n    }>;\n  } = {};\n\n  /**\n   * @param {!Array.<string>} allowedEvents_\n   */\n  constructor(private allowedEvents_: string[]) {\n    assert(\n      Array.isArray(allowedEvents_) && allowedEvents_.length > 0,\n      'Requires a non-empty array'\n    );\n  }\n\n  /**\n   * To be overridden by derived classes in order to fire an initial event when\n   * somebody subscribes for data.\n   *\n   * @param {!string} eventType\n   * @return {Array.<*>} Array of parameters to trigger initial event with.\n   */\n  abstract getInitialEvent(eventType: string): unknown[];\n\n  /**\n   * To be called by derived classes to trigger events.\n   * @param {!string} eventType\n   * @param {...*} varArgs\n   */\n  protected trigger(eventType: string, ...varArgs: unknown[]) {\n    if (Array.isArray(this.listeners_[eventType])) {\n      // Clone the list, since callbacks could add/remove listeners.\n      const listeners = [...this.listeners_[eventType]];\n\n      for (let i = 0; i < listeners.length; i++) {\n        listeners[i].callback.apply(listeners[i].context, varArgs);\n      }\n    }\n  }\n\n  on(eventType: string, callback: (a: unknown) => void, context: unknown) {\n    this.validateEventType_(eventType);\n    this.listeners_[eventType] = this.listeners_[eventType] || [];\n    this.listeners_[eventType].push({ callback, context });\n\n    const eventData = this.getInitialEvent(eventType);\n    if (eventData) {\n      callback.apply(context, eventData);\n    }\n  }\n\n  off(eventType: string, callback: (a: unknown) => void, context: unknown) {\n    this.validateEventType_(eventType);\n    const listeners = this.listeners_[eventType] || [];\n    for (let i = 0; i < listeners.length; i++) {\n      if (\n        listeners[i].callback === callback &&\n        (!context || context === listeners[i].context)\n      ) {\n        listeners.splice(i, 1);\n        return;\n      }\n    }\n  }\n\n  private validateEventType_(eventType: string) {\n    assert(\n      this.allowedEvents_.find(et => {\n        return et === eventType;\n      }),\n      'Unknown event: ' + eventType\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { EventEmitter } from './EventEmitter';\nimport { assert } from '@firebase/util';\n\ndeclare const document: Document;\n\n/**\n * @extends {EventEmitter}\n */\nexport class VisibilityMonitor extends EventEmitter {\n  private visible_: boolean;\n\n  static getInstance() {\n    return new VisibilityMonitor();\n  }\n\n  constructor() {\n    super(['visible']);\n    let hidden: string;\n    let visibilityChange: string;\n    if (\n      typeof document !== 'undefined' &&\n      typeof document.addEventListener !== 'undefined'\n    ) {\n      if (typeof document['hidden'] !== 'undefined') {\n        // Opera 12.10 and Firefox 18 and later support\n        visibilityChange = 'visibilitychange';\n        hidden = 'hidden';\n      } else if (typeof document['mozHidden'] !== 'undefined') {\n        visibilityChange = 'mozvisibilitychange';\n        hidden = 'mozHidden';\n      } else if (typeof document['msHidden'] !== 'undefined') {\n        visibilityChange = 'msvisibilitychange';\n        hidden = 'msHidden';\n      } else if (typeof document['webkitHidden'] !== 'undefined') {\n        visibilityChange = 'webkitvisibilitychange';\n        hidden = 'webkitHidden';\n      }\n    }\n\n    // Initially, we always assume we are visible. This ensures that in browsers\n    // without page visibility support or in cases where we are never visible\n    // (e.g. chrome extension), we act as if we are visible, i.e. don't delay\n    // reconnects\n    this.visible_ = true;\n\n    if (visibilityChange) {\n      document.addEventListener(\n        visibilityChange,\n        () => {\n          const visible = !document[hidden];\n          if (visible !== this.visible_) {\n            this.visible_ = visible;\n            this.trigger('visible', visible);\n          }\n        },\n        false\n      );\n    }\n  }\n\n  /**\n   * @param {!string} eventType\n   * @return {Array.<boolean>}\n   */\n  getInitialEvent(eventType: string): boolean[] {\n    assert(eventType === 'visible', 'Unknown event type: ' + eventType);\n    return [this.visible_];\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, isMobileCordova } from '@firebase/util';\nimport { EventEmitter } from './EventEmitter';\n\n/**\n * Monitors online state (as reported by window.online/offline events).\n *\n * The expectation is that this could have many false positives (thinks we are online\n * when we're not), but no false negatives.  So we can safely use it to determine when\n * we definitely cannot reach the internet.\n *\n * @extends {EventEmitter}\n */\nexport class OnlineMonitor extends EventEmitter {\n  private online_ = true;\n\n  static getInstance() {\n    return new OnlineMonitor();\n  }\n\n  constructor() {\n    super(['online']);\n\n    // We've had repeated complaints that Cordova apps can get stuck \"offline\", e.g.\n    // https://forum.ionicframework.com/t/firebase-connection-is-lost-and-never-come-back/43810\n    // It would seem that the 'online' event does not always fire consistently. So we disable it\n    // for Cordova.\n    if (\n      typeof window !== 'undefined' &&\n      typeof window.addEventListener !== 'undefined' &&\n      !isMobileCordova()\n    ) {\n      window.addEventListener(\n        'online',\n        () => {\n          if (!this.online_) {\n            this.online_ = true;\n            this.trigger('online', true);\n          }\n        },\n        false\n      );\n\n      window.addEventListener(\n        'offline',\n        () => {\n          if (this.online_) {\n            this.online_ = false;\n            this.trigger('online', false);\n          }\n        },\n        false\n      );\n    }\n  }\n\n  /**\n   * @param {!string} eventType\n   * @return {Array.<boolean>}\n   */\n  getInitialEvent(eventType: string): boolean[] {\n    assert(eventType === 'online', 'Unknown event type: ' + eventType);\n    return [this.online_];\n  }\n\n  /**\n   * @return {boolean}\n   */\n  currentlyOnline(): boolean {\n    return this.online_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { exceptionGuard } from '../../core/util/util';\n\n/**\n * This class ensures the packets from the server arrive in order\n * This class takes data from the server and ensures it gets passed into the callbacks in order.\n * @constructor\n */\nexport class PacketReceiver {\n  pendingResponses: unknown[] = [];\n  currentResponseNum = 0;\n  closeAfterResponse = -1;\n  onClose: (() => void) | null = null;\n\n  /**\n   * @param onMessage_\n   */\n  constructor(private onMessage_: (a: {}) => void) {}\n\n  closeAfter(responseNum: number, callback: () => void) {\n    this.closeAfterResponse = responseNum;\n    this.onClose = callback;\n    if (this.closeAfterResponse < this.currentResponseNum) {\n      this.onClose();\n      this.onClose = null;\n    }\n  }\n\n  /**\n   * Each message from the server comes with a response number, and an array of data. The responseNumber\n   * allows us to ensure that we process them in the right order, since we can't be guaranteed that all\n   * browsers will respond in the same order as the requests we sent\n   * @param {number} requestNum\n   * @param {Array} data\n   */\n  handleResponse(requestNum: number, data: unknown[]) {\n    this.pendingResponses[requestNum] = data;\n    while (this.pendingResponses[this.currentResponseNum]) {\n      const toProcess = this.pendingResponses[\n        this.currentResponseNum\n      ] as unknown[];\n      delete this.pendingResponses[this.currentResponseNum];\n      for (let i = 0; i < toProcess.length; ++i) {\n        if (toProcess[i]) {\n          exceptionGuard(() => {\n            this.onMessage_(toProcess[i]);\n          });\n        }\n      }\n      if (this.currentResponseNum === this.closeAfterResponse) {\n        if (this.onClose) {\n          this.onClose();\n          this.onClose = null;\n        }\n        break;\n      }\n      this.currentResponseNum++;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  executeWhenDOMReady,\n  isChromeExtensionContentScript,\n  isWindowsStoreApp,\n  log,\n  logWrapper,\n  LUIDGenerator,\n  splitStringBySize\n} from '../core/util/util';\nimport { StatsManager } from '../core/stats/StatsManager';\nimport { PacketReceiver } from './polling/PacketReceiver';\nimport {\n  APPLICATION_ID_PARAM,\n  FORGE_DOMAIN,\n  FORGE_REF,\n  LAST_SESSION_PARAM,\n  LONG_POLLING,\n  PROTOCOL_VERSION,\n  REFERER_PARAM,\n  TRANSPORT_SESSION_PARAM,\n  VERSION_PARAM\n} from './Constants';\nimport { base64Encode, stringify, isNodeSdk } from '@firebase/util';\n\nimport { Transport } from './Transport';\nimport { RepoInfo } from '../core/RepoInfo';\nimport { StatsCollection } from '../core/stats/StatsCollection';\n\n// URL query parameters associated with longpolling\nexport const FIREBASE_LONGPOLL_START_PARAM = 'start';\nexport const FIREBASE_LONGPOLL_CLOSE_COMMAND = 'close';\nexport const FIREBASE_LONGPOLL_COMMAND_CB_NAME = 'pLPCommand';\nexport const FIREBASE_LONGPOLL_DATA_CB_NAME = 'pRTLPCB';\nexport const FIREBASE_LONGPOLL_ID_PARAM = 'id';\nexport const FIREBASE_LONGPOLL_PW_PARAM = 'pw';\nexport const FIREBASE_LONGPOLL_SERIAL_PARAM = 'ser';\nexport const FIREBASE_LONGPOLL_CALLBACK_ID_PARAM = 'cb';\nexport const FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM = 'seg';\nexport const FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET = 'ts';\nexport const FIREBASE_LONGPOLL_DATA_PARAM = 'd';\nexport const FIREBASE_LONGPOLL_DISCONN_FRAME_PARAM = 'disconn';\nexport const FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM = 'dframe';\n\n//Data size constants.\n//TODO: Perf: the maximum length actually differs from browser to browser.\n// We should check what browser we're on and set accordingly.\nconst MAX_URL_DATA_SIZE = 1870;\nconst SEG_HEADER_SIZE = 30; //ie: &seg=8299234&ts=982389123&d=\nconst MAX_PAYLOAD_SIZE = MAX_URL_DATA_SIZE - SEG_HEADER_SIZE;\n\n/**\n * Keepalive period\n * send a fresh request at minimum every 25 seconds. Opera has a maximum request\n * length of 30 seconds that we can't exceed.\n * @const\n * @type {number}\n */\nconst KEEPALIVE_REQUEST_INTERVAL = 25000;\n\n/**\n * How long to wait before aborting a long-polling connection attempt.\n * @const\n * @type {number}\n */\nconst LP_CONNECT_TIMEOUT = 30000;\n\n/**\n * This class manages a single long-polling connection.\n *\n * @constructor\n * @implements {Transport}\n */\nexport class BrowserPollConnection implements Transport {\n  bytesSent = 0;\n  bytesReceived = 0;\n  urlFn: (params: object) => string;\n  scriptTagHolder: FirebaseIFrameScriptHolder;\n  myDisconnFrame: HTMLIFrameElement;\n  curSegmentNum: number;\n  myPacketOrderer: PacketReceiver;\n  id: string;\n  password: string;\n  private log_: (...a: unknown[]) => void;\n  private stats_: StatsCollection;\n  private everConnected_ = false;\n  private isClosed_: boolean;\n  private connectTimeoutTimer_: number | null;\n  private onDisconnect_: ((a?: boolean) => void) | null;\n\n  /**\n   * @param connId An identifier for this connection, used for logging\n   * @param repoInfo The info for the endpoint to send data to.\n   * @param applicationId The Firebase App ID for this project.\n   * @param transportSessionId Optional transportSessionid if we are reconnecting for an existing\n   *                                         transport session\n   * @param lastSessionId Optional lastSessionId if the PersistentConnection has already created a\n   *                                     connection previously\n   */\n  constructor(\n    public connId: string,\n    public repoInfo: RepoInfo,\n    private applicationId?: string,\n    public transportSessionId?: string,\n    public lastSessionId?: string\n  ) {\n    this.log_ = logWrapper(connId);\n    this.stats_ = StatsManager.getCollection(repoInfo);\n    this.urlFn = (params: { [k: string]: string }) =>\n      repoInfo.connectionURL(LONG_POLLING, params);\n  }\n\n  /**\n   *\n   * @param {function(Object)} onMessage Callback when messages arrive\n   * @param {function()} onDisconnect Callback with connection lost.\n   */\n  open(onMessage: (msg: {}) => void, onDisconnect: (a?: boolean) => void) {\n    this.curSegmentNum = 0;\n    this.onDisconnect_ = onDisconnect;\n    this.myPacketOrderer = new PacketReceiver(onMessage);\n    this.isClosed_ = false;\n\n    this.connectTimeoutTimer_ = setTimeout(() => {\n      this.log_('Timed out trying to connect.');\n      // Make sure we clear the host cache\n      this.onClosed_();\n      this.connectTimeoutTimer_ = null;\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(LP_CONNECT_TIMEOUT)) as any;\n\n    // Ensure we delay the creation of the iframe until the DOM is loaded.\n    executeWhenDOMReady(() => {\n      if (this.isClosed_) {\n        return;\n      }\n\n      //Set up a callback that gets triggered once a connection is set up.\n      this.scriptTagHolder = new FirebaseIFrameScriptHolder(\n        (...args) => {\n          const [command, arg1, arg2, arg3, arg4] = args;\n          this.incrementIncomingBytes_(args);\n          if (!this.scriptTagHolder) {\n            return; // we closed the connection.\n          }\n\n          if (this.connectTimeoutTimer_) {\n            clearTimeout(this.connectTimeoutTimer_);\n            this.connectTimeoutTimer_ = null;\n          }\n          this.everConnected_ = true;\n          if (command === FIREBASE_LONGPOLL_START_PARAM) {\n            this.id = arg1 as string;\n            this.password = arg2 as string;\n          } else if (command === FIREBASE_LONGPOLL_CLOSE_COMMAND) {\n            // Don't clear the host cache. We got a response from the server, so we know it's reachable\n            if (arg1) {\n              // We aren't expecting any more data (other than what the server's already in the process of sending us\n              // through our already open polls), so don't send any more.\n              this.scriptTagHolder.sendNewPolls = false;\n\n              // arg1 in this case is the last response number sent by the server. We should try to receive\n              // all of the responses up to this one before closing\n              this.myPacketOrderer.closeAfter(arg1 as number, () => {\n                this.onClosed_();\n              });\n            } else {\n              this.onClosed_();\n            }\n          } else {\n            throw new Error('Unrecognized command received: ' + command);\n          }\n        },\n        (...args) => {\n          const [pN, data] = args;\n          this.incrementIncomingBytes_(args);\n          this.myPacketOrderer.handleResponse(pN as number, data as unknown[]);\n        },\n        () => {\n          this.onClosed_();\n        },\n        this.urlFn\n      );\n\n      //Send the initial request to connect. The serial number is simply to keep the browser from pulling previous results\n      //from cache.\n      const urlParams: { [k: string]: string | number } = {};\n      urlParams[FIREBASE_LONGPOLL_START_PARAM] = 't';\n      urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = Math.floor(\n        Math.random() * 100000000\n      );\n      if (this.scriptTagHolder.uniqueCallbackIdentifier) {\n        urlParams[\n          FIREBASE_LONGPOLL_CALLBACK_ID_PARAM\n        ] = this.scriptTagHolder.uniqueCallbackIdentifier;\n      }\n      urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n      if (this.transportSessionId) {\n        urlParams[TRANSPORT_SESSION_PARAM] = this.transportSessionId;\n      }\n      if (this.lastSessionId) {\n        urlParams[LAST_SESSION_PARAM] = this.lastSessionId;\n      }\n      if (this.applicationId) {\n        urlParams[APPLICATION_ID_PARAM] = this.applicationId;\n      }\n      if (\n        typeof location !== 'undefined' &&\n        location.href &&\n        location.href.indexOf(FORGE_DOMAIN) !== -1\n      ) {\n        urlParams[REFERER_PARAM] = FORGE_REF;\n      }\n      const connectURL = this.urlFn(urlParams);\n      this.log_('Connecting via long-poll to ' + connectURL);\n      this.scriptTagHolder.addTag(connectURL, () => {\n        /* do nothing */\n      });\n    });\n  }\n\n  /**\n   * Call this when a handshake has completed successfully and we want to consider the connection established\n   */\n  start() {\n    this.scriptTagHolder.startLongPoll(this.id, this.password);\n    this.addDisconnectPingFrame(this.id, this.password);\n  }\n\n  private static forceAllow_: boolean;\n\n  /**\n   * Forces long polling to be considered as a potential transport\n   */\n  static forceAllow() {\n    BrowserPollConnection.forceAllow_ = true;\n  }\n\n  private static forceDisallow_: boolean;\n\n  /**\n   * Forces longpolling to not be considered as a potential transport\n   */\n  static forceDisallow() {\n    BrowserPollConnection.forceDisallow_ = true;\n  }\n\n  // Static method, use string literal so it can be accessed in a generic way\n  static isAvailable() {\n    if (isNodeSdk()) {\n      return false;\n    } else if (BrowserPollConnection.forceAllow_) {\n      return true;\n    } else {\n      // NOTE: In React-Native there's normally no 'document', but if you debug a React-Native app in\n      // the Chrome debugger, 'document' is defined, but document.createElement is null (2015/06/08).\n      return (\n        !BrowserPollConnection.forceDisallow_ &&\n        typeof document !== 'undefined' &&\n        document.createElement != null &&\n        !isChromeExtensionContentScript() &&\n        !isWindowsStoreApp()\n      );\n    }\n  }\n\n  /**\n   * No-op for polling\n   */\n  markConnectionHealthy() {}\n\n  /**\n   * Stops polling and cleans up the iframe\n   * @private\n   */\n  private shutdown_() {\n    this.isClosed_ = true;\n\n    if (this.scriptTagHolder) {\n      this.scriptTagHolder.close();\n      this.scriptTagHolder = null;\n    }\n\n    //remove the disconnect frame, which will trigger an XHR call to the server to tell it we're leaving.\n    if (this.myDisconnFrame) {\n      document.body.removeChild(this.myDisconnFrame);\n      this.myDisconnFrame = null;\n    }\n\n    if (this.connectTimeoutTimer_) {\n      clearTimeout(this.connectTimeoutTimer_);\n      this.connectTimeoutTimer_ = null;\n    }\n  }\n\n  /**\n   * Triggered when this transport is closed\n   * @private\n   */\n  private onClosed_() {\n    if (!this.isClosed_) {\n      this.log_('Longpoll is closing itself');\n      this.shutdown_();\n\n      if (this.onDisconnect_) {\n        this.onDisconnect_(this.everConnected_);\n        this.onDisconnect_ = null;\n      }\n    }\n  }\n\n  /**\n   * External-facing close handler. RealTime has requested we shut down. Kill our connection and tell the server\n   * that we've left.\n   */\n  close() {\n    if (!this.isClosed_) {\n      this.log_('Longpoll is being closed.');\n      this.shutdown_();\n    }\n  }\n\n  /**\n   * Send the JSON object down to the server. It will need to be stringified, base64 encoded, and then\n   * broken into chunks (since URLs have a small maximum length).\n   * @param {!Object} data The JSON data to transmit.\n   */\n  send(data: {}) {\n    const dataStr = stringify(data);\n    this.bytesSent += dataStr.length;\n    this.stats_.incrementCounter('bytes_sent', dataStr.length);\n\n    //first, lets get the base64-encoded data\n    const base64data = base64Encode(dataStr);\n\n    //We can only fit a certain amount in each URL, so we need to split this request\n    //up into multiple pieces if it doesn't fit in one request.\n    const dataSegs = splitStringBySize(base64data, MAX_PAYLOAD_SIZE);\n\n    //Enqueue each segment for transmission. We assign each chunk a sequential ID and a total number\n    //of segments so that we can reassemble the packet on the server.\n    for (let i = 0; i < dataSegs.length; i++) {\n      this.scriptTagHolder.enqueueSegment(\n        this.curSegmentNum,\n        dataSegs.length,\n        dataSegs[i]\n      );\n      this.curSegmentNum++;\n    }\n  }\n\n  /**\n   * This is how we notify the server that we're leaving.\n   * We aren't able to send requests with DHTML on a window close event, but we can\n   * trigger XHR requests in some browsers (everything but Opera basically).\n   * @param {!string} id\n   * @param {!string} pw\n   */\n  addDisconnectPingFrame(id: string, pw: string) {\n    if (isNodeSdk()) {\n      return;\n    }\n    this.myDisconnFrame = document.createElement('iframe');\n    const urlParams: { [k: string]: string } = {};\n    urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM] = 't';\n    urlParams[FIREBASE_LONGPOLL_ID_PARAM] = id;\n    urlParams[FIREBASE_LONGPOLL_PW_PARAM] = pw;\n    this.myDisconnFrame.src = this.urlFn(urlParams);\n    this.myDisconnFrame.style.display = 'none';\n\n    document.body.appendChild(this.myDisconnFrame);\n  }\n\n  /**\n   * Used to track the bytes received by this client\n   * @param {*} args\n   * @private\n   */\n  private incrementIncomingBytes_(args: unknown) {\n    // TODO: This is an annoying perf hit just to track the number of incoming bytes.  Maybe it should be opt-in.\n    const bytesReceived = stringify(args).length;\n    this.bytesReceived += bytesReceived;\n    this.stats_.incrementCounter('bytes_received', bytesReceived);\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport interface IFrameElement extends HTMLIFrameElement {\n  doc: Document;\n}\n\n/*********************************************************************************************\n * A wrapper around an iframe that is used as a long-polling script holder.\n * @constructor\n *********************************************************************************************/\nexport class FirebaseIFrameScriptHolder {\n  //We maintain a count of all of the outstanding requests, because if we have too many active at once it can cause\n  //problems in some browsers.\n  outstandingRequests = new Set<number>();\n\n  //A queue of the pending segments waiting for transmission to the server.\n  pendingSegs: Array<{ seg: number; ts: number; d: unknown }> = [];\n\n  //A serial number. We use this for two things:\n  // 1) A way to ensure the browser doesn't cache responses to polls\n  // 2) A way to make the server aware when long-polls arrive in a different order than we started them. The\n  //    server needs to release both polls in this case or it will cause problems in Opera since Opera can only execute\n  //    JSONP code in the order it was added to the iframe.\n  currentSerial = Math.floor(Math.random() * 100000000);\n\n  // This gets set to false when we're \"closing down\" the connection (e.g. we're switching transports but there's still\n  // incoming data from the server that we're waiting for).\n  sendNewPolls = true;\n\n  uniqueCallbackIdentifier: number;\n  myIFrame: IFrameElement;\n  alive: boolean;\n  myID: string;\n  myPW: string;\n  commandCB: (command: string, ...args: unknown[]) => void;\n  onMessageCB: (...args: unknown[]) => void;\n\n  /**\n   * @param commandCB - The callback to be called when control commands are recevied from the server.\n   * @param onMessageCB - The callback to be triggered when responses arrive from the server.\n   * @param onDisconnect - The callback to be triggered when this tag holder is closed\n   * @param urlFn - A function that provides the URL of the endpoint to send data to.\n   */\n  constructor(\n    commandCB: (command: string, ...args: unknown[]) => void,\n    onMessageCB: (...args: unknown[]) => void,\n    public onDisconnect: () => void,\n    public urlFn: (a: object) => string\n  ) {\n    if (!isNodeSdk()) {\n      //Each script holder registers a couple of uniquely named callbacks with the window. These are called from the\n      //iframes where we put the long-polling script tags. We have two callbacks:\n      //   1) Command Callback - Triggered for control issues, like starting a connection.\n      //   2) Message Callback - Triggered when new data arrives.\n      this.uniqueCallbackIdentifier = LUIDGenerator();\n      window[\n        FIREBASE_LONGPOLL_COMMAND_CB_NAME + this.uniqueCallbackIdentifier\n      ] = commandCB;\n      window[\n        FIREBASE_LONGPOLL_DATA_CB_NAME + this.uniqueCallbackIdentifier\n      ] = onMessageCB;\n\n      //Create an iframe for us to add script tags to.\n      this.myIFrame = FirebaseIFrameScriptHolder.createIFrame_();\n\n      // Set the iframe's contents.\n      let script = '';\n      // if we set a javascript url, it's IE and we need to set the document domain. The javascript url is sufficient\n      // for ie9, but ie8 needs to do it again in the document itself.\n      if (\n        this.myIFrame.src &&\n        this.myIFrame.src.substr(0, 'javascript:'.length) === 'javascript:'\n      ) {\n        const currentDomain = document.domain;\n        script = '<script>document.domain=\"' + currentDomain + '\";</script>';\n      }\n      const iframeContents = '<html><body>' + script + '</body></html>';\n      try {\n        this.myIFrame.doc.open();\n        this.myIFrame.doc.write(iframeContents);\n        this.myIFrame.doc.close();\n      } catch (e) {\n        log('frame writing exception');\n        if (e.stack) {\n          log(e.stack);\n        }\n        log(e);\n      }\n    } else {\n      this.commandCB = commandCB;\n      this.onMessageCB = onMessageCB;\n    }\n  }\n\n  /**\n   * Each browser has its own funny way to handle iframes. Here we mush them all together into one object that I can\n   * actually use.\n   * @private\n   * @return {Element}\n   */\n  private static createIFrame_(): IFrameElement {\n    const iframe = document.createElement('iframe') as IFrameElement;\n    iframe.style.display = 'none';\n\n    // This is necessary in order to initialize the document inside the iframe\n    if (document.body) {\n      document.body.appendChild(iframe);\n      try {\n        // If document.domain has been modified in IE, this will throw an error, and we need to set the\n        // domain of the iframe's document manually. We can do this via a javascript: url as the src attribute\n        // Also note that we must do this *after* the iframe has been appended to the page. Otherwise it doesn't work.\n        const a = iframe.contentWindow.document;\n        if (!a) {\n          // Apologies for the log-spam, I need to do something to keep closure from optimizing out the assignment above.\n          log('No IE domain setting required');\n        }\n      } catch (e) {\n        const domain = document.domain;\n        iframe.src =\n          \"javascript:void((function(){document.open();document.domain='\" +\n          domain +\n          \"';document.close();})())\";\n      }\n    } else {\n      // LongPollConnection attempts to delay initialization until the document is ready, so hopefully this\n      // never gets hit.\n      throw 'Document body has not initialized. Wait to initialize Firebase until after the document is ready.';\n    }\n\n    // Get the document of the iframe in a browser-specific way.\n    if (iframe.contentDocument) {\n      iframe.doc = iframe.contentDocument; // Firefox, Opera, Safari\n    } else if (iframe.contentWindow) {\n      iframe.doc = iframe.contentWindow.document; // Internet Explorer\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } else if ((iframe as any).document) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      iframe.doc = (iframe as any).document; //others?\n    }\n\n    return iframe;\n  }\n\n  /**\n   * Cancel all outstanding queries and remove the frame.\n   */\n  close() {\n    //Mark this iframe as dead, so no new requests are sent.\n    this.alive = false;\n\n    if (this.myIFrame) {\n      //We have to actually remove all of the html inside this iframe before removing it from the\n      //window, or IE will continue loading and executing the script tags we've already added, which\n      //can lead to some errors being thrown. Setting innerHTML seems to be the easiest way to do this.\n      this.myIFrame.doc.body.innerHTML = '';\n      setTimeout(() => {\n        if (this.myIFrame !== null) {\n          document.body.removeChild(this.myIFrame);\n          this.myIFrame = null;\n        }\n      }, Math.floor(0));\n    }\n\n    // Protect from being called recursively.\n    const onDisconnect = this.onDisconnect;\n    if (onDisconnect) {\n      this.onDisconnect = null;\n      onDisconnect();\n    }\n  }\n\n  /**\n   * Actually start the long-polling session by adding the first script tag(s) to the iframe.\n   * @param {!string} id - The ID of this connection\n   * @param {!string} pw - The password for this connection\n   */\n  startLongPoll(id: string, pw: string) {\n    this.myID = id;\n    this.myPW = pw;\n    this.alive = true;\n\n    //send the initial request. If there are requests queued, make sure that we transmit as many as we are currently able to.\n    while (this.newRequest_()) {}\n  }\n\n  /**\n   * This is called any time someone might want a script tag to be added. It adds a script tag when there aren't\n   * too many outstanding requests and we are still alive.\n   *\n   * If there are outstanding packet segments to send, it sends one. If there aren't, it sends a long-poll anyways if\n   * needed.\n   */\n  private newRequest_() {\n    // We keep one outstanding request open all the time to receive data, but if we need to send data\n    // (pendingSegs.length > 0) then we create a new request to send the data.  The server will automatically\n    // close the old request.\n    if (\n      this.alive &&\n      this.sendNewPolls &&\n      this.outstandingRequests.size < (this.pendingSegs.length > 0 ? 2 : 1)\n    ) {\n      //construct our url\n      this.currentSerial++;\n      const urlParams: { [k: string]: string | number } = {};\n      urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;\n      urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;\n      urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = this.currentSerial;\n      let theURL = this.urlFn(urlParams);\n      //Now add as much data as we can.\n      let curDataString = '';\n      let i = 0;\n\n      while (this.pendingSegs.length > 0) {\n        //first, lets see if the next segment will fit.\n        const nextSeg = this.pendingSegs[0];\n        if (\n          (nextSeg.d as unknown[]).length +\n            SEG_HEADER_SIZE +\n            curDataString.length <=\n          MAX_URL_DATA_SIZE\n        ) {\n          //great, the segment will fit. Lets append it.\n          const theSeg = this.pendingSegs.shift();\n          curDataString =\n            curDataString +\n            '&' +\n            FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM +\n            i +\n            '=' +\n            theSeg.seg +\n            '&' +\n            FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET +\n            i +\n            '=' +\n            theSeg.ts +\n            '&' +\n            FIREBASE_LONGPOLL_DATA_PARAM +\n            i +\n            '=' +\n            theSeg.d;\n          i++;\n        } else {\n          break;\n        }\n      }\n\n      theURL = theURL + curDataString;\n      this.addLongPollTag_(theURL, this.currentSerial);\n\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Queue a packet for transmission to the server.\n   * @param segnum - A sequential id for this packet segment used for reassembly\n   * @param totalsegs - The total number of segments in this packet\n   * @param data - The data for this segment.\n   */\n  enqueueSegment(segnum: number, totalsegs: number, data: unknown) {\n    //add this to the queue of segments to send.\n    this.pendingSegs.push({ seg: segnum, ts: totalsegs, d: data });\n\n    //send the data immediately if there isn't already data being transmitted, unless\n    //startLongPoll hasn't been called yet.\n    if (this.alive) {\n      this.newRequest_();\n    }\n  }\n\n  /**\n   * Add a script tag for a regular long-poll request.\n   * @param {!string} url - The URL of the script tag.\n   * @param {!number} serial - The serial number of the request.\n   * @private\n   */\n  private addLongPollTag_(url: string, serial: number) {\n    //remember that we sent this request.\n    this.outstandingRequests.add(serial);\n\n    const doNewRequest = () => {\n      this.outstandingRequests.delete(serial);\n      this.newRequest_();\n    };\n\n    // If this request doesn't return on its own accord (by the server sending us some data), we'll\n    // create a new one after the KEEPALIVE interval to make sure we always keep a fresh request open.\n    const keepaliveTimeout = setTimeout(\n      doNewRequest,\n      Math.floor(KEEPALIVE_REQUEST_INTERVAL)\n    );\n\n    const readyStateCB = () => {\n      // Request completed.  Cancel the keepalive.\n      clearTimeout(keepaliveTimeout);\n\n      // Trigger a new request so we can continue receiving data.\n      doNewRequest();\n    };\n\n    this.addTag(url, readyStateCB);\n  }\n\n  /**\n   * Add an arbitrary script tag to the iframe.\n   * @param {!string} url - The URL for the script tag source.\n   * @param {!function()} loadCB - A callback to be triggered once the script has loaded.\n   */\n  addTag(url: string, loadCB: () => void) {\n    if (isNodeSdk()) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (this as any).doNodeLongPoll(url, loadCB);\n    } else {\n      setTimeout(() => {\n        try {\n          // if we're already closed, don't add this poll\n          if (!this.sendNewPolls) {\n            return;\n          }\n          const newScript = this.myIFrame.doc.createElement('script');\n          newScript.type = 'text/javascript';\n          newScript.async = true;\n          newScript.src = url;\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          newScript.onload = (newScript as any).onreadystatechange = function () {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            const rstate = (newScript as any).readyState;\n            if (!rstate || rstate === 'loaded' || rstate === 'complete') {\n              // eslint-disable-next-line @typescript-eslint/no-explicit-any\n              newScript.onload = (newScript as any).onreadystatechange = null;\n              if (newScript.parentNode) {\n                newScript.parentNode.removeChild(newScript);\n              }\n              loadCB();\n            }\n          };\n          newScript.onerror = () => {\n            log('Long-poll script failed to load: ' + url);\n            this.sendNewPolls = false;\n            this.close();\n          };\n          this.myIFrame.doc.body.appendChild(newScript);\n        } catch (e) {\n          // TODO: we should make this error visible somehow\n        }\n      }, Math.floor(1));\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** The semver (www.semver.org) version of the SDK. */\nexport let SDK_VERSION = '';\n\n// SDK_VERSION should be set before any database instance is created\nexport function setSDKVersion(version: string): void {\n  SDK_VERSION = version;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../core/RepoInfo';\nimport {\n  assert,\n  CONSTANTS as ENV_CONSTANTS,\n  jsonEval,\n  stringify,\n  isNodeSdk\n} from '@firebase/util';\nimport { logWrapper, splitStringBySize } from '../core/util/util';\nimport { StatsManager } from '../core/stats/StatsManager';\nimport {\n  FORGE_DOMAIN,\n  FORGE_REF,\n  LAST_SESSION_PARAM,\n  PROTOCOL_VERSION,\n  REFERER_PARAM,\n  TRANSPORT_SESSION_PARAM,\n  VERSION_PARAM,\n  WEBSOCKET\n} from './Constants';\nimport { PersistentStorage } from '../core/storage/storage';\nimport { Transport } from './Transport';\nimport { StatsCollection } from '../core/stats/StatsCollection';\nimport { SDK_VERSION } from '../core/version';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ndeclare const MozWebSocket: any;\n\nconst WEBSOCKET_MAX_FRAME_SIZE = 16384;\nconst WEBSOCKET_KEEPALIVE_INTERVAL = 45000;\n\nlet WebSocketImpl = null;\nif (typeof MozWebSocket !== 'undefined') {\n  WebSocketImpl = MozWebSocket;\n} else if (typeof WebSocket !== 'undefined') {\n  WebSocketImpl = WebSocket;\n}\n\nexport function setWebSocketImpl(impl) {\n  WebSocketImpl = impl;\n}\n\n/**\n * Create a new websocket connection with the given callbacks.\n * @constructor\n * @implements {Transport}\n */\nexport class WebSocketConnection implements Transport {\n  keepaliveTimer: number | null = null;\n  frames: string[] | null = null;\n  totalFrames = 0;\n  bytesSent = 0;\n  bytesReceived = 0;\n  connURL: string;\n  onDisconnect: (a?: boolean) => void;\n  onMessage: (msg: {}) => void;\n  mySock: WebSocket | null;\n  private log_: (...a: unknown[]) => void;\n  private stats_: StatsCollection;\n  private everConnected_: boolean;\n  private isClosed_: boolean;\n  private nodeAdmin: boolean;\n\n  /**\n   * @param connId identifier for this transport\n   * @param repoInfo The info for the websocket endpoint.\n   * @param applicationId The Firebase App ID for this project.\n   * @param transportSessionId Optional transportSessionId if this is connecting to an existing transport\n   *                                         session\n   * @param lastSessionId Optional lastSessionId if there was a previous connection\n   */\n  constructor(\n    public connId: string,\n    repoInfo: RepoInfo,\n    private applicationId?: string,\n    transportSessionId?: string,\n    lastSessionId?: string\n  ) {\n    this.log_ = logWrapper(this.connId);\n    this.stats_ = StatsManager.getCollection(repoInfo);\n    this.connURL = WebSocketConnection.connectionURL_(\n      repoInfo,\n      transportSessionId,\n      lastSessionId\n    );\n    this.nodeAdmin = repoInfo.nodeAdmin;\n  }\n\n  /**\n   * @param {RepoInfo} repoInfo The info for the websocket endpoint.\n   * @param {string=} transportSessionId Optional transportSessionId if this is connecting to an existing transport\n   *                                         session\n   * @param {string=} lastSessionId Optional lastSessionId if there was a previous connection\n   * @return {string} connection url\n   * @private\n   */\n  private static connectionURL_(\n    repoInfo: RepoInfo,\n    transportSessionId?: string,\n    lastSessionId?: string\n  ): string {\n    const urlParams: { [k: string]: string } = {};\n    urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n\n    if (\n      !isNodeSdk() &&\n      typeof location !== 'undefined' &&\n      location.href &&\n      location.href.indexOf(FORGE_DOMAIN) !== -1\n    ) {\n      urlParams[REFERER_PARAM] = FORGE_REF;\n    }\n    if (transportSessionId) {\n      urlParams[TRANSPORT_SESSION_PARAM] = transportSessionId;\n    }\n    if (lastSessionId) {\n      urlParams[LAST_SESSION_PARAM] = lastSessionId;\n    }\n    return repoInfo.connectionURL(WEBSOCKET, urlParams);\n  }\n\n  /**\n   *\n   * @param onMessage Callback when messages arrive\n   * @param onDisconnect Callback with connection lost.\n   */\n  open(onMessage: (msg: {}) => void, onDisconnect: (a?: boolean) => void) {\n    this.onDisconnect = onDisconnect;\n    this.onMessage = onMessage;\n\n    this.log_('Websocket connecting to ' + this.connURL);\n\n    this.everConnected_ = false;\n    // Assume failure until proven otherwise.\n    PersistentStorage.set('previous_websocket_failure', true);\n\n    try {\n      if (isNodeSdk()) {\n        const device = this.nodeAdmin ? 'AdminNode' : 'Node';\n        // UA Format: Firebase/<wire_protocol>/<sdk_version>/<platform>/<device>\n        const options: { [k: string]: object } = {\n          headers: {\n            'User-Agent': `Firebase/${PROTOCOL_VERSION}/${SDK_VERSION}/${process.platform}/${device}`,\n            'X-Firebase-GMPID': this.applicationId || ''\n          }\n        };\n\n        // Plumb appropriate http_proxy environment variable into faye-websocket if it exists.\n        const env = process['env'];\n        const proxy =\n          this.connURL.indexOf('wss://') === 0\n            ? env['HTTPS_PROXY'] || env['https_proxy']\n            : env['HTTP_PROXY'] || env['http_proxy'];\n\n        if (proxy) {\n          options['proxy'] = { origin: proxy };\n        }\n\n        this.mySock = new WebSocketImpl(this.connURL, [], options);\n      } else {\n        const options: { [k: string]: object } = {\n          headers: {\n            'X-Firebase-GMPID': this.applicationId || ''\n          }\n        };\n        this.mySock = new WebSocketImpl(this.connURL, [], options);\n      }\n    } catch (e) {\n      this.log_('Error instantiating WebSocket.');\n      const error = e.message || e.data;\n      if (error) {\n        this.log_(error);\n      }\n      this.onClosed_();\n      return;\n    }\n\n    this.mySock.onopen = () => {\n      this.log_('Websocket connected.');\n      this.everConnected_ = true;\n    };\n\n    this.mySock.onclose = () => {\n      this.log_('Websocket connection was disconnected.');\n      this.mySock = null;\n      this.onClosed_();\n    };\n\n    this.mySock.onmessage = m => {\n      this.handleIncomingFrame(m as {});\n    };\n\n    this.mySock.onerror = e => {\n      this.log_('WebSocket error.  Closing connection.');\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const error = (e as any).message || (e as any).data;\n      if (error) {\n        this.log_(error);\n      }\n      this.onClosed_();\n    };\n  }\n\n  /**\n   * No-op for websockets, we don't need to do anything once the connection is confirmed as open\n   */\n  start() {}\n\n  static forceDisallow_: boolean;\n\n  static forceDisallow() {\n    WebSocketConnection.forceDisallow_ = true;\n  }\n\n  static isAvailable(): boolean {\n    let isOldAndroid = false;\n    if (typeof navigator !== 'undefined' && navigator.userAgent) {\n      const oldAndroidRegex = /Android ([0-9]{0,}\\.[0-9]{0,})/;\n      const oldAndroidMatch = navigator.userAgent.match(oldAndroidRegex);\n      if (oldAndroidMatch && oldAndroidMatch.length > 1) {\n        if (parseFloat(oldAndroidMatch[1]) < 4.4) {\n          isOldAndroid = true;\n        }\n      }\n    }\n\n    return (\n      !isOldAndroid &&\n      WebSocketImpl !== null &&\n      !WebSocketConnection.forceDisallow_\n    );\n  }\n\n  /**\n   * Number of response before we consider the connection \"healthy.\"\n   * @type {number}\n   */\n  static responsesRequiredToBeHealthy = 2;\n\n  /**\n   * Time to wait for the connection te become healthy before giving up.\n   * @type {number}\n   */\n  static healthyTimeout = 30000;\n\n  /**\n   * Returns true if we previously failed to connect with this transport.\n   * @return {boolean}\n   */\n  static previouslyFailed(): boolean {\n    // If our persistent storage is actually only in-memory storage,\n    // we default to assuming that it previously failed to be safe.\n    return (\n      PersistentStorage.isInMemoryStorage ||\n      PersistentStorage.get('previous_websocket_failure') === true\n    );\n  }\n\n  markConnectionHealthy() {\n    PersistentStorage.remove('previous_websocket_failure');\n  }\n\n  private appendFrame_(data: string) {\n    this.frames.push(data);\n    if (this.frames.length === this.totalFrames) {\n      const fullMess = this.frames.join('');\n      this.frames = null;\n      const jsonMess = jsonEval(fullMess) as object;\n\n      //handle the message\n      this.onMessage(jsonMess);\n    }\n  }\n\n  /**\n   * @param {number} frameCount The number of frames we are expecting from the server\n   * @private\n   */\n  private handleNewFrameCount_(frameCount: number) {\n    this.totalFrames = frameCount;\n    this.frames = [];\n  }\n\n  /**\n   * Attempts to parse a frame count out of some text. If it can't, assumes a value of 1\n   * @param {!String} data\n   * @return {?String} Any remaining data to be process, or null if there is none\n   * @private\n   */\n  private extractFrameCount_(data: string): string | null {\n    assert(this.frames === null, 'We already have a frame buffer');\n    // TODO: The server is only supposed to send up to 9999 frames (i.e. length <= 4), but that isn't being enforced\n    // currently.  So allowing larger frame counts (length <= 6).  See https://app.asana.com/0/search/8688598998380/8237608042508\n    if (data.length <= 6) {\n      const frameCount = Number(data);\n      if (!isNaN(frameCount)) {\n        this.handleNewFrameCount_(frameCount);\n        return null;\n      }\n    }\n    this.handleNewFrameCount_(1);\n    return data;\n  }\n\n  /**\n   * Process a websocket frame that has arrived from the server.\n   * @param mess The frame data\n   */\n  handleIncomingFrame(mess: { [k: string]: unknown }) {\n    if (this.mySock === null) {\n      return; // Chrome apparently delivers incoming packets even after we .close() the connection sometimes.\n    }\n    const data = mess['data'] as string;\n    this.bytesReceived += data.length;\n    this.stats_.incrementCounter('bytes_received', data.length);\n\n    this.resetKeepAlive();\n\n    if (this.frames !== null) {\n      // we're buffering\n      this.appendFrame_(data);\n    } else {\n      // try to parse out a frame count, otherwise, assume 1 and process it\n      const remainingData = this.extractFrameCount_(data);\n      if (remainingData !== null) {\n        this.appendFrame_(remainingData);\n      }\n    }\n  }\n\n  /**\n   * Send a message to the server\n   * @param {Object} data The JSON object to transmit\n   */\n  send(data: {}) {\n    this.resetKeepAlive();\n\n    const dataStr = stringify(data);\n    this.bytesSent += dataStr.length;\n    this.stats_.incrementCounter('bytes_sent', dataStr.length);\n\n    //We can only fit a certain amount in each websocket frame, so we need to split this request\n    //up into multiple pieces if it doesn't fit in one request.\n\n    const dataSegs = splitStringBySize(dataStr, WEBSOCKET_MAX_FRAME_SIZE);\n\n    //Send the length header\n    if (dataSegs.length > 1) {\n      this.sendString_(String(dataSegs.length));\n    }\n\n    //Send the actual data in segments.\n    for (let i = 0; i < dataSegs.length; i++) {\n      this.sendString_(dataSegs[i]);\n    }\n  }\n\n  private shutdown_() {\n    this.isClosed_ = true;\n    if (this.keepaliveTimer) {\n      clearInterval(this.keepaliveTimer);\n      this.keepaliveTimer = null;\n    }\n\n    if (this.mySock) {\n      this.mySock.close();\n      this.mySock = null;\n    }\n  }\n\n  private onClosed_() {\n    if (!this.isClosed_) {\n      this.log_('WebSocket is closing itself');\n      this.shutdown_();\n\n      // since this is an internal close, trigger the close listener\n      if (this.onDisconnect) {\n        this.onDisconnect(this.everConnected_);\n        this.onDisconnect = null;\n      }\n    }\n  }\n\n  /**\n   * External-facing close handler.\n   * Close the websocket and kill the connection.\n   */\n  close() {\n    if (!this.isClosed_) {\n      this.log_('WebSocket is being closed');\n      this.shutdown_();\n    }\n  }\n\n  /**\n   * Kill the current keepalive timer and start a new one, to ensure that it always fires N seconds after\n   * the last activity.\n   */\n  resetKeepAlive() {\n    clearInterval(this.keepaliveTimer);\n    this.keepaliveTimer = setInterval(() => {\n      //If there has been no websocket activity for a while, send a no-op\n      if (this.mySock) {\n        this.sendString_('0');\n      }\n      this.resetKeepAlive();\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(WEBSOCKET_KEEPALIVE_INTERVAL)) as any;\n  }\n\n  /**\n   * Send a string over the websocket.\n   *\n   * @param {string} str String to send.\n   * @private\n   */\n  private sendString_(str: string) {\n    // Firefox seems to sometimes throw exceptions (NS_ERROR_UNEXPECTED) from websocket .send()\n    // calls for some unknown reason.  We treat these as an error and disconnect.\n    // See https://app.asana.com/0/58926111402292/68021340250410\n    try {\n      this.mySock.send(str);\n    } catch (e) {\n      this.log_(\n        'Exception thrown from WebSocket.send():',\n        e.message || e.data,\n        'Closing connection.'\n      );\n      setTimeout(this.onClosed_.bind(this), 0);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { BrowserPollConnection } from './BrowserPollConnection';\nimport { WebSocketConnection } from './WebSocketConnection';\nimport { warn } from '../core/util/util';\nimport { TransportConstructor } from './Transport';\nimport { RepoInfo } from '../core/RepoInfo';\n\n/**\n * Currently simplistic, this class manages what transport a Connection should use at various stages of its\n * lifecycle.\n *\n * It starts with longpolling in a browser, and httppolling on node. It then upgrades to websockets if\n * they are available.\n * @constructor\n */\nexport class TransportManager {\n  private transports_: TransportConstructor[];\n\n  /**\n   * @const\n   * @type {!Array.<function(new:Transport, string, RepoInfo, string=)>}\n   */\n  static get ALL_TRANSPORTS() {\n    return [BrowserPollConnection, WebSocketConnection];\n  }\n\n  /**\n   * @param {!RepoInfo} repoInfo Metadata around the namespace we're connecting to\n   */\n  constructor(repoInfo: RepoInfo) {\n    this.initTransports_(repoInfo);\n  }\n\n  /**\n   * @param {!RepoInfo} repoInfo\n   * @private\n   */\n  private initTransports_(repoInfo: RepoInfo) {\n    const isWebSocketsAvailable: boolean =\n      WebSocketConnection && WebSocketConnection['isAvailable']();\n    let isSkipPollConnection =\n      isWebSocketsAvailable && !WebSocketConnection.previouslyFailed();\n\n    if (repoInfo.webSocketOnly) {\n      if (!isWebSocketsAvailable) {\n        warn(\n          \"wss:// URL used, but browser isn't known to support websockets.  Trying anyway.\"\n        );\n      }\n\n      isSkipPollConnection = true;\n    }\n\n    if (isSkipPollConnection) {\n      this.transports_ = [WebSocketConnection];\n    } else {\n      const transports = (this.transports_ = [] as TransportConstructor[]);\n      for (const transport of TransportManager.ALL_TRANSPORTS) {\n        if (transport && transport['isAvailable']()) {\n          transports.push(transport);\n        }\n      }\n    }\n  }\n\n  /**\n   * @return {function(new:Transport, !string, !RepoInfo, string=, string=)} The constructor for the\n   * initial transport to use\n   */\n  initialTransport(): TransportConstructor {\n    if (this.transports_.length > 0) {\n      return this.transports_[0];\n    } else {\n      throw new Error('No transports available');\n    }\n  }\n\n  /**\n   * @return {?function(new:Transport, function(),function(), string=)} The constructor for the next\n   * transport, or null\n   */\n  upgradeTransport(): TransportConstructor | null {\n    if (this.transports_.length > 1) {\n      return this.transports_[1];\n    } else {\n      return null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  error,\n  logWrapper,\n  requireKey,\n  setTimeoutNonBlocking,\n  warn\n} from '../core/util/util';\nimport { PersistentStorage } from '../core/storage/storage';\nimport { PROTOCOL_VERSION } from './Constants';\nimport { TransportManager } from './TransportManager';\nimport { RepoInfo } from '../core/RepoInfo';\nimport { Transport, TransportConstructor } from './Transport';\nimport { Indexable } from '../core/util/misc';\n\n// Abort upgrade attempt if it takes longer than 60s.\nconst UPGRADE_TIMEOUT = 60000;\n\n// For some transports (WebSockets), we need to \"validate\" the transport by exchanging a few requests and responses.\n// If we haven't sent enough requests within 5s, we'll start sending noop ping requests.\nconst DELAY_BEFORE_SENDING_EXTRA_REQUESTS = 5000;\n\n// If the initial data sent triggers a lot of bandwidth (i.e. it's a large put or a listen for a large amount of data)\n// then we may not be able to exchange our ping/pong requests within the healthy timeout.  So if we reach the timeout\n// but we've sent/received enough bytes, we don't cancel the connection.\nconst BYTES_SENT_HEALTHY_OVERRIDE = 10 * 1024;\nconst BYTES_RECEIVED_HEALTHY_OVERRIDE = 100 * 1024;\n\nconst enum RealtimeState {\n  CONNECTING,\n  CONNECTED,\n  DISCONNECTED\n}\n\nconst MESSAGE_TYPE = 't';\nconst MESSAGE_DATA = 'd';\nconst CONTROL_SHUTDOWN = 's';\nconst CONTROL_RESET = 'r';\nconst CONTROL_ERROR = 'e';\nconst CONTROL_PONG = 'o';\nconst SWITCH_ACK = 'a';\nconst END_TRANSMISSION = 'n';\nconst PING = 'p';\n\nconst SERVER_HELLO = 'h';\n\n/**\n * Creates a new real-time connection to the server using whichever method works\n * best in the current browser.\n *\n * @constructor\n */\nexport class Connection {\n  connectionCount = 0;\n  pendingDataMessages: unknown[] = [];\n  sessionId: string;\n\n  private conn_: Transport;\n  private healthyTimeout_: number;\n  private isHealthy_: boolean;\n  private log_: (...args: unknown[]) => void;\n  private primaryResponsesRequired_: number;\n  private rx_: Transport;\n  private secondaryConn_: Transport;\n  private secondaryResponsesRequired_: number;\n  private state_ = RealtimeState.CONNECTING;\n  private transportManager_: TransportManager;\n  private tx_: Transport;\n\n  /**\n   * @param id - an id for this connection\n   * @param repoInfo_ - the info for the endpoint to connect to\n   * @param applicationId_ - the Firebase App ID for this project\n   * @param onMessage_ - the callback to be triggered when a server-push message arrives\n   * @param onReady_ - the callback to be triggered when this connection is ready to send messages.\n   * @param onDisconnect_ - the callback to be triggered when a connection was lost\n   * @param onKill_ - the callback to be triggered when this connection has permanently shut down.\n   * @param lastSessionId - last session id in persistent connection. is used to clean up old session in real-time server\n   */\n  constructor(\n    public id: string,\n    private repoInfo_: RepoInfo,\n    private applicationId_: string | undefined,\n    private onMessage_: (a: {}) => void,\n    private onReady_: (a: number, b: string) => void,\n    private onDisconnect_: () => void,\n    private onKill_: (a: string) => void,\n    public lastSessionId?: string\n  ) {\n    this.log_ = logWrapper('c:' + this.id + ':');\n    this.transportManager_ = new TransportManager(repoInfo_);\n    this.log_('Connection created');\n    this.start_();\n  }\n\n  /**\n   * Starts a connection attempt\n   * @private\n   */\n  private start_(): void {\n    const conn = this.transportManager_.initialTransport();\n    this.conn_ = new conn(\n      this.nextTransportId_(),\n      this.repoInfo_,\n      this.applicationId_,\n      undefined,\n      this.lastSessionId\n    );\n\n    // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n    // can consider the transport healthy.\n    this.primaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;\n\n    const onMessageReceived = this.connReceiver_(this.conn_);\n    const onConnectionLost = this.disconnReceiver_(this.conn_);\n    this.tx_ = this.conn_;\n    this.rx_ = this.conn_;\n    this.secondaryConn_ = null;\n    this.isHealthy_ = false;\n\n    /*\n     * Firefox doesn't like when code from one iframe tries to create another iframe by way of the parent frame.\n     * This can occur in the case of a redirect, i.e. we guessed wrong on what server to connect to and received a reset.\n     * Somehow, setTimeout seems to make this ok. That doesn't make sense from a security perspective, since you should\n     * still have the context of your originating frame.\n     */\n    setTimeout(() => {\n      // this.conn_ gets set to null in some of the tests. Check to make sure it still exists before using it\n      this.conn_ && this.conn_.open(onMessageReceived, onConnectionLost);\n    }, Math.floor(0));\n\n    const healthyTimeoutMS = conn['healthyTimeout'] || 0;\n    if (healthyTimeoutMS > 0) {\n      this.healthyTimeout_ = setTimeoutNonBlocking(() => {\n        this.healthyTimeout_ = null;\n        if (!this.isHealthy_) {\n          if (\n            this.conn_ &&\n            this.conn_.bytesReceived > BYTES_RECEIVED_HEALTHY_OVERRIDE\n          ) {\n            this.log_(\n              'Connection exceeded healthy timeout but has received ' +\n                this.conn_.bytesReceived +\n                ' bytes.  Marking connection healthy.'\n            );\n            this.isHealthy_ = true;\n            this.conn_.markConnectionHealthy();\n          } else if (\n            this.conn_ &&\n            this.conn_.bytesSent > BYTES_SENT_HEALTHY_OVERRIDE\n          ) {\n            this.log_(\n              'Connection exceeded healthy timeout but has sent ' +\n                this.conn_.bytesSent +\n                ' bytes.  Leaving connection alive.'\n            );\n            // NOTE: We don't want to mark it healthy, since we have no guarantee that the bytes have made it to\n            // the server.\n          } else {\n            this.log_('Closing unhealthy connection after timeout.');\n            this.close();\n          }\n        }\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      }, Math.floor(healthyTimeoutMS)) as any;\n    }\n  }\n\n  /**\n   * @return {!string}\n   * @private\n   */\n  private nextTransportId_(): string {\n    return 'c:' + this.id + ':' + this.connectionCount++;\n  }\n\n  private disconnReceiver_(conn) {\n    return everConnected => {\n      if (conn === this.conn_) {\n        this.onConnectionLost_(everConnected);\n      } else if (conn === this.secondaryConn_) {\n        this.log_('Secondary connection lost.');\n        this.onSecondaryConnectionLost_();\n      } else {\n        this.log_('closing an old connection');\n      }\n    };\n  }\n\n  private connReceiver_(conn: Transport) {\n    return (message: Indexable) => {\n      if (this.state_ !== RealtimeState.DISCONNECTED) {\n        if (conn === this.rx_) {\n          this.onPrimaryMessageReceived_(message);\n        } else if (conn === this.secondaryConn_) {\n          this.onSecondaryMessageReceived_(message);\n        } else {\n          this.log_('message on old connection');\n        }\n      }\n    };\n  }\n\n  /**\n   *\n   * @param {Object} dataMsg An arbitrary data message to be sent to the server\n   */\n  sendRequest(dataMsg: object) {\n    // wrap in a data message envelope and send it on\n    const msg = { t: 'd', d: dataMsg };\n    this.sendData_(msg);\n  }\n\n  tryCleanupConnection() {\n    if (this.tx_ === this.secondaryConn_ && this.rx_ === this.secondaryConn_) {\n      this.log_(\n        'cleaning up and promoting a connection: ' + this.secondaryConn_.connId\n      );\n      this.conn_ = this.secondaryConn_;\n      this.secondaryConn_ = null;\n      // the server will shutdown the old connection\n    }\n  }\n\n  private onSecondaryControl_(controlData: { [k: string]: unknown }) {\n    if (MESSAGE_TYPE in controlData) {\n      const cmd = controlData[MESSAGE_TYPE] as string;\n      if (cmd === SWITCH_ACK) {\n        this.upgradeIfSecondaryHealthy_();\n      } else if (cmd === CONTROL_RESET) {\n        // Most likely the session wasn't valid. Abandon the switch attempt\n        this.log_('Got a reset on secondary, closing it');\n        this.secondaryConn_.close();\n        // If we were already using this connection for something, than we need to fully close\n        if (\n          this.tx_ === this.secondaryConn_ ||\n          this.rx_ === this.secondaryConn_\n        ) {\n          this.close();\n        }\n      } else if (cmd === CONTROL_PONG) {\n        this.log_('got pong on secondary.');\n        this.secondaryResponsesRequired_--;\n        this.upgradeIfSecondaryHealthy_();\n      }\n    }\n  }\n\n  private onSecondaryMessageReceived_(parsedData: Indexable) {\n    const layer: string = requireKey('t', parsedData) as string;\n    const data: unknown = requireKey('d', parsedData);\n    if (layer === 'c') {\n      this.onSecondaryControl_(data as Indexable);\n    } else if (layer === 'd') {\n      // got a data message, but we're still second connection. Need to buffer it up\n      this.pendingDataMessages.push(data);\n    } else {\n      throw new Error('Unknown protocol layer: ' + layer);\n    }\n  }\n\n  private upgradeIfSecondaryHealthy_() {\n    if (this.secondaryResponsesRequired_ <= 0) {\n      this.log_('Secondary connection is healthy.');\n      this.isHealthy_ = true;\n      this.secondaryConn_.markConnectionHealthy();\n      this.proceedWithUpgrade_();\n    } else {\n      // Send a ping to make sure the connection is healthy.\n      this.log_('sending ping on secondary.');\n      this.secondaryConn_.send({ t: 'c', d: { t: PING, d: {} } });\n    }\n  }\n\n  private proceedWithUpgrade_() {\n    // tell this connection to consider itself open\n    this.secondaryConn_.start();\n    // send ack\n    this.log_('sending client ack on secondary');\n    this.secondaryConn_.send({ t: 'c', d: { t: SWITCH_ACK, d: {} } });\n\n    // send end packet on primary transport, switch to sending on this one\n    // can receive on this one, buffer responses until end received on primary transport\n    this.log_('Ending transmission on primary');\n    this.conn_.send({ t: 'c', d: { t: END_TRANSMISSION, d: {} } });\n    this.tx_ = this.secondaryConn_;\n\n    this.tryCleanupConnection();\n  }\n\n  private onPrimaryMessageReceived_(parsedData: { [k: string]: unknown }) {\n    // Must refer to parsedData properties in quotes, so closure doesn't touch them.\n    const layer: string = requireKey('t', parsedData) as string;\n    const data: unknown = requireKey('d', parsedData);\n    if (layer === 'c') {\n      this.onControl_(data as { [k: string]: unknown });\n    } else if (layer === 'd') {\n      this.onDataMessage_(data);\n    }\n  }\n\n  private onDataMessage_(message: unknown) {\n    this.onPrimaryResponse_();\n\n    // We don't do anything with data messages, just kick them up a level\n    this.onMessage_(message);\n  }\n\n  private onPrimaryResponse_() {\n    if (!this.isHealthy_) {\n      this.primaryResponsesRequired_--;\n      if (this.primaryResponsesRequired_ <= 0) {\n        this.log_('Primary connection is healthy.');\n        this.isHealthy_ = true;\n        this.conn_.markConnectionHealthy();\n      }\n    }\n  }\n\n  private onControl_(controlData: { [k: string]: unknown }) {\n    const cmd: string = requireKey(MESSAGE_TYPE, controlData) as string;\n    if (MESSAGE_DATA in controlData) {\n      const payload = controlData[MESSAGE_DATA];\n      if (cmd === SERVER_HELLO) {\n        this.onHandshake_(\n          payload as {\n            ts: number;\n            v: string;\n            h: string;\n            s: string;\n          }\n        );\n      } else if (cmd === END_TRANSMISSION) {\n        this.log_('recvd end transmission on primary');\n        this.rx_ = this.secondaryConn_;\n        for (let i = 0; i < this.pendingDataMessages.length; ++i) {\n          this.onDataMessage_(this.pendingDataMessages[i]);\n        }\n        this.pendingDataMessages = [];\n        this.tryCleanupConnection();\n      } else if (cmd === CONTROL_SHUTDOWN) {\n        // This was previously the 'onKill' callback passed to the lower-level connection\n        // payload in this case is the reason for the shutdown. Generally a human-readable error\n        this.onConnectionShutdown_(payload as string);\n      } else if (cmd === CONTROL_RESET) {\n        // payload in this case is the host we should contact\n        this.onReset_(payload as string);\n      } else if (cmd === CONTROL_ERROR) {\n        error('Server Error: ' + payload);\n      } else if (cmd === CONTROL_PONG) {\n        this.log_('got pong on primary.');\n        this.onPrimaryResponse_();\n        this.sendPingOnPrimaryIfNecessary_();\n      } else {\n        error('Unknown control packet command: ' + cmd);\n      }\n    }\n  }\n\n  /**\n   *\n   * @param {Object} handshake The handshake data returned from the server\n   * @private\n   */\n  private onHandshake_(handshake: {\n    ts: number;\n    v: string;\n    h: string;\n    s: string;\n  }): void {\n    const timestamp = handshake.ts;\n    const version = handshake.v;\n    const host = handshake.h;\n    this.sessionId = handshake.s;\n    this.repoInfo_.updateHost(host);\n    // if we've already closed the connection, then don't bother trying to progress further\n    if (this.state_ === RealtimeState.CONNECTING) {\n      this.conn_.start();\n      this.onConnectionEstablished_(this.conn_, timestamp);\n      if (PROTOCOL_VERSION !== version) {\n        warn('Protocol version mismatch detected');\n      }\n      // TODO: do we want to upgrade? when? maybe a delay?\n      this.tryStartUpgrade_();\n    }\n  }\n\n  private tryStartUpgrade_() {\n    const conn = this.transportManager_.upgradeTransport();\n    if (conn) {\n      this.startUpgrade_(conn);\n    }\n  }\n\n  private startUpgrade_(conn: TransportConstructor) {\n    this.secondaryConn_ = new conn(\n      this.nextTransportId_(),\n      this.repoInfo_,\n      this.applicationId_,\n      this.sessionId\n    );\n    // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n    // can consider the transport healthy.\n    this.secondaryResponsesRequired_ =\n      conn['responsesRequiredToBeHealthy'] || 0;\n\n    const onMessage = this.connReceiver_(this.secondaryConn_);\n    const onDisconnect = this.disconnReceiver_(this.secondaryConn_);\n    this.secondaryConn_.open(onMessage, onDisconnect);\n\n    // If we haven't successfully upgraded after UPGRADE_TIMEOUT, give up and kill the secondary.\n    setTimeoutNonBlocking(() => {\n      if (this.secondaryConn_) {\n        this.log_('Timed out trying to upgrade.');\n        this.secondaryConn_.close();\n      }\n    }, Math.floor(UPGRADE_TIMEOUT));\n  }\n\n  private onReset_(host: string) {\n    this.log_('Reset packet received.  New host: ' + host);\n    this.repoInfo_.updateHost(host);\n    // TODO: if we're already \"connected\", we need to trigger a disconnect at the next layer up.\n    // We don't currently support resets after the connection has already been established\n    if (this.state_ === RealtimeState.CONNECTED) {\n      this.close();\n    } else {\n      // Close whatever connections we have open and start again.\n      this.closeConnections_();\n      this.start_();\n    }\n  }\n\n  private onConnectionEstablished_(conn: Transport, timestamp: number) {\n    this.log_('Realtime connection established.');\n    this.conn_ = conn;\n    this.state_ = RealtimeState.CONNECTED;\n\n    if (this.onReady_) {\n      this.onReady_(timestamp, this.sessionId);\n      this.onReady_ = null;\n    }\n\n    // If after 5 seconds we haven't sent enough requests to the server to get the connection healthy,\n    // send some pings.\n    if (this.primaryResponsesRequired_ === 0) {\n      this.log_('Primary connection is healthy.');\n      this.isHealthy_ = true;\n    } else {\n      setTimeoutNonBlocking(() => {\n        this.sendPingOnPrimaryIfNecessary_();\n      }, Math.floor(DELAY_BEFORE_SENDING_EXTRA_REQUESTS));\n    }\n  }\n\n  private sendPingOnPrimaryIfNecessary_() {\n    // If the connection isn't considered healthy yet, we'll send a noop ping packet request.\n    if (!this.isHealthy_ && this.state_ === RealtimeState.CONNECTED) {\n      this.log_('sending ping on primary.');\n      this.sendData_({ t: 'c', d: { t: PING, d: {} } });\n    }\n  }\n\n  private onSecondaryConnectionLost_() {\n    const conn = this.secondaryConn_;\n    this.secondaryConn_ = null;\n    if (this.tx_ === conn || this.rx_ === conn) {\n      // we are relying on this connection already in some capacity. Therefore, a failure is real\n      this.close();\n    }\n  }\n\n  /**\n   *\n   * @param {boolean} everConnected Whether or not the connection ever reached a server. Used to determine if\n   * we should flush the host cache\n   * @private\n   */\n  private onConnectionLost_(everConnected: boolean) {\n    this.conn_ = null;\n\n    // NOTE: IF you're seeing a Firefox error for this line, I think it might be because it's getting\n    // called on window close and RealtimeState.CONNECTING is no longer defined.  Just a guess.\n    if (!everConnected && this.state_ === RealtimeState.CONNECTING) {\n      this.log_('Realtime connection failed.');\n      // Since we failed to connect at all, clear any cached entry for this namespace in case the machine went away\n      if (this.repoInfo_.isCacheableHost()) {\n        PersistentStorage.remove('host:' + this.repoInfo_.host);\n        // reset the internal host to what we would show the user, i.e. <ns>.firebaseio.com\n        this.repoInfo_.internalHost = this.repoInfo_.host;\n      }\n    } else if (this.state_ === RealtimeState.CONNECTED) {\n      this.log_('Realtime connection lost.');\n    }\n\n    this.close();\n  }\n\n  /**\n   *\n   * @param {string} reason\n   * @private\n   */\n  private onConnectionShutdown_(reason: string) {\n    this.log_('Connection shutdown command received. Shutting down...');\n\n    if (this.onKill_) {\n      this.onKill_(reason);\n      this.onKill_ = null;\n    }\n\n    // We intentionally don't want to fire onDisconnect (kill is a different case),\n    // so clear the callback.\n    this.onDisconnect_ = null;\n\n    this.close();\n  }\n\n  private sendData_(data: object) {\n    if (this.state_ !== RealtimeState.CONNECTED) {\n      throw 'Connection is not connected';\n    } else {\n      this.tx_.send(data);\n    }\n  }\n\n  /**\n   * Cleans up this connection, calling the appropriate callbacks\n   */\n  close() {\n    if (this.state_ !== RealtimeState.DISCONNECTED) {\n      this.log_('Closing realtime connection.');\n      this.state_ = RealtimeState.DISCONNECTED;\n\n      this.closeConnections_();\n\n      if (this.onDisconnect_) {\n        this.onDisconnect_();\n        this.onDisconnect_ = null;\n      }\n    }\n  }\n\n  /**\n   *\n   * @private\n   */\n  private closeConnections_() {\n    this.log_('Shutting down all connections');\n    if (this.conn_) {\n      this.conn_.close();\n      this.conn_ = null;\n    }\n\n    if (this.secondaryConn_) {\n      this.secondaryConn_.close();\n      this.secondaryConn_ = null;\n    }\n\n    if (this.healthyTimeout_) {\n      clearTimeout(this.healthyTimeout_);\n      this.healthyTimeout_ = null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Query } from '../api/Query';\n\n/**\n * Interface defining the set of actions that can be performed against the Firebase server\n * (basically corresponds to our wire protocol).\n *\n * @interface\n */\nexport abstract class ServerActions {\n  /**\n   * @param {!Query} query\n   * @param {function():string} currentHashFn\n   * @param {?number} tag\n   * @param {function(string, *)} onComplete\n   */\n  abstract listen(\n    query: Query,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: unknown) => void\n  ): void;\n\n  /**\n   * Remove a listen.\n   *\n   * @param {!Query} query\n   * @param {?number} tag\n   */\n  abstract unlisten(query: Query, tag: number | null): void;\n\n  /**\n   * @param {string} pathString\n   * @param {*} data\n   * @param {function(string, string)=} onComplete\n   * @param {string=} hash\n   */\n  put(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void,\n    hash?: string\n  ) {}\n\n  /**\n   * @param {string} pathString\n   * @param {*} data\n   * @param {function(string, ?string)} onComplete\n   * @param {string=} hash\n   */\n  merge(\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) {}\n\n  /**\n   * Refreshes the auth token for the current connection.\n   * @param {string} token The authentication token\n   */\n  refreshAuthToken(token: string) {}\n\n  /**\n   * @param {string} pathString\n   * @param {*} data\n   * @param {function(string, string)=} onComplete\n   */\n  onDisconnectPut(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  /**\n   * @param {string} pathString\n   * @param {*} data\n   * @param {function(string, string)=} onComplete\n   */\n  onDisconnectMerge(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  /**\n   * @param {string} pathString\n   * @param {function(string, string)=} onComplete\n   */\n  onDisconnectCancel(\n    pathString: string,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  /**\n   * @param {Object.<string, *>} stats\n   */\n  reportStats(stats: { [k: string]: unknown }) {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  contains,\n  isEmpty,\n  safeGet,\n  CONSTANTS,\n  stringify,\n  assert,\n  isAdmin,\n  isValidFormat,\n  isMobileCordova,\n  isReactNative,\n  isNodeSdk\n} from '@firebase/util';\n\nimport { error, log, logWrapper, warn, ObjectToUniqueKey } from './util/util';\nimport { Path } from './util/Path';\nimport { VisibilityMonitor } from './util/VisibilityMonitor';\nimport { OnlineMonitor } from './util/OnlineMonitor';\n\nimport { Connection } from '../realtime/Connection';\n\nimport { ServerActions } from './ServerActions';\nimport { AuthTokenProvider } from './AuthTokenProvider';\nimport { RepoInfo } from './RepoInfo';\nimport { Query } from '../api/Query';\nimport { SDK_VERSION } from './version';\n\nconst RECONNECT_MIN_DELAY = 1000;\nconst RECONNECT_MAX_DELAY_DEFAULT = 60 * 5 * 1000; // 5 minutes in milliseconds (Case: 1858)\nconst RECONNECT_MAX_DELAY_FOR_ADMINS = 30 * 1000; // 30 seconds for admin clients (likely to be a backend server)\nconst RECONNECT_DELAY_MULTIPLIER = 1.3;\nconst RECONNECT_DELAY_RESET_TIMEOUT = 30000; // Reset delay back to MIN_DELAY after being connected for 30sec.\nconst SERVER_KILL_INTERRUPT_REASON = 'server_kill';\n\n// If auth fails repeatedly, we'll assume something is wrong and log a warning / back off.\nconst INVALID_AUTH_TOKEN_THRESHOLD = 3;\n\ninterface ListenSpec {\n  onComplete(s: string, p?: unknown): void;\n\n  hashFn(): string;\n\n  query: Query;\n  tag: number | null;\n}\n\ninterface OnDisconnectRequest {\n  pathString: string;\n  action: string;\n  data: unknown;\n  onComplete?: (a: string, b: string) => void;\n}\n\ninterface OutstandingPut {\n  action: string;\n  request: object;\n  queued?: boolean;\n  onComplete: (a: string, b?: string) => void;\n}\n\n/**\n * Firebase connection.  Abstracts wire protocol and handles reconnecting.\n *\n * NOTE: All JSON objects sent to the realtime connection must have property names enclosed\n * in quotes to make sure the closure compiler does not minify them.\n */\nexport class PersistentConnection extends ServerActions {\n  // Used for diagnostic logging.\n  id = PersistentConnection.nextPersistentConnectionId_++;\n  private log_ = logWrapper('p:' + this.id + ':');\n\n  private interruptReasons_: { [reason: string]: boolean } = {};\n  /** Map<path, Map<queryId, ListenSpec>> */\n  private readonly listens: Map<\n    /* path */ string,\n    Map</* queryId */ string, ListenSpec>\n  > = new Map();\n  private outstandingPuts_: OutstandingPut[] = [];\n  private outstandingPutCount_ = 0;\n  private onDisconnectRequestQueue_: OnDisconnectRequest[] = [];\n  private connected_ = false;\n  private reconnectDelay_ = RECONNECT_MIN_DELAY;\n  private maxReconnectDelay_ = RECONNECT_MAX_DELAY_DEFAULT;\n  private securityDebugCallback_: ((a: object) => void) | null = null;\n  lastSessionId: string | null = null;\n\n  private establishConnectionTimer_: number | null = null;\n\n  private visible_: boolean = false;\n\n  // Before we get connected, we keep a queue of pending messages to send.\n  private requestCBHash_: { [k: number]: (a: unknown) => void } = {};\n  private requestNumber_ = 0;\n\n  private realtime_: {\n    sendRequest(a: object): void;\n    close(): void;\n  } | null = null;\n\n  private authToken_: string | null = null;\n  private forceTokenRefresh_ = false;\n  private invalidAuthTokenCount_ = 0;\n\n  private firstConnection_ = true;\n  private lastConnectionAttemptTime_: number | null = null;\n  private lastConnectionEstablishedTime_: number | null = null;\n\n  private static nextPersistentConnectionId_ = 0;\n\n  /**\n   * Counter for number of connections created. Mainly used for tagging in the logs\n   */\n  private static nextConnectionId_ = 0;\n\n  /**\n   * @implements {ServerActions}\n   * @param repoInfo_ Data about the namespace we are connecting to\n   * @param applicationId_ The Firebase App ID for this project\n   * @param onDataUpdate_ A callback for new data from the server\n   */\n  constructor(\n    private repoInfo_: RepoInfo,\n    private applicationId_: string,\n    private onDataUpdate_: (\n      a: string,\n      b: unknown,\n      c: boolean,\n      d: number | null\n    ) => void,\n    private onConnectStatus_: (a: boolean) => void,\n    private onServerInfoUpdate_: (a: unknown) => void,\n    private authTokenProvider_: AuthTokenProvider,\n    private authOverride_?: object | null\n  ) {\n    super();\n\n    if (authOverride_ && !isNodeSdk()) {\n      throw new Error(\n        'Auth override specified in options, but not supported on non Node.js platforms'\n      );\n    }\n    this.scheduleConnect_(0);\n\n    VisibilityMonitor.getInstance().on('visible', this.onVisible_, this);\n\n    if (repoInfo_.host.indexOf('fblocal') === -1) {\n      OnlineMonitor.getInstance().on('online', this.onOnline_, this);\n    }\n  }\n\n  protected sendRequest(\n    action: string,\n    body: unknown,\n    onResponse?: (a: unknown) => void\n  ) {\n    const curReqNum = ++this.requestNumber_;\n\n    const msg = { r: curReqNum, a: action, b: body };\n    this.log_(stringify(msg));\n    assert(\n      this.connected_,\n      \"sendRequest call when we're not connected not allowed.\"\n    );\n    this.realtime_.sendRequest(msg);\n    if (onResponse) {\n      this.requestCBHash_[curReqNum] = onResponse;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  listen(\n    query: Query,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: unknown) => void\n  ) {\n    const queryId = query.queryIdentifier();\n    const pathString = query.path.toString();\n    this.log_('Listen called for ' + pathString + ' ' + queryId);\n    if (!this.listens.has(pathString)) {\n      this.listens.set(pathString, new Map());\n    }\n    assert(\n      query.getQueryParams().isDefault() ||\n        !query.getQueryParams().loadsAllData(),\n      'listen() called for non-default but complete query'\n    );\n    assert(\n      !this.listens.get(pathString)!.has(queryId),\n      'listen() called twice for same path/queryId.'\n    );\n    const listenSpec: ListenSpec = {\n      onComplete,\n      hashFn: currentHashFn,\n      query,\n      tag\n    };\n    this.listens.get(pathString)!.set(queryId, listenSpec);\n\n    if (this.connected_) {\n      this.sendListen_(listenSpec);\n    }\n  }\n\n  private sendListen_(listenSpec: ListenSpec) {\n    const query = listenSpec.query;\n    const pathString = query.path.toString();\n    const queryId = query.queryIdentifier();\n    this.log_('Listen on ' + pathString + ' for ' + queryId);\n    const req: { [k: string]: unknown } = { /*path*/ p: pathString };\n\n    const action = 'q';\n\n    // Only bother to send query if it's non-default.\n    if (listenSpec.tag) {\n      req['q'] = query.queryObject();\n      req['t'] = listenSpec.tag;\n    }\n\n    req[/*hash*/ 'h'] = listenSpec.hashFn();\n\n    this.sendRequest(action, req, (message: { [k: string]: unknown }) => {\n      const payload: unknown = message[/*data*/ 'd'];\n      const status = message[/*status*/ 's'] as string;\n\n      // print warnings in any case...\n      PersistentConnection.warnOnListenWarnings_(payload, query);\n\n      const currentListenSpec =\n        this.listens.get(pathString) &&\n        this.listens.get(pathString)!.get(queryId);\n      // only trigger actions if the listen hasn't been removed and readded\n      if (currentListenSpec === listenSpec) {\n        this.log_('listen response', message);\n\n        if (status !== 'ok') {\n          this.removeListen_(pathString, queryId);\n        }\n\n        if (listenSpec.onComplete) {\n          listenSpec.onComplete(status, payload);\n        }\n      }\n    });\n  }\n\n  private static warnOnListenWarnings_(payload: unknown, query: Query) {\n    if (payload && typeof payload === 'object' && contains(payload, 'w')) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const warnings = safeGet(payload as any, 'w');\n      if (Array.isArray(warnings) && ~warnings.indexOf('no_index')) {\n        const indexSpec =\n          '\".indexOn\": \"' + query.getQueryParams().getIndex().toString() + '\"';\n        const indexPath = query.path.toString();\n        warn(\n          `Using an unspecified index. Your data will be downloaded and ` +\n            `filtered on the client. Consider adding ${indexSpec} at ` +\n            `${indexPath} to your security rules for better performance.`\n        );\n      }\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  refreshAuthToken(token: string) {\n    this.authToken_ = token;\n    this.log_('Auth token refreshed');\n    if (this.authToken_) {\n      this.tryAuth();\n    } else {\n      //If we're connected we want to let the server know to unauthenticate us. If we're not connected, simply delete\n      //the credential so we dont become authenticated next time we connect.\n      if (this.connected_) {\n        this.sendRequest('unauth', {}, () => {});\n      }\n    }\n\n    this.reduceReconnectDelayIfAdminCredential_(token);\n  }\n\n  private reduceReconnectDelayIfAdminCredential_(credential: string) {\n    // NOTE: This isn't intended to be bulletproof (a malicious developer can always just modify the client).\n    // Additionally, we don't bother resetting the max delay back to the default if auth fails / expires.\n    const isFirebaseSecret = credential && credential.length === 40;\n    if (isFirebaseSecret || isAdmin(credential)) {\n      this.log_(\n        'Admin auth credential detected.  Reducing max reconnect time.'\n      );\n      this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\n    }\n  }\n\n  /**\n   * Attempts to authenticate with the given credentials. If the authentication attempt fails, it's triggered like\n   * a auth revoked (the connection is closed).\n   */\n  tryAuth() {\n    if (this.connected_ && this.authToken_) {\n      const token = this.authToken_;\n      const authMethod = isValidFormat(token) ? 'auth' : 'gauth';\n      const requestData: { [k: string]: unknown } = { cred: token };\n      if (this.authOverride_ === null) {\n        requestData['noauth'] = true;\n      } else if (typeof this.authOverride_ === 'object') {\n        requestData['authvar'] = this.authOverride_;\n      }\n      this.sendRequest(\n        authMethod,\n        requestData,\n        (res: { [k: string]: unknown }) => {\n          const status = res[/*status*/ 's'] as string;\n          const data = (res[/*data*/ 'd'] as string) || 'error';\n\n          if (this.authToken_ === token) {\n            if (status === 'ok') {\n              this.invalidAuthTokenCount_ = 0;\n            } else {\n              // Triggers reconnect and force refresh for auth token\n              this.onAuthRevoked_(status, data);\n            }\n          }\n        }\n      );\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  unlisten(query: Query, tag: number | null) {\n    const pathString = query.path.toString();\n    const queryId = query.queryIdentifier();\n\n    this.log_('Unlisten called for ' + pathString + ' ' + queryId);\n\n    assert(\n      query.getQueryParams().isDefault() ||\n        !query.getQueryParams().loadsAllData(),\n      'unlisten() called for non-default but complete query'\n    );\n    const listen = this.removeListen_(pathString, queryId);\n    if (listen && this.connected_) {\n      this.sendUnlisten_(pathString, queryId, query.queryObject(), tag);\n    }\n  }\n\n  private sendUnlisten_(\n    pathString: string,\n    queryId: string,\n    queryObj: object,\n    tag: number | null\n  ) {\n    this.log_('Unlisten on ' + pathString + ' for ' + queryId);\n\n    const req: { [k: string]: unknown } = { /*path*/ p: pathString };\n    const action = 'n';\n    // Only bother sending queryId if it's non-default.\n    if (tag) {\n      req['q'] = queryObj;\n      req['t'] = tag;\n    }\n\n    this.sendRequest(action, req);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  onDisconnectPut(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {\n    if (this.connected_) {\n      this.sendOnDisconnect_('o', pathString, data, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'o',\n        data,\n        onComplete\n      });\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  onDisconnectMerge(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {\n    if (this.connected_) {\n      this.sendOnDisconnect_('om', pathString, data, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'om',\n        data,\n        onComplete\n      });\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  onDisconnectCancel(\n    pathString: string,\n    onComplete?: (a: string, b: string) => void\n  ) {\n    if (this.connected_) {\n      this.sendOnDisconnect_('oc', pathString, null, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'oc',\n        data: null,\n        onComplete\n      });\n    }\n  }\n\n  private sendOnDisconnect_(\n    action: string,\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string) => void\n  ) {\n    const request = { /*path*/ p: pathString, /*data*/ d: data };\n    this.log_('onDisconnect ' + action, request);\n    this.sendRequest(action, request, (response: { [k: string]: unknown }) => {\n      if (onComplete) {\n        setTimeout(() => {\n          onComplete(\n            response[/*status*/ 's'] as string,\n            response[/* data */ 'd'] as string\n          );\n        }, Math.floor(0));\n      }\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  put(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void,\n    hash?: string\n  ) {\n    this.putInternal('p', pathString, data, onComplete, hash);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  merge(\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) {\n    this.putInternal('m', pathString, data, onComplete, hash);\n  }\n\n  putInternal(\n    action: string,\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) {\n    const request: { [k: string]: unknown } = {\n      /*path*/ p: pathString,\n      /*data*/ d: data\n    };\n\n    if (hash !== undefined) {\n      request[/*hash*/ 'h'] = hash;\n    }\n\n    // TODO: Only keep track of the most recent put for a given path?\n    this.outstandingPuts_.push({\n      action,\n      request,\n      onComplete\n    });\n\n    this.outstandingPutCount_++;\n    const index = this.outstandingPuts_.length - 1;\n\n    if (this.connected_) {\n      this.sendPut_(index);\n    } else {\n      this.log_('Buffering put: ' + pathString);\n    }\n  }\n\n  private sendPut_(index: number) {\n    const action = this.outstandingPuts_[index].action;\n    const request = this.outstandingPuts_[index].request;\n    const onComplete = this.outstandingPuts_[index].onComplete;\n    this.outstandingPuts_[index].queued = this.connected_;\n\n    this.sendRequest(action, request, (message: { [k: string]: unknown }) => {\n      this.log_(action + ' response', message);\n\n      delete this.outstandingPuts_[index];\n      this.outstandingPutCount_--;\n\n      // Clean up array occasionally.\n      if (this.outstandingPutCount_ === 0) {\n        this.outstandingPuts_ = [];\n      }\n\n      if (onComplete) {\n        onComplete(\n          message[/*status*/ 's'] as string,\n          message[/* data */ 'd'] as string\n        );\n      }\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  reportStats(stats: { [k: string]: unknown }) {\n    // If we're not connected, we just drop the stats.\n    if (this.connected_) {\n      const request = { /*counters*/ c: stats };\n      this.log_('reportStats', request);\n\n      this.sendRequest(/*stats*/ 's', request, result => {\n        const status = result[/*status*/ 's'];\n        if (status !== 'ok') {\n          const errorReason = result[/* data */ 'd'];\n          this.log_('reportStats', 'Error sending stats: ' + errorReason);\n        }\n      });\n    }\n  }\n\n  private onDataMessage_(message: { [k: string]: unknown }) {\n    if ('r' in message) {\n      // this is a response\n      this.log_('from server: ' + stringify(message));\n      const reqNum = message['r'] as string;\n      const onResponse = this.requestCBHash_[reqNum];\n      if (onResponse) {\n        delete this.requestCBHash_[reqNum];\n        onResponse(message[/*body*/ 'b']);\n      }\n    } else if ('error' in message) {\n      throw 'A server-side error has occurred: ' + message['error'];\n    } else if ('a' in message) {\n      // a and b are action and body, respectively\n      this.onDataPush_(message['a'] as string, message['b'] as {});\n    }\n  }\n\n  private onDataPush_(action: string, body: { [k: string]: unknown }) {\n    this.log_('handleServerMessage', action, body);\n    if (action === 'd') {\n      this.onDataUpdate_(\n        body[/*path*/ 'p'] as string,\n        body[/*data*/ 'd'],\n        /*isMerge*/ false,\n        body['t'] as number\n      );\n    } else if (action === 'm') {\n      this.onDataUpdate_(\n        body[/*path*/ 'p'] as string,\n        body[/*data*/ 'd'],\n        /*isMerge=*/ true,\n        body['t'] as number\n      );\n    } else if (action === 'c') {\n      this.onListenRevoked_(\n        body[/*path*/ 'p'] as string,\n        body[/*query*/ 'q'] as unknown[]\n      );\n    } else if (action === 'ac') {\n      this.onAuthRevoked_(\n        body[/*status code*/ 's'] as string,\n        body[/* explanation */ 'd'] as string\n      );\n    } else if (action === 'sd') {\n      this.onSecurityDebugPacket_(body);\n    } else {\n      error(\n        'Unrecognized action received from server: ' +\n          stringify(action) +\n          '\\nAre you using the latest client?'\n      );\n    }\n  }\n\n  private onReady_(timestamp: number, sessionId: string) {\n    this.log_('connection ready');\n    this.connected_ = true;\n    this.lastConnectionEstablishedTime_ = new Date().getTime();\n    this.handleTimestamp_(timestamp);\n    this.lastSessionId = sessionId;\n    if (this.firstConnection_) {\n      this.sendConnectStats_();\n    }\n    this.restoreState_();\n    this.firstConnection_ = false;\n    this.onConnectStatus_(true);\n  }\n\n  private scheduleConnect_(timeout: number) {\n    assert(\n      !this.realtime_,\n      \"Scheduling a connect when we're already connected/ing?\"\n    );\n\n    if (this.establishConnectionTimer_) {\n      clearTimeout(this.establishConnectionTimer_);\n    }\n\n    // NOTE: Even when timeout is 0, it's important to do a setTimeout to work around an infuriating \"Security Error\" in\n    // Firefox when trying to write to our long-polling iframe in some scenarios (e.g. Forge or our unit tests).\n\n    this.establishConnectionTimer_ = setTimeout(() => {\n      this.establishConnectionTimer_ = null;\n      this.establishConnection_();\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(timeout)) as any;\n  }\n\n  private onVisible_(visible: boolean) {\n    // NOTE: Tabbing away and back to a window will defeat our reconnect backoff, but I think that's fine.\n    if (\n      visible &&\n      !this.visible_ &&\n      this.reconnectDelay_ === this.maxReconnectDelay_\n    ) {\n      this.log_('Window became visible.  Reducing delay.');\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    }\n    this.visible_ = visible;\n  }\n\n  private onOnline_(online: boolean) {\n    if (online) {\n      this.log_('Browser went online.');\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    } else {\n      this.log_('Browser went offline.  Killing connection.');\n      if (this.realtime_) {\n        this.realtime_.close();\n      }\n    }\n  }\n\n  private onRealtimeDisconnect_() {\n    this.log_('data client disconnected');\n    this.connected_ = false;\n    this.realtime_ = null;\n\n    // Since we don't know if our sent transactions succeeded or not, we need to cancel them.\n    this.cancelSentTransactions_();\n\n    // Clear out the pending requests.\n    this.requestCBHash_ = {};\n\n    if (this.shouldReconnect_()) {\n      if (!this.visible_) {\n        this.log_(\"Window isn't visible.  Delaying reconnect.\");\n        this.reconnectDelay_ = this.maxReconnectDelay_;\n        this.lastConnectionAttemptTime_ = new Date().getTime();\n      } else if (this.lastConnectionEstablishedTime_) {\n        // If we've been connected long enough, reset reconnect delay to minimum.\n        const timeSinceLastConnectSucceeded =\n          new Date().getTime() - this.lastConnectionEstablishedTime_;\n        if (timeSinceLastConnectSucceeded > RECONNECT_DELAY_RESET_TIMEOUT) {\n          this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n        }\n        this.lastConnectionEstablishedTime_ = null;\n      }\n\n      const timeSinceLastConnectAttempt =\n        new Date().getTime() - this.lastConnectionAttemptTime_;\n      let reconnectDelay = Math.max(\n        0,\n        this.reconnectDelay_ - timeSinceLastConnectAttempt\n      );\n      reconnectDelay = Math.random() * reconnectDelay;\n\n      this.log_('Trying to reconnect in ' + reconnectDelay + 'ms');\n      this.scheduleConnect_(reconnectDelay);\n\n      // Adjust reconnect delay for next time.\n      this.reconnectDelay_ = Math.min(\n        this.maxReconnectDelay_,\n        this.reconnectDelay_ * RECONNECT_DELAY_MULTIPLIER\n      );\n    }\n    this.onConnectStatus_(false);\n  }\n\n  private establishConnection_() {\n    if (this.shouldReconnect_()) {\n      this.log_('Making a connection attempt');\n      this.lastConnectionAttemptTime_ = new Date().getTime();\n      this.lastConnectionEstablishedTime_ = null;\n      const onDataMessage = this.onDataMessage_.bind(this);\n      const onReady = this.onReady_.bind(this);\n      const onDisconnect = this.onRealtimeDisconnect_.bind(this);\n      const connId = this.id + ':' + PersistentConnection.nextConnectionId_++;\n      const self = this;\n      const lastSessionId = this.lastSessionId;\n      let canceled = false;\n      let connection: Connection | null = null;\n      const closeFn = function () {\n        if (connection) {\n          connection.close();\n        } else {\n          canceled = true;\n          onDisconnect();\n        }\n      };\n      const sendRequestFn = function (msg: object) {\n        assert(\n          connection,\n          \"sendRequest call when we're not connected not allowed.\"\n        );\n        connection.sendRequest(msg);\n      };\n\n      this.realtime_ = {\n        close: closeFn,\n        sendRequest: sendRequestFn\n      };\n\n      const forceRefresh = this.forceTokenRefresh_;\n      this.forceTokenRefresh_ = false;\n\n      // First fetch auth token, and establish connection after fetching the token was successful\n      this.authTokenProvider_\n        .getToken(forceRefresh)\n        .then(result => {\n          if (!canceled) {\n            log('getToken() completed. Creating connection.');\n            self.authToken_ = result && result.accessToken;\n            connection = new Connection(\n              connId,\n              self.repoInfo_,\n              self.applicationId_,\n              onDataMessage,\n              onReady,\n              onDisconnect,\n              /* onKill= */ reason => {\n                warn(reason + ' (' + self.repoInfo_.toString() + ')');\n                self.interrupt(SERVER_KILL_INTERRUPT_REASON);\n              },\n              lastSessionId\n            );\n          } else {\n            log('getToken() completed but was canceled');\n          }\n        })\n        .then(null, error => {\n          self.log_('Failed to get token: ' + error);\n          if (!canceled) {\n            if (this.repoInfo_.nodeAdmin) {\n              // This may be a critical error for the Admin Node.js SDK, so log a warning.\n              // But getToken() may also just have temporarily failed, so we still want to\n              // continue retrying.\n              warn(error);\n            }\n            closeFn();\n          }\n        });\n    }\n  }\n\n  interrupt(reason: string) {\n    log('Interrupting connection for reason: ' + reason);\n    this.interruptReasons_[reason] = true;\n    if (this.realtime_) {\n      this.realtime_.close();\n    } else {\n      if (this.establishConnectionTimer_) {\n        clearTimeout(this.establishConnectionTimer_);\n        this.establishConnectionTimer_ = null;\n      }\n      if (this.connected_) {\n        this.onRealtimeDisconnect_();\n      }\n    }\n  }\n\n  resume(reason: string) {\n    log('Resuming connection for reason: ' + reason);\n    delete this.interruptReasons_[reason];\n    if (isEmpty(this.interruptReasons_)) {\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    }\n  }\n\n  private handleTimestamp_(timestamp: number) {\n    const delta = timestamp - new Date().getTime();\n    this.onServerInfoUpdate_({ serverTimeOffset: delta });\n  }\n\n  private cancelSentTransactions_() {\n    for (let i = 0; i < this.outstandingPuts_.length; i++) {\n      const put = this.outstandingPuts_[i];\n      if (put && /*hash*/ 'h' in put.request && put.queued) {\n        if (put.onComplete) {\n          put.onComplete('disconnect');\n        }\n\n        delete this.outstandingPuts_[i];\n        this.outstandingPutCount_--;\n      }\n    }\n\n    // Clean up array occasionally.\n    if (this.outstandingPutCount_ === 0) {\n      this.outstandingPuts_ = [];\n    }\n  }\n\n  private onListenRevoked_(pathString: string, query?: unknown[]) {\n    // Remove the listen and manufacture a \"permission_denied\" error for the failed listen.\n    let queryId;\n    if (!query) {\n      queryId = 'default';\n    } else {\n      queryId = query.map(q => ObjectToUniqueKey(q)).join('$');\n    }\n    const listen = this.removeListen_(pathString, queryId);\n    if (listen && listen.onComplete) {\n      listen.onComplete('permission_denied');\n    }\n  }\n\n  private removeListen_(pathString: string, queryId: string): ListenSpec {\n    const normalizedPathString = new Path(pathString).toString(); // normalize path.\n    let listen;\n    if (this.listens.has(normalizedPathString)) {\n      const map = this.listens.get(normalizedPathString)!;\n      listen = map.get(queryId);\n      map.delete(queryId);\n      if (map.size === 0) {\n        this.listens.delete(normalizedPathString);\n      }\n    } else {\n      // all listens for this path has already been removed\n      listen = undefined;\n    }\n    return listen;\n  }\n\n  private onAuthRevoked_(statusCode: string, explanation: string) {\n    log('Auth token revoked: ' + statusCode + '/' + explanation);\n    this.authToken_ = null;\n    this.forceTokenRefresh_ = true;\n    this.realtime_.close();\n    if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\n      // We'll wait a couple times before logging the warning / increasing the\n      // retry period since oauth tokens will report as \"invalid\" if they're\n      // just expired. Plus there may be transient issues that resolve themselves.\n      this.invalidAuthTokenCount_++;\n      if (this.invalidAuthTokenCount_ >= INVALID_AUTH_TOKEN_THRESHOLD) {\n        // Set a long reconnect delay because recovery is unlikely\n        this.reconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\n\n        // Notify the auth token provider that the token is invalid, which will log\n        // a warning\n        this.authTokenProvider_.notifyForInvalidToken();\n      }\n    }\n  }\n\n  private onSecurityDebugPacket_(body: { [k: string]: unknown }) {\n    if (this.securityDebugCallback_) {\n      this.securityDebugCallback_(body);\n    } else {\n      if ('msg' in body) {\n        console.log(\n          'FIREBASE: ' + (body['msg'] as string).replace('\\n', '\\nFIREBASE: ')\n        );\n      }\n    }\n  }\n\n  private restoreState_() {\n    //Re-authenticate ourselves if we have a credential stored.\n    this.tryAuth();\n\n    // Puts depend on having received the corresponding data update from the server before they complete, so we must\n    // make sure to send listens before puts.\n    for (const queries of this.listens.values()) {\n      for (const listenSpec of queries.values()) {\n        this.sendListen_(listenSpec);\n      }\n    }\n\n    for (let i = 0; i < this.outstandingPuts_.length; i++) {\n      if (this.outstandingPuts_[i]) {\n        this.sendPut_(i);\n      }\n    }\n\n    while (this.onDisconnectRequestQueue_.length) {\n      const request = this.onDisconnectRequestQueue_.shift();\n      this.sendOnDisconnect_(\n        request.action,\n        request.pathString,\n        request.data,\n        request.onComplete\n      );\n    }\n  }\n\n  /**\n   * Sends client stats for first connection\n   */\n  private sendConnectStats_() {\n    const stats: { [k: string]: number } = {};\n\n    let clientName = 'js';\n    if (isNodeSdk()) {\n      if (this.repoInfo_.nodeAdmin) {\n        clientName = 'admin_node';\n      } else {\n        clientName = 'node';\n      }\n    }\n\n    stats['sdk.' + clientName + '.' + SDK_VERSION.replace(/\\./g, '-')] = 1;\n\n    if (isMobileCordova()) {\n      stats['framework.cordova'] = 1;\n    } else if (isReactNative()) {\n      stats['framework.reactnative'] = 1;\n    }\n    this.reportStats(stats);\n  }\n\n  private shouldReconnect_(): boolean {\n    const online = OnlineMonitor.getInstance().currentlyOnline();\n    return isEmpty(this.interruptReasons_) && online;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, jsonEval, safeGet, querystring } from '@firebase/util';\nimport { logWrapper, warn } from './util/util';\n\nimport { ServerActions } from './ServerActions';\nimport { RepoInfo } from './RepoInfo';\nimport { AuthTokenProvider } from './AuthTokenProvider';\nimport { Query } from '../api/Query';\n\n/**\n * An implementation of ServerActions that communicates with the server via REST requests.\n * This is mostly useful for compatibility with crawlers, where we don't want to spin up a full\n * persistent connection (using WebSockets or long-polling)\n */\nexport class ReadonlyRestClient extends ServerActions {\n  reportStats(stats: { [k: string]: unknown }): void {\n    throw new Error('Method not implemented.');\n  }\n\n  /** @private {function(...[*])} */\n  private log_: (...args: unknown[]) => void = logWrapper('p:rest:');\n\n  /**\n   * We don't actually need to track listens, except to prevent us calling an onComplete for a listen\n   * that's been removed. :-/\n   *\n   * @private {!Object.<string, !Object>}\n   */\n  private listens_: { [k: string]: object } = {};\n\n  /**\n   * @param {!Query} query\n   * @param {?number=} tag\n   * @return {string}\n   * @private\n   */\n  static getListenId_(query: Query, tag?: number | null): string {\n    if (tag !== undefined) {\n      return 'tag$' + tag;\n    } else {\n      assert(\n        query.getQueryParams().isDefault(),\n        \"should have a tag if it's not a default query.\"\n      );\n      return query.path.toString();\n    }\n  }\n\n  /**\n   * @param {!RepoInfo} repoInfo_ Data about the namespace we are connecting to\n   * @param {function(string, *, boolean, ?number)} onDataUpdate_ A callback for new data from the server\n   * @param {AuthTokenProvider} authTokenProvider_\n   * @implements {ServerActions}\n   */\n  constructor(\n    private repoInfo_: RepoInfo,\n    private onDataUpdate_: (\n      a: string,\n      b: unknown,\n      c: boolean,\n      d: number | null\n    ) => void,\n    private authTokenProvider_: AuthTokenProvider\n  ) {\n    super();\n  }\n\n  /** @inheritDoc */\n  listen(\n    query: Query,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: unknown) => void\n  ) {\n    const pathString = query.path.toString();\n    this.log_(\n      'Listen called for ' + pathString + ' ' + query.queryIdentifier()\n    );\n\n    // Mark this listener so we can tell if it's removed.\n    const listenId = ReadonlyRestClient.getListenId_(query, tag);\n    const thisListen = {};\n    this.listens_[listenId] = thisListen;\n\n    const queryStringParameters = query\n      .getQueryParams()\n      .toRestQueryStringParameters();\n\n    this.restRequest_(\n      pathString + '.json',\n      queryStringParameters,\n      (error, result) => {\n        let data = result;\n\n        if (error === 404) {\n          data = null;\n          error = null;\n        }\n\n        if (error === null) {\n          this.onDataUpdate_(pathString, data, /*isMerge=*/ false, tag);\n        }\n\n        if (safeGet(this.listens_, listenId) === thisListen) {\n          let status;\n          if (!error) {\n            status = 'ok';\n          } else if (error === 401) {\n            status = 'permission_denied';\n          } else {\n            status = 'rest_error:' + error;\n          }\n\n          onComplete(status, null);\n        }\n      }\n    );\n  }\n\n  /** @inheritDoc */\n  unlisten(query: Query, tag: number | null) {\n    const listenId = ReadonlyRestClient.getListenId_(query, tag);\n    delete this.listens_[listenId];\n  }\n\n  /** @inheritDoc */\n  refreshAuthToken(token: string) {\n    // no-op since we just always call getToken.\n  }\n\n  /**\n   * Performs a REST request to the given path, with the provided query string parameters,\n   * and any auth credentials we have.\n   *\n   * @param {!string} pathString\n   * @param {!Object.<string, *>} queryStringParameters\n   * @param {?function(?number, *=)} callback\n   * @private\n   */\n  private restRequest_(\n    pathString: string,\n    queryStringParameters: { [k: string]: string | number } = {},\n    callback: ((a: number | null, b?: unknown) => void) | null\n  ) {\n    queryStringParameters['format'] = 'export';\n\n    this.authTokenProvider_\n      .getToken(/*forceRefresh=*/ false)\n      .then(authTokenData => {\n        const authToken = authTokenData && authTokenData.accessToken;\n        if (authToken) {\n          queryStringParameters['auth'] = authToken;\n        }\n\n        const url =\n          (this.repoInfo_.secure ? 'https://' : 'http://') +\n          this.repoInfo_.host +\n          pathString +\n          '?' +\n          'ns=' +\n          this.repoInfo_.namespace +\n          querystring(queryStringParameters);\n\n        this.log_('Sending REST request for ' + url);\n        const xhr = new XMLHttpRequest();\n        xhr.onreadystatechange = () => {\n          if (callback && xhr.readyState === 4) {\n            this.log_(\n              'REST Response for ' + url + ' received. status:',\n              xhr.status,\n              'response:',\n              xhr.responseText\n            );\n            let res = null;\n            if (xhr.status >= 200 && xhr.status < 300) {\n              try {\n                res = jsonEval(xhr.responseText);\n              } catch (e) {\n                warn(\n                  'Failed to parse JSON response for ' +\n                    url +\n                    ': ' +\n                    xhr.responseText\n                );\n              }\n              callback(null, res);\n            } else {\n              // 401 and 404 are expected.\n              if (xhr.status !== 401 && xhr.status !== 404) {\n                warn(\n                  'Got unsuccessful REST response for ' +\n                    url +\n                    ' Status: ' +\n                    xhr.status\n                );\n              }\n              callback(xhr.status);\n            }\n            callback = null;\n          }\n        };\n\n        xhr.open('GET', url, /*asynchronous=*/ true);\n        xhr.send();\n      });\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  generateWithValues,\n  resolveDeferredValueSnapshot,\n  resolveDeferredValueTree\n} from './util/ServerValues';\nimport { nodeFromJSON } from './snap/nodeFromJSON';\nimport { Path } from './util/Path';\nimport { SparseSnapshotTree } from './SparseSnapshotTree';\nimport { SyncTree } from './SyncTree';\nimport { SnapshotHolder } from './SnapshotHolder';\nimport { stringify, map, isEmpty } from '@firebase/util';\nimport { beingCrawled, each, exceptionGuard, warn, log } from './util/util';\n\nimport { AuthTokenProvider } from './AuthTokenProvider';\nimport { StatsManager } from './stats/StatsManager';\nimport { StatsReporter } from './stats/StatsReporter';\nimport { StatsListener } from './stats/StatsListener';\nimport { EventQueue } from './view/EventQueue';\nimport { PersistentConnection } from './PersistentConnection';\nimport { ReadonlyRestClient } from './ReadonlyRestClient';\nimport { FirebaseApp } from '@firebase/app-types';\nimport { RepoInfo } from './RepoInfo';\nimport { Database } from '../api/Database';\nimport { ServerActions } from './ServerActions';\nimport { Query } from '../api/Query';\nimport { EventRegistration } from './view/EventRegistration';\nimport { StatsCollection } from './stats/StatsCollection';\nimport { Event } from './view/Event';\nimport { Node } from './snap/Node';\nimport { FirebaseAuthInternalName } from '@firebase/auth-interop-types';\nimport { Provider } from '@firebase/component';\nimport { Indexable } from './util/misc';\n\nconst INTERRUPT_REASON = 'repo_interrupt';\n\n/**\n * A connection to a single data repository.\n */\nexport class Repo {\n  dataUpdateCount = 0;\n  private infoSyncTree_: SyncTree;\n  private serverSyncTree_: SyncTree;\n\n  private stats_: StatsCollection;\n  private statsListener_: StatsListener | null = null;\n  private eventQueue_ = new EventQueue();\n  private nextWriteId_ = 1;\n  private server_: ServerActions;\n  private statsReporter_: StatsReporter;\n  private transactionsInit_: () => void;\n  private infoData_: SnapshotHolder;\n  private abortTransactions_: (path: Path) => Path;\n  private rerunTransactions_: (changedPath: Path) => Path;\n  private interceptServerDataCallback_:\n    | ((a: string, b: unknown) => void)\n    | null = null;\n  private __database: Database;\n\n  /** A list of data pieces and paths to be set when this client disconnects. */\n  private onDisconnect_ = new SparseSnapshotTree();\n\n  // TODO: This should be @private but it's used by test_access.js and internal.js\n  persistentConnection_: PersistentConnection | null = null;\n\n  constructor(\n    public repoInfo_: RepoInfo,\n    forceRestClient: boolean,\n    public app: FirebaseApp,\n    authTokenProvider: AuthTokenProvider\n  ) {\n    this.stats_ = StatsManager.getCollection(repoInfo_);\n\n    if (forceRestClient || beingCrawled()) {\n      this.server_ = new ReadonlyRestClient(\n        this.repoInfo_,\n        this.onDataUpdate_.bind(this),\n        authTokenProvider\n      );\n\n      // Minor hack: Fire onConnect immediately, since there's no actual connection.\n      setTimeout(this.onConnectStatus_.bind(this, true), 0);\n    } else {\n      const authOverride = app.options['databaseAuthVariableOverride'];\n      // Validate authOverride\n      if (typeof authOverride !== 'undefined' && authOverride !== null) {\n        if (typeof authOverride !== 'object') {\n          throw new Error(\n            'Only objects are supported for option databaseAuthVariableOverride'\n          );\n        }\n        try {\n          stringify(authOverride);\n        } catch (e) {\n          throw new Error('Invalid authOverride provided: ' + e);\n        }\n      }\n\n      this.persistentConnection_ = new PersistentConnection(\n        this.repoInfo_,\n        app.options.appId,\n        this.onDataUpdate_.bind(this),\n        this.onConnectStatus_.bind(this),\n        this.onServerInfoUpdate_.bind(this),\n        authTokenProvider,\n        authOverride\n      );\n\n      this.server_ = this.persistentConnection_;\n    }\n\n    authTokenProvider.addTokenChangeListener(token => {\n      this.server_.refreshAuthToken(token);\n    });\n\n    // In the case of multiple Repos for the same repoInfo (i.e. there are multiple Firebase.Contexts being used),\n    // we only want to create one StatsReporter.  As such, we'll report stats over the first Repo created.\n    this.statsReporter_ = StatsManager.getOrCreateReporter(\n      repoInfo_,\n      () => new StatsReporter(this.stats_, this.server_)\n    );\n\n    this.transactionsInit_();\n\n    // Used for .info.\n    this.infoData_ = new SnapshotHolder();\n    this.infoSyncTree_ = new SyncTree({\n      startListening: (query, tag, currentHashFn, onComplete) => {\n        let infoEvents: Event[] = [];\n        const node = this.infoData_.getNode(query.path);\n        // This is possibly a hack, but we have different semantics for .info endpoints. We don't raise null events\n        // on initial data...\n        if (!node.isEmpty()) {\n          infoEvents = this.infoSyncTree_.applyServerOverwrite(\n            query.path,\n            node\n          );\n          setTimeout(() => {\n            onComplete('ok');\n          }, 0);\n        }\n        return infoEvents;\n      },\n      stopListening: () => {}\n    });\n    this.updateInfo_('connected', false);\n\n    this.serverSyncTree_ = new SyncTree({\n      startListening: (query, tag, currentHashFn, onComplete) => {\n        this.server_.listen(query, currentHashFn, tag, (status, data) => {\n          const events = onComplete(status, data);\n          this.eventQueue_.raiseEventsForChangedPath(query.path, events);\n        });\n        // No synchronous events for network-backed sync trees\n        return [];\n      },\n      stopListening: (query, tag) => {\n        this.server_.unlisten(query, tag);\n      }\n    });\n  }\n\n  /**\n   * @return The URL corresponding to the root of this Firebase.\n   */\n  toString(): string {\n    return (\n      (this.repoInfo_.secure ? 'https://' : 'http://') + this.repoInfo_.host\n    );\n  }\n\n  /**\n   * @return The namespace represented by the repo.\n   */\n  name(): string {\n    return this.repoInfo_.namespace;\n  }\n\n  /**\n   * @return The time in milliseconds, taking the server offset into account if we have one.\n   */\n  serverTime(): number {\n    const offsetNode = this.infoData_.getNode(\n      new Path('.info/serverTimeOffset')\n    );\n    const offset = (offsetNode.val() as number) || 0;\n    return new Date().getTime() + offset;\n  }\n\n  /**\n   * Generate ServerValues using some variables from the repo object.\n   */\n  generateServerValues(): Indexable {\n    return generateWithValues({\n      timestamp: this.serverTime()\n    });\n  }\n\n  /**\n   * Called by realtime when we get new messages from the server.\n   */\n  private onDataUpdate_(\n    pathString: string,\n    data: unknown,\n    isMerge: boolean,\n    tag: number | null\n  ) {\n    // For testing.\n    this.dataUpdateCount++;\n    const path = new Path(pathString);\n    data = this.interceptServerDataCallback_\n      ? this.interceptServerDataCallback_(pathString, data)\n      : data;\n    let events = [];\n    if (tag) {\n      if (isMerge) {\n        const taggedChildren = map(\n          data as { [k: string]: unknown },\n          (raw: unknown) => nodeFromJSON(raw)\n        );\n        events = this.serverSyncTree_.applyTaggedQueryMerge(\n          path,\n          taggedChildren,\n          tag\n        );\n      } else {\n        const taggedSnap = nodeFromJSON(data);\n        events = this.serverSyncTree_.applyTaggedQueryOverwrite(\n          path,\n          taggedSnap,\n          tag\n        );\n      }\n    } else if (isMerge) {\n      const changedChildren = map(\n        data as { [k: string]: unknown },\n        (raw: unknown) => nodeFromJSON(raw)\n      );\n      events = this.serverSyncTree_.applyServerMerge(path, changedChildren);\n    } else {\n      const snap = nodeFromJSON(data);\n      events = this.serverSyncTree_.applyServerOverwrite(path, snap);\n    }\n    let affectedPath = path;\n    if (events.length > 0) {\n      // Since we have a listener outstanding for each transaction, receiving any events\n      // is a proxy for some change having occurred.\n      affectedPath = this.rerunTransactions_(path);\n    }\n    this.eventQueue_.raiseEventsForChangedPath(affectedPath, events);\n  }\n\n  // TODO: This should be @private but it's used by test_access.js and internal.js\n  interceptServerData_(callback: ((a: string, b: unknown) => unknown) | null) {\n    this.interceptServerDataCallback_ = callback;\n  }\n\n  private onConnectStatus_(connectStatus: boolean) {\n    this.updateInfo_('connected', connectStatus);\n    if (connectStatus === false) {\n      this.runOnDisconnectEvents_();\n    }\n  }\n\n  private onServerInfoUpdate_(updates: object) {\n    each(updates, (key: string, value: unknown) => {\n      this.updateInfo_(key, value);\n    });\n  }\n\n  private updateInfo_(pathString: string, value: unknown) {\n    const path = new Path('/.info/' + pathString);\n    const newNode = nodeFromJSON(value);\n    this.infoData_.updateSnapshot(path, newNode);\n    const events = this.infoSyncTree_.applyServerOverwrite(path, newNode);\n    this.eventQueue_.raiseEventsForChangedPath(path, events);\n  }\n\n  private getNextWriteId_(): number {\n    return this.nextWriteId_++;\n  }\n\n  setWithPriority(\n    path: Path,\n    newVal: unknown,\n    newPriority: number | string | null,\n    onComplete: ((status: Error | null, errorReason?: string) => void) | null\n  ) {\n    this.log_('set', {\n      path: path.toString(),\n      value: newVal,\n      priority: newPriority\n    });\n\n    // TODO: Optimize this behavior to either (a) store flag to skip resolving where possible and / or\n    // (b) store unresolved paths on JSON parse\n    const serverValues = this.generateServerValues();\n    const newNodeUnresolved = nodeFromJSON(newVal, newPriority);\n    const existing = this.serverSyncTree_.calcCompleteEventCache(path);\n    const newNode = resolveDeferredValueSnapshot(\n      newNodeUnresolved,\n      existing,\n      serverValues\n    );\n\n    const writeId = this.getNextWriteId_();\n    const events = this.serverSyncTree_.applyUserOverwrite(\n      path,\n      newNode,\n      writeId,\n      true\n    );\n    this.eventQueue_.queueEvents(events);\n    this.server_.put(\n      path.toString(),\n      newNodeUnresolved.val(/*export=*/ true),\n      (status, errorReason) => {\n        const success = status === 'ok';\n        if (!success) {\n          warn('set at ' + path + ' failed: ' + status);\n        }\n\n        const clearEvents = this.serverSyncTree_.ackUserWrite(\n          writeId,\n          !success\n        );\n        this.eventQueue_.raiseEventsForChangedPath(path, clearEvents);\n        this.callOnCompleteCallback(onComplete, status, errorReason);\n      }\n    );\n    const affectedPath = this.abortTransactions_(path);\n    this.rerunTransactions_(affectedPath);\n    // We queued the events above, so just flush the queue here\n    this.eventQueue_.raiseEventsForChangedPath(affectedPath, []);\n  }\n\n  update(\n    path: Path,\n    childrenToMerge: { [k: string]: unknown },\n    onComplete: ((status: Error | null, errorReason?: string) => void) | null\n  ) {\n    this.log_('update', { path: path.toString(), value: childrenToMerge });\n\n    // Start with our existing data and merge each child into it.\n    let empty = true;\n    const serverValues = this.generateServerValues();\n    const changedChildren: { [k: string]: Node } = {};\n    each(childrenToMerge, (changedKey: string, changedValue: unknown) => {\n      empty = false;\n      changedChildren[changedKey] = resolveDeferredValueTree(\n        path.child(changedKey),\n        nodeFromJSON(changedValue),\n        this.serverSyncTree_,\n        serverValues\n      );\n    });\n\n    if (!empty) {\n      const writeId = this.getNextWriteId_();\n      const events = this.serverSyncTree_.applyUserMerge(\n        path,\n        changedChildren,\n        writeId\n      );\n      this.eventQueue_.queueEvents(events);\n      this.server_.merge(\n        path.toString(),\n        childrenToMerge,\n        (status, errorReason) => {\n          const success = status === 'ok';\n          if (!success) {\n            warn('update at ' + path + ' failed: ' + status);\n          }\n\n          const clearEvents = this.serverSyncTree_.ackUserWrite(\n            writeId,\n            !success\n          );\n          const affectedPath =\n            clearEvents.length > 0 ? this.rerunTransactions_(path) : path;\n          this.eventQueue_.raiseEventsForChangedPath(affectedPath, clearEvents);\n          this.callOnCompleteCallback(onComplete, status, errorReason);\n        }\n      );\n\n      each(childrenToMerge, (changedPath: string) => {\n        const affectedPath = this.abortTransactions_(path.child(changedPath));\n        this.rerunTransactions_(affectedPath);\n      });\n\n      // We queued the events above, so just flush the queue here\n      this.eventQueue_.raiseEventsForChangedPath(path, []);\n    } else {\n      log(\"update() called with empty data.  Don't do anything.\");\n      this.callOnCompleteCallback(onComplete, 'ok');\n    }\n  }\n\n  /**\n   * Applies all of the changes stored up in the onDisconnect_ tree.\n   */\n  private runOnDisconnectEvents_() {\n    this.log_('onDisconnectEvents');\n\n    const serverValues = this.generateServerValues();\n    const resolvedOnDisconnectTree = new SparseSnapshotTree();\n    this.onDisconnect_.forEachTree(Path.Empty, (path, node) => {\n      const resolved = resolveDeferredValueTree(\n        path,\n        node,\n        this.serverSyncTree_,\n        serverValues\n      );\n      resolvedOnDisconnectTree.remember(path, resolved);\n    });\n    let events: Event[] = [];\n\n    resolvedOnDisconnectTree.forEachTree(Path.Empty, (path, snap) => {\n      events = events.concat(\n        this.serverSyncTree_.applyServerOverwrite(path, snap)\n      );\n      const affectedPath = this.abortTransactions_(path);\n      this.rerunTransactions_(affectedPath);\n    });\n\n    this.onDisconnect_ = new SparseSnapshotTree();\n    this.eventQueue_.raiseEventsForChangedPath(Path.Empty, events);\n  }\n\n  onDisconnectCancel(\n    path: Path,\n    onComplete: ((status: Error | null, errorReason?: string) => void) | null\n  ) {\n    this.server_.onDisconnectCancel(path.toString(), (status, errorReason) => {\n      if (status === 'ok') {\n        this.onDisconnect_.forget(path);\n      }\n      this.callOnCompleteCallback(onComplete, status, errorReason);\n    });\n  }\n\n  onDisconnectSet(\n    path: Path,\n    value: unknown,\n    onComplete: ((status: Error | null, errorReason?: string) => void) | null\n  ) {\n    const newNode = nodeFromJSON(value);\n    this.server_.onDisconnectPut(\n      path.toString(),\n      newNode.val(/*export=*/ true),\n      (status, errorReason) => {\n        if (status === 'ok') {\n          this.onDisconnect_.remember(path, newNode);\n        }\n        this.callOnCompleteCallback(onComplete, status, errorReason);\n      }\n    );\n  }\n\n  onDisconnectSetWithPriority(\n    path: Path,\n    value: unknown,\n    priority: unknown,\n    onComplete: ((status: Error | null, errorReason?: string) => void) | null\n  ) {\n    const newNode = nodeFromJSON(value, priority);\n    this.server_.onDisconnectPut(\n      path.toString(),\n      newNode.val(/*export=*/ true),\n      (status, errorReason) => {\n        if (status === 'ok') {\n          this.onDisconnect_.remember(path, newNode);\n        }\n        this.callOnCompleteCallback(onComplete, status, errorReason);\n      }\n    );\n  }\n\n  onDisconnectUpdate(\n    path: Path,\n    childrenToMerge: { [k: string]: unknown },\n    onComplete: ((status: Error | null, errorReason?: string) => void) | null\n  ) {\n    if (isEmpty(childrenToMerge)) {\n      log(\n        \"onDisconnect().update() called with empty data.  Don't do anything.\"\n      );\n      this.callOnCompleteCallback(onComplete, 'ok');\n      return;\n    }\n\n    this.server_.onDisconnectMerge(\n      path.toString(),\n      childrenToMerge,\n      (status, errorReason) => {\n        if (status === 'ok') {\n          each(childrenToMerge, (childName: string, childNode: unknown) => {\n            const newChildNode = nodeFromJSON(childNode);\n            this.onDisconnect_.remember(path.child(childName), newChildNode);\n          });\n        }\n        this.callOnCompleteCallback(onComplete, status, errorReason);\n      }\n    );\n  }\n\n  addEventCallbackForQuery(query: Query, eventRegistration: EventRegistration) {\n    let events;\n    if (query.path.getFront() === '.info') {\n      events = this.infoSyncTree_.addEventRegistration(\n        query,\n        eventRegistration\n      );\n    } else {\n      events = this.serverSyncTree_.addEventRegistration(\n        query,\n        eventRegistration\n      );\n    }\n    this.eventQueue_.raiseEventsAtPath(query.path, events);\n  }\n\n  removeEventCallbackForQuery(\n    query: Query,\n    eventRegistration: EventRegistration\n  ) {\n    // These are guaranteed not to raise events, since we're not passing in a cancelError. However, we can future-proof\n    // a little bit by handling the return values anyways.\n    let events;\n    if (query.path.getFront() === '.info') {\n      events = this.infoSyncTree_.removeEventRegistration(\n        query,\n        eventRegistration\n      );\n    } else {\n      events = this.serverSyncTree_.removeEventRegistration(\n        query,\n        eventRegistration\n      );\n    }\n    this.eventQueue_.raiseEventsAtPath(query.path, events);\n  }\n\n  interrupt() {\n    if (this.persistentConnection_) {\n      this.persistentConnection_.interrupt(INTERRUPT_REASON);\n    }\n  }\n\n  resume() {\n    if (this.persistentConnection_) {\n      this.persistentConnection_.resume(INTERRUPT_REASON);\n    }\n  }\n\n  stats(showDelta: boolean = false) {\n    if (typeof console === 'undefined') {\n      return;\n    }\n\n    let stats: { [k: string]: unknown };\n    if (showDelta) {\n      if (!this.statsListener_) {\n        this.statsListener_ = new StatsListener(this.stats_);\n      }\n      stats = this.statsListener_.get();\n    } else {\n      stats = this.stats_.get();\n    }\n\n    const longestName = Object.keys(stats).reduce(\n      (previousValue, currentValue) =>\n        Math.max(currentValue.length, previousValue),\n      0\n    );\n\n    each(stats, (stat: string, value: unknown) => {\n      let paddedStat = stat;\n      // pad stat names to be the same length (plus 2 extra spaces).\n      for (let i = stat.length; i < longestName + 2; i++) {\n        paddedStat += ' ';\n      }\n      console.log(paddedStat + value);\n    });\n  }\n\n  statsIncrementCounter(metric: string) {\n    this.stats_.incrementCounter(metric);\n    this.statsReporter_.includeStat(metric);\n  }\n\n  private log_(...varArgs: unknown[]) {\n    let prefix = '';\n    if (this.persistentConnection_) {\n      prefix = this.persistentConnection_.id + ':';\n    }\n    log(prefix, ...varArgs);\n  }\n\n  callOnCompleteCallback(\n    callback: ((status: Error | null, errorReason?: string) => void) | null,\n    status: string,\n    errorReason?: string | null\n  ) {\n    if (callback) {\n      exceptionGuard(() => {\n        if (status === 'ok') {\n          callback(null);\n        } else {\n          const code = (status || 'error').toUpperCase();\n          let message = code;\n          if (errorReason) {\n            message += ': ' + errorReason;\n          }\n\n          const error = new Error(message);\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          (error as any).code = code;\n          callback(error);\n        }\n      });\n    }\n  }\n\n  get database(): Database {\n    return this.__database || (this.__database = new Database(this));\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { IndexedFilter } from './IndexedFilter';\nimport { PRIORITY_INDEX } from '../../snap/indexes/PriorityIndex';\nimport { NamedNode, Node } from '../../../core/snap/Node';\nimport { ChildrenNode } from '../../snap/ChildrenNode';\nimport { NodeFilter } from './NodeFilter';\nimport { QueryParams } from '../QueryParams';\nimport { Index } from '../../snap/indexes/Index';\nimport { Path } from '../../util/Path';\nimport { CompleteChildSource } from '../CompleteChildSource';\nimport { ChildChangeAccumulator } from '../ChildChangeAccumulator';\n\n/**\n * Filters nodes by range and uses an IndexFilter to track any changes after filtering the node\n *\n * @constructor\n * @implements {NodeFilter}\n */\nexport class RangedFilter implements NodeFilter {\n  /**\n   * @type {!IndexedFilter}\n   * @const\n   * @private\n   */\n  private indexedFilter_: IndexedFilter;\n\n  /**\n   * @const\n   * @type {!Index}\n   * @private\n   */\n  private index_: Index;\n\n  /**\n   * @const\n   * @type {!NamedNode}\n   * @private\n   */\n  private startPost_: NamedNode;\n\n  /**\n   * @const\n   * @type {!NamedNode}\n   * @private\n   */\n  private endPost_: NamedNode;\n\n  /**\n   * @param {!QueryParams} params\n   */\n  constructor(params: QueryParams) {\n    this.indexedFilter_ = new IndexedFilter(params.getIndex());\n    this.index_ = params.getIndex();\n    this.startPost_ = RangedFilter.getStartPost_(params);\n    this.endPost_ = RangedFilter.getEndPost_(params);\n  }\n\n  /**\n   * @return {!NamedNode}\n   */\n  getStartPost(): NamedNode {\n    return this.startPost_;\n  }\n\n  /**\n   * @return {!NamedNode}\n   */\n  getEndPost(): NamedNode {\n    return this.endPost_;\n  }\n\n  /**\n   * @param {!NamedNode} node\n   * @return {boolean}\n   */\n  matches(node: NamedNode): boolean {\n    return (\n      this.index_.compare(this.getStartPost(), node) <= 0 &&\n      this.index_.compare(node, this.getEndPost()) <= 0\n    );\n  }\n\n  /**\n   * @inheritDoc\n   */\n  updateChild(\n    snap: Node,\n    key: string,\n    newChild: Node,\n    affectedPath: Path,\n    source: CompleteChildSource,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (!this.matches(new NamedNode(key, newChild))) {\n      newChild = ChildrenNode.EMPTY_NODE;\n    }\n    return this.indexedFilter_.updateChild(\n      snap,\n      key,\n      newChild,\n      affectedPath,\n      source,\n      optChangeAccumulator\n    );\n  }\n\n  /**\n   * @inheritDoc\n   */\n  updateFullNode(\n    oldSnap: Node,\n    newSnap: Node,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (newSnap.isLeafNode()) {\n      // Make sure we have a children node with the correct index, not a leaf node;\n      newSnap = ChildrenNode.EMPTY_NODE;\n    }\n    let filtered = newSnap.withIndex(this.index_);\n    // Don't support priorities on queries\n    filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\n    const self = this;\n    newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n      if (!self.matches(new NamedNode(key, childNode))) {\n        filtered = filtered.updateImmediateChild(key, ChildrenNode.EMPTY_NODE);\n      }\n    });\n    return this.indexedFilter_.updateFullNode(\n      oldSnap,\n      filtered,\n      optChangeAccumulator\n    );\n  }\n\n  /**\n   * @inheritDoc\n   */\n  updatePriority(oldSnap: Node, newPriority: Node): Node {\n    // Don't support priorities on queries\n    return oldSnap;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  filtersNodes(): boolean {\n    return true;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getIndexedFilter(): IndexedFilter {\n    return this.indexedFilter_;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getIndex(): Index {\n    return this.index_;\n  }\n\n  /**\n   * @param {!QueryParams} params\n   * @return {!NamedNode}\n   * @private\n   */\n  private static getStartPost_(params: QueryParams): NamedNode {\n    if (params.hasStart()) {\n      const startName = params.getIndexStartName();\n      return params.getIndex().makePost(params.getIndexStartValue(), startName);\n    } else {\n      return params.getIndex().minPost();\n    }\n  }\n\n  /**\n   * @param {!QueryParams} params\n   * @return {!NamedNode}\n   * @private\n   */\n  private static getEndPost_(params: QueryParams): NamedNode {\n    if (params.hasEnd()) {\n      const endName = params.getIndexEndName();\n      return params.getIndex().makePost(params.getIndexEndValue(), endName);\n    } else {\n      return params.getIndex().maxPost();\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RangedFilter } from './RangedFilter';\nimport { ChildrenNode } from '../../snap/ChildrenNode';\nimport { Node, NamedNode } from '../../snap/Node';\nimport { assert } from '@firebase/util';\nimport { Change } from '../Change';\nimport { NodeFilter } from './NodeFilter';\nimport { Index } from '../../snap/indexes/Index';\nimport { IndexedFilter } from './IndexedFilter';\nimport { QueryParams } from '../QueryParams';\nimport { Path } from '../../util/Path';\nimport { CompleteChildSource } from '../CompleteChildSource';\nimport { ChildChangeAccumulator } from '../ChildChangeAccumulator';\n\n/**\n * Applies a limit and a range to a node and uses RangedFilter to do the heavy lifting where possible\n *\n * @constructor\n * @implements {NodeFilter}\n */\nexport class LimitedFilter implements NodeFilter {\n  /**\n   * @const\n   * @type {RangedFilter}\n   * @private\n   */\n  private readonly rangedFilter_: RangedFilter;\n\n  /**\n   * @const\n   * @type {!Index}\n   * @private\n   */\n  private readonly index_: Index;\n\n  /**\n   * @const\n   * @type {number}\n   * @private\n   */\n  private readonly limit_: number;\n\n  /**\n   * @const\n   * @type {boolean}\n   * @private\n   */\n  private readonly reverse_: boolean;\n\n  /**\n   * @param {!QueryParams} params\n   */\n  constructor(params: QueryParams) {\n    this.rangedFilter_ = new RangedFilter(params);\n    this.index_ = params.getIndex();\n    this.limit_ = params.getLimit();\n    this.reverse_ = !params.isViewFromLeft();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  updateChild(\n    snap: Node,\n    key: string,\n    newChild: Node,\n    affectedPath: Path,\n    source: CompleteChildSource,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (!this.rangedFilter_.matches(new NamedNode(key, newChild))) {\n      newChild = ChildrenNode.EMPTY_NODE;\n    }\n    if (snap.getImmediateChild(key).equals(newChild)) {\n      // No change\n      return snap;\n    } else if (snap.numChildren() < this.limit_) {\n      return this.rangedFilter_\n        .getIndexedFilter()\n        .updateChild(\n          snap,\n          key,\n          newChild,\n          affectedPath,\n          source,\n          optChangeAccumulator\n        );\n    } else {\n      return this.fullLimitUpdateChild_(\n        snap,\n        key,\n        newChild,\n        source,\n        optChangeAccumulator\n      );\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  updateFullNode(\n    oldSnap: Node,\n    newSnap: Node,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    let filtered;\n    if (newSnap.isLeafNode() || newSnap.isEmpty()) {\n      // Make sure we have a children node with the correct index, not a leaf node;\n      filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\n    } else {\n      if (\n        this.limit_ * 2 < newSnap.numChildren() &&\n        newSnap.isIndexed(this.index_)\n      ) {\n        // Easier to build up a snapshot, since what we're given has more than twice the elements we want\n        filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\n        // anchor to the startPost, endPost, or last element as appropriate\n        let iterator;\n        if (this.reverse_) {\n          iterator = (newSnap as ChildrenNode).getReverseIteratorFrom(\n            this.rangedFilter_.getEndPost(),\n            this.index_\n          );\n        } else {\n          iterator = (newSnap as ChildrenNode).getIteratorFrom(\n            this.rangedFilter_.getStartPost(),\n            this.index_\n          );\n        }\n        let count = 0;\n        while (iterator.hasNext() && count < this.limit_) {\n          const next = iterator.getNext();\n          let inRange;\n          if (this.reverse_) {\n            inRange =\n              this.index_.compare(this.rangedFilter_.getStartPost(), next) <= 0;\n          } else {\n            inRange =\n              this.index_.compare(next, this.rangedFilter_.getEndPost()) <= 0;\n          }\n          if (inRange) {\n            filtered = filtered.updateImmediateChild(next.name, next.node);\n            count++;\n          } else {\n            // if we have reached the end post, we cannot keep adding elemments\n            break;\n          }\n        }\n      } else {\n        // The snap contains less than twice the limit. Faster to delete from the snap than build up a new one\n        filtered = newSnap.withIndex(this.index_);\n        // Don't support priorities on queries\n        filtered = filtered.updatePriority(\n          ChildrenNode.EMPTY_NODE\n        ) as ChildrenNode;\n        let startPost;\n        let endPost;\n        let cmp;\n        let iterator;\n        if (this.reverse_) {\n          iterator = filtered.getReverseIterator(this.index_);\n          startPost = this.rangedFilter_.getEndPost();\n          endPost = this.rangedFilter_.getStartPost();\n          const indexCompare = this.index_.getCompare();\n          cmp = (a: NamedNode, b: NamedNode) => indexCompare(b, a);\n        } else {\n          iterator = filtered.getIterator(this.index_);\n          startPost = this.rangedFilter_.getStartPost();\n          endPost = this.rangedFilter_.getEndPost();\n          cmp = this.index_.getCompare();\n        }\n\n        let count = 0;\n        let foundStartPost = false;\n        while (iterator.hasNext()) {\n          const next = iterator.getNext();\n          if (!foundStartPost && cmp(startPost, next) <= 0) {\n            // start adding\n            foundStartPost = true;\n          }\n          const inRange =\n            foundStartPost && count < this.limit_ && cmp(next, endPost) <= 0;\n          if (inRange) {\n            count++;\n          } else {\n            filtered = filtered.updateImmediateChild(\n              next.name,\n              ChildrenNode.EMPTY_NODE\n            );\n          }\n        }\n      }\n    }\n    return this.rangedFilter_\n      .getIndexedFilter()\n      .updateFullNode(oldSnap, filtered, optChangeAccumulator);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  updatePriority(oldSnap: Node, newPriority: Node): Node {\n    // Don't support priorities on queries\n    return oldSnap;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  filtersNodes(): boolean {\n    return true;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getIndexedFilter(): IndexedFilter {\n    return this.rangedFilter_.getIndexedFilter();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getIndex(): Index {\n    return this.index_;\n  }\n\n  /**\n   * @param {!Node} snap\n   * @param {string} childKey\n   * @param {!Node} childSnap\n   * @param {!CompleteChildSource} source\n   * @param {?ChildChangeAccumulator} changeAccumulator\n   * @return {!Node}\n   * @private\n   */\n  private fullLimitUpdateChild_(\n    snap: Node,\n    childKey: string,\n    childSnap: Node,\n    source: CompleteChildSource,\n    changeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    // TODO: rename all cache stuff etc to general snap terminology\n    let cmp;\n    if (this.reverse_) {\n      const indexCmp = this.index_.getCompare();\n      cmp = (a: NamedNode, b: NamedNode) => indexCmp(b, a);\n    } else {\n      cmp = this.index_.getCompare();\n    }\n    const oldEventCache = snap as ChildrenNode;\n    assert(oldEventCache.numChildren() === this.limit_, '');\n    const newChildNamedNode = new NamedNode(childKey, childSnap);\n    const windowBoundary = this.reverse_\n      ? oldEventCache.getFirstChild(this.index_)\n      : (oldEventCache.getLastChild(this.index_) as NamedNode);\n    const inRange = this.rangedFilter_.matches(newChildNamedNode);\n    if (oldEventCache.hasChild(childKey)) {\n      const oldChildSnap = oldEventCache.getImmediateChild(childKey);\n      let nextChild = source.getChildAfterChild(\n        this.index_,\n        windowBoundary,\n        this.reverse_\n      );\n      while (\n        nextChild != null &&\n        (nextChild.name === childKey || oldEventCache.hasChild(nextChild.name))\n      ) {\n        // There is a weird edge case where a node is updated as part of a merge in the write tree, but hasn't\n        // been applied to the limited filter yet. Ignore this next child which will be updated later in\n        // the limited filter...\n        nextChild = source.getChildAfterChild(\n          this.index_,\n          nextChild,\n          this.reverse_\n        );\n      }\n      const compareNext =\n        nextChild == null ? 1 : cmp(nextChild, newChildNamedNode);\n      const remainsInWindow =\n        inRange && !childSnap.isEmpty() && compareNext >= 0;\n      if (remainsInWindow) {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(\n            Change.childChangedChange(childKey, childSnap, oldChildSnap)\n          );\n        }\n        return oldEventCache.updateImmediateChild(childKey, childSnap);\n      } else {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(\n            Change.childRemovedChange(childKey, oldChildSnap)\n          );\n        }\n        const newEventCache = oldEventCache.updateImmediateChild(\n          childKey,\n          ChildrenNode.EMPTY_NODE\n        );\n        const nextChildInRange =\n          nextChild != null && this.rangedFilter_.matches(nextChild);\n        if (nextChildInRange) {\n          if (changeAccumulator != null) {\n            changeAccumulator.trackChildChange(\n              Change.childAddedChange(nextChild.name, nextChild.node)\n            );\n          }\n          return newEventCache.updateImmediateChild(\n            nextChild.name,\n            nextChild.node\n          );\n        } else {\n          return newEventCache;\n        }\n      }\n    } else if (childSnap.isEmpty()) {\n      // we're deleting a node, but it was not in the window, so ignore it\n      return snap;\n    } else if (inRange) {\n      if (cmp(windowBoundary, newChildNamedNode) >= 0) {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(\n            Change.childRemovedChange(windowBoundary.name, windowBoundary.node)\n          );\n          changeAccumulator.trackChildChange(\n            Change.childAddedChange(childKey, childSnap)\n          );\n        }\n        return oldEventCache\n          .updateImmediateChild(childKey, childSnap)\n          .updateImmediateChild(windowBoundary.name, ChildrenNode.EMPTY_NODE);\n      } else {\n        return snap;\n      }\n    } else {\n      return snap;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, stringify } from '@firebase/util';\nimport { MIN_NAME, MAX_NAME } from '../util/util';\nimport { KEY_INDEX } from '../snap/indexes/KeyIndex';\nimport { PRIORITY_INDEX } from '../snap/indexes/PriorityIndex';\nimport { VALUE_INDEX } from '../snap/indexes/ValueIndex';\nimport { PathIndex } from '../snap/indexes/PathIndex';\nimport { IndexedFilter } from './filter/IndexedFilter';\nimport { LimitedFilter } from './filter/LimitedFilter';\nimport { RangedFilter } from './filter/RangedFilter';\nimport { NodeFilter } from './filter/NodeFilter';\nimport { Index } from '../snap/indexes/Index';\n\n/**\n * This class is an immutable-from-the-public-api struct containing a set of query parameters defining a\n * range to be returned for a particular location. It is assumed that validation of parameters is done at the\n * user-facing API level, so it is not done here.\n * @constructor\n */\nexport class QueryParams {\n  private limitSet_ = false;\n  private startSet_ = false;\n  private startNameSet_ = false;\n  private endSet_ = false;\n  private endNameSet_ = false;\n\n  private limit_ = 0;\n  private viewFrom_ = '';\n  private indexStartValue_: unknown | null = null;\n  private indexStartName_ = '';\n  private indexEndValue_: unknown | null = null;\n  private indexEndName_ = '';\n\n  private index_ = PRIORITY_INDEX;\n\n  /**\n   * Wire Protocol Constants\n   * @const\n   * @enum {string}\n   * @private\n   */\n  private static readonly WIRE_PROTOCOL_CONSTANTS_ = {\n    INDEX_START_VALUE: 'sp',\n    INDEX_START_NAME: 'sn',\n    INDEX_END_VALUE: 'ep',\n    INDEX_END_NAME: 'en',\n    LIMIT: 'l',\n    VIEW_FROM: 'vf',\n    VIEW_FROM_LEFT: 'l',\n    VIEW_FROM_RIGHT: 'r',\n    INDEX: 'i'\n  };\n\n  /**\n   * REST Query Constants\n   * @const\n   * @enum {string}\n   * @private\n   */\n  private static readonly REST_QUERY_CONSTANTS_ = {\n    ORDER_BY: 'orderBy',\n    PRIORITY_INDEX: '$priority',\n    VALUE_INDEX: '$value',\n    KEY_INDEX: '$key',\n    START_AT: 'startAt',\n    END_AT: 'endAt',\n    LIMIT_TO_FIRST: 'limitToFirst',\n    LIMIT_TO_LAST: 'limitToLast'\n  };\n\n  /**\n   * Default, empty query parameters\n   * @type {!QueryParams}\n   * @const\n   */\n  static readonly DEFAULT = new QueryParams();\n\n  /**\n   * @return {boolean}\n   */\n  hasStart(): boolean {\n    return this.startSet_;\n  }\n\n  /**\n   * @return {boolean} True if it would return from left.\n   */\n  isViewFromLeft(): boolean {\n    if (this.viewFrom_ === '') {\n      // limit(), rather than limitToFirst or limitToLast was called.\n      // This means that only one of startSet_ and endSet_ is true. Use them\n      // to calculate which side of the view to anchor to. If neither is set,\n      // anchor to the end.\n      return this.startSet_;\n    } else {\n      return (\n        this.viewFrom_ === QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_LEFT\n      );\n    }\n  }\n\n  /**\n   * Only valid to call if hasStart() returns true\n   * @return {*}\n   */\n  getIndexStartValue(): unknown {\n    assert(this.startSet_, 'Only valid if start has been set');\n    return this.indexStartValue_;\n  }\n\n  /**\n   * Only valid to call if hasStart() returns true.\n   * Returns the starting key name for the range defined by these query parameters\n   * @return {!string}\n   */\n  getIndexStartName(): string {\n    assert(this.startSet_, 'Only valid if start has been set');\n    if (this.startNameSet_) {\n      return this.indexStartName_;\n    } else {\n      return MIN_NAME;\n    }\n  }\n\n  /**\n   * @return {boolean}\n   */\n  hasEnd(): boolean {\n    return this.endSet_;\n  }\n\n  /**\n   * Only valid to call if hasEnd() returns true.\n   * @return {*}\n   */\n  getIndexEndValue(): unknown {\n    assert(this.endSet_, 'Only valid if end has been set');\n    return this.indexEndValue_;\n  }\n\n  /**\n   * Only valid to call if hasEnd() returns true.\n   * Returns the end key name for the range defined by these query parameters\n   * @return {!string}\n   */\n  getIndexEndName(): string {\n    assert(this.endSet_, 'Only valid if end has been set');\n    if (this.endNameSet_) {\n      return this.indexEndName_;\n    } else {\n      return MAX_NAME;\n    }\n  }\n\n  /**\n   * @return {boolean}\n   */\n  hasLimit(): boolean {\n    return this.limitSet_;\n  }\n\n  /**\n   * @return {boolean} True if a limit has been set and it has been explicitly anchored\n   */\n  hasAnchoredLimit(): boolean {\n    return this.limitSet_ && this.viewFrom_ !== '';\n  }\n\n  /**\n   * Only valid to call if hasLimit() returns true\n   * @return {!number}\n   */\n  getLimit(): number {\n    assert(this.limitSet_, 'Only valid if limit has been set');\n    return this.limit_;\n  }\n\n  /**\n   * @return {!Index}\n   */\n  getIndex(): Index {\n    return this.index_;\n  }\n\n  /**\n   * @return {!QueryParams}\n   * @private\n   */\n  private copy_(): QueryParams {\n    const copy = new QueryParams();\n    copy.limitSet_ = this.limitSet_;\n    copy.limit_ = this.limit_;\n    copy.startSet_ = this.startSet_;\n    copy.indexStartValue_ = this.indexStartValue_;\n    copy.startNameSet_ = this.startNameSet_;\n    copy.indexStartName_ = this.indexStartName_;\n    copy.endSet_ = this.endSet_;\n    copy.indexEndValue_ = this.indexEndValue_;\n    copy.endNameSet_ = this.endNameSet_;\n    copy.indexEndName_ = this.indexEndName_;\n    copy.index_ = this.index_;\n    copy.viewFrom_ = this.viewFrom_;\n    return copy;\n  }\n\n  /**\n   * @param {!number} newLimit\n   * @return {!QueryParams}\n   */\n  limit(newLimit: number): QueryParams {\n    const newParams = this.copy_();\n    newParams.limitSet_ = true;\n    newParams.limit_ = newLimit;\n    newParams.viewFrom_ = '';\n    return newParams;\n  }\n\n  /**\n   * @param {!number} newLimit\n   * @return {!QueryParams}\n   */\n  limitToFirst(newLimit: number): QueryParams {\n    const newParams = this.copy_();\n    newParams.limitSet_ = true;\n    newParams.limit_ = newLimit;\n    newParams.viewFrom_ = QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_LEFT;\n    return newParams;\n  }\n\n  /**\n   * @param {!number} newLimit\n   * @return {!QueryParams}\n   */\n  limitToLast(newLimit: number): QueryParams {\n    const newParams = this.copy_();\n    newParams.limitSet_ = true;\n    newParams.limit_ = newLimit;\n    newParams.viewFrom_ = QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_RIGHT;\n    return newParams;\n  }\n\n  /**\n   * @param {*} indexValue\n   * @param {?string=} key\n   * @return {!QueryParams}\n   */\n  startAt(indexValue: unknown, key?: string | null): QueryParams {\n    const newParams = this.copy_();\n    newParams.startSet_ = true;\n    if (indexValue === undefined) {\n      indexValue = null;\n    }\n    newParams.indexStartValue_ = indexValue;\n    if (key != null) {\n      newParams.startNameSet_ = true;\n      newParams.indexStartName_ = key;\n    } else {\n      newParams.startNameSet_ = false;\n      newParams.indexStartName_ = '';\n    }\n    return newParams;\n  }\n\n  /**\n   * @param {*} indexValue\n   * @param {?string=} key\n   * @return {!QueryParams}\n   */\n  endAt(indexValue: unknown, key?: string | null): QueryParams {\n    const newParams = this.copy_();\n    newParams.endSet_ = true;\n    if (indexValue === undefined) {\n      indexValue = null;\n    }\n    newParams.indexEndValue_ = indexValue;\n    if (key !== undefined) {\n      newParams.endNameSet_ = true;\n      newParams.indexEndName_ = key;\n    } else {\n      newParams.endNameSet_ = false;\n      newParams.indexEndName_ = '';\n    }\n    return newParams;\n  }\n\n  /**\n   * @param {!Index} index\n   * @return {!QueryParams}\n   */\n  orderBy(index: Index): QueryParams {\n    const newParams = this.copy_();\n    newParams.index_ = index;\n    return newParams;\n  }\n\n  /**\n   * @return {!Object}\n   */\n  getQueryObject(): {} {\n    const WIRE_PROTOCOL_CONSTANTS = QueryParams.WIRE_PROTOCOL_CONSTANTS_;\n    const obj: { [k: string]: unknown } = {};\n    if (this.startSet_) {\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_VALUE] = this.indexStartValue_;\n      if (this.startNameSet_) {\n        obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_NAME] = this.indexStartName_;\n      }\n    }\n    if (this.endSet_) {\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_VALUE] = this.indexEndValue_;\n      if (this.endNameSet_) {\n        obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_NAME] = this.indexEndName_;\n      }\n    }\n    if (this.limitSet_) {\n      obj[WIRE_PROTOCOL_CONSTANTS.LIMIT] = this.limit_;\n      let viewFrom = this.viewFrom_;\n      if (viewFrom === '') {\n        if (this.isViewFromLeft()) {\n          viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\n        } else {\n          viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT;\n        }\n      }\n      obj[WIRE_PROTOCOL_CONSTANTS.VIEW_FROM] = viewFrom;\n    }\n    // For now, priority index is the default, so we only specify if it's some other index\n    if (this.index_ !== PRIORITY_INDEX) {\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX] = this.index_.toString();\n    }\n    return obj;\n  }\n\n  /**\n   * @return {boolean}\n   */\n  loadsAllData(): boolean {\n    return !(this.startSet_ || this.endSet_ || this.limitSet_);\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isDefault(): boolean {\n    return this.loadsAllData() && this.index_ === PRIORITY_INDEX;\n  }\n\n  /**\n   * @return {!NodeFilter}\n   */\n  getNodeFilter(): NodeFilter {\n    if (this.loadsAllData()) {\n      return new IndexedFilter(this.getIndex());\n    } else if (this.hasLimit()) {\n      return new LimitedFilter(this);\n    } else {\n      return new RangedFilter(this);\n    }\n  }\n\n  /**\n   * Returns a set of REST query string parameters representing this query.\n   *\n   * @return {!Object.<string,*>} query string parameters\n   */\n  toRestQueryStringParameters(): { [k: string]: string | number } {\n    const REST_CONSTANTS = QueryParams.REST_QUERY_CONSTANTS_;\n    const qs: { [k: string]: string | number } = {};\n\n    if (this.isDefault()) {\n      return qs;\n    }\n\n    let orderBy;\n    if (this.index_ === PRIORITY_INDEX) {\n      orderBy = REST_CONSTANTS.PRIORITY_INDEX;\n    } else if (this.index_ === VALUE_INDEX) {\n      orderBy = REST_CONSTANTS.VALUE_INDEX;\n    } else if (this.index_ === KEY_INDEX) {\n      orderBy = REST_CONSTANTS.KEY_INDEX;\n    } else {\n      assert(this.index_ instanceof PathIndex, 'Unrecognized index type!');\n      orderBy = this.index_.toString();\n    }\n    qs[REST_CONSTANTS.ORDER_BY] = stringify(orderBy);\n\n    if (this.startSet_) {\n      qs[REST_CONSTANTS.START_AT] = stringify(this.indexStartValue_);\n      if (this.startNameSet_) {\n        qs[REST_CONSTANTS.START_AT] += ',' + stringify(this.indexStartName_);\n      }\n    }\n\n    if (this.endSet_) {\n      qs[REST_CONSTANTS.END_AT] = stringify(this.indexEndValue_);\n      if (this.endNameSet_) {\n        qs[REST_CONSTANTS.END_AT] += ',' + stringify(this.indexEndName_);\n      }\n    }\n\n    if (this.limitSet_) {\n      if (this.isViewFromLeft()) {\n        qs[REST_CONSTANTS.LIMIT_TO_FIRST] = this.limit_;\n      } else {\n        qs[REST_CONSTANTS.LIMIT_TO_LAST] = this.limit_;\n      }\n    }\n\n    return qs;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { OnDisconnect } from './onDisconnect';\nimport { TransactionResult } from './TransactionResult';\nimport { warn } from '../core/util/util';\nimport { nextPushId } from '../core/util/NextPushId';\nimport { Query } from './Query';\nimport { Repo } from '../core/Repo';\nimport { Path } from '../core/util/Path';\nimport { QueryParams } from '../core/view/QueryParams';\nimport {\n  validateRootPathString,\n  validatePathString,\n  validateFirebaseMergeDataArg,\n  validateBoolean,\n  validatePriority,\n  validateFirebaseDataArg,\n  validateWritablePath\n} from '../core/util/validation';\nimport { validateArgCount, validateCallback, Deferred } from '@firebase/util';\n\nimport { SyncPoint } from '../core/SyncPoint';\nimport { Database } from './Database';\nimport { DataSnapshot } from './DataSnapshot';\nimport * as types from '@firebase/database-types';\n\nexport interface ReferenceConstructor {\n  new (repo: Repo, path: Path): Reference;\n}\n\nexport class Reference extends Query {\n  then: Promise<Reference>['then'];\n  catch: Promise<Reference>['catch'];\n\n  /**\n   * Call options:\n   *   new Reference(Repo, Path) or\n   *   new Reference(url: string, string|RepoManager)\n   *\n   * Externally - this is the firebase.database.Reference type.\n   *\n   * @param {!Repo} repo\n   * @param {(!Path)} path\n   * @extends {Query}\n   */\n  constructor(repo: Repo, path: Path) {\n    if (!(repo instanceof Repo)) {\n      throw new Error(\n        'new Reference() no longer supported - use app.database().'\n      );\n    }\n\n    // call Query's constructor, passing in the repo and path.\n    super(repo, path, QueryParams.DEFAULT, false);\n  }\n\n  /** @return {?string} */\n  getKey(): string | null {\n    validateArgCount('Reference.key', 0, 0, arguments.length);\n\n    if (this.path.isEmpty()) {\n      return null;\n    } else {\n      return this.path.getBack();\n    }\n  }\n\n  /**\n   * @param {!(string|Path)} pathString\n   * @return {!Reference}\n   */\n  child(pathString: string | Path): Reference {\n    validateArgCount('Reference.child', 1, 1, arguments.length);\n    if (typeof pathString === 'number') {\n      pathString = String(pathString);\n    } else if (!(pathString instanceof Path)) {\n      if (this.path.getFront() === null) {\n        validateRootPathString('Reference.child', 1, pathString, false);\n      } else {\n        validatePathString('Reference.child', 1, pathString, false);\n      }\n    }\n\n    return new Reference(this.repo, this.path.child(pathString));\n  }\n\n  /** @return {?Reference} */\n  getParent(): Reference | null {\n    validateArgCount('Reference.parent', 0, 0, arguments.length);\n\n    const parentPath = this.path.parent();\n    return parentPath === null ? null : new Reference(this.repo, parentPath);\n  }\n\n  /** @return {!Reference} */\n  getRoot(): Reference {\n    validateArgCount('Reference.root', 0, 0, arguments.length);\n\n    let ref: Reference = this;\n    while (ref.getParent() !== null) {\n      ref = ref.getParent();\n    }\n    return ref;\n  }\n\n  /** @return {!Database} */\n  databaseProp(): Database {\n    return this.repo.database;\n  }\n\n  /**\n   * @param {*} newVal\n   * @param {function(?Error)=} onComplete\n   * @return {!Promise}\n   */\n  set(\n    newVal: unknown,\n    onComplete?: (a: Error | null) => void\n  ): Promise<unknown> {\n    validateArgCount('Reference.set', 1, 2, arguments.length);\n    validateWritablePath('Reference.set', this.path);\n    validateFirebaseDataArg('Reference.set', 1, newVal, this.path, false);\n    validateCallback('Reference.set', 2, onComplete, true);\n\n    const deferred = new Deferred();\n    this.repo.setWithPriority(\n      this.path,\n      newVal,\n      /*priority=*/ null,\n      deferred.wrapCallback(onComplete)\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * @param {!Object} objectToMerge\n   * @param {function(?Error)=} onComplete\n   * @return {!Promise}\n   */\n  update(\n    objectToMerge: object,\n    onComplete?: (a: Error | null) => void\n  ): Promise<unknown> {\n    validateArgCount('Reference.update', 1, 2, arguments.length);\n    validateWritablePath('Reference.update', this.path);\n\n    if (Array.isArray(objectToMerge)) {\n      const newObjectToMerge: { [k: string]: unknown } = {};\n      for (let i = 0; i < objectToMerge.length; ++i) {\n        newObjectToMerge['' + i] = objectToMerge[i];\n      }\n      objectToMerge = newObjectToMerge;\n      warn(\n        'Passing an Array to Firebase.update() is deprecated. ' +\n          'Use set() if you want to overwrite the existing data, or ' +\n          'an Object with integer keys if you really do want to ' +\n          'only update some of the children.'\n      );\n    }\n    validateFirebaseMergeDataArg(\n      'Reference.update',\n      1,\n      objectToMerge,\n      this.path,\n      false\n    );\n    validateCallback('Reference.update', 2, onComplete, true);\n    const deferred = new Deferred();\n    this.repo.update(\n      this.path,\n      objectToMerge as { [k: string]: unknown },\n      deferred.wrapCallback(onComplete)\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * @param {*} newVal\n   * @param {string|number|null} newPriority\n   * @param {function(?Error)=} onComplete\n   * @return {!Promise}\n   */\n  setWithPriority(\n    newVal: unknown,\n    newPriority: string | number | null,\n    onComplete?: (a: Error | null) => void\n  ): Promise<unknown> {\n    validateArgCount('Reference.setWithPriority', 2, 3, arguments.length);\n    validateWritablePath('Reference.setWithPriority', this.path);\n    validateFirebaseDataArg(\n      'Reference.setWithPriority',\n      1,\n      newVal,\n      this.path,\n      false\n    );\n    validatePriority('Reference.setWithPriority', 2, newPriority, false);\n    validateCallback('Reference.setWithPriority', 3, onComplete, true);\n\n    if (this.getKey() === '.length' || this.getKey() === '.keys') {\n      throw (\n        'Reference.setWithPriority failed: ' +\n        this.getKey() +\n        ' is a read-only object.'\n      );\n    }\n\n    const deferred = new Deferred();\n    this.repo.setWithPriority(\n      this.path,\n      newVal,\n      newPriority,\n      deferred.wrapCallback(onComplete)\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * @param {function(?Error)=} onComplete\n   * @return {!Promise}\n   */\n  remove(onComplete?: (a: Error | null) => void): Promise<unknown> {\n    validateArgCount('Reference.remove', 0, 1, arguments.length);\n    validateWritablePath('Reference.remove', this.path);\n    validateCallback('Reference.remove', 1, onComplete, true);\n\n    return this.set(null, onComplete);\n  }\n\n  /**\n   * @param {function(*):*} transactionUpdate\n   * @param {(function(?Error, boolean, ?DataSnapshot))=} onComplete\n   * @param {boolean=} applyLocally\n   * @return {!Promise}\n   */\n  transaction(\n    transactionUpdate: (a: unknown) => unknown,\n    onComplete?: (a: Error | null, b: boolean, c: DataSnapshot | null) => void,\n    applyLocally?: boolean\n  ): Promise<TransactionResult> {\n    validateArgCount('Reference.transaction', 1, 3, arguments.length);\n    validateWritablePath('Reference.transaction', this.path);\n    validateCallback('Reference.transaction', 1, transactionUpdate, false);\n    validateCallback('Reference.transaction', 2, onComplete, true);\n    // NOTE: applyLocally is an internal-only option for now.  We need to decide if we want to keep it and how\n    // to expose it.\n    validateBoolean('Reference.transaction', 3, applyLocally, true);\n\n    if (this.getKey() === '.length' || this.getKey() === '.keys') {\n      throw (\n        'Reference.transaction failed: ' +\n        this.getKey() +\n        ' is a read-only object.'\n      );\n    }\n\n    if (applyLocally === undefined) {\n      applyLocally = true;\n    }\n\n    const deferred = new Deferred<TransactionResult>();\n    if (typeof onComplete === 'function') {\n      deferred.promise.catch(() => {});\n    }\n\n    const promiseComplete = function (\n      error: Error,\n      committed: boolean,\n      snapshot: DataSnapshot\n    ) {\n      if (error) {\n        deferred.reject(error);\n      } else {\n        deferred.resolve(new TransactionResult(committed, snapshot));\n      }\n      if (typeof onComplete === 'function') {\n        onComplete(error, committed, snapshot);\n      }\n    };\n    this.repo.startTransaction(\n      this.path,\n      transactionUpdate,\n      promiseComplete,\n      applyLocally\n    );\n\n    return deferred.promise;\n  }\n\n  /**\n   * @param {string|number|null} priority\n   * @param {function(?Error)=} onComplete\n   * @return {!Promise}\n   */\n  setPriority(\n    priority: string | number | null,\n    onComplete?: (a: Error | null) => void\n  ): Promise<unknown> {\n    validateArgCount('Reference.setPriority', 1, 2, arguments.length);\n    validateWritablePath('Reference.setPriority', this.path);\n    validatePriority('Reference.setPriority', 1, priority, false);\n    validateCallback('Reference.setPriority', 2, onComplete, true);\n\n    const deferred = new Deferred();\n    this.repo.setWithPriority(\n      this.path.child('.priority'),\n      priority,\n      null,\n      deferred.wrapCallback(onComplete)\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * @param {*=} value\n   * @param {function(?Error)=} onComplete\n   * @return {!Reference}\n   */\n  push(value?: unknown, onComplete?: (a: Error | null) => void): Reference {\n    validateArgCount('Reference.push', 0, 2, arguments.length);\n    validateWritablePath('Reference.push', this.path);\n    validateFirebaseDataArg('Reference.push', 1, value, this.path, true);\n    validateCallback('Reference.push', 2, onComplete, true);\n\n    const now = this.repo.serverTime();\n    const name = nextPushId(now);\n\n    // push() returns a ThennableReference whose promise is fulfilled with a regular Reference.\n    // We use child() to create handles to two different references. The first is turned into a\n    // ThennableReference below by adding then() and catch() methods and is used as the\n    // return value of push(). The second remains a regular Reference and is used as the fulfilled\n    // value of the first ThennableReference.\n    const thennablePushRef = this.child(name);\n    const pushRef = this.child(name);\n\n    let promise;\n    if (value != null) {\n      promise = thennablePushRef.set(value, onComplete).then(() => pushRef);\n    } else {\n      promise = Promise.resolve(pushRef);\n    }\n\n    thennablePushRef.then = promise.then.bind(promise);\n    thennablePushRef.catch = promise.then.bind(promise, undefined);\n\n    if (typeof onComplete === 'function') {\n      promise.catch(() => {});\n    }\n\n    return thennablePushRef;\n  }\n\n  /**\n   * @return {!OnDisconnect}\n   */\n  onDisconnect(): OnDisconnect {\n    validateWritablePath('Reference.onDisconnect', this.path);\n    return new OnDisconnect(this.repo, this.path);\n  }\n\n  get database(): Database {\n    return this.databaseProp();\n  }\n\n  get key(): string | null {\n    return this.getKey();\n  }\n\n  get parent(): Reference | null {\n    return this.getParent();\n  }\n\n  get root(): Reference {\n    return this.getRoot();\n  }\n}\n\n/**\n * Define reference constructor in various modules\n *\n * We are doing this here to avoid several circular\n * dependency issues\n */\nQuery.__referenceConstructor = Reference;\nSyncPoint.__referenceConstructor = Reference;\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, contains, safeGet } from '@firebase/util';\nimport { Path } from './Path';\n\nimport { each } from './util';\n\n/**\n * Node in a Tree.\n */\nexport class TreeNode<T> {\n  // TODO: Consider making accessors that create children and value lazily or\n  // separate Internal / Leaf 'types'.\n  children: { [name: string]: TreeNode<T> } = {};\n  childCount = 0;\n  value: T | null = null;\n}\n\n/**\n * A light-weight tree, traversable by path.  Nodes can have both values and children.\n * Nodes are not enumerated (by forEachChild) unless they have a value or non-empty\n * children.\n */\nexport class Tree<T> {\n  /**\n   * @template T\n   * @param {string=} name_ Optional name of the node.\n   * @param {Tree=} parent_ Optional parent node.\n   * @param {TreeNode=} node_ Optional node to wrap.\n   */\n  constructor(\n    private name_: string = '',\n    private parent_: Tree<T> | null = null,\n    private node_: TreeNode<T> = new TreeNode<T>()\n  ) {}\n\n  /**\n   * Returns a sub-Tree for the given path.\n   *\n   * @param {!(string|Path)} pathObj Path to look up.\n   * @return {!Tree.<T>} Tree for path.\n   */\n  subTree(pathObj: string | Path): Tree<T> {\n    // TODO: Require pathObj to be Path?\n    let path = pathObj instanceof Path ? pathObj : new Path(pathObj);\n    let child = this as Tree<T>,\n      next = path.getFront();\n    while (next !== null) {\n      const childNode = safeGet(child.node_.children, next) || new TreeNode();\n      child = new Tree(next, child, childNode);\n      path = path.popFront();\n      next = path.getFront();\n    }\n\n    return child;\n  }\n\n  /**\n   * Returns the data associated with this tree node.\n   *\n   * @return {?T} The data or null if no data exists.\n   */\n  getValue(): T | null {\n    return this.node_.value;\n  }\n\n  /**\n   * Sets data to this tree node.\n   *\n   * @param {!T} value Value to set.\n   */\n  setValue(value: T) {\n    assert(typeof value !== 'undefined', 'Cannot set value to undefined');\n    this.node_.value = value;\n    this.updateParents_();\n  }\n\n  /**\n   * Clears the contents of the tree node (its value and all children).\n   */\n  clear() {\n    this.node_.value = null;\n    this.node_.children = {};\n    this.node_.childCount = 0;\n    this.updateParents_();\n  }\n\n  /**\n   * @return {boolean} Whether the tree has any children.\n   */\n  hasChildren(): boolean {\n    return this.node_.childCount > 0;\n  }\n\n  /**\n   * @return {boolean} Whether the tree is empty (no value or children).\n   */\n  isEmpty(): boolean {\n    return this.getValue() === null && !this.hasChildren();\n  }\n\n  /**\n   * Calls action for each child of this tree node.\n   *\n   * @param {function(!Tree.<T>)} action Action to be called for each child.\n   */\n  forEachChild(action: (tree: Tree<T>) => void) {\n    each(this.node_.children, (child: string, childTree: TreeNode<T>) => {\n      action(new Tree<T>(child, this, childTree));\n    });\n  }\n\n  /**\n   * Does a depth-first traversal of this node's descendants, calling action for each one.\n   *\n   * @param {function(!Tree.<T>)} action Action to be called for each child.\n   * @param {boolean=} includeSelf Whether to call action on this node as well. Defaults to\n   *   false.\n   * @param {boolean=} childrenFirst Whether to call action on children before calling it on\n   *   parent.\n   */\n  forEachDescendant(\n    action: (tree: Tree<T>) => void,\n    includeSelf?: boolean,\n    childrenFirst?: boolean\n  ) {\n    if (includeSelf && !childrenFirst) {\n      action(this);\n    }\n\n    this.forEachChild(child => {\n      child.forEachDescendant(action, /*includeSelf=*/ true, childrenFirst);\n    });\n\n    if (includeSelf && childrenFirst) {\n      action(this);\n    }\n  }\n\n  /**\n   * Calls action on each ancestor node.\n   *\n   * @param {function(!Tree.<T>)} action Action to be called on each parent; return\n   *   true to abort.\n   * @param {boolean=} includeSelf Whether to call action on this node as well.\n   * @return {boolean} true if the action callback returned true.\n   */\n  forEachAncestor(\n    action: (tree: Tree<T>) => unknown,\n    includeSelf?: boolean\n  ): boolean {\n    let node = includeSelf ? this : this.parent();\n    while (node !== null) {\n      if (action(node)) {\n        return true;\n      }\n      node = node.parent();\n    }\n    return false;\n  }\n\n  /**\n   * Does a depth-first traversal of this node's descendants.  When a descendant with a value\n   * is found, action is called on it and traversal does not continue inside the node.\n   * Action is *not* called on this node.\n   *\n   * @param {function(!Tree.<T>)} action Action to be called for each child.\n   */\n  forEachImmediateDescendantWithValue(action: (tree: Tree<T>) => void) {\n    this.forEachChild(child => {\n      if (child.getValue() !== null) {\n        action(child);\n      } else {\n        child.forEachImmediateDescendantWithValue(action);\n      }\n    });\n  }\n\n  /**\n   * @return {!Path} The path of this tree node, as a Path.\n   */\n  path(): Path {\n    return new Path(\n      this.parent_ === null\n        ? this.name_\n        : this.parent_.path() + '/' + this.name_\n    );\n  }\n\n  /**\n   * @return {string} The name of the tree node.\n   */\n  name(): string {\n    return this.name_;\n  }\n\n  /**\n   * @return {?Tree} The parent tree node, or null if this is the root of the tree.\n   */\n  parent(): Tree<T> | null {\n    return this.parent_;\n  }\n\n  /**\n   * Adds or removes this child from its parent based on whether it's empty or not.\n   *\n   * @private\n   */\n  private updateParents_() {\n    if (this.parent_ !== null) {\n      this.parent_.updateChild_(this.name_, this);\n    }\n  }\n\n  /**\n   * Adds or removes the passed child to this tree node, depending on whether it's empty.\n   *\n   * @param {string} childName The name of the child to update.\n   * @param {!Tree.<T>} child The child to update.\n   * @private\n   */\n  private updateChild_(childName: string, child: Tree<T>) {\n    const childEmpty = child.isEmpty();\n    const childExists = contains(this.node_.children, childName);\n    if (childEmpty && childExists) {\n      delete this.node_.children[childName];\n      this.node_.childCount--;\n      this.updateParents_();\n    } else if (!childEmpty && !childExists) {\n      this.node_.children[childName] = child.node_;\n      this.node_.childCount++;\n      this.updateParents_();\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, contains, safeGet } from '@firebase/util';\nimport { Reference } from '../api/Reference';\nimport { DataSnapshot } from '../api/DataSnapshot';\nimport { Path } from './util/Path';\nimport { Tree } from './util/Tree';\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { Node } from './snap/Node';\nimport { LUIDGenerator, warn, exceptionGuard } from './util/util';\nimport { resolveDeferredValueSnapshot } from './util/ServerValues';\nimport { isValidPriority, validateFirebaseData } from './util/validation';\n\nimport { nodeFromJSON } from './snap/nodeFromJSON';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Repo } from './Repo';\nimport { Event } from './view/Event';\n\n// TODO: This is pretty messy.  Ideally, a lot of this would move into FirebaseData, or a transaction-specific\n// component used by FirebaseData, but it has ties to user callbacks (transaction update and onComplete) as well\n// as the realtime connection (to send transactions to the server).  So that all needs to be decoupled first.\n// For now it's part of Repo, but in its own file.\n\n/**\n * @enum {number}\n */\nexport enum TransactionStatus {\n  // We've run the transaction and updated transactionResultData_ with the result, but it isn't currently sent to the\n  // server. A transaction will go from RUN -> SENT -> RUN if it comes back from the server as rejected due to\n  // mismatched hash.\n  RUN,\n\n  // We've run the transaction and sent it to the server and it's currently outstanding (hasn't come back as accepted\n  // or rejected yet).\n  SENT,\n\n  // Temporary state used to mark completed transactions (whether successful or aborted).  The transaction will be\n  // removed when we get a chance to prune completed ones.\n  COMPLETED,\n\n  // Used when an already-sent transaction needs to be aborted (e.g. due to a conflicting set() call that was made).\n  // If it comes back as unsuccessful, we'll abort it.\n  SENT_NEEDS_ABORT,\n\n  // Temporary state used to mark transactions that need to be aborted.\n  NEEDS_ABORT\n}\n\n/**\n * If a transaction does not succeed after 25 retries, we abort it.  Among other things this ensure that if there's\n * ever a bug causing a mismatch between client / server hashes for some data, we won't retry indefinitely.\n * @type {number}\n * @const\n * @private\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(Repo as any).MAX_TRANSACTION_RETRIES_ = 25;\n\n/**\n * @typedef {{\n *   path: !Path,\n *   update: function(*):*,\n *   onComplete: ?function(?Error, boolean, ?DataSnapshot),\n *   status: ?TransactionStatus,\n *   order: !number,\n *   applyLocally: boolean,\n *   retryCount: !number,\n *   unwatcher: function(),\n *   abortReason: ?string,\n *   currentWriteId: !number,\n *   currentInputSnapshot: ?Node,\n *   currentOutputSnapshotRaw: ?Node,\n *   currentOutputSnapshotResolved: ?Node\n * }}\n */\ninterface Transaction {\n  path: Path;\n  update: (a: unknown) => unknown;\n  onComplete: (a: Error | null, b: boolean, c: DataSnapshot | null) => void;\n  status: TransactionStatus;\n  order: number;\n  applyLocally: boolean;\n  retryCount: number;\n  unwatcher: () => void;\n  abortReason: string | null;\n  currentWriteId: number;\n  currentInputSnapshot: Node | null;\n  currentOutputSnapshotRaw: Node | null;\n  currentOutputSnapshotResolved: Node | null;\n}\n\n/**\n * Setup the transaction data structures\n * @private\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(Repo.prototype as any).transactionsInit_ = function () {\n  /**\n   * Stores queues of outstanding transactions for Firebase locations.\n   *\n   * @type {!Tree.<Array.<!Transaction>>}\n   * @private\n   */\n  this.transactionQueueTree_ = new Tree<Transaction[]>();\n};\n\ndeclare module './Repo' {\n  interface Repo {\n    startTransaction(\n      path: Path,\n      transactionUpdate: (a: unknown) => void,\n      onComplete: ((a: Error, b: boolean, c: DataSnapshot) => void) | null,\n      applyLocally: boolean\n    ): void;\n  }\n}\n\n/**\n * Creates a new transaction, adds it to the transactions we're tracking, and sends it to the server if possible.\n *\n * @param {!Path} path Path at which to do transaction.\n * @param {function(*):*} transactionUpdate Update callback.\n * @param {?function(?Error, boolean, ?DataSnapshot)} onComplete Completion callback.\n * @param {boolean} applyLocally Whether or not to make intermediate results visible\n */\nRepo.prototype.startTransaction = function (\n  path: Path,\n  transactionUpdate: (a: unknown) => unknown,\n  onComplete: ((a: Error, b: boolean, c: DataSnapshot) => void) | null,\n  applyLocally: boolean\n) {\n  this.log_('transaction on ' + path);\n\n  // Add a watch to make sure we get server updates.\n  const valueCallback = function () {};\n  const watchRef = new Reference(this, path);\n  watchRef.on('value', valueCallback);\n  const unwatcher = function () {\n    watchRef.off('value', valueCallback);\n  };\n\n  // Initialize transaction.\n  const transaction: Transaction = {\n    path,\n    update: transactionUpdate,\n    onComplete,\n\n    // One of TransactionStatus enums.\n    status: null,\n\n    // Used when combining transactions at different locations to figure out which one goes first.\n    order: LUIDGenerator(),\n\n    // Whether to raise local events for this transaction.\n    applyLocally,\n\n    // Count of how many times we've retried the transaction.\n    retryCount: 0,\n\n    // Function to call to clean up our .on() listener.\n    unwatcher,\n\n    // Stores why a transaction was aborted.\n    abortReason: null,\n\n    currentWriteId: null,\n\n    currentInputSnapshot: null,\n\n    currentOutputSnapshotRaw: null,\n\n    currentOutputSnapshotResolved: null\n  };\n\n  // Run transaction initially.\n  const currentState = this.getLatestState_(path);\n  transaction.currentInputSnapshot = currentState;\n  const newVal = transaction.update(currentState.val());\n  if (newVal === undefined) {\n    // Abort transaction.\n    transaction.unwatcher();\n    transaction.currentOutputSnapshotRaw = null;\n    transaction.currentOutputSnapshotResolved = null;\n    if (transaction.onComplete) {\n      // We just set the input snapshot, so this cast should be safe\n      const snapshot = new DataSnapshot(\n        transaction.currentInputSnapshot,\n        new Reference(this, transaction.path),\n        PRIORITY_INDEX\n      );\n      transaction.onComplete(null, false, snapshot);\n    }\n  } else {\n    validateFirebaseData(\n      'transaction failed: Data returned ',\n      newVal,\n      transaction.path\n    );\n\n    // Mark as run and add to our queue.\n    transaction.status = TransactionStatus.RUN;\n    const queueNode = this.transactionQueueTree_.subTree(path);\n    const nodeQueue = queueNode.getValue() || [];\n    nodeQueue.push(transaction);\n\n    queueNode.setValue(nodeQueue);\n\n    // Update visibleData and raise events\n    // Note: We intentionally raise events after updating all of our transaction state, since the user could\n    // start new transactions from the event callbacks.\n    let priorityForNode;\n    if (\n      typeof newVal === 'object' &&\n      newVal !== null &&\n      contains(newVal, '.priority')\n    ) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      priorityForNode = safeGet(newVal as any, '.priority');\n      assert(\n        isValidPriority(priorityForNode),\n        'Invalid priority returned by transaction. ' +\n          'Priority must be a valid string, finite number, server value, or null.'\n      );\n    } else {\n      const currentNode =\n        this.serverSyncTree_.calcCompleteEventCache(path) ||\n        ChildrenNode.EMPTY_NODE;\n      priorityForNode = currentNode.getPriority().val();\n    }\n    priorityForNode /** @type {null|number|string} */ = priorityForNode;\n\n    const serverValues = this.generateServerValues();\n    const newNodeUnresolved = nodeFromJSON(newVal, priorityForNode);\n    const newNode = resolveDeferredValueSnapshot(\n      newNodeUnresolved,\n      currentState,\n      serverValues\n    );\n    transaction.currentOutputSnapshotRaw = newNodeUnresolved;\n    transaction.currentOutputSnapshotResolved = newNode;\n    transaction.currentWriteId = this.getNextWriteId_();\n\n    const events = this.serverSyncTree_.applyUserOverwrite(\n      path,\n      newNode,\n      transaction.currentWriteId,\n      transaction.applyLocally\n    );\n    this.eventQueue_.raiseEventsForChangedPath(path, events);\n\n    this.sendReadyTransactions_();\n  }\n};\n\n/**\n * @param {!Path} path\n * @param {Array.<number>=} excludeSets A specific set to exclude\n * @return {Node}\n * @private\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(Repo.prototype as any).getLatestState_ = function (\n  path: Path,\n  excludeSets?: number[]\n): Node {\n  return (\n    this.serverSyncTree_.calcCompleteEventCache(path, excludeSets) ||\n    ChildrenNode.EMPTY_NODE\n  );\n};\n\n/**\n * Sends any already-run transactions that aren't waiting for outstanding transactions to\n * complete.\n *\n * Externally it's called with no arguments, but it calls itself recursively with a particular\n * transactionQueueTree node to recurse through the tree.\n *\n * @param {Tree.<Array.<Transaction>>=} node  transactionQueueTree node to start at.\n * @private\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(Repo.prototype as any).sendReadyTransactions_ = function (\n  node: Tree<Transaction[]> = this.transactionQueueTree_\n) {\n  // Before recursing, make sure any completed transactions are removed.\n  if (!node) {\n    this.pruneCompletedTransactionsBelowNode_(node);\n  }\n\n  if (node.getValue() !== null) {\n    const queue = this.buildTransactionQueue_(node);\n    assert(queue.length > 0, 'Sending zero length transaction queue');\n\n    const allRun = queue.every(\n      (transaction: Transaction) => transaction.status === TransactionStatus.RUN\n    );\n\n    // If they're all run (and not sent), we can send them.  Else, we must wait.\n    if (allRun) {\n      this.sendTransactionQueue_(node.path(), queue);\n    }\n  } else if (node.hasChildren()) {\n    node.forEachChild(childNode => {\n      this.sendReadyTransactions_(childNode);\n    });\n  }\n};\n\n/**\n * Given a list of run transactions, send them to the server and then handle the result (success or failure).\n *\n * @param {!Path} path The location of the queue.\n * @param {!Array.<Transaction>} queue Queue of transactions under the specified location.\n * @private\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(Repo.prototype as any).sendTransactionQueue_ = function (\n  path: Path,\n  queue: Transaction[]\n) {\n  // Mark transactions as sent and increment retry count!\n  const setsToIgnore = queue.map(txn => {\n    return txn.currentWriteId;\n  });\n  const latestState = this.getLatestState_(path, setsToIgnore);\n  let snapToSend = latestState;\n  const latestHash = latestState.hash();\n  for (let i = 0; i < queue.length; i++) {\n    const txn = queue[i];\n    assert(\n      txn.status === TransactionStatus.RUN,\n      'tryToSendTransactionQueue_: items in queue should all be run.'\n    );\n    txn.status = TransactionStatus.SENT;\n    txn.retryCount++;\n    const relativePath = Path.relativePath(path, txn.path);\n    // If we've gotten to this point, the output snapshot must be defined.\n    snapToSend = snapToSend.updateChild(\n      relativePath /** @type {!Node} */,\n      txn.currentOutputSnapshotRaw\n    );\n  }\n\n  const dataToSend = snapToSend.val(true);\n  const pathToSend = path;\n\n  // Send the put.\n  this.server_.put(\n    pathToSend.toString(),\n    dataToSend,\n    (status: string) => {\n      this.log_('transaction put response', {\n        path: pathToSend.toString(),\n        status\n      });\n\n      let events: Event[] = [];\n      if (status === 'ok') {\n        // Queue up the callbacks and fire them after cleaning up all of our transaction state, since\n        // the callback could trigger more transactions or sets.\n        const callbacks = [];\n        for (let i = 0; i < queue.length; i++) {\n          queue[i].status = TransactionStatus.COMPLETED;\n          events = events.concat(\n            this.serverSyncTree_.ackUserWrite(queue[i].currentWriteId)\n          );\n          if (queue[i].onComplete) {\n            // We never unset the output snapshot, and given that this transaction is complete, it should be set\n            const node = queue[i].currentOutputSnapshotResolved as Node;\n            const ref = new Reference(this, queue[i].path);\n            const snapshot = new DataSnapshot(node, ref, PRIORITY_INDEX);\n            callbacks.push(\n              queue[i].onComplete.bind(null, null, true, snapshot)\n            );\n          }\n          queue[i].unwatcher();\n        }\n\n        // Now remove the completed transactions.\n        this.pruneCompletedTransactionsBelowNode_(\n          this.transactionQueueTree_.subTree(path)\n        );\n        // There may be pending transactions that we can now send.\n        this.sendReadyTransactions_();\n\n        this.eventQueue_.raiseEventsForChangedPath(path, events);\n\n        // Finally, trigger onComplete callbacks.\n        for (let i = 0; i < callbacks.length; i++) {\n          exceptionGuard(callbacks[i]);\n        }\n      } else {\n        // transactions are no longer sent.  Update their status appropriately.\n        if (status === 'datastale') {\n          for (let i = 0; i < queue.length; i++) {\n            if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT) {\n              queue[i].status = TransactionStatus.NEEDS_ABORT;\n            } else {\n              queue[i].status = TransactionStatus.RUN;\n            }\n          }\n        } else {\n          warn(\n            'transaction at ' + pathToSend.toString() + ' failed: ' + status\n          );\n          for (let i = 0; i < queue.length; i++) {\n            queue[i].status = TransactionStatus.NEEDS_ABORT;\n            queue[i].abortReason = status;\n          }\n        }\n\n        this.rerunTransactions_(path);\n      }\n    },\n    latestHash\n  );\n};\n\n/**\n * Finds all transactions dependent on the data at changedPath and reruns them.\n *\n * Should be called any time cached data changes.\n *\n * Return the highest path that was affected by rerunning transactions.  This is the path at which events need to\n * be raised for.\n *\n * @param {!Path} changedPath The path in mergedData that changed.\n * @return {!Path} The rootmost path that was affected by rerunning transactions.\n * @private\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(Repo.prototype as any).rerunTransactions_ = function (\n  changedPath: Path\n): Path {\n  const rootMostTransactionNode = this.getAncestorTransactionNode_(changedPath);\n  const path = rootMostTransactionNode.path();\n\n  const queue = this.buildTransactionQueue_(rootMostTransactionNode);\n  this.rerunTransactionQueue_(queue, path);\n\n  return path;\n};\n\n/**\n * Does all the work of rerunning transactions (as well as cleans up aborted transactions and whatnot).\n *\n * @param {Array.<Transaction>} queue The queue of transactions to run.\n * @param {!Path} path The path the queue is for.\n * @private\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(Repo.prototype as any).rerunTransactionQueue_ = function (\n  queue: Transaction[],\n  path: Path\n) {\n  if (queue.length === 0) {\n    return; // Nothing to do!\n  }\n\n  // Queue up the callbacks and fire them after cleaning up all of our transaction state, since\n  // the callback could trigger more transactions or sets.\n  const callbacks = [];\n  let events: Event[] = [];\n  // Ignore all of the sets we're going to re-run.\n  const txnsToRerun = queue.filter(q => {\n    return q.status === TransactionStatus.RUN;\n  });\n  const setsToIgnore = txnsToRerun.map(q => {\n    return q.currentWriteId;\n  });\n  for (let i = 0; i < queue.length; i++) {\n    const transaction = queue[i];\n    const relativePath = Path.relativePath(path, transaction.path);\n    let abortTransaction = false,\n      abortReason;\n    assert(\n      relativePath !== null,\n      'rerunTransactionsUnderNode_: relativePath should not be null.'\n    );\n\n    if (transaction.status === TransactionStatus.NEEDS_ABORT) {\n      abortTransaction = true;\n      abortReason = transaction.abortReason;\n      events = events.concat(\n        this.serverSyncTree_.ackUserWrite(transaction.currentWriteId, true)\n      );\n    } else if (transaction.status === TransactionStatus.RUN) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      if (transaction.retryCount >= (Repo as any).MAX_TRANSACTION_RETRIES_) {\n        abortTransaction = true;\n        abortReason = 'maxretry';\n        events = events.concat(\n          this.serverSyncTree_.ackUserWrite(transaction.currentWriteId, true)\n        );\n      } else {\n        // This code reruns a transaction\n        const currentNode = this.getLatestState_(\n          transaction.path,\n          setsToIgnore\n        );\n        transaction.currentInputSnapshot = currentNode;\n        const newData = queue[i].update(currentNode.val());\n        if (newData !== undefined) {\n          validateFirebaseData(\n            'transaction failed: Data returned ',\n            newData,\n            transaction.path\n          );\n          let newDataNode = nodeFromJSON(newData);\n          const hasExplicitPriority =\n            typeof newData === 'object' &&\n            newData != null &&\n            contains(newData, '.priority');\n          if (!hasExplicitPriority) {\n            // Keep the old priority if there wasn't a priority explicitly specified.\n            newDataNode = newDataNode.updatePriority(currentNode.getPriority());\n          }\n\n          const oldWriteId = transaction.currentWriteId;\n          const serverValues = this.generateServerValues();\n          const newNodeResolved = resolveDeferredValueSnapshot(\n            newDataNode,\n            currentNode,\n            serverValues\n          );\n\n          transaction.currentOutputSnapshotRaw = newDataNode;\n          transaction.currentOutputSnapshotResolved = newNodeResolved;\n          transaction.currentWriteId = this.getNextWriteId_();\n          // Mutates setsToIgnore in place\n          setsToIgnore.splice(setsToIgnore.indexOf(oldWriteId), 1);\n          events = events.concat(\n            this.serverSyncTree_.applyUserOverwrite(\n              transaction.path,\n              newNodeResolved,\n              transaction.currentWriteId,\n              transaction.applyLocally\n            )\n          );\n          events = events.concat(\n            this.serverSyncTree_.ackUserWrite(oldWriteId, true)\n          );\n        } else {\n          abortTransaction = true;\n          abortReason = 'nodata';\n          events = events.concat(\n            this.serverSyncTree_.ackUserWrite(transaction.currentWriteId, true)\n          );\n        }\n      }\n    }\n    this.eventQueue_.raiseEventsForChangedPath(path, events);\n    events = [];\n    if (abortTransaction) {\n      // Abort.\n      queue[i].status = TransactionStatus.COMPLETED;\n\n      // Removing a listener can trigger pruning which can muck with mergedData/visibleData (as it prunes data).\n      // So defer the unwatcher until we're done.\n      (function (unwatcher) {\n        setTimeout(unwatcher, Math.floor(0));\n      })(queue[i].unwatcher);\n\n      if (queue[i].onComplete) {\n        if (abortReason === 'nodata') {\n          const ref = new Reference(this, queue[i].path);\n          // We set this field immediately, so it's safe to cast to an actual snapshot\n          const lastInput /** @type {!Node} */ = queue[i].currentInputSnapshot;\n          const snapshot = new DataSnapshot(lastInput, ref, PRIORITY_INDEX);\n          callbacks.push(queue[i].onComplete.bind(null, null, false, snapshot));\n        } else {\n          callbacks.push(\n            queue[i].onComplete.bind(null, new Error(abortReason), false, null)\n          );\n        }\n      }\n    }\n  }\n\n  // Clean up completed transactions.\n  this.pruneCompletedTransactionsBelowNode_(this.transactionQueueTree_);\n\n  // Now fire callbacks, now that we're in a good, known state.\n  for (let i = 0; i < callbacks.length; i++) {\n    exceptionGuard(callbacks[i]);\n  }\n\n  // Try to send the transaction result to the server.\n  this.sendReadyTransactions_();\n};\n\n/**\n * Returns the rootmost ancestor node of the specified path that has a pending transaction on it, or just returns\n * the node for the given path if there are no pending transactions on any ancestor.\n *\n * @param {!Path} path The location to start at.\n * @return {!Tree.<Array.<!Transaction>>} The rootmost node with a transaction.\n * @private\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(Repo.prototype as any).getAncestorTransactionNode_ = function (\n  path: Path\n): Tree<Transaction[]> {\n  let front;\n\n  // Start at the root and walk deeper into the tree towards path until we find a node with pending transactions.\n  let transactionNode = this.transactionQueueTree_;\n  front = path.getFront();\n  while (front !== null && transactionNode.getValue() === null) {\n    transactionNode = transactionNode.subTree(front);\n    path = path.popFront();\n    front = path.getFront();\n  }\n\n  return transactionNode;\n};\n\n/**\n * Builds the queue of all transactions at or below the specified transactionNode.\n *\n * @param {!Tree.<Array.<Transaction>>} transactionNode\n * @return {Array.<Transaction>} The generated queue.\n * @private\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(Repo.prototype as any).buildTransactionQueue_ = function (\n  transactionNode: Tree<Transaction[]>\n): Transaction[] {\n  // Walk any child transaction queues and aggregate them into a single queue.\n  const transactionQueue: Transaction[] = [];\n  this.aggregateTransactionQueuesForNode_(transactionNode, transactionQueue);\n\n  // Sort them by the order the transactions were created.\n  transactionQueue.sort((a, b) => {\n    return a.order - b.order;\n  });\n\n  return transactionQueue;\n};\n\n/**\n * @param {!Tree.<Array.<Transaction>>} node\n * @param {Array.<Transaction>} queue\n * @private\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(Repo.prototype as any).aggregateTransactionQueuesForNode_ = function (\n  node: Tree<Transaction[]>,\n  queue: Transaction[]\n) {\n  const nodeQueue = node.getValue();\n  if (nodeQueue !== null) {\n    for (let i = 0; i < nodeQueue.length; i++) {\n      queue.push(nodeQueue[i]);\n    }\n  }\n\n  node.forEachChild(child => {\n    this.aggregateTransactionQueuesForNode_(child, queue);\n  });\n};\n\n/**\n * Remove COMPLETED transactions at or below this node in the transactionQueueTree_.\n *\n * @param {!Tree.<Array.<!Transaction>>} node\n * @private\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(Repo.prototype as any).pruneCompletedTransactionsBelowNode_ = function (\n  node: Tree<Transaction[]>\n) {\n  const queue = node.getValue();\n  if (queue) {\n    let to = 0;\n    for (let from = 0; from < queue.length; from++) {\n      if (queue[from].status !== TransactionStatus.COMPLETED) {\n        queue[to] = queue[from];\n        to++;\n      }\n    }\n    queue.length = to;\n    node.setValue(queue.length > 0 ? queue : null);\n  }\n\n  node.forEachChild(childNode => {\n    this.pruneCompletedTransactionsBelowNode_(childNode);\n  });\n};\n\n/**\n * Aborts all transactions on ancestors or descendants of the specified path.  Called when doing a set() or update()\n * since we consider them incompatible with transactions.\n *\n * @param {!Path} path Path for which we want to abort related transactions.\n * @return {!Path}\n * @private\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(Repo.prototype as any).abortTransactions_ = function (path: Path): Path {\n  const affectedPath = this.getAncestorTransactionNode_(path).path();\n\n  const transactionNode = this.transactionQueueTree_.subTree(path);\n\n  transactionNode.forEachAncestor((node: Tree<Transaction[]>) => {\n    this.abortTransactionsOnNode_(node);\n  });\n\n  this.abortTransactionsOnNode_(transactionNode);\n\n  transactionNode.forEachDescendant((node: Tree<Transaction[]>) => {\n    this.abortTransactionsOnNode_(node);\n  });\n\n  return affectedPath;\n};\n\n/**\n * Abort transactions stored in this transaction queue node.\n *\n * @param {!Tree.<Array.<Transaction>>} node Node to abort transactions for.\n * @private\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(Repo.prototype as any).abortTransactionsOnNode_ = function (\n  node: Tree<Transaction[]>\n) {\n  const queue = node.getValue();\n  if (queue !== null) {\n    // Queue up the callbacks and fire them after cleaning up all of our transaction state, since\n    // the callback could trigger more transactions or sets.\n    const callbacks = [];\n\n    // Go through queue.  Any already-sent transactions must be marked for abort, while the unsent ones\n    // can be immediately aborted and removed.\n    let events: Event[] = [];\n    let lastSent = -1;\n    for (let i = 0; i < queue.length; i++) {\n      if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT) {\n        // Already marked.  No action needed.\n      } else if (queue[i].status === TransactionStatus.SENT) {\n        assert(\n          lastSent === i - 1,\n          'All SENT items should be at beginning of queue.'\n        );\n        lastSent = i;\n        // Mark transaction for abort when it comes back.\n        queue[i].status = TransactionStatus.SENT_NEEDS_ABORT;\n        queue[i].abortReason = 'set';\n      } else {\n        assert(\n          queue[i].status === TransactionStatus.RUN,\n          'Unexpected transaction status in abort'\n        );\n        // We can abort it immediately.\n        queue[i].unwatcher();\n        events = events.concat(\n          this.serverSyncTree_.ackUserWrite(queue[i].currentWriteId, true)\n        );\n        if (queue[i].onComplete) {\n          const snapshot: DataSnapshot | null = null;\n          callbacks.push(\n            queue[i].onComplete.bind(null, new Error('set'), false, snapshot)\n          );\n        }\n      }\n    }\n    if (lastSent === -1) {\n      // We're not waiting for any sent transactions.  We can clear the queue.\n      node.setValue(null);\n    } else {\n      // Remove the transactions we aborted.\n      queue.length = lastSent + 1;\n    }\n\n    // Now fire the callbacks.\n    this.eventQueue_.raiseEventsForChangedPath(node.path(), events);\n    for (let i = 0; i < callbacks.length; i++) {\n      exceptionGuard(callbacks[i]);\n    }\n  }\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseAuthTokenData } from '@firebase/app-types/private';\nimport {\n  FirebaseAuthInternal,\n  FirebaseAuthInternalName\n} from '@firebase/auth-interop-types';\nimport { Provider } from '@firebase/component';\nimport { log, warn } from './util/util';\nimport { FirebaseApp } from '@firebase/app-types';\n\nexport interface AuthTokenProvider {\n  getToken(forceRefresh: boolean): Promise<FirebaseAuthTokenData>;\n  addTokenChangeListener(listener: (token: string | null) => void): void;\n  removeTokenChangeListener(listener: (token: string | null) => void): void;\n  notifyForInvalidToken(): void;\n}\n\n/**\n * Abstraction around FirebaseApp's token fetching capabilities.\n */\nexport class FirebaseAuthTokenProvider implements AuthTokenProvider {\n  private auth_: FirebaseAuthInternal | null = null;\n  constructor(\n    private app_: FirebaseApp,\n    private authProvider_: Provider<FirebaseAuthInternalName>\n  ) {\n    this.auth_ = authProvider_.getImmediate({ optional: true });\n    if (!this.auth_) {\n      authProvider_.get().then(auth => (this.auth_ = auth));\n    }\n  }\n\n  /**\n   * @param {boolean} forceRefresh\n   * @return {!Promise<FirebaseAuthTokenData>}\n   */\n  getToken(forceRefresh: boolean): Promise<FirebaseAuthTokenData> {\n    if (!this.auth_) {\n      return Promise.resolve(null);\n    }\n\n    return this.auth_.getToken(forceRefresh).catch(error => {\n      // TODO: Need to figure out all the cases this is raised and whether\n      // this makes sense.\n      if (error && error.code === 'auth/token-not-initialized') {\n        log('Got auth/token-not-initialized error.  Treating as null token.');\n        return null;\n      } else {\n        return Promise.reject(error);\n      }\n    });\n  }\n\n  addTokenChangeListener(listener: (token: string | null) => void): void {\n    // TODO: We might want to wrap the listener and call it with no args to\n    // avoid a leaky abstraction, but that makes removing the listener harder.\n    if (this.auth_) {\n      this.auth_.addAuthTokenListener(listener);\n    } else {\n      setTimeout(() => listener(null), 0);\n      this.authProvider_\n        .get()\n        .then(auth => auth.addAuthTokenListener(listener));\n    }\n  }\n\n  removeTokenChangeListener(listener: (token: string | null) => void): void {\n    this.authProvider_\n      .get()\n      .then(auth => auth.removeAuthTokenListener(listener));\n  }\n\n  notifyForInvalidToken(): void {\n    let errorMessage =\n      'Provided authentication credentials for the app named \"' +\n      this.app_.name +\n      '\" are invalid. This usually indicates your app was not ' +\n      'initialized correctly. ';\n    if ('credential' in this.app_.options) {\n      errorMessage +=\n        'Make sure the \"credential\" property provided to initializeApp() ' +\n        'is authorized to access the specified \"databaseURL\" and is from the correct ' +\n        'project.';\n    } else if ('serviceAccount' in this.app_.options) {\n      errorMessage +=\n        'Make sure the \"serviceAccount\" property provided to initializeApp() ' +\n        'is authorized to access the specified \"databaseURL\" and is from the correct ' +\n        'project.';\n    } else {\n      errorMessage +=\n        'Make sure the \"apiKey\" and \"databaseURL\" properties provided to ' +\n        'initializeApp() match the values provided for your app at ' +\n        'https://console.firebase.google.com/.';\n    }\n    warn(errorMessage);\n  }\n}\n\n/* Auth token provider that the Admin SDK uses to connect to the Emulator. */\nexport class EmulatorAdminTokenProvider implements AuthTokenProvider {\n  private static EMULATOR_AUTH_TOKEN = 'owner';\n\n  getToken(forceRefresh: boolean): Promise<FirebaseAuthTokenData> {\n    return Promise.resolve({\n      accessToken: EmulatorAdminTokenProvider.EMULATOR_AUTH_TOKEN\n    });\n  }\n\n  addTokenChangeListener(listener: (token: string | null) => void): void {\n    // Invoke the listener immediately to match the behavior in Firebase Auth\n    // (see packages/auth/src/auth.js#L1807)\n    listener(EmulatorAdminTokenProvider.EMULATOR_AUTH_TOKEN);\n  }\n\n  removeTokenChangeListener(listener: (token: string | null) => void): void {}\n\n  notifyForInvalidToken(): void {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app-types';\nimport { safeGet, CONSTANTS } from '@firebase/util';\nimport { Repo } from './Repo';\nimport { fatal, log } from './util/util';\nimport { parseRepoInfo } from './util/libs/parser';\nimport { validateUrl } from './util/validation';\nimport './Repo_transaction';\nimport { Database } from '../api/Database';\nimport { RepoInfo } from './RepoInfo';\nimport { FirebaseAuthInternalName } from '@firebase/auth-interop-types';\nimport { Provider } from '@firebase/component';\nimport {\n  AuthTokenProvider,\n  EmulatorAdminTokenProvider,\n  FirebaseAuthTokenProvider\n} from './AuthTokenProvider';\n\n/**\n * This variable is also defined in the firebase node.js admin SDK. Before\n * modifying this definition, consult the definition in:\n *\n * https://github.com/firebase/firebase-admin-node\n *\n * and make sure the two are consistent.\n */\nconst FIREBASE_DATABASE_EMULATOR_HOST_VAR = 'FIREBASE_DATABASE_EMULATOR_HOST';\n\nlet _staticInstance: RepoManager;\n\n/**\n * Creates and caches Repo instances.\n */\nexport class RepoManager {\n  /**\n   * @private {!Object.<string, Object<string, !fb.core.Repo>>}\n   */\n  private repos_: {\n    [appName: string]: {\n      [dbUrl: string]: Repo;\n    };\n  } = {};\n\n  /**\n   * If true, new Repos will be created to use ReadonlyRestClient (for testing purposes).\n   * @private {boolean}\n   */\n  private useRestClient_: boolean = false;\n\n  static getInstance(): RepoManager {\n    if (!_staticInstance) {\n      _staticInstance = new RepoManager();\n    }\n    return _staticInstance;\n  }\n\n  // TODO(koss): Remove these functions unless used in tests?\n  interrupt() {\n    for (const appName of Object.keys(this.repos_)) {\n      for (const dbUrl of Object.keys(this.repos_[appName])) {\n        this.repos_[appName][dbUrl].interrupt();\n      }\n    }\n  }\n\n  resume() {\n    for (const appName of Object.keys(this.repos_)) {\n      for (const dbUrl of Object.keys(this.repos_[appName])) {\n        this.repos_[appName][dbUrl].resume();\n      }\n    }\n  }\n\n  /**\n   * This function should only ever be called to CREATE a new database instance.\n   *\n   * @param {!FirebaseApp} app\n   * @return {!Database}\n   */\n  databaseFromApp(\n    app: FirebaseApp,\n    authProvider: Provider<FirebaseAuthInternalName>,\n    url?: string,\n    nodeAdmin?: boolean\n  ): Database {\n    let dbUrl: string | undefined = url || app.options.databaseURL;\n    if (dbUrl === undefined) {\n      if (!app.options.projectId) {\n        fatal(\n          \"Can't determine Firebase Database URL. Be sure to include \" +\n            ' a Project ID when calling firebase.initializeApp().'\n        );\n      }\n\n      log('Using default host for project ', app.options.projectId);\n      dbUrl = `${app.options.projectId}-default-rtdb.firebaseio.com`;\n    }\n\n    let parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\n    let repoInfo = parsedUrl.repoInfo;\n\n    let isEmulator: boolean;\n\n    let dbEmulatorHost: string | undefined = undefined;\n    if (typeof process !== 'undefined') {\n      dbEmulatorHost = process.env[FIREBASE_DATABASE_EMULATOR_HOST_VAR];\n    }\n\n    if (dbEmulatorHost) {\n      isEmulator = true;\n      dbUrl = `http://${dbEmulatorHost}?ns=${repoInfo.namespace}`;\n      parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\n      repoInfo = parsedUrl.repoInfo;\n    } else {\n      isEmulator = !parsedUrl.repoInfo.secure;\n    }\n\n    const authTokenProvider =\n      nodeAdmin && isEmulator\n        ? new EmulatorAdminTokenProvider()\n        : new FirebaseAuthTokenProvider(app, authProvider);\n\n    validateUrl('Invalid Firebase Database URL', 1, parsedUrl);\n    if (!parsedUrl.path.isEmpty()) {\n      fatal(\n        'Database URL must point to the root of a Firebase Database ' +\n          '(not including a child path).'\n      );\n    }\n\n    const repo = this.createRepo(repoInfo, app, authTokenProvider);\n\n    return repo.database;\n  }\n\n  /**\n   * Remove the repo and make sure it is disconnected.\n   *\n   * @param {!Repo} repo\n   */\n  deleteRepo(repo: Repo) {\n    const appRepos = safeGet(this.repos_, repo.app.name);\n    // This should never happen...\n    if (!appRepos || safeGet(appRepos, repo.repoInfo_.toURLString()) !== repo) {\n      fatal(\n        `Database ${repo.app.name}(${repo.repoInfo_}) has already been deleted.`\n      );\n    }\n    repo.interrupt();\n    delete appRepos[repo.repoInfo_.toURLString()];\n  }\n\n  /**\n   * Ensures a repo doesn't already exist and then creates one using the\n   * provided app.\n   *\n   * @param {!RepoInfo} repoInfo The metadata about the Repo\n   * @param {!FirebaseApp} app\n   * @return {!Repo} The Repo object for the specified server / repoName.\n   */\n  createRepo(\n    repoInfo: RepoInfo,\n    app: FirebaseApp,\n    authTokenProvider: AuthTokenProvider\n  ): Repo {\n    let appRepos = safeGet(this.repos_, app.name);\n\n    if (!appRepos) {\n      appRepos = {};\n      this.repos_[app.name] = appRepos;\n    }\n\n    let repo = safeGet(appRepos, repoInfo.toURLString());\n    if (repo) {\n      fatal(\n        'Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.'\n      );\n    }\n    repo = new Repo(repoInfo, this.useRestClient_, app, authTokenProvider);\n    appRepos[repoInfo.toURLString()] = repo;\n\n    return repo;\n  }\n\n  /**\n   * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.\n   * @param {boolean} forceRestClient\n   */\n  forceRestClient(forceRestClient: boolean) {\n    this.useRestClient_ = forceRestClient;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { fatal } from '../core/util/util';\nimport { parseRepoInfo } from '../core/util/libs/parser';\nimport { Path } from '../core/util/Path';\nimport { Reference } from './Reference';\nimport { Repo } from '../core/Repo';\nimport { RepoManager } from '../core/RepoManager';\nimport { validateArgCount } from '@firebase/util';\nimport { validateUrl } from '../core/util/validation';\nimport { FirebaseApp } from '@firebase/app-types';\nimport { FirebaseService } from '@firebase/app-types/private';\nimport { RepoInfo } from '../core/RepoInfo';\nimport { FirebaseDatabase } from '@firebase/database-types';\n\n/**\n * Class representing a firebase database.\n * @implements {FirebaseService}\n */\nexport class Database implements FirebaseService {\n  INTERNAL: DatabaseInternals;\n  private root_: Reference;\n\n  static readonly ServerValue = {\n    TIMESTAMP: {\n      '.sv': 'timestamp'\n    },\n    increment: (delta: number) => {\n      return {\n        '.sv': {\n          'increment': delta\n        }\n      };\n    }\n  };\n\n  /**\n   * The constructor should not be called by users of our public API.\n   * @param {!Repo} repo_\n   */\n  constructor(private repo_: Repo) {\n    if (!(repo_ instanceof Repo)) {\n      fatal(\n        \"Don't call new Database() directly - please use firebase.database().\"\n      );\n    }\n\n    /** @type {Reference} */\n    this.root_ = new Reference(repo_, Path.Empty);\n\n    this.INTERNAL = new DatabaseInternals(this);\n  }\n\n  get app(): FirebaseApp {\n    return this.repo_.app;\n  }\n\n  /**\n   * Returns a reference to the root or to the path specified in the provided\n   * argument.\n   *\n   * @param {string|Reference=} path The relative string path or an existing\n   * Reference to a database location.\n   * @throws If a Reference is provided, throws if it does not belong to the\n   * same project.\n   * @return {!Reference} Firebase reference.\n   */\n  ref(path?: string): Reference;\n  ref(path?: Reference): Reference;\n  ref(path?: string | Reference): Reference {\n    this.checkDeleted_('ref');\n    validateArgCount('database.ref', 0, 1, arguments.length);\n\n    if (path instanceof Reference) {\n      return this.refFromURL(path.toString());\n    }\n\n    return path !== undefined ? this.root_.child(path) : this.root_;\n  }\n\n  /**\n   * Returns a reference to the root or the path specified in url.\n   * We throw a exception if the url is not in the same domain as the\n   * current repo.\n   * @param {string} url\n   * @return {!Reference} Firebase reference.\n   */\n  refFromURL(url: string): Reference {\n    /** @const {string} */\n    const apiName = 'database.refFromURL';\n    this.checkDeleted_(apiName);\n    validateArgCount(apiName, 1, 1, arguments.length);\n    const parsedURL = parseRepoInfo(url, this.repo_.repoInfo_.nodeAdmin);\n    validateUrl(apiName, 1, parsedURL);\n\n    const repoInfo = parsedURL.repoInfo;\n    if (repoInfo.host !== this.repo_.repoInfo_.host) {\n      fatal(\n        apiName +\n          ': Host name does not match the current database: ' +\n          '(found ' +\n          repoInfo.host +\n          ' but expected ' +\n          (this.repo_.repoInfo_ as RepoInfo).host +\n          ')'\n      );\n    }\n\n    return this.ref(parsedURL.path.toString());\n  }\n\n  /**\n   * @param {string} apiName\n   */\n  private checkDeleted_(apiName: string) {\n    if (this.repo_ === null) {\n      fatal('Cannot call ' + apiName + ' on a deleted database.');\n    }\n  }\n\n  // Make individual repo go offline.\n  goOffline() {\n    validateArgCount('database.goOffline', 0, 0, arguments.length);\n    this.checkDeleted_('goOffline');\n    this.repo_.interrupt();\n  }\n\n  goOnline() {\n    validateArgCount('database.goOnline', 0, 0, arguments.length);\n    this.checkDeleted_('goOnline');\n    this.repo_.resume();\n  }\n}\n\nexport class DatabaseInternals {\n  /** @param {!Database} database */\n  constructor(public database: Database) {}\n\n  /** @return {Promise<void>} */\n  async delete(): Promise<void> {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (this.database as any).checkDeleted_('delete');\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    RepoManager.getInstance().deleteRepo((this.database as any).repo_ as Repo);\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (this.database as any).repo_ = null;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (this.database as any).root_ = null;\n    this.database.INTERNAL = null;\n    this.database = null;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { WebSocketConnection } from '../realtime/WebSocketConnection';\nimport { BrowserPollConnection } from '../realtime/BrowserPollConnection';\nimport { Reference } from './Reference';\n\n/**\n * INTERNAL methods for internal-use only (tests, etc.).\n *\n * Customers shouldn't use these or else should be aware that they could break at any time.\n *\n * @const\n */\n\nexport const forceLongPolling = function () {\n  WebSocketConnection.forceDisallow();\n  BrowserPollConnection.forceAllow();\n};\n\nexport const forceWebSockets = function () {\n  BrowserPollConnection.forceDisallow();\n};\n\n/* Used by App Manager */\nexport const isWebSocketsAvailable = function (): boolean {\n  return WebSocketConnection['isAvailable']();\n};\n\nexport const setSecurityDebugCallback = function (\n  ref: Reference,\n  callback: (a: object) => void\n) {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  (ref.repo.persistentConnection_ as any).securityDebugCallback_ = callback;\n};\n\nexport const stats = function (ref: Reference, showDelta?: boolean) {\n  ref.repo.stats(showDelta);\n};\n\nexport const statsIncrementCounter = function (ref: Reference, metric: string) {\n  ref.repo.statsIncrementCounter(metric);\n};\n\nexport const dataUpdateCount = function (ref: Reference): number {\n  return ref.repo.dataUpdateCount;\n};\n\nexport const interceptServerData = function (\n  ref: Reference,\n  callback: ((a: string, b: unknown) => void) | null\n) {\n  return ref.repo.interceptServerData_(callback);\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../core/RepoInfo';\nimport { PersistentConnection } from '../core/PersistentConnection';\nimport { RepoManager } from '../core/RepoManager';\nimport { Connection } from '../realtime/Connection';\nimport { Query } from './Query';\n\nexport const DataConnection = PersistentConnection;\n\n/**\n * @param {!string} pathString\n * @param {function(*)} onComplete\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(PersistentConnection.prototype as any).simpleListen = function (\n  pathString: string,\n  onComplete: (a: unknown) => void\n) {\n  this.sendRequest('q', { p: pathString }, onComplete);\n};\n\n/**\n * @param {*} data\n * @param {function(*)} onEcho\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(PersistentConnection.prototype as any).echo = function (\n  data: unknown,\n  onEcho: (a: unknown) => void\n) {\n  this.sendRequest('echo', { d: data }, onEcho);\n};\n\n// RealTimeConnection properties that we use in tests.\nexport const RealTimeConnection = Connection;\n\n/**\n * @param {function(): string} newHash\n * @return {function()}\n */\nexport const hijackHash = function (newHash: () => string) {\n  const oldPut = PersistentConnection.prototype.put;\n  PersistentConnection.prototype.put = function (\n    pathString,\n    data,\n    onComplete,\n    hash\n  ) {\n    if (hash !== undefined) {\n      hash = newHash();\n    }\n    oldPut.call(this, pathString, data, onComplete, hash);\n  };\n  return function () {\n    PersistentConnection.prototype.put = oldPut;\n  };\n};\n\n/**\n * @type {function(new:RepoInfo, !string, boolean, !string, boolean): undefined}\n */\nexport const ConnectionTarget = RepoInfo;\n\n/**\n * @param {!Query} query\n * @return {!string}\n */\nexport const queryIdentifier = function (query: Query) {\n  return query.queryIdentifier();\n};\n\n/**\n * Forces the RepoManager to create Repos that use ReadonlyRestClient instead of PersistentConnection.\n *\n * @param {boolean} forceRestClient\n */\nexport const forceRestClient = function (forceRestClient: boolean) {\n  RepoManager.getInstance().forceRestClient(forceRestClient);\n};\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport firebase from '@firebase/app';\nimport '@firebase/installations';\nimport { _FirebaseNamespace } from '@firebase/app-types/private';\nimport { RemoteConfig as RemoteConfigType } from '@firebase/remote-config-types';\nimport { CachingClient } from './src/client/caching_client';\nimport { RestClient } from './src/client/rest_client';\nimport { RemoteConfig } from './src/remote_config';\nimport { Storage } from './src/storage/storage';\nimport { StorageCache } from './src/storage/storage_cache';\nimport { ERROR_FACTORY, ErrorCode } from './src/errors';\nimport { RetryingClient } from './src/client/retrying_client';\nimport { Logger, LogLevel as FirebaseLogLevel } from '@firebase/logger';\nimport { name as packageName, version } from './package.json';\nimport {\n  Component,\n  ComponentType,\n  ComponentContainer\n} from '@firebase/component';\n\n// Facilitates debugging by enabling settings changes without rebuilding asset.\n// Note these debug options are not part of a documented, supported API and can change at any time.\n// Consolidates debug options for easier discovery.\n// Uses transient variables on window to avoid lingering state causing panic.\ndeclare global {\n  interface Window {\n    FIREBASE_REMOTE_CONFIG_URL_BASE: string;\n  }\n}\n\nexport function registerRemoteConfig(\n  firebaseInstance: _FirebaseNamespace\n): void {\n  firebaseInstance.INTERNAL.registerComponent(\n    new Component(\n      'remoteConfig',\n      remoteConfigFactory,\n      ComponentType.PUBLIC\n    ).setMultipleInstances(true)\n  );\n\n  firebaseInstance.registerVersion(packageName, version);\n\n  function remoteConfigFactory(\n    container: ComponentContainer,\n    namespace?: string\n  ): RemoteConfig {\n    /* Dependencies */\n    // getImmediate for FirebaseApp will always succeed\n    const app = container.getProvider('app').getImmediate();\n    // The following call will always succeed because rc has `import '@firebase/installations'`\n    const installations = container.getProvider('installations').getImmediate();\n\n    // Guards against the SDK being used in non-browser environments.\n    if (typeof window === 'undefined') {\n      throw ERROR_FACTORY.create(ErrorCode.REGISTRATION_WINDOW);\n    }\n\n    // Normalizes optional inputs.\n    const { projectId, apiKey, appId } = app.options;\n    if (!projectId) {\n      throw ERROR_FACTORY.create(ErrorCode.REGISTRATION_PROJECT_ID);\n    }\n    if (!apiKey) {\n      throw ERROR_FACTORY.create(ErrorCode.REGISTRATION_API_KEY);\n    }\n    if (!appId) {\n      throw ERROR_FACTORY.create(ErrorCode.REGISTRATION_APP_ID);\n    }\n    namespace = namespace || 'firebase';\n\n    const storage = new Storage(appId, app.name, namespace);\n    const storageCache = new StorageCache(storage);\n\n    const logger = new Logger(packageName);\n\n    // Sets ERROR as the default log level.\n    // See RemoteConfig#setLogLevel for corresponding normalization to ERROR log level.\n    logger.logLevel = FirebaseLogLevel.ERROR;\n\n    const restClient = new RestClient(\n      installations,\n      // Uses the JS SDK version, by which the RC package version can be deduced, if necessary.\n      firebaseInstance.SDK_VERSION,\n      namespace,\n      projectId,\n      apiKey,\n      appId\n    );\n    const retryingClient = new RetryingClient(restClient, storage);\n    const cachingClient = new CachingClient(\n      retryingClient,\n      storage,\n      storageCache,\n      logger\n    );\n\n    const remoteConfigInstance = new RemoteConfig(\n      app,\n      cachingClient,\n      storageCache,\n      storage,\n      logger\n    );\n\n    // Starts warming cache.\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    remoteConfigInstance.ensureInitialized();\n\n    return remoteConfigInstance;\n  }\n}\n\nregisterRemoteConfig(firebase as _FirebaseNamespace);\n\ndeclare module '@firebase/app-types' {\n  interface FirebaseNamespace {\n    remoteConfig?: {\n      (app?: FirebaseApp): RemoteConfigType;\n    };\n  }\n  interface FirebaseApp {\n    remoteConfig(): RemoteConfigType;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { HttpsError, FunctionsErrorCode } from '@firebase/functions-types';\nimport { Serializer } from '../serializer';\nimport { HttpResponseBody } from './service';\n\n/**\n * Standard error codes for different ways a request can fail, as defined by:\n * https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto\n *\n * This map is used primarily to convert from a backend error code string to\n * a client SDK error code string, and make sure it's in the supported set.\n */\nconst errorCodeMap: { [name: string]: FunctionsErrorCode } = {\n  OK: 'ok',\n  CANCELLED: 'cancelled',\n  UNKNOWN: 'unknown',\n  INVALID_ARGUMENT: 'invalid-argument',\n  DEADLINE_EXCEEDED: 'deadline-exceeded',\n  NOT_FOUND: 'not-found',\n  ALREADY_EXISTS: 'already-exists',\n  PERMISSION_DENIED: 'permission-denied',\n  UNAUTHENTICATED: 'unauthenticated',\n  RESOURCE_EXHAUSTED: 'resource-exhausted',\n  FAILED_PRECONDITION: 'failed-precondition',\n  ABORTED: 'aborted',\n  OUT_OF_RANGE: 'out-of-range',\n  UNIMPLEMENTED: 'unimplemented',\n  INTERNAL: 'internal',\n  UNAVAILABLE: 'unavailable',\n  DATA_LOSS: 'data-loss'\n};\n\n/**\n * An explicit error that can be thrown from a handler to send an error to the\n * client that called the function.\n */\nexport class HttpsErrorImpl extends Error implements HttpsError {\n  /**\n   * A standard error code that will be returned to the client. This also\n   * determines the HTTP status code of the response, as defined in code.proto.\n   */\n  readonly code: FunctionsErrorCode;\n\n  /**\n   * Extra data to be converted to JSON and included in the error response.\n   */\n  readonly details?: unknown;\n\n  constructor(code: FunctionsErrorCode, message?: string, details?: unknown) {\n    super(message);\n\n    // This is a workaround for a bug in TypeScript when extending Error:\n    // tslint:disable-next-line\n    // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n    Object.setPrototypeOf(this, HttpsErrorImpl.prototype);\n\n    this.code = code;\n    this.details = details;\n  }\n}\n\n/**\n * Takes an HTTP status code and returns the corresponding ErrorCode.\n * This is the standard HTTP status code -> error mapping defined in:\n * https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto\n *\n * @param status An HTTP status code.\n * @return The corresponding ErrorCode, or ErrorCode.UNKNOWN if none.\n */\nfunction codeForHTTPStatus(status: number): FunctionsErrorCode {\n  // Make sure any successful status is OK.\n  if (status >= 200 && status < 300) {\n    return 'ok';\n  }\n  switch (status) {\n    case 0:\n      // This can happen if the server returns 500.\n      return 'internal';\n    case 400:\n      return 'invalid-argument';\n    case 401:\n      return 'unauthenticated';\n    case 403:\n      return 'permission-denied';\n    case 404:\n      return 'not-found';\n    case 409:\n      return 'aborted';\n    case 429:\n      return 'resource-exhausted';\n    case 499:\n      return 'cancelled';\n    case 500:\n      return 'internal';\n    case 501:\n      return 'unimplemented';\n    case 503:\n      return 'unavailable';\n    case 504:\n      return 'deadline-exceeded';\n    default: // ignore\n  }\n  return 'unknown';\n}\n\n/**\n * Takes an HTTP response and returns the corresponding Error, if any.\n */\nexport function _errorForResponse(\n  status: number,\n  bodyJSON: HttpResponseBody | null,\n  serializer: Serializer\n): Error | null {\n  let code = codeForHTTPStatus(status);\n\n  // Start with reasonable defaults from the status code.\n  let description: string = code;\n\n  let details: unknown = undefined;\n\n  // Then look through the body for explicit details.\n  try {\n    const errorJSON = bodyJSON && bodyJSON.error;\n    if (errorJSON) {\n      const status = errorJSON.status;\n      if (typeof status === 'string') {\n        if (!errorCodeMap[status]) {\n          // They must've included an unknown error code in the body.\n          return new HttpsErrorImpl('internal', 'internal');\n        }\n        code = errorCodeMap[status];\n\n        // TODO(klimt): Add better default descriptions for error enums.\n        // The default description needs to be updated for the new code.\n        description = status;\n      }\n\n      const message = errorJSON.message;\n      if (typeof message === 'string') {\n        description = message;\n      }\n\n      details = errorJSON.details;\n      if (details !== undefined) {\n        details = serializer.decode(details);\n      }\n    }\n  } catch (e) {\n    // If we couldn't parse explicit error data, that's fine.\n  }\n\n  if (code === 'ok') {\n    // Technically, there's an edge case where a developer could explicitly\n    // return an error code of OK, and we will treat it as success, but that\n    // seems reasonable.\n    return null;\n  }\n\n  return new HttpsErrorImpl(code, description, details);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { _FirebaseApp } from '@firebase/app-types/private';\nimport {\n  FirebaseMessaging,\n  FirebaseMessagingName\n} from '@firebase/messaging-types';\nimport {\n  FirebaseAuthInternal,\n  FirebaseAuthInternalName\n} from '@firebase/auth-interop-types';\nimport { Provider } from '@firebase/component';\n\n/**\n * The metadata that should be supplied with function calls.\n */\nexport interface Context {\n  authToken?: string;\n  instanceIdToken?: string;\n}\n\n/**\n * Helper class to get metadata that should be included with a function call.\n */\nexport class ContextProvider {\n  private auth: FirebaseAuthInternal | null = null;\n  private messaging: FirebaseMessaging | null = null;\n  constructor(\n    authProvider: Provider<FirebaseAuthInternalName>,\n    messagingProvider: Provider<FirebaseMessagingName>\n  ) {\n    this.auth = authProvider.getImmediate({ optional: true });\n    this.messaging = messagingProvider.getImmediate({\n      optional: true\n    });\n\n    if (!this.auth) {\n      authProvider.get().then(\n        auth => (this.auth = auth),\n        () => {\n          /* get() never rejects */\n        }\n      );\n    }\n\n    if (!this.messaging) {\n      messagingProvider.get().then(\n        messaging => (this.messaging = messaging),\n        () => {\n          /* get() never rejects */\n        }\n      );\n    }\n  }\n\n  async getAuthToken(): Promise<string | undefined> {\n    if (!this.auth) {\n      return undefined;\n    }\n\n    try {\n      const token = await this.auth.getToken();\n      if (!token) {\n        return undefined;\n      }\n      return token.accessToken;\n    } catch (e) {\n      // If there's any error when trying to get the auth token, leave it off.\n      return undefined;\n    }\n  }\n\n  async getInstanceIdToken(): Promise<string | undefined> {\n    if (\n      !this.messaging ||\n      !('Notification' in self) ||\n      Notification.permission !== 'granted'\n    ) {\n      return undefined;\n    }\n\n    try {\n      return this.messaging.getToken();\n    } catch (e) {\n      // We don't warn on this, because it usually means messaging isn't set up.\n      // console.warn('Failed to retrieve instance id token.', e);\n\n      // If there's any error when trying to get the token, leave it off.\n      return undefined;\n    }\n  }\n\n  async getContext(): Promise<Context> {\n    const authToken = await this.getAuthToken();\n    const instanceIdToken = await this.getInstanceIdToken();\n    return { authToken, instanceIdToken };\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst LONG_TYPE = 'type.googleapis.com/google.protobuf.Int64Value';\nconst UNSIGNED_LONG_TYPE = 'type.googleapis.com/google.protobuf.UInt64Value';\n\nfunction mapValues(\n  // { [k: string]: unknown } is no longer a wildcard assignment target after typescript 3.5\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  o: { [key: string]: any },\n  f: (arg0: unknown) => unknown\n): object {\n  const result: { [key: string]: unknown } = {};\n  for (const key in o) {\n    if (o.hasOwnProperty(key)) {\n      result[key] = f(o[key]);\n    }\n  }\n  return result;\n}\n\nexport class Serializer {\n  // Takes data and encodes it in a JSON-friendly way, such that types such as\n  // Date are preserved.\n  encode(data: unknown): unknown {\n    if (data == null) {\n      return null;\n    }\n    if (data instanceof Number) {\n      data = data.valueOf();\n    }\n    if (typeof data === 'number' && isFinite(data)) {\n      // Any number in JS is safe to put directly in JSON and parse as a double\n      // without any loss of precision.\n      return data;\n    }\n    if (data === true || data === false) {\n      return data;\n    }\n    if (Object.prototype.toString.call(data) === '[object String]') {\n      return data;\n    }\n    if (Array.isArray(data)) {\n      return data.map(x => this.encode(x));\n    }\n    if (typeof data === 'function' || typeof data === 'object') {\n      return mapValues(data!, x => this.encode(x));\n    }\n    // If we got this far, the data is not encodable.\n    throw new Error('Data cannot be encoded in JSON: ' + data);\n  }\n\n  // Takes data that's been encoded in a JSON-friendly form and returns a form\n  // with richer datatypes, such as Dates, etc.\n  decode(json: unknown): unknown {\n    if (json == null) {\n      return json;\n    }\n    if ((json as { [key: string]: unknown })['@type']) {\n      switch ((json as { [key: string]: unknown })['@type']) {\n        case LONG_TYPE:\n        // Fall through and handle this the same as unsigned.\n        case UNSIGNED_LONG_TYPE: {\n          // Technically, this could work return a valid number for malformed\n          // data if there was a number followed by garbage. But it's just not\n          // worth all the extra code to detect that case.\n          const value = Number((json as { [key: string]: unknown })['value']);\n          if (isNaN(value)) {\n            throw new Error('Data cannot be decoded from JSON: ' + json);\n          }\n          return value;\n        }\n        default: {\n          throw new Error('Data cannot be decoded from JSON: ' + json);\n        }\n      }\n    }\n    if (Array.isArray(json)) {\n      return json.map(x => this.decode(x));\n    }\n    if (typeof json === 'function' || typeof json === 'object') {\n      return mapValues(json!, x => this.decode(x));\n    }\n    // Anything else is safe to return.\n    return json;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app-types';\nimport { FirebaseService } from '@firebase/app-types/private';\nimport {\n  FirebaseFunctions,\n  HttpsCallable,\n  HttpsCallableResult,\n  HttpsCallableOptions\n} from '@firebase/functions-types';\nimport { _errorForResponse, HttpsErrorImpl } from './error';\nimport { ContextProvider } from '../context';\nimport { Serializer } from '../serializer';\nimport { Provider } from '@firebase/component';\nimport { FirebaseAuthInternalName } from '@firebase/auth-interop-types';\nimport { FirebaseMessagingName } from '@firebase/messaging-types';\n\n/**\n * The response to an http request.\n */\ninterface HttpResponse {\n  status: number;\n  json: HttpResponseBody | null;\n}\n/**\n * Describes the shape of the HttpResponse body.\n * It makes functions that would otherwise take {} able to access the\n * possible elements in the body more easily\n */\nexport interface HttpResponseBody {\n  data?: unknown;\n  result?: unknown;\n  error?: {\n    message?: unknown;\n    status?: unknown;\n    details?: unknown;\n  };\n}\n\n/**\n * Returns a Promise that will be rejected after the given duration.\n * The error will be of type HttpsErrorImpl.\n *\n * @param millis Number of milliseconds to wait before rejecting.\n */\nfunction failAfter(\n  millis: number\n): {\n  timer: number | NodeJS.Timeout;\n  promise: Promise<never>;\n} {\n  let timer!: number | NodeJS.Timeout;\n  const promise = new Promise<never>((_, reject) => {\n    timer = setTimeout(() => {\n      reject(new HttpsErrorImpl('deadline-exceeded', 'deadline-exceeded'));\n    }, millis);\n  });\n\n  return {\n    timer,\n    promise\n  };\n}\n\n/**\n * The main class for the Firebase Functions SDK.\n */\nexport class Service implements FirebaseFunctions, FirebaseService {\n  private readonly contextProvider: ContextProvider;\n  private readonly serializer = new Serializer();\n  private emulatorOrigin: string | null = null;\n  private cancelAllRequests: Promise<void>;\n  private deleteService!: () => void;\n  private region: string;\n  private customDomain: string | null;\n\n  /**\n   * Creates a new Functions service for the given app and (optional) region or custom domain.\n   * @param app_ The FirebaseApp to use.\n   * @param regionOrCustomDomain_ one of:\n   *   a) A region to call functions from, such as us-central1\n   *   b) A custom domain to use as a functions prefix, such as https://mydomain.com\n   */\n  constructor(\n    private app_: FirebaseApp,\n    authProvider: Provider<FirebaseAuthInternalName>,\n    messagingProvider: Provider<FirebaseMessagingName>,\n    regionOrCustomDomain_: string = 'us-central1',\n    readonly fetchImpl: typeof fetch\n  ) {\n    this.contextProvider = new ContextProvider(authProvider, messagingProvider);\n    // Cancels all ongoing requests when resolved.\n    this.cancelAllRequests = new Promise(resolve => {\n      this.deleteService = () => {\n        return resolve();\n      };\n    });\n\n    // Resolve the region or custom domain overload by attempting to parse it.\n    try {\n      const url = new URL(regionOrCustomDomain_);\n      this.customDomain = url.origin;\n      this.region = 'us-central1';\n    } catch (e) {\n      this.customDomain = null;\n      this.region = regionOrCustomDomain_;\n    }\n  }\n\n  get app(): FirebaseApp {\n    return this.app_;\n  }\n\n  INTERNAL = {\n    delete: (): Promise<void> => {\n      return Promise.resolve(this.deleteService());\n    }\n  };\n\n  /**\n   * Returns the URL for a callable with the given name.\n   * @param name The name of the callable.\n   */\n  _url(name: string): string {\n    const projectId = this.app_.options.projectId;\n    if (this.emulatorOrigin !== null) {\n      const origin = this.emulatorOrigin;\n      return `${origin}/${projectId}/${this.region}/${name}`;\n    }\n\n    if (this.customDomain !== null) {\n      return `${this.customDomain}/${name}`;\n    }\n\n    return `https://${this.region}-${projectId}.cloudfunctions.net/${name}`;\n  }\n\n  /**\n   * Changes this instance to point to a Cloud Functions emulator running\n   * locally. See https://firebase.google.com/docs/functions/local-emulator\n   *\n   * @param origin The origin of the local emulator, such as\n   * \"http://localhost:5005\".\n   */\n  useFunctionsEmulator(origin: string): void {\n    this.emulatorOrigin = origin;\n  }\n\n  /**\n   * Returns a reference to the callable https trigger with the given name.\n   * @param name The name of the trigger.\n   */\n  httpsCallable(name: string, options?: HttpsCallableOptions): HttpsCallable {\n    return data => {\n      return this.call(name, data, options || {});\n    };\n  }\n\n  /**\n   * Does an HTTP POST and returns the completed response.\n   * @param url The url to post to.\n   * @param body The JSON body of the post.\n   * @param headers The HTTP headers to include in the request.\n   * @return A Promise that will succeed when the request finishes.\n   */\n  private async postJSON(\n    url: string,\n    body: {},\n    headers: { [key: string]: string }\n  ): Promise<HttpResponse> {\n    headers['Content-Type'] = 'application/json';\n\n    let response: Response;\n    try {\n      response = await this.fetchImpl(url, {\n        method: 'POST',\n        body: JSON.stringify(body),\n        headers\n      });\n    } catch (e) {\n      // This could be an unhandled error on the backend, or it could be a\n      // network error. There's no way to know, since an unhandled error on the\n      // backend will fail to set the proper CORS header, and thus will be\n      // treated as a network error by fetch.\n      return {\n        status: 0,\n        json: null\n      };\n    }\n    let json: HttpResponseBody | null = null;\n    try {\n      json = await response.json();\n    } catch (e) {\n      // If we fail to parse JSON, it will fail the same as an empty body.\n    }\n    return {\n      status: response.status,\n      json\n    };\n  }\n\n  /**\n   * Calls a callable function asynchronously and returns the result.\n   * @param name The name of the callable trigger.\n   * @param data The data to pass as params to the function.s\n   */\n  private async call(\n    name: string,\n    data: unknown,\n    options: HttpsCallableOptions\n  ): Promise<HttpsCallableResult> {\n    const url = this._url(name);\n\n    // Encode any special types, such as dates, in the input data.\n    data = this.serializer.encode(data);\n    const body = { data };\n\n    // Add a header for the authToken.\n    const headers: { [key: string]: string } = {};\n    const context = await this.contextProvider.getContext();\n    if (context.authToken) {\n      headers['Authorization'] = 'Bearer ' + context.authToken;\n    }\n    if (context.instanceIdToken) {\n      headers['Firebase-Instance-ID-Token'] = context.instanceIdToken;\n    }\n\n    // Default timeout to 70s, but let the options override it.\n    const timeout = options.timeout || 70000;\n\n    const { timer, promise: failAfterPromise } = failAfter(timeout);\n\n    const response = await Promise.race([\n      clearTimeoutWrapper(timer, this.postJSON(url, body, headers)),\n      failAfterPromise,\n      clearTimeoutWrapper(timer, this.cancelAllRequests)\n    ]);\n\n    // If service was deleted, interrupted response throws an error.\n    if (!response) {\n      throw new HttpsErrorImpl(\n        'cancelled',\n        'Firebase Functions instance was deleted.'\n      );\n    }\n\n    // Check for an error status, regardless of http status.\n    const error = _errorForResponse(\n      response.status,\n      response.json,\n      this.serializer\n    );\n    if (error) {\n      throw error;\n    }\n\n    if (!response.json) {\n      throw new HttpsErrorImpl(\n        'internal',\n        'Response is not valid JSON object.'\n      );\n    }\n\n    let responseData = response.json.data;\n    // TODO(klimt): For right now, allow \"result\" instead of \"data\", for\n    // backwards compatibility.\n    if (typeof responseData === 'undefined') {\n      responseData = response.json.result;\n    }\n    if (typeof responseData === 'undefined') {\n      // Consider the response malformed.\n      throw new HttpsErrorImpl('internal', 'Response is missing data field.');\n    }\n\n    // Decode any special types, such as dates, in the returned data.\n    const decodedData = this.serializer.decode(responseData);\n\n    return { data: decodedData };\n  }\n}\n\nasync function clearTimeoutWrapper<T>(\n  timer: number | NodeJS.Timeout,\n  promise: Promise<T>\n): Promise<T> {\n  const result = await promise;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  clearTimeout(timer as any);\n  return result;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Service } from './api/service';\nimport {\n  Component,\n  ComponentType,\n  ComponentContainer\n} from '@firebase/component';\nimport { _FirebaseNamespace } from '@firebase/app-types/private';\n\n/**\n * Type constant for Firebase Functions.\n */\nconst FUNCTIONS_TYPE = 'functions';\n\nexport function registerFunctions(\n  instance: _FirebaseNamespace,\n  fetchImpl: typeof fetch\n): void {\n  const namespaceExports = {\n    // no-inline\n    Functions: Service\n  };\n\n  function factory(\n    container: ComponentContainer,\n    regionOrCustomDomain?: string\n  ): Service {\n    // Dependencies\n    const app = container.getProvider('app').getImmediate();\n    const authProvider = container.getProvider('auth-internal');\n    const messagingProvider = container.getProvider('messaging');\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return new Service(\n      app,\n      authProvider,\n      messagingProvider,\n      regionOrCustomDomain,\n      fetchImpl\n    );\n  }\n  instance.INTERNAL.registerComponent(\n    new Component(FUNCTIONS_TYPE, factory, ComponentType.PUBLIC)\n      .setServiceProps(namespaceExports)\n      .setMultipleInstances(true)\n  );\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License\n * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n * or implied. See the License for the specific language governing permissions and limitations under\n * the License.\n */\n\nimport {\n  CONSOLE_CAMPAIGN_ANALYTICS_ENABLED,\n  CONSOLE_CAMPAIGN_ID,\n  CONSOLE_CAMPAIGN_NAME,\n  CONSOLE_CAMPAIGN_TIME\n} from '../util/constants';\n\nexport interface MessagePayloadInternal {\n  notification?: NotificationPayloadInternal;\n  data?: unknown;\n  fcmOptions?: FcmOptionsInternal;\n  messageType?: MessageType;\n  isFirebaseMessaging?: boolean;\n  from: string;\n  // eslint-disable-next-line camelcase\n  collapse_key: string;\n}\n\nexport interface NotificationPayloadInternal extends NotificationOptions {\n  title: string;\n  // Supported in the Legacy Send API.\n  // See:https://firebase.google.com/docs/cloud-messaging/xmpp-server-ref.\n  // eslint-disable-next-line camelcase\n  click_action?: string;\n}\n\n// Defined in\n// https://firebase.google.com/docs/reference/fcm/rest/v1/projects.messages#webpushfcmoptions. Note\n// that the keys are sent to the clients in snake cases which we need to convert to camel so it can\n// be exposed as a type to match the Firebase API convention.\nexport interface FcmOptionsInternal {\n  link?: string;\n\n  // eslint-disable-next-line camelcase\n  analytics_label?: string;\n}\n\nexport enum MessageType {\n  PUSH_RECEIVED = 'push-received',\n  NOTIFICATION_CLICKED = 'notification-clicked'\n}\n\n/** Additional data of a message sent from the FN Console. */\nexport interface ConsoleMessageData {\n  [CONSOLE_CAMPAIGN_ID]: string;\n  [CONSOLE_CAMPAIGN_TIME]: string;\n  [CONSOLE_CAMPAIGN_NAME]?: string;\n  [CONSOLE_CAMPAIGN_ANALYTICS_ENABLED]?: '1';\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport function arrayToBase64(array: Uint8Array | ArrayBuffer): string {\n  const uint8Array = new Uint8Array(array);\n  const base64String = btoa(String.fromCharCode(...uint8Array));\n  return base64String.replace(/=/g, '').replace(/\\+/g, '-').replace(/\\//g, '_');\n}\n\nexport function base64ToArray(base64String: string): Uint8Array {\n  const padding = '='.repeat((4 - (base64String.length % 4)) % 4);\n  const base64 = (base64String + padding)\n    .replace(/\\-/g, '+')\n    .replace(/_/g, '/');\n\n  const rawData = atob(base64);\n  const outputArray = new Uint8Array(rawData.length);\n\n  for (let i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i);\n  }\n  return outputArray;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { deleteDb, openDb } from 'idb';\n\nimport { TokenDetails } from '../interfaces/token-details';\nimport { arrayToBase64 } from './array-base64-translator';\n\n// https://github.com/firebase/firebase-js-sdk/blob/7857c212f944a2a9eb421fd4cb7370181bc034b5/packages/messaging/src/interfaces/token-details.ts\nexport interface V2TokenDetails {\n  fcmToken: string;\n  swScope: string;\n  vapidKey: string | Uint8Array;\n  subscription: PushSubscription;\n  fcmSenderId: string;\n  fcmPushSet: string;\n  createTime?: number;\n  endpoint?: string;\n  auth?: string;\n  p256dh?: string;\n}\n\n// https://github.com/firebase/firebase-js-sdk/blob/6b5b15ce4ea3df5df5df8a8b33a4e41e249c7715/packages/messaging/src/interfaces/token-details.ts\nexport interface V3TokenDetails {\n  fcmToken: string;\n  swScope: string;\n  vapidKey: Uint8Array;\n  fcmSenderId: string;\n  fcmPushSet: string;\n  endpoint: string;\n  auth: ArrayBuffer;\n  p256dh: ArrayBuffer;\n  createTime: number;\n}\n\n// https://github.com/firebase/firebase-js-sdk/blob/9567dba664732f681fa7fe60f5b7032bb1daf4c9/packages/messaging/src/interfaces/token-details.ts\nexport interface V4TokenDetails {\n  fcmToken: string;\n  swScope: string;\n  vapidKey: Uint8Array;\n  fcmSenderId: string;\n  endpoint: string;\n  auth: ArrayBufferLike;\n  p256dh: ArrayBufferLike;\n  createTime: number;\n}\n\nconst OLD_DB_NAME = 'fcm_token_details_db';\n/**\n * The last DB version of 'fcm_token_details_db' was 4. This is one higher, so that the upgrade\n * callback is called for all versions of the old DB.\n */\nconst OLD_DB_VERSION = 5;\nconst OLD_OBJECT_STORE_NAME = 'fcm_token_object_Store';\n\nexport async function migrateOldDatabase(\n  senderId: string\n): Promise<TokenDetails | null> {\n  if ('databases' in indexedDB) {\n    // indexedDb.databases() is an IndexedDB v3 API and does not exist in all browsers. TODO: Remove\n    // typecast when it lands in TS types.\n    const databases = await (indexedDB as {\n      databases(): Promise<Array<{ name: string; version: number }>>;\n    }).databases();\n    const dbNames = databases.map(db => db.name);\n\n    if (!dbNames.includes(OLD_DB_NAME)) {\n      // old DB didn't exist, no need to open.\n      return null;\n    }\n  }\n\n  let tokenDetails: TokenDetails | null = null;\n\n  const db = await openDb(OLD_DB_NAME, OLD_DB_VERSION, async db => {\n    if (db.oldVersion < 2) {\n      // Database too old, skip migration.\n      return;\n    }\n\n    if (!db.objectStoreNames.contains(OLD_OBJECT_STORE_NAME)) {\n      // Database did not exist. Nothing to do.\n      return;\n    }\n\n    const objectStore = db.transaction.objectStore(OLD_OBJECT_STORE_NAME);\n    const value = await objectStore.index('fcmSenderId').get(senderId);\n    await objectStore.clear();\n\n    if (!value) {\n      // No entry in the database, nothing to migrate.\n      return;\n    }\n\n    if (db.oldVersion === 2) {\n      const oldDetails = value as V2TokenDetails;\n\n      if (!oldDetails.auth || !oldDetails.p256dh || !oldDetails.endpoint) {\n        return;\n      }\n\n      tokenDetails = {\n        token: oldDetails.fcmToken,\n        createTime: oldDetails.createTime ?? Date.now(),\n        subscriptionOptions: {\n          auth: oldDetails.auth,\n          p256dh: oldDetails.p256dh,\n          endpoint: oldDetails.endpoint,\n          swScope: oldDetails.swScope,\n          vapidKey:\n            typeof oldDetails.vapidKey === 'string'\n              ? oldDetails.vapidKey\n              : arrayToBase64(oldDetails.vapidKey)\n        }\n      };\n    } else if (db.oldVersion === 3) {\n      const oldDetails = value as V3TokenDetails;\n\n      tokenDetails = {\n        token: oldDetails.fcmToken,\n        createTime: oldDetails.createTime,\n        subscriptionOptions: {\n          auth: arrayToBase64(oldDetails.auth),\n          p256dh: arrayToBase64(oldDetails.p256dh),\n          endpoint: oldDetails.endpoint,\n          swScope: oldDetails.swScope,\n          vapidKey: arrayToBase64(oldDetails.vapidKey)\n        }\n      };\n    } else if (db.oldVersion === 4) {\n      const oldDetails = value as V4TokenDetails;\n\n      tokenDetails = {\n        token: oldDetails.fcmToken,\n        createTime: oldDetails.createTime,\n        subscriptionOptions: {\n          auth: arrayToBase64(oldDetails.auth),\n          p256dh: arrayToBase64(oldDetails.p256dh),\n          endpoint: oldDetails.endpoint,\n          swScope: oldDetails.swScope,\n          vapidKey: arrayToBase64(oldDetails.vapidKey)\n        }\n      };\n    }\n  });\n  db.close();\n\n  // Delete all old databases.\n  await deleteDb(OLD_DB_NAME);\n  await deleteDb('fcm_vapid_details_db');\n  await deleteDb('undefined');\n\n  return checkTokenDetails(tokenDetails) ? tokenDetails : null;\n}\n\nfunction checkTokenDetails(\n  tokenDetails: TokenDetails | null\n): tokenDetails is TokenDetails {\n  if (!tokenDetails || !tokenDetails.subscriptionOptions) {\n    return false;\n  }\n  const { subscriptionOptions } = tokenDetails;\n  return (\n    typeof tokenDetails.createTime === 'number' &&\n    tokenDetails.createTime > 0 &&\n    typeof tokenDetails.token === 'string' &&\n    tokenDetails.token.length > 0 &&\n    typeof subscriptionOptions.auth === 'string' &&\n    subscriptionOptions.auth.length > 0 &&\n    typeof subscriptionOptions.p256dh === 'string' &&\n    subscriptionOptions.p256dh.length > 0 &&\n    typeof subscriptionOptions.endpoint === 'string' &&\n    subscriptionOptions.endpoint.length > 0 &&\n    typeof subscriptionOptions.swScope === 'string' &&\n    subscriptionOptions.swScope.length > 0 &&\n    typeof subscriptionOptions.vapidKey === 'string' &&\n    subscriptionOptions.vapidKey.length > 0\n  );\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DEFAULT_VAPID_KEY, ENDPOINT } from '../util/constants';\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\nimport { SubscriptionOptions, TokenDetails } from '../interfaces/token-details';\n\nimport { AppConfig } from '../interfaces/app-config';\nimport { FirebaseInternalDependencies } from '../interfaces/internal-dependencies';\n\nexport interface ApiResponse {\n  token?: string;\n  error?: { message: string };\n}\n\nexport interface ApiRequestBody {\n  web: {\n    endpoint: string;\n    p256dh: string;\n    auth: string;\n    applicationPubKey?: string;\n  };\n}\n\nexport async function requestGetToken(\n  firebaseDependencies: FirebaseInternalDependencies,\n  subscriptionOptions: SubscriptionOptions\n): Promise<string> {\n  const headers = await getHeaders(firebaseDependencies);\n  const body = getBody(subscriptionOptions);\n\n  const subscribeOptions = {\n    method: 'POST',\n    headers,\n    body: JSON.stringify(body)\n  };\n\n  let responseData: ApiResponse;\n  try {\n    const response = await fetch(\n      getEndpoint(firebaseDependencies.appConfig),\n      subscribeOptions\n    );\n    responseData = await response.json();\n  } catch (err) {\n    throw ERROR_FACTORY.create(ErrorCode.TOKEN_SUBSCRIBE_FAILED, {\n      errorInfo: err\n    });\n  }\n\n  if (responseData.error) {\n    const message = responseData.error.message;\n    throw ERROR_FACTORY.create(ErrorCode.TOKEN_SUBSCRIBE_FAILED, {\n      errorInfo: message\n    });\n  }\n\n  if (!responseData.token) {\n    throw ERROR_FACTORY.create(ErrorCode.TOKEN_SUBSCRIBE_NO_TOKEN);\n  }\n\n  return responseData.token;\n}\n\nexport async function requestUpdateToken(\n  firebaseDependencies: FirebaseInternalDependencies,\n  tokenDetails: TokenDetails\n): Promise<string> {\n  const headers = await getHeaders(firebaseDependencies);\n  const body = getBody(tokenDetails.subscriptionOptions!);\n\n  const updateOptions = {\n    method: 'PATCH',\n    headers,\n    body: JSON.stringify(body)\n  };\n\n  let responseData: ApiResponse;\n  try {\n    const response = await fetch(\n      `${getEndpoint(firebaseDependencies.appConfig)}/${tokenDetails.token}`,\n      updateOptions\n    );\n    responseData = await response.json();\n  } catch (err) {\n    throw ERROR_FACTORY.create(ErrorCode.TOKEN_UPDATE_FAILED, {\n      errorInfo: err\n    });\n  }\n\n  if (responseData.error) {\n    const message = responseData.error.message;\n    throw ERROR_FACTORY.create(ErrorCode.TOKEN_UPDATE_FAILED, {\n      errorInfo: message\n    });\n  }\n\n  if (!responseData.token) {\n    throw ERROR_FACTORY.create(ErrorCode.TOKEN_UPDATE_NO_TOKEN);\n  }\n\n  return responseData.token;\n}\n\nexport async function requestDeleteToken(\n  firebaseDependencies: FirebaseInternalDependencies,\n  token: string\n): Promise<void> {\n  const headers = await getHeaders(firebaseDependencies);\n\n  const unsubscribeOptions = {\n    method: 'DELETE',\n    headers\n  };\n\n  try {\n    const response = await fetch(\n      `${getEndpoint(firebaseDependencies.appConfig)}/${token}`,\n      unsubscribeOptions\n    );\n    const responseData: ApiResponse = await response.json();\n    if (responseData.error) {\n      const message = responseData.error.message;\n      throw ERROR_FACTORY.create(ErrorCode.TOKEN_UNSUBSCRIBE_FAILED, {\n        errorInfo: message\n      });\n    }\n  } catch (err) {\n    throw ERROR_FACTORY.create(ErrorCode.TOKEN_UNSUBSCRIBE_FAILED, {\n      errorInfo: err\n    });\n  }\n}\n\nfunction getEndpoint({ projectId }: AppConfig): string {\n  return `${ENDPOINT}/projects/${projectId!}/registrations`;\n}\n\nasync function getHeaders({\n  appConfig,\n  installations\n}: FirebaseInternalDependencies): Promise<Headers> {\n  const authToken = await installations.getToken();\n\n  return new Headers({\n    'Content-Type': 'application/json',\n    Accept: 'application/json',\n    'x-goog-api-key': appConfig.apiKey!,\n    'x-goog-firebase-installations-auth': `FIS ${authToken}`\n  });\n}\n\nfunction getBody({\n  p256dh,\n  auth,\n  endpoint,\n  vapidKey\n}: SubscriptionOptions): ApiRequestBody {\n  const body: ApiRequestBody = {\n    web: {\n      endpoint,\n      auth,\n      p256dh\n    }\n  };\n\n  if (vapidKey !== DEFAULT_VAPID_KEY) {\n    body.web.applicationPubKey = vapidKey;\n  }\n\n  return body;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\nimport { SubscriptionOptions, TokenDetails } from '../interfaces/token-details';\nimport {\n  arrayToBase64,\n  base64ToArray\n} from '../helpers/array-base64-translator';\nimport { dbGet, dbRemove, dbSet } from '../helpers/idb-manager';\nimport { requestDeleteToken, requestGetToken, requestUpdateToken } from './api';\n\nimport { FirebaseInternalDependencies } from '../interfaces/internal-dependencies';\n\n/** UpdateRegistration will be called once every week. */\nconst TOKEN_EXPIRATION_MS = 7 * 24 * 60 * 60 * 1000; // 7 days\n\nexport async function getToken(\n  firebaseDependencies: FirebaseInternalDependencies,\n  swRegistration: ServiceWorkerRegistration,\n  vapidKey: string\n): Promise<string> {\n  if (Notification.permission !== 'granted') {\n    throw ERROR_FACTORY.create(ErrorCode.PERMISSION_BLOCKED);\n  }\n\n  // If a PushSubscription exists it's returned, otherwise a new subscription is generated and\n  // returned.\n  const pushSubscription = await getPushSubscription(swRegistration, vapidKey);\n  const tokenDetails = await dbGet(firebaseDependencies);\n\n  const subscriptionOptions: SubscriptionOptions = {\n    vapidKey,\n    swScope: swRegistration.scope,\n    endpoint: pushSubscription.endpoint,\n    auth: arrayToBase64(pushSubscription.getKey('auth')!),\n    p256dh: arrayToBase64(pushSubscription.getKey('p256dh')!)\n  };\n\n  if (!tokenDetails) {\n    // No token, get a new one.\n    return getNewToken(firebaseDependencies, subscriptionOptions);\n  } else if (\n    !isTokenValid(tokenDetails.subscriptionOptions!, subscriptionOptions)\n  ) {\n    // Invalid token, get a new one.\n    try {\n      await requestDeleteToken(firebaseDependencies, tokenDetails.token);\n    } catch (e) {\n      // Suppress errors because of #2364\n      console.warn(e);\n    }\n\n    return getNewToken(firebaseDependencies, subscriptionOptions);\n  } else if (Date.now() >= tokenDetails.createTime + TOKEN_EXPIRATION_MS) {\n    // Weekly token refresh\n    return updateToken(\n      {\n        token: tokenDetails.token,\n        createTime: Date.now(),\n        subscriptionOptions\n      },\n      firebaseDependencies,\n      swRegistration\n    );\n  } else {\n    // Valid token, nothing to do.\n    return tokenDetails.token;\n  }\n}\n\n/**\n * This method deletes the token from the database, unsubscribes the token from FCM, and unregisters\n * the push subscription if it exists.\n */\nexport async function deleteToken(\n  firebaseDependencies: FirebaseInternalDependencies,\n  swRegistration: ServiceWorkerRegistration\n): Promise<boolean> {\n  const tokenDetails = await dbGet(firebaseDependencies);\n  if (tokenDetails) {\n    await requestDeleteToken(firebaseDependencies, tokenDetails.token);\n    await dbRemove(firebaseDependencies);\n  }\n\n  // Unsubscribe from the push subscription.\n  const pushSubscription = await swRegistration.pushManager.getSubscription();\n  if (pushSubscription) {\n    return pushSubscription.unsubscribe();\n  }\n\n  // If there's no SW, consider it a success.\n  return true;\n}\n\nasync function updateToken(\n  tokenDetails: TokenDetails,\n  firebaseDependencies: FirebaseInternalDependencies,\n  swRegistration: ServiceWorkerRegistration\n): Promise<string> {\n  try {\n    const updatedToken = await requestUpdateToken(\n      firebaseDependencies,\n      tokenDetails\n    );\n\n    const updatedTokenDetails: TokenDetails = {\n      ...tokenDetails,\n      token: updatedToken,\n      createTime: Date.now()\n    };\n\n    await dbSet(firebaseDependencies, updatedTokenDetails);\n    return updatedToken;\n  } catch (e) {\n    await deleteToken(firebaseDependencies, swRegistration);\n    throw e;\n  }\n}\n\nasync function getNewToken(\n  firebaseDependencies: FirebaseInternalDependencies,\n  subscriptionOptions: SubscriptionOptions\n): Promise<string> {\n  const token = await requestGetToken(\n    firebaseDependencies,\n    subscriptionOptions\n  );\n  const tokenDetails: TokenDetails = {\n    token,\n    createTime: Date.now(),\n    subscriptionOptions\n  };\n  await dbSet(firebaseDependencies, tokenDetails);\n  return tokenDetails.token;\n}\n\n/**\n * Gets a PushSubscription for the current user.\n */\nasync function getPushSubscription(\n  swRegistration: ServiceWorkerRegistration,\n  vapidKey: string\n): Promise<PushSubscription> {\n  const subscription = await swRegistration.pushManager.getSubscription();\n  if (subscription) {\n    return subscription;\n  }\n  return swRegistration.pushManager.subscribe({\n    userVisibleOnly: true,\n    // Chrome <= 75 doesn't support base64-encoded VAPID key. For backward compatibility, VAPID key\n    // submitted to pushManager#subscribe must be of type Uint8Array.\n    applicationServerKey: base64ToArray(vapidKey)\n  });\n}\n\n/**\n * Checks if the saved tokenDetails object matches the configuration provided.\n */\nfunction isTokenValid(\n  dbOptions: SubscriptionOptions,\n  currentOptions: SubscriptionOptions\n): boolean {\n  const isVapidKeyEqual = currentOptions.vapidKey === dbOptions.vapidKey;\n  const isEndpointEqual = currentOptions.endpoint === dbOptions.endpoint;\n  const isAuthEqual = currentOptions.auth === dbOptions.auth;\n  const isP256dhEqual = currentOptions.p256dh === dbOptions.p256dh;\n\n  return isVapidKeyEqual && isEndpointEqual && isAuthEqual && isP256dhEqual;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CONSOLE_CAMPAIGN_ID } from '../util/constants';\nimport { ConsoleMessageData } from '../interfaces/internal-message-payload';\n\nexport function isConsoleMessage(data: unknown): data is ConsoleMessageData {\n  // This message has a campaign ID, meaning it was sent using the Firebase Console.\n  return typeof data === 'object' && !!data && CONSOLE_CAMPAIGN_ID in data;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DEFAULT_VAPID_KEY, FCM_MSG, TAG } from '../util/constants';\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\nimport { FirebaseMessaging, MessagePayload } from '@firebase/messaging-types';\nimport {\n  MessagePayloadInternal,\n  MessageType,\n  NotificationPayloadInternal\n} from '../interfaces/internal-message-payload';\nimport { NextFn, Observer, Unsubscribe } from '@firebase/util';\nimport { deleteToken, getToken } from '../core/token-management';\n\nimport { FirebaseApp } from '@firebase/app-types';\nimport { FirebaseInternalDependencies } from '../interfaces/internal-dependencies';\nimport { FirebaseService } from '@firebase/app-types/private';\nimport { dbGet } from '../helpers/idb-manager';\nimport { externalizePayload } from '../helpers/externalizePayload';\nimport { isConsoleMessage } from '../helpers/is-console-message';\nimport { sleep } from '../helpers/sleep';\n\n// Let TS know that this is a service worker\ndeclare const self: ServiceWorkerGlobalScope;\n\nexport type BgMessageHandler = (payload: MessagePayload) => unknown;\n\nexport class SwController implements FirebaseMessaging, FirebaseService {\n  // A boolean flag to determine wether an app is using onBackgroundMessage or\n  // setBackgroundMessageHandler. onBackgroundMessage will receive a MessagePayload regardless of if\n  // a notification is displayed. Whereas, setBackgroundMessageHandler will swallow the\n  // MessagePayload if a NotificationPayload is included.\n  private isOnBackgroundMessageUsed: boolean | null = null;\n  private vapidKey: string | null = null;\n  private bgMessageHandler:\n    | BgMessageHandler\n    | null\n    | NextFn<MessagePayload>\n    | Observer<MessagePayload> = null;\n\n  constructor(\n    private readonly firebaseDependencies: FirebaseInternalDependencies\n  ) {\n    self.addEventListener('push', e => {\n      e.waitUntil(this.onPush(e));\n    });\n    self.addEventListener('pushsubscriptionchange', e => {\n      e.waitUntil(this.onSubChange(e));\n    });\n    self.addEventListener('notificationclick', e => {\n      e.waitUntil(this.onNotificationClick(e));\n    });\n  }\n\n  get app(): FirebaseApp {\n    return this.firebaseDependencies.app;\n  }\n\n  /**\n   * @deprecated. Use onBackgroundMessage(nextOrObserver: NextFn<object> | Observer<object>):\n   * Unsubscribe instead.\n   *\n   * Calling setBackgroundMessageHandler will opt in to some specific behaviors.\n   *\n   * 1.) If a notification doesn't need to be shown due to a window already being visible, then push\n   * messages will be sent to the page. 2.) If a notification needs to be shown, and the message\n   * contains no notification data this method will be called and the promise it returns will be\n   * passed to event.waitUntil. If you do not set this callback then all push messages will let and\n   * the developer can handle them in a their own 'push' event callback\n   *\n   * @param callback The callback to be called when a push message is received and a notification\n   * must be shown. The callback will be given the data from the push message.\n   */\n  setBackgroundMessageHandler(callback: BgMessageHandler): void {\n    this.isOnBackgroundMessageUsed = false;\n\n    if (!callback || typeof callback !== 'function') {\n      throw ERROR_FACTORY.create(ErrorCode.INVALID_BG_HANDLER);\n    }\n\n    this.bgMessageHandler = callback;\n  }\n\n  onBackgroundMessage(\n    nextOrObserver: NextFn<MessagePayload> | Observer<MessagePayload>\n  ): Unsubscribe {\n    this.isOnBackgroundMessageUsed = true;\n    this.bgMessageHandler = nextOrObserver;\n\n    return () => {\n      this.bgMessageHandler = null;\n    };\n  }\n\n  // TODO: Remove getToken from SW Controller. Calling this from an old SW can cause all kinds of\n  // trouble.\n  async getToken(): Promise<string> {\n    if (!this.vapidKey) {\n      // Call getToken using the current VAPID key if there already is a token. This is needed\n      // because usePublicVapidKey was not available in SW. It will be removed when vapidKey becomes\n      // a parameter of getToken, or when getToken is removed from SW.\n      const tokenDetails = await dbGet(this.firebaseDependencies);\n      this.vapidKey =\n        tokenDetails?.subscriptionOptions?.vapidKey ?? DEFAULT_VAPID_KEY;\n    }\n\n    return getToken(\n      this.firebaseDependencies,\n      self.registration,\n      this.vapidKey\n    );\n  }\n\n  // TODO: Remove deleteToken from SW Controller. Calling this from an old SW can cause all kinds of\n  // trouble.\n  deleteToken(): Promise<boolean> {\n    return deleteToken(this.firebaseDependencies, self.registration);\n  }\n\n  requestPermission(): Promise<void> {\n    throw ERROR_FACTORY.create(ErrorCode.AVAILABLE_IN_WINDOW);\n  }\n\n  // TODO: Remove this together with getToken from SW Controller.\n  usePublicVapidKey(vapidKey: string): void {\n    if (this.vapidKey !== null) {\n      throw ERROR_FACTORY.create(ErrorCode.USE_VAPID_KEY_AFTER_GET_TOKEN);\n    }\n\n    if (typeof vapidKey !== 'string' || vapidKey.length === 0) {\n      throw ERROR_FACTORY.create(ErrorCode.INVALID_VAPID_KEY);\n    }\n\n    this.vapidKey = vapidKey;\n  }\n\n  useServiceWorker(): void {\n    throw ERROR_FACTORY.create(ErrorCode.AVAILABLE_IN_WINDOW);\n  }\n\n  onMessage(): Unsubscribe {\n    throw ERROR_FACTORY.create(ErrorCode.AVAILABLE_IN_WINDOW);\n  }\n\n  onTokenRefresh(): Unsubscribe {\n    throw ERROR_FACTORY.create(ErrorCode.AVAILABLE_IN_WINDOW);\n  }\n\n  /**\n   * A handler for push events that shows notifications based on the content of the payload.\n   *\n   * The payload must be a JSON-encoded Object with a `notification` key. The value of the\n   * `notification` property will be used as the NotificationOptions object passed to\n   * showNotification. Additionally, the `title` property of the notification object will be used as\n   * the title.\n   *\n   * If there is no notification data in the payload then no notification will be shown.\n   */\n  async onPush(event: PushEvent): Promise<void> {\n    const internalPayload = getMessagePayloadInternal(event);\n    if (!internalPayload) {\n      console.debug(\n        TAG +\n          'failed to get parsed MessagePayload from the PushEvent. Skip handling the push.'\n      );\n      return;\n    }\n\n    // foreground handling: eventually passed to onMessage hook\n    const clientList = await getClientList();\n    if (hasVisibleClients(clientList)) {\n      return sendMessagePayloadInternalToWindows(clientList, internalPayload);\n    }\n\n    // background handling: display and pass to onBackgroundMessage hook\n    let isNotificationShown = false;\n    if (!!internalPayload.notification) {\n      await showNotification(wrapInternalPayload(internalPayload));\n      isNotificationShown = true;\n    }\n\n    // MessagePayload is only passed to `onBackgroundMessage`. Skip passing MessagePayload for\n    // the legacy `setBackgroundMessageHandler` to preserve the SDK behaviors.\n    if (\n      isNotificationShown === true &&\n      this.isOnBackgroundMessageUsed === false\n    ) {\n      return;\n    }\n\n    if (!!this.bgMessageHandler) {\n      const payload = externalizePayload(internalPayload);\n\n      if (typeof this.bgMessageHandler === 'function') {\n        this.bgMessageHandler(payload);\n      } else {\n        this.bgMessageHandler.next(payload);\n      }\n    }\n  }\n\n  async onSubChange(event: PushSubscriptionChangeEvent): Promise<void> {\n    const { newSubscription } = event;\n    if (!newSubscription) {\n      // Subscription revoked, delete token\n      await deleteToken(this.firebaseDependencies, self.registration);\n      return;\n    }\n\n    const tokenDetails = await dbGet(this.firebaseDependencies);\n    await deleteToken(this.firebaseDependencies, self.registration);\n    await getToken(\n      this.firebaseDependencies,\n      self.registration,\n      tokenDetails?.subscriptionOptions?.vapidKey ?? DEFAULT_VAPID_KEY\n    );\n  }\n\n  async onNotificationClick(event: NotificationEvent): Promise<void> {\n    const internalPayload: MessagePayloadInternal =\n      event.notification?.data?.[FCM_MSG];\n\n    if (!internalPayload) {\n      return;\n    } else if (event.action) {\n      // User clicked on an action button. This will allow developers to act on action button clicks\n      // by using a custom onNotificationClick listener that they define.\n      return;\n    }\n\n    // Prevent other listeners from receiving the event\n    event.stopImmediatePropagation();\n    event.notification.close();\n\n    // Note clicking on a notification with no link set will focus the Chrome's current tab.\n    const link = getLink(internalPayload);\n    if (!link) {\n      return;\n    }\n\n    // FM should only open/focus links from app's origin.\n    const url = new URL(link, self.location.href);\n    const originUrl = new URL(self.location.origin);\n\n    if (url.host !== originUrl.host) {\n      return;\n    }\n\n    let client = await getWindowClient(url);\n\n    if (!client) {\n      client = await self.clients.openWindow(link);\n\n      // Wait three seconds for the client to initialize and set up the message handler so that it\n      // can receive the message.\n      await sleep(3000);\n    } else {\n      client = await client.focus();\n    }\n\n    if (!client) {\n      // Window Client will not be returned if it's for a third party origin.\n      return;\n    }\n\n    internalPayload.messageType = MessageType.NOTIFICATION_CLICKED;\n    internalPayload.isFirebaseMessaging = true;\n    return client.postMessage(internalPayload);\n  }\n}\n\nfunction wrapInternalPayload(\n  internalPayload: MessagePayloadInternal\n): NotificationPayloadInternal {\n  const wrappedInternalPayload: NotificationPayloadInternal = {\n    ...((internalPayload.notification as unknown) as NotificationPayloadInternal)\n  };\n\n  // Put the message payload under FCM_MSG name so we can identify the notification as being an FCM\n  // notification vs a notification from somewhere else (i.e. normal web push or developer generated\n  // notification).\n  wrappedInternalPayload.data = {\n    [FCM_MSG]: internalPayload\n  };\n\n  return wrappedInternalPayload;\n}\n\nfunction getMessagePayloadInternal({\n  data\n}: PushEvent): MessagePayloadInternal | null {\n  if (!data) {\n    return null;\n  }\n\n  try {\n    return data.json();\n  } catch (err) {\n    // Not JSON so not an FCM message.\n    return null;\n  }\n}\n\n/**\n * @param url The URL to look for when focusing a client.\n * @return Returns an existing window client or a newly opened WindowClient.\n */\nasync function getWindowClient(url: URL): Promise<WindowClient | null> {\n  const clientList = await getClientList();\n\n  for (const client of clientList) {\n    const clientUrl = new URL(client.url, self.location.href);\n\n    if (url.host === clientUrl.host) {\n      return client;\n    }\n  }\n\n  return null;\n}\n\n/**\n * @returns If there is currently a visible WindowClient, this method will resolve to true,\n * otherwise false.\n */\nfunction hasVisibleClients(clientList: WindowClient[]): boolean {\n  return clientList.some(\n    client =>\n      client.visibilityState === 'visible' &&\n      // Ignore chrome-extension clients as that matches the background pages of extensions, which\n      // are always considered visible for some reason.\n      !client.url.startsWith('chrome-extension://')\n  );\n}\n\nfunction sendMessagePayloadInternalToWindows(\n  clientList: WindowClient[],\n  internalPayload: MessagePayloadInternal\n): void {\n  internalPayload.isFirebaseMessaging = true;\n  internalPayload.messageType = MessageType.PUSH_RECEIVED;\n\n  for (const client of clientList) {\n    client.postMessage(internalPayload);\n  }\n}\n\nfunction getClientList(): Promise<WindowClient[]> {\n  return self.clients.matchAll({\n    type: 'window',\n    includeUncontrolled: true\n    // TS doesn't know that \"type: 'window'\" means it'll return WindowClient[]\n  }) as Promise<WindowClient[]>;\n}\n\nfunction showNotification(\n  notificationPayloadInternal: NotificationPayloadInternal\n): Promise<void> {\n  // Note: Firefox does not support the maxActions property.\n  // https://developer.mozilla.org/en-US/docs/Web/API/notification/maxActions\n  const { actions } = notificationPayloadInternal;\n  const { maxActions } = Notification;\n  if (actions && maxActions && actions.length > maxActions) {\n    console.warn(\n      `This browser only supports ${maxActions} actions. The remaining actions will not be displayed.`\n    );\n  }\n\n  return self.registration.showNotification(\n    /* title= */ notificationPayloadInternal.title ?? '',\n    notificationPayloadInternal\n  );\n}\n\nfunction getLink(payload: MessagePayloadInternal): string | null {\n  // eslint-disable-next-line camelcase\n  const link = payload.fcmOptions?.link ?? payload.notification?.click_action;\n  if (link) {\n    return link;\n  }\n\n  if (isConsoleMessage(payload.data)) {\n    // Notification created in the Firebase Console. Redirect to origin.\n    return self.location.origin;\n  } else {\n    return null;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { MessagePayload } from '@firebase/messaging-types';\nimport { MessagePayloadInternal } from '../interfaces/internal-message-payload';\n\nexport function externalizePayload(\n  internalPayload: MessagePayloadInternal\n): MessagePayload {\n  const payload: MessagePayload = {\n    from: internalPayload.from,\n    // eslint-disable-next-line camelcase\n    collapseKey: internalPayload.collapse_key\n  } as MessagePayload;\n\n  propagateNotificationPayload(payload, internalPayload);\n  propagateDataPayload(payload, internalPayload);\n  propagateFcmOptions(payload, internalPayload);\n\n  return payload;\n}\n\nfunction propagateNotificationPayload(\n  payload: MessagePayload,\n  messagePayloadInternal: MessagePayloadInternal\n): void {\n  if (!messagePayloadInternal.notification) {\n    return;\n  }\n\n  payload.notification = {};\n\n  const title = messagePayloadInternal.notification!.title;\n  if (!!title) {\n    payload.notification!.title = title;\n  }\n\n  const body = messagePayloadInternal.notification!.body;\n  if (!!body) {\n    payload.notification!.body = body;\n  }\n\n  const image = messagePayloadInternal.notification!.image;\n  if (!!image) {\n    payload.notification!.image = image;\n  }\n}\n\nfunction propagateDataPayload(\n  payload: MessagePayload,\n  messagePayloadInternal: MessagePayloadInternal\n): void {\n  if (!messagePayloadInternal.data) {\n    return;\n  }\n\n  payload.data = messagePayloadInternal.data as { [key: string]: string };\n}\n\nfunction propagateFcmOptions(\n  payload: MessagePayload,\n  messagePayloadInternal: MessagePayloadInternal\n): void {\n  if (!messagePayloadInternal.fcmOptions) {\n    return;\n  }\n\n  payload.fcmOptions = {};\n\n  const link = messagePayloadInternal.fcmOptions!.link;\n  if (!!link) {\n    payload.fcmOptions!.link = link;\n  }\n\n  // eslint-disable-next-line camelcase\n  const analyticsLabel = messagePayloadInternal.fcmOptions!.analytics_label;\n  if (!!analyticsLabel) {\n    payload.fcmOptions!.analyticsLabel = analyticsLabel;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Returns a promise that resolves after given time passes. */\nexport function sleep(ms: number): Promise<void> {\n  return new Promise<void>(resolve => {\n    setTimeout(resolve, ms);\n  });\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  CONSOLE_CAMPAIGN_ANALYTICS_ENABLED,\n  CONSOLE_CAMPAIGN_ID,\n  CONSOLE_CAMPAIGN_NAME,\n  CONSOLE_CAMPAIGN_TIME,\n  DEFAULT_SW_PATH,\n  DEFAULT_SW_SCOPE,\n  DEFAULT_VAPID_KEY\n} from '../util/constants';\nimport {\n  ConsoleMessageData,\n  MessagePayloadInternal,\n  MessageType\n} from '../interfaces/internal-message-payload';\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\nimport { NextFn, Observer, Unsubscribe } from '@firebase/util';\nimport { deleteToken, getToken } from '../core/token-management';\n\nimport { FirebaseApp } from '@firebase/app-types';\nimport { FirebaseInternalDependencies } from '../interfaces/internal-dependencies';\nimport { FirebaseMessaging } from '@firebase/messaging-types';\nimport { FirebaseService } from '@firebase/app-types/private';\nimport { isConsoleMessage } from '../helpers/is-console-message';\n\nexport class WindowController implements FirebaseMessaging, FirebaseService {\n  private vapidKey: string | null = null;\n  private swRegistration?: ServiceWorkerRegistration;\n  private onMessageCallback: NextFn<object> | Observer<object> | null = null;\n\n  constructor(\n    private readonly firebaseDependencies: FirebaseInternalDependencies\n  ) {\n    navigator.serviceWorker.addEventListener('message', e =>\n      this.messageEventListener(e)\n    );\n  }\n\n  get app(): FirebaseApp {\n    return this.firebaseDependencies.app;\n  }\n\n  private async messageEventListener(event: MessageEvent): Promise<void> {\n    const internalPayload = event.data as MessagePayloadInternal;\n\n    if (!internalPayload.isFirebaseMessaging) {\n      return;\n    }\n\n    // onMessageCallback is either a function or observer/subscriber.\n    // TODO: in the modularization release, have onMessage handle type MessagePayload as supposed to\n    // the legacy payload where some fields are in snake cases.\n    if (\n      this.onMessageCallback &&\n      internalPayload.messageType === MessageType.PUSH_RECEIVED\n    ) {\n      if (typeof this.onMessageCallback === 'function') {\n        this.onMessageCallback(\n          stripInternalFields(Object.assign({}, internalPayload))\n        );\n      } else {\n        this.onMessageCallback.next(Object.assign({}, internalPayload));\n      }\n    }\n\n    const dataPayload = internalPayload.data;\n\n    if (\n      isConsoleMessage(dataPayload) &&\n      dataPayload[CONSOLE_CAMPAIGN_ANALYTICS_ENABLED] === '1'\n    ) {\n      await this.logEvent(internalPayload.messageType!, dataPayload);\n    }\n  }\n\n  getVapidKey(): string | null {\n    return this.vapidKey;\n  }\n\n  getSwReg(): ServiceWorkerRegistration | undefined {\n    return this.swRegistration;\n  }\n\n  async getToken(options?: {\n    vapidKey?: string;\n    serviceWorkerRegistration?: ServiceWorkerRegistration;\n  }): Promise<string> {\n    if (Notification.permission === 'default') {\n      await Notification.requestPermission();\n    }\n\n    if (Notification.permission !== 'granted') {\n      throw ERROR_FACTORY.create(ErrorCode.PERMISSION_BLOCKED);\n    }\n\n    await this.updateVapidKey(options?.vapidKey);\n    await this.updateSwReg(options?.serviceWorkerRegistration);\n\n    return getToken(\n      this.firebaseDependencies,\n      this.swRegistration!,\n      this.vapidKey!\n    );\n  }\n\n  async updateVapidKey(vapidKey?: string | undefined): Promise<void> {\n    if (!!vapidKey) {\n      this.vapidKey = vapidKey;\n    } else if (!this.vapidKey) {\n      this.vapidKey = DEFAULT_VAPID_KEY;\n    }\n  }\n\n  async updateSwReg(\n    swRegistration?: ServiceWorkerRegistration | undefined\n  ): Promise<void> {\n    if (!swRegistration && !this.swRegistration) {\n      await this.registerDefaultSw();\n    }\n\n    if (!swRegistration && !!this.swRegistration) {\n      return;\n    }\n\n    if (!(swRegistration instanceof ServiceWorkerRegistration)) {\n      throw ERROR_FACTORY.create(ErrorCode.INVALID_SW_REGISTRATION);\n    }\n\n    this.swRegistration = swRegistration;\n  }\n\n  private async registerDefaultSw(): Promise<void> {\n    try {\n      this.swRegistration = await navigator.serviceWorker.register(\n        DEFAULT_SW_PATH,\n        {\n          scope: DEFAULT_SW_SCOPE\n        }\n      );\n\n      // The timing when browser updates sw when sw has an update is unreliable by my experiment. It\n      // leads to version conflict when the SDK upgrades to a newer version in the main page, but sw\n      // is stuck with the old version. For example,\n      // https://github.com/firebase/firebase-js-sdk/issues/2590 The following line reliably updates\n      // sw if there was an update.\n      this.swRegistration.update().catch(() => {\n        /* it is non blocking and we don't care if it failed */\n      });\n    } catch (e) {\n      throw ERROR_FACTORY.create(ErrorCode.FAILED_DEFAULT_REGISTRATION, {\n        browserErrorMessage: e.message\n      });\n    }\n  }\n\n  async deleteToken(): Promise<boolean> {\n    if (!this.swRegistration) {\n      await this.registerDefaultSw();\n    }\n\n    return deleteToken(this.firebaseDependencies, this.swRegistration!);\n  }\n\n  /**\n   * Request permission if it is not currently granted.\n   *\n   * @return Resolves if the permission was granted, rejects otherwise.\n   *\n   * @deprecated Use Notification.requestPermission() instead.\n   * https://developer.mozilla.org/en-US/docs/Web/API/Notification/requestPermission\n   */\n  async requestPermission(): Promise<void> {\n    if (Notification.permission === 'granted') {\n      return;\n    }\n\n    const permissionResult = await Notification.requestPermission();\n    if (permissionResult === 'granted') {\n      return;\n    } else if (permissionResult === 'denied') {\n      throw ERROR_FACTORY.create(ErrorCode.PERMISSION_BLOCKED);\n    } else {\n      throw ERROR_FACTORY.create(ErrorCode.PERMISSION_DEFAULT);\n    }\n  }\n\n  /**\n   * @deprecated. Use getToken(options?: {vapidKey?: string; serviceWorkerRegistration?:\n   * ServiceWorkerRegistration;}): Promise<string> instead.\n   */\n  usePublicVapidKey(vapidKey: string): void {\n    if (this.vapidKey !== null) {\n      throw ERROR_FACTORY.create(ErrorCode.USE_VAPID_KEY_AFTER_GET_TOKEN);\n    }\n\n    if (typeof vapidKey !== 'string' || vapidKey.length === 0) {\n      throw ERROR_FACTORY.create(ErrorCode.INVALID_VAPID_KEY);\n    }\n\n    this.vapidKey = vapidKey;\n  }\n\n  /**\n   * @deprecated. Use getToken(options?: {vapidKey?: string; serviceWorkerRegistration?:\n   * ServiceWorkerRegistration;}): Promise<string> instead.\n   */\n  useServiceWorker(swRegistration: ServiceWorkerRegistration): void {\n    if (!(swRegistration instanceof ServiceWorkerRegistration)) {\n      throw ERROR_FACTORY.create(ErrorCode.INVALID_SW_REGISTRATION);\n    }\n\n    if (this.swRegistration) {\n      throw ERROR_FACTORY.create(ErrorCode.USE_SW_AFTER_GET_TOKEN);\n    }\n\n    this.swRegistration = swRegistration;\n  }\n\n  /**\n   * @param nextOrObserver An observer object or a function triggered on message.\n   *\n   * @return The unsubscribe function for the observer.\n   */\n  onMessage(nextOrObserver: NextFn<object> | Observer<object>): Unsubscribe {\n    this.onMessageCallback = nextOrObserver;\n\n    return () => {\n      this.onMessageCallback = null;\n    };\n  }\n\n  setBackgroundMessageHandler(): void {\n    throw ERROR_FACTORY.create(ErrorCode.AVAILABLE_IN_SW);\n  }\n\n  onBackgroundMessage(): Unsubscribe {\n    throw ERROR_FACTORY.create(ErrorCode.AVAILABLE_IN_SW);\n  }\n\n  /**\n   * @deprecated No-op. It was initially designed with token rotation requests from server in mind.\n   * However, the plan to implement such feature was abandoned.\n   */\n  onTokenRefresh(): Unsubscribe {\n    return () => {};\n  }\n\n  private async logEvent(\n    messageType: MessageType,\n    data: ConsoleMessageData\n  ): Promise<void> {\n    const eventType = getEventType(messageType);\n    const analytics = await this.firebaseDependencies.analyticsProvider.get();\n    analytics.logEvent(eventType, {\n      /* eslint-disable camelcase */\n      message_id: data[CONSOLE_CAMPAIGN_ID],\n      message_name: data[CONSOLE_CAMPAIGN_NAME],\n      message_time: data[CONSOLE_CAMPAIGN_TIME],\n      message_device_time: Math.floor(Date.now() / 1000)\n      /* eslint-enable camelcase */\n    });\n  }\n}\n\nfunction getEventType(messageType: MessageType): string {\n  switch (messageType) {\n    case MessageType.NOTIFICATION_CLICKED:\n      return 'notification_open';\n    case MessageType.PUSH_RECEIVED:\n      return 'notification_foreground';\n    default:\n      throw new Error();\n  }\n}\n\nfunction stripInternalFields(\n  internalPayload: MessagePayloadInternal\n): MessagePayloadInternal {\n  delete internalPayload.messageType;\n  delete internalPayload.isFirebaseMessaging;\n  return internalPayload;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ERROR_FACTORY, ErrorCode } from '../utils/errors';\nimport { isIndexedDBAvailable } from '@firebase/util';\nimport { consoleLogger } from '../utils/console_logger';\ndeclare global {\n  interface Window {\n    PerformanceObserver: typeof PerformanceObserver;\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    perfMetrics?: { onFirstInputDelay: Function };\n  }\n}\n\nlet apiInstance: Api | undefined;\nlet windowInstance: Window | undefined;\n\nexport type EntryType =\n  | 'mark'\n  | 'measure'\n  | 'paint'\n  | 'resource'\n  | 'frame'\n  | 'navigation';\n\n/**\n * This class holds a reference to various browser related objects injected by\n * set methods.\n */\nexport class Api {\n  private readonly performance: Performance;\n  /** PreformanceObserver constructor function. */\n  private readonly PerformanceObserver: typeof PerformanceObserver;\n  private readonly windowLocation: Location;\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  readonly onFirstInputDelay?: Function;\n  readonly localStorage?: Storage;\n  readonly document: Document;\n  readonly navigator: Navigator;\n\n  constructor(readonly window?: Window) {\n    if (!window) {\n      throw ERROR_FACTORY.create(ErrorCode.NO_WINDOW);\n    }\n    this.performance = window.performance;\n    this.PerformanceObserver = window.PerformanceObserver;\n    this.windowLocation = window.location;\n    this.navigator = window.navigator;\n    this.document = window.document;\n    if (this.navigator && this.navigator.cookieEnabled) {\n      // If user blocks cookies on the browser, accessing localStorage will\n      // throw an exception.\n      this.localStorage = window.localStorage;\n    }\n    if (window.perfMetrics && window.perfMetrics.onFirstInputDelay) {\n      this.onFirstInputDelay = window.perfMetrics.onFirstInputDelay;\n    }\n  }\n\n  getUrl(): string {\n    // Do not capture the string query part of url.\n    return this.windowLocation.href.split('?')[0];\n  }\n\n  mark(name: string): void {\n    if (!this.performance || !this.performance.mark) {\n      return;\n    }\n    this.performance.mark(name);\n  }\n\n  measure(measureName: string, mark1: string, mark2: string): void {\n    if (!this.performance || !this.performance.measure) {\n      return;\n    }\n    this.performance.measure(measureName, mark1, mark2);\n  }\n\n  getEntriesByType(type: EntryType): PerformanceEntry[] {\n    if (!this.performance || !this.performance.getEntriesByType) {\n      return [];\n    }\n    return this.performance.getEntriesByType(type);\n  }\n\n  getEntriesByName(name: string): PerformanceEntry[] {\n    if (!this.performance || !this.performance.getEntriesByName) {\n      return [];\n    }\n    return this.performance.getEntriesByName(name);\n  }\n\n  getTimeOrigin(): number {\n    // Polyfill the time origin with performance.timing.navigationStart.\n    return (\n      this.performance &&\n      (this.performance.timeOrigin || this.performance.timing.navigationStart)\n    );\n  }\n\n  requiredApisAvailable(): boolean {\n    if (\n      !fetch ||\n      !Promise ||\n      !this.navigator ||\n      !this.navigator.cookieEnabled\n    ) {\n      consoleLogger.info(\n        'Firebase Performance cannot start if browser does not support fetch and Promise or cookie is disabled.'\n      );\n      return false;\n    }\n\n    if (!isIndexedDBAvailable()) {\n      consoleLogger.info('IndexedDB is not supported by current browswer');\n      return false;\n    }\n    return true;\n  }\n\n  setupObserver(\n    entryType: EntryType,\n    callback: (entry: PerformanceEntry) => void\n  ): void {\n    if (!this.PerformanceObserver) {\n      return;\n    }\n    const observer = new this.PerformanceObserver(list => {\n      for (const entry of list.getEntries()) {\n        // `entry` is a PerformanceEntry instance.\n        callback(entry);\n      }\n    });\n\n    // Start observing the entry types you care about.\n    observer.observe({ entryTypes: [entryType] });\n  }\n\n  static getInstance(): Api {\n    if (apiInstance === undefined) {\n      apiInstance = new Api(windowInstance);\n    }\n    return apiInstance;\n  }\n}\n\nexport function setupApi(window: Window): void {\n  windowInstance = window;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Key to attach FID to in gtag params.\nexport const GA_FID_KEY = 'firebase_id';\nexport const ORIGIN_KEY = 'origin';\n\nexport const FETCH_TIMEOUT_MILLIS = 60 * 1000;\n\nexport const DYNAMIC_CONFIG_URL =\n  'https://firebase.googleapis.com/v1alpha/projects/-/apps/{app-id}/webConfig';\n\nexport const GTAG_URL = 'https://www.googletagmanager.com/gtag/js';\n\nexport enum GtagCommand {\n  EVENT = 'event',\n  SET = 'set',\n  CONFIG = 'config'\n}\n\n/*\n * Officially recommended event names for gtag.js\n * Any other string is also allowed.\n */\nexport enum EventName {\n  ADD_SHIPPING_INFO = 'add_shipping_info',\n  ADD_PAYMENT_INFO = 'add_payment_info',\n  ADD_TO_CART = 'add_to_cart',\n  ADD_TO_WISHLIST = 'add_to_wishlist',\n  BEGIN_CHECKOUT = 'begin_checkout',\n  /** @deprecated */\n  CHECKOUT_PROGRESS = 'checkout_progress',\n  EXCEPTION = 'exception',\n  GENERATE_LEAD = 'generate_lead',\n  LOGIN = 'login',\n  PAGE_VIEW = 'page_view',\n  PURCHASE = 'purchase',\n  REFUND = 'refund',\n  REMOVE_FROM_CART = 'remove_from_cart',\n  SCREEN_VIEW = 'screen_view',\n  SEARCH = 'search',\n  SELECT_CONTENT = 'select_content',\n  SELECT_ITEM = 'select_item',\n  SELECT_PROMOTION = 'select_promotion',\n  /** @deprecated */\n  SET_CHECKOUT_OPTION = 'set_checkout_option',\n  SHARE = 'share',\n  SIGN_UP = 'sign_up',\n  TIMING_COMPLETE = 'timing_complete',\n  VIEW_CART = 'view_cart',\n  VIEW_ITEM = 'view_item',\n  VIEW_ITEM_LIST = 'view_item_list',\n  VIEW_PROMOTION = 'view_promotion',\n  VIEW_SEARCH_RESULTS = 'view_search_results'\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory } from '@firebase/util';\nimport { SERVICE, SERVICE_NAME } from '../constants';\n\nexport const enum ErrorCode {\n  TRACE_STARTED_BEFORE = 'trace started',\n  TRACE_STOPPED_BEFORE = 'trace stopped',\n  NONPOSITIVE_TRACE_START_TIME = 'nonpositive trace startTime',\n  NONPOSITIVE_TRACE_DURATION = 'nonpositive trace duration',\n  NO_WINDOW = 'no window',\n  NO_APP_ID = 'no app id',\n  NO_PROJECT_ID = 'no project id',\n  NO_API_KEY = 'no api key',\n  INVALID_CC_LOG = 'invalid cc log',\n  FB_NOT_DEFAULT = 'FB not default',\n  RC_NOT_OK = 'RC response not ok',\n  INVALID_ATTRIBUTE_NAME = 'invalid attribute name',\n  INVALID_ATTRIBUTE_VALUE = 'invalid attribute value',\n  INVALID_CUSTOM_METRIC_NAME = 'invalid custom metric name',\n  INVALID_STRING_MERGER_PARAMETER = 'invalid String merger input'\n}\n\nconst ERROR_DESCRIPTION_MAP: { readonly [key in ErrorCode]: string } = {\n  [ErrorCode.TRACE_STARTED_BEFORE]: 'Trace {$traceName} was started before.',\n  [ErrorCode.TRACE_STOPPED_BEFORE]: 'Trace {$traceName} is not running.',\n  [ErrorCode.NONPOSITIVE_TRACE_START_TIME]:\n    'Trace {$traceName} startTime should be positive.',\n  [ErrorCode.NONPOSITIVE_TRACE_DURATION]:\n    'Trace {$traceName} duration should be positive.',\n  [ErrorCode.NO_WINDOW]: 'Window is not available.',\n  [ErrorCode.NO_APP_ID]: 'App id is not available.',\n  [ErrorCode.NO_PROJECT_ID]: 'Project id is not available.',\n  [ErrorCode.NO_API_KEY]: 'Api key is not available.',\n  [ErrorCode.INVALID_CC_LOG]: 'Attempted to queue invalid cc event',\n  [ErrorCode.FB_NOT_DEFAULT]:\n    'Performance can only start when Firebase app instance is the default one.',\n  [ErrorCode.RC_NOT_OK]: 'RC response is not ok',\n  [ErrorCode.INVALID_ATTRIBUTE_NAME]:\n    'Attribute name {$attributeName} is invalid.',\n  [ErrorCode.INVALID_ATTRIBUTE_VALUE]:\n    'Attribute value {$attributeValue} is invalid.',\n  [ErrorCode.INVALID_CUSTOM_METRIC_NAME]:\n    'Custom metric name {$customMetricName} is invalid',\n  [ErrorCode.INVALID_STRING_MERGER_PARAMETER]:\n    'Input for String merger is invalid, contact support team to resolve.'\n};\n\ninterface ErrorParams {\n  [ErrorCode.TRACE_STARTED_BEFORE]: { traceName: string };\n  [ErrorCode.TRACE_STOPPED_BEFORE]: { traceName: string };\n  [ErrorCode.NONPOSITIVE_TRACE_START_TIME]: { traceName: string };\n  [ErrorCode.NONPOSITIVE_TRACE_DURATION]: { traceName: string };\n  [ErrorCode.INVALID_ATTRIBUTE_NAME]: { attributeName: string };\n  [ErrorCode.INVALID_ATTRIBUTE_VALUE]: { attributeValue: string };\n  [ErrorCode.INVALID_CUSTOM_METRIC_NAME]: { customMetricName: string };\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<ErrorCode, ErrorParams>(\n  SERVICE,\n  SERVICE_NAME,\n  ERROR_DESCRIPTION_MAP\n);\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger, LogLevel } from '@firebase/logger';\nimport { SERVICE_NAME } from '../constants';\n\nexport const consoleLogger = new Logger(SERVICE_NAME);\nconsoleLogger.logLevel = LogLevel.INFO;\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app-types';\nimport { ERROR_FACTORY, ErrorCode } from '../utils/errors';\nimport { FirebaseInstallations } from '@firebase/installations-types';\nimport { mergeStrings } from '../utils/string_merger';\n\nlet settingsServiceInstance: SettingsService | undefined;\n\nexport class SettingsService {\n  // The variable which controls logging of automatic traces and HTTP/S network monitoring.\n  instrumentationEnabled = true;\n\n  // The variable which controls logging of custom traces.\n  dataCollectionEnabled = true;\n\n  // Configuration flags set through remote config.\n  loggingEnabled = false;\n  // Sampling rate between 0 and 1.\n  tracesSamplingRate = 1;\n  networkRequestsSamplingRate = 1;\n\n  // Address of logging service.\n  logEndPointUrl =\n    'https://firebaselogging.googleapis.com/v0cc/log?format=json_proto';\n  // Performance event transport endpoint URL which should be compatible with proto3.\n  // New Address for transport service, not configurable via Remote Config.\n  flTransportEndpointUrl = mergeStrings(\n    'hts/frbslgigp.ogepscmv/ieo/eaylg',\n    'tp:/ieaeogn-agolai.o/1frlglgc/o'\n  );\n\n  transportKey = mergeStrings('AzSC8r6ReiGqFMyfvgow', 'Iayx0u-XT3vksVM-pIV');\n\n  // Source type for performance event logs.\n  logSource = 462;\n\n  // Flags which control per session logging of traces and network requests.\n  logTraceAfterSampling = false;\n  logNetworkAfterSampling = false;\n\n  // TTL of config retrieved from remote config in hours.\n  configTimeToLive = 12;\n\n  firebaseAppInstance!: FirebaseApp;\n\n  installationsService!: FirebaseInstallations;\n\n  getAppId(): string {\n    const appId =\n      this.firebaseAppInstance &&\n      this.firebaseAppInstance.options &&\n      this.firebaseAppInstance.options.appId;\n    if (!appId) {\n      throw ERROR_FACTORY.create(ErrorCode.NO_APP_ID);\n    }\n    return appId;\n  }\n\n  getProjectId(): string {\n    const projectId =\n      this.firebaseAppInstance &&\n      this.firebaseAppInstance.options &&\n      this.firebaseAppInstance.options.projectId;\n    if (!projectId) {\n      throw ERROR_FACTORY.create(ErrorCode.NO_PROJECT_ID);\n    }\n    return projectId;\n  }\n\n  getApiKey(): string {\n    const apiKey =\n      this.firebaseAppInstance &&\n      this.firebaseAppInstance.options &&\n      this.firebaseAppInstance.options.apiKey;\n    if (!apiKey) {\n      throw ERROR_FACTORY.create(ErrorCode.NO_API_KEY);\n    }\n    return apiKey;\n  }\n\n  getFlTransportFullUrl(): string {\n    return this.flTransportEndpointUrl.concat('?key=', this.transportKey);\n  }\n\n  static getInstance(): SettingsService {\n    if (settingsServiceInstance === undefined) {\n      settingsServiceInstance = new SettingsService();\n    }\n    return settingsServiceInstance;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ERROR_FACTORY, ErrorCode } from './errors';\n\nexport function mergeStrings(part1: string, part2: string): string {\n  const sizeDiff = part1.length - part2.length;\n  if (sizeDiff < 0 || sizeDiff > 1) {\n    throw ERROR_FACTORY.create(ErrorCode.INVALID_STRING_MERGER_PARAMETER);\n  }\n\n  const resultArray = [];\n  for (let i = 0; i < part1.length; i++) {\n    resultArray.push(part1.charAt(i));\n    if (part2.length > i) {\n      resultArray.push(part2.charAt(i));\n    }\n  }\n\n  return resultArray.join('');\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { SettingsService } from './settings_service';\n\nlet iid: string | undefined;\nlet authToken: string | undefined;\n\nexport function getIidPromise(): Promise<string> {\n  const iidPromise = SettingsService.getInstance().installationsService.getId();\n  // eslint-disable-next-line @typescript-eslint/no-floating-promises\n  iidPromise.then((iidVal: string) => {\n    iid = iidVal;\n  });\n  return iidPromise;\n}\n\n// This method should be used after the iid is retrieved by getIidPromise method.\nexport function getIid(): string | undefined {\n  return iid;\n}\n\nexport function getAuthTokenPromise(): Promise<string> {\n  const authTokenPromise = SettingsService.getInstance().installationsService.getToken();\n  // eslint-disable-next-line @typescript-eslint/no-floating-promises\n  authTokenPromise.then((authTokenVal: string) => {\n    authToken = authTokenVal;\n  });\n  return authTokenPromise;\n}\n\nexport function getAuthenticationToken(): string | undefined {\n  return authToken;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Api } from '../services/api_service';\n\n// The values and orders of the following enums should not be changed.\nconst enum ServiceWorkerStatus {\n  UNKNOWN = 0,\n  UNSUPPORTED = 1,\n  CONTROLLED = 2,\n  UNCONTROLLED = 3\n}\n\nexport enum VisibilityState {\n  UNKNOWN = 0,\n  VISIBLE = 1,\n  HIDDEN = 2\n}\n\nconst enum EffectiveConnectionType {\n  UNKNOWN = 0,\n  CONNECTION_SLOW_2G = 1,\n  CONNECTION_2G = 2,\n  CONNECTION_3G = 3,\n  CONNECTION_4G = 4\n}\n\n/**\n * NetworkInformation\n *\n * ref: https://developer.mozilla.org/en-US/docs/Web/API/NetworkInformation\n */\ninterface NetworkInformation {\n  readonly effectiveType?: 'slow-2g' | '2g' | '3g' | '4g';\n}\n\ninterface NavigatorWithConnection extends Navigator {\n  readonly connection: NetworkInformation;\n}\n\nconst RESERVED_ATTRIBUTE_PREFIXES = ['firebase_', 'google_', 'ga_'];\nconst ATTRIBUTE_FORMAT_REGEX = new RegExp('^[a-zA-Z]\\\\w*$');\nconst MAX_ATTRIBUTE_NAME_LENGTH = 40;\nconst MAX_ATTRIBUTE_VALUE_LENGTH = 100;\n\nexport function getServiceWorkerStatus(): ServiceWorkerStatus {\n  const navigator = Api.getInstance().navigator;\n  if ('serviceWorker' in navigator) {\n    if (navigator.serviceWorker.controller) {\n      return ServiceWorkerStatus.CONTROLLED;\n    } else {\n      return ServiceWorkerStatus.UNCONTROLLED;\n    }\n  } else {\n    return ServiceWorkerStatus.UNSUPPORTED;\n  }\n}\n\nexport function getVisibilityState(): VisibilityState {\n  const document = Api.getInstance().document;\n  const visibilityState = document.visibilityState;\n  switch (visibilityState) {\n    case 'visible':\n      return VisibilityState.VISIBLE;\n    case 'hidden':\n      return VisibilityState.HIDDEN;\n    default:\n      return VisibilityState.UNKNOWN;\n  }\n}\n\nexport function getEffectiveConnectionType(): EffectiveConnectionType {\n  const navigator = Api.getInstance().navigator;\n  const navigatorConnection = (navigator as NavigatorWithConnection).connection;\n  const effectiveType =\n    navigatorConnection && navigatorConnection.effectiveType;\n  switch (effectiveType) {\n    case 'slow-2g':\n      return EffectiveConnectionType.CONNECTION_SLOW_2G;\n    case '2g':\n      return EffectiveConnectionType.CONNECTION_2G;\n    case '3g':\n      return EffectiveConnectionType.CONNECTION_3G;\n    case '4g':\n      return EffectiveConnectionType.CONNECTION_4G;\n    default:\n      return EffectiveConnectionType.UNKNOWN;\n  }\n}\n\nexport function isValidCustomAttributeName(name: string): boolean {\n  if (name.length === 0 || name.length > MAX_ATTRIBUTE_NAME_LENGTH) {\n    return false;\n  }\n  const matchesReservedPrefix = RESERVED_ATTRIBUTE_PREFIXES.some(prefix =>\n    name.startsWith(prefix)\n  );\n  return !matchesReservedPrefix && !!name.match(ATTRIBUTE_FORMAT_REGEX);\n}\n\nexport function isValidCustomAttributeValue(value: string): boolean {\n  return value.length !== 0 && value.length <= MAX_ATTRIBUTE_VALUE_LENGTH;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  CONFIG_EXPIRY_LOCAL_STORAGE_KEY,\n  CONFIG_LOCAL_STORAGE_KEY,\n  SDK_VERSION\n} from '../constants';\nimport { consoleLogger } from '../utils/console_logger';\nimport { ERROR_FACTORY, ErrorCode } from '../utils/errors';\n\nimport { Api } from './api_service';\nimport { getAuthTokenPromise } from './iid_service';\nimport { SettingsService } from './settings_service';\n\nconst REMOTE_CONFIG_SDK_VERSION = '0.0.1';\n\ninterface SecondaryConfig {\n  loggingEnabled?: boolean;\n  logSource?: number;\n  logEndPointUrl?: string;\n  transportKey?: string;\n  tracesSamplingRate?: number;\n  networkRequestsSamplingRate?: number;\n}\n\n// These values will be used if the remote config object is successfully\n// retrieved, but the template does not have these fields.\nconst DEFAULT_CONFIGS: SecondaryConfig = {\n  loggingEnabled: true\n};\n\n/* eslint-disable camelcase */\ninterface RemoteConfigTemplate {\n  fpr_enabled?: string;\n  fpr_log_source?: string;\n  fpr_log_endpoint_url?: string;\n  fpr_log_transport_key?: string;\n  fpr_log_transport_web_percent?: string;\n  fpr_vc_network_request_sampling_rate?: string;\n  fpr_vc_trace_sampling_rate?: string;\n  fpr_vc_session_sampling_rate?: string;\n}\n/* eslint-enable camelcase */\n\ninterface RemoteConfigResponse {\n  entries?: RemoteConfigTemplate;\n  state?: string;\n}\n\nconst FIS_AUTH_PREFIX = 'FIREBASE_INSTALLATIONS_AUTH';\n\nexport function getConfig(iid: string): Promise<void> {\n  const config = getStoredConfig();\n  if (config) {\n    processConfig(config);\n    return Promise.resolve();\n  }\n\n  return getRemoteConfig(iid)\n    .then(processConfig)\n    .then(\n      config => storeConfig(config),\n      /** Do nothing for error, use defaults set in settings service. */\n      () => {}\n    );\n}\n\nfunction getStoredConfig(): RemoteConfigResponse | undefined {\n  const localStorage = Api.getInstance().localStorage;\n  if (!localStorage) {\n    return;\n  }\n  const expiryString = localStorage.getItem(CONFIG_EXPIRY_LOCAL_STORAGE_KEY);\n  if (!expiryString || !configValid(expiryString)) {\n    return;\n  }\n\n  const configStringified = localStorage.getItem(CONFIG_LOCAL_STORAGE_KEY);\n  if (!configStringified) {\n    return;\n  }\n  try {\n    const configResponse: RemoteConfigResponse = JSON.parse(configStringified);\n    return configResponse;\n  } catch {\n    return;\n  }\n}\n\nfunction storeConfig(config: RemoteConfigResponse | undefined): void {\n  const localStorage = Api.getInstance().localStorage;\n  if (!config || !localStorage) {\n    return;\n  }\n\n  localStorage.setItem(CONFIG_LOCAL_STORAGE_KEY, JSON.stringify(config));\n  localStorage.setItem(\n    CONFIG_EXPIRY_LOCAL_STORAGE_KEY,\n    String(\n      Date.now() +\n        SettingsService.getInstance().configTimeToLive * 60 * 60 * 1000\n    )\n  );\n}\n\nconst COULD_NOT_GET_CONFIG_MSG =\n  'Could not fetch config, will use default configs';\n\nfunction getRemoteConfig(\n  iid: string\n): Promise<RemoteConfigResponse | undefined> {\n  // Perf needs auth token only to retrieve remote config.\n  return getAuthTokenPromise()\n    .then(authToken => {\n      const projectId = SettingsService.getInstance().getProjectId();\n      const configEndPoint = `https://firebaseremoteconfig.googleapis.com/v1/projects/${projectId}/namespaces/fireperf:fetch?key=${SettingsService.getInstance().getApiKey()}`;\n      const request = new Request(configEndPoint, {\n        method: 'POST',\n        headers: { Authorization: `${FIS_AUTH_PREFIX} ${authToken}` },\n        /* eslint-disable camelcase */\n        body: JSON.stringify({\n          app_instance_id: iid,\n          app_instance_id_token: authToken,\n          app_id: SettingsService.getInstance().getAppId(),\n          app_version: SDK_VERSION,\n          sdk_version: REMOTE_CONFIG_SDK_VERSION\n        })\n        /* eslint-enable camelcase */\n      });\n      return fetch(request).then(response => {\n        if (response.ok) {\n          return response.json() as RemoteConfigResponse;\n        }\n        // In case response is not ok. This will be caught by catch.\n        throw ERROR_FACTORY.create(ErrorCode.RC_NOT_OK);\n      });\n    })\n    .catch(() => {\n      consoleLogger.info(COULD_NOT_GET_CONFIG_MSG);\n      return undefined;\n    });\n}\n\n/**\n * Processes config coming either from calling RC or from local storage.\n * This method only runs if call is successful or config in storage\n * is valid.\n */\nfunction processConfig(\n  config?: RemoteConfigResponse\n): RemoteConfigResponse | undefined {\n  if (!config) {\n    return config;\n  }\n  const settingsServiceInstance = SettingsService.getInstance();\n  const entries = config.entries || {};\n  if (entries.fpr_enabled !== undefined) {\n    // TODO: Change the assignment of loggingEnabled once the received type is\n    // known.\n    settingsServiceInstance.loggingEnabled =\n      String(entries.fpr_enabled) === 'true';\n  } else if (DEFAULT_CONFIGS.loggingEnabled !== undefined) {\n    // Config retrieved successfully, but there is no fpr_enabled in template.\n    // Use secondary configs value.\n    settingsServiceInstance.loggingEnabled = DEFAULT_CONFIGS.loggingEnabled;\n  }\n  if (entries.fpr_log_source) {\n    settingsServiceInstance.logSource = Number(entries.fpr_log_source);\n  } else if (DEFAULT_CONFIGS.logSource) {\n    settingsServiceInstance.logSource = DEFAULT_CONFIGS.logSource;\n  }\n\n  if (entries.fpr_log_endpoint_url) {\n    settingsServiceInstance.logEndPointUrl = entries.fpr_log_endpoint_url;\n  } else if (DEFAULT_CONFIGS.logEndPointUrl) {\n    settingsServiceInstance.logEndPointUrl = DEFAULT_CONFIGS.logEndPointUrl;\n  }\n\n  // Key from Remote Config has to be non-empty string, otherwsie use local value.\n  if (entries.fpr_log_transport_key) {\n    settingsServiceInstance.transportKey = entries.fpr_log_transport_key;\n  } else if (DEFAULT_CONFIGS.transportKey) {\n    settingsServiceInstance.transportKey = DEFAULT_CONFIGS.transportKey;\n  }\n\n  if (entries.fpr_vc_network_request_sampling_rate !== undefined) {\n    settingsServiceInstance.networkRequestsSamplingRate = Number(\n      entries.fpr_vc_network_request_sampling_rate\n    );\n  } else if (DEFAULT_CONFIGS.networkRequestsSamplingRate !== undefined) {\n    settingsServiceInstance.networkRequestsSamplingRate =\n      DEFAULT_CONFIGS.networkRequestsSamplingRate;\n  }\n  if (entries.fpr_vc_trace_sampling_rate !== undefined) {\n    settingsServiceInstance.tracesSamplingRate = Number(\n      entries.fpr_vc_trace_sampling_rate\n    );\n  } else if (DEFAULT_CONFIGS.tracesSamplingRate !== undefined) {\n    settingsServiceInstance.tracesSamplingRate =\n      DEFAULT_CONFIGS.tracesSamplingRate;\n  }\n  // Set the per session trace and network logging flags.\n  settingsServiceInstance.logTraceAfterSampling = shouldLogAfterSampling(\n    settingsServiceInstance.tracesSamplingRate\n  );\n  settingsServiceInstance.logNetworkAfterSampling = shouldLogAfterSampling(\n    settingsServiceInstance.networkRequestsSamplingRate\n  );\n  return config;\n}\n\nfunction configValid(expiry: string): boolean {\n  return Number(expiry) > Date.now();\n}\n\nfunction shouldLogAfterSampling(samplingRate: number): boolean {\n  return Math.random() <= samplingRate;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getIidPromise } from './iid_service';\nimport { getConfig } from './remote_config_service';\nimport { Api } from './api_service';\n\nconst enum InitializationStatus {\n  notInitialized = 1,\n  initializationPending,\n  initialized\n}\n\nlet initializationStatus = InitializationStatus.notInitialized;\n\nlet initializationPromise: Promise<void> | undefined;\n\nexport function getInitializationPromise(): Promise<void> {\n  initializationStatus = InitializationStatus.initializationPending;\n\n  initializationPromise = initializationPromise || initializePerf();\n\n  return initializationPromise;\n}\n\nexport function isPerfInitialized(): boolean {\n  return initializationStatus === InitializationStatus.initialized;\n}\n\nfunction initializePerf(): Promise<void> {\n  return getDocumentReadyComplete()\n    .then(() => getIidPromise())\n    .then(iid => getConfig(iid))\n    .then(\n      () => changeInitializationStatus(),\n      () => changeInitializationStatus()\n    );\n}\n\n/**\n * Returns a promise which resolves whenever the document readystate is complete or\n * immediately if it is called after page load complete.\n */\nfunction getDocumentReadyComplete(): Promise<void> {\n  const document = Api.getInstance().document;\n  return new Promise(resolve => {\n    if (document && document.readyState !== 'complete') {\n      const handler = (): void => {\n        if (document.readyState === 'complete') {\n          document.removeEventListener('readystatechange', handler);\n          resolve();\n        }\n      };\n      document.addEventListener('readystatechange', handler);\n    } else {\n      resolve();\n    }\n  });\n}\n\nfunction changeInitializationStatus(): void {\n  initializationStatus = InitializationStatus.initialized;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SettingsService } from './settings_service';\nimport { ERROR_FACTORY, ErrorCode } from '../utils/errors';\nimport { consoleLogger } from '../utils/console_logger';\n\nconst DEFAULT_SEND_INTERVAL_MS = 10 * 1000;\nconst INITIAL_SEND_TIME_DELAY_MS = 5.5 * 1000;\n// If end point does not work, the call will be tried for these many times.\nconst DEFAULT_REMAINING_TRIES = 3;\nlet remainingTries = DEFAULT_REMAINING_TRIES;\n\ninterface LogResponseDetails {\n  responseAction?: string;\n}\n\ninterface BatchEvent {\n  message: string;\n  eventTime: number;\n}\n\n/* eslint-disable camelcase */\n// CC/Fl accepted log format.\ninterface TransportBatchLogFormat {\n  request_time_ms: string;\n  client_info: ClientInfo;\n  log_source: number;\n  log_event: Log[];\n}\n\ninterface ClientInfo {\n  client_type: number;\n  js_client_info: {};\n}\n\ninterface Log {\n  source_extension_json_proto3: string;\n  event_time_ms: string;\n}\n/* eslint-enable camelcase */\n\nlet queue: BatchEvent[] = [];\n\nlet isTransportSetup: boolean = false;\n\nexport function setupTransportService(): void {\n  if (!isTransportSetup) {\n    processQueue(INITIAL_SEND_TIME_DELAY_MS);\n    isTransportSetup = true;\n  }\n}\n\n/**\n * Utilized by testing to clean up message queue and un-initialize transport service.\n */\nexport function resetTransportService(): void {\n  isTransportSetup = false;\n  queue = [];\n}\n\nfunction processQueue(timeOffset: number): void {\n  setTimeout(() => {\n    // If there is no remainingTries left, stop retrying.\n    if (remainingTries === 0) {\n      return;\n    }\n\n    // If there are no events to process, wait for DEFAULT_SEND_INTERVAL_MS and try again.\n    if (!queue.length) {\n      return processQueue(DEFAULT_SEND_INTERVAL_MS);\n    }\n\n    dispatchQueueEvents();\n  }, timeOffset);\n}\n\nfunction dispatchQueueEvents(): void {\n  // Capture a snapshot of the queue and empty the \"official queue\".\n  const staged = [...queue];\n  queue = [];\n\n  /* eslint-disable camelcase */\n  // We will pass the JSON serialized event to the backend.\n  const log_event: Log[] = staged.map(evt => ({\n    source_extension_json_proto3: evt.message,\n    event_time_ms: String(evt.eventTime)\n  }));\n\n  const data: TransportBatchLogFormat = {\n    request_time_ms: String(Date.now()),\n    client_info: {\n      client_type: 1, // 1 is JS\n      js_client_info: {}\n    },\n    log_source: SettingsService.getInstance().logSource,\n    log_event\n  };\n  /* eslint-enable camelcase */\n\n  sendEventsToFl(data, staged).catch(() => {\n    // If the request fails for some reason, add the events that were attempted\n    // back to the primary queue to retry later.\n    queue = [...staged, ...queue];\n    remainingTries--;\n    consoleLogger.info(`Tries left: ${remainingTries}.`);\n    processQueue(DEFAULT_SEND_INTERVAL_MS);\n  });\n}\n\nfunction sendEventsToFl(\n  data: TransportBatchLogFormat,\n  staged: BatchEvent[]\n): Promise<void> {\n  return postToFlEndpoint(data)\n    .then(res => {\n      if (!res.ok) {\n        consoleLogger.info('Call to Firebase backend failed.');\n      }\n      return res.json();\n    })\n    .then(res => {\n      // Find the next call wait time from the response.\n      const transportWait = Number(res.nextRequestWaitMillis);\n      let requestOffset = DEFAULT_SEND_INTERVAL_MS;\n      if (!isNaN(transportWait)) {\n        requestOffset = Math.max(transportWait, requestOffset);\n      }\n\n      // Delete request if response include RESPONSE_ACTION_UNKNOWN or DELETE_REQUEST action.\n      // Otherwise, retry request using normal scheduling if response include RETRY_REQUEST_LATER.\n      const logResponseDetails: LogResponseDetails[] = res.logResponseDetails;\n      if (\n        Array.isArray(logResponseDetails) &&\n        logResponseDetails.length > 0 &&\n        logResponseDetails[0].responseAction === 'RETRY_REQUEST_LATER'\n      ) {\n        queue = [...staged, ...queue];\n        consoleLogger.info(`Retry transport request later.`);\n      }\n\n      remainingTries = DEFAULT_REMAINING_TRIES;\n      // Schedule the next process.\n      processQueue(requestOffset);\n    });\n}\n\nfunction postToFlEndpoint(data: TransportBatchLogFormat): Promise<Response> {\n  const flTransportFullUrl = SettingsService.getInstance().getFlTransportFullUrl();\n  return fetch(flTransportFullUrl, {\n    method: 'POST',\n    body: JSON.stringify(data)\n  });\n}\n\nfunction addToQueue(evt: BatchEvent): void {\n  if (!evt.eventTime || !evt.message) {\n    throw ERROR_FACTORY.create(ErrorCode.INVALID_CC_LOG);\n  }\n  // Add the new event to the queue.\n  queue = [...queue, evt];\n}\n\n/** Log handler for cc service to send the performance logs to the server. */\nexport function transportHandler(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  serializer: (...args: any[]) => string\n): (...args: unknown[]) => void {\n  return (...args) => {\n    const message = serializer(...args);\n    addToQueue({\n      message,\n      eventTime: Date.now()\n    });\n  };\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getIid } from './iid_service';\nimport { NetworkRequest } from '../resources/network_request';\nimport { Trace } from '../resources/trace';\nimport { Api } from './api_service';\nimport { SettingsService } from './settings_service';\nimport {\n  getServiceWorkerStatus,\n  getVisibilityState,\n  VisibilityState,\n  getEffectiveConnectionType\n} from '../utils/attributes_utils';\nimport {\n  isPerfInitialized,\n  getInitializationPromise\n} from './initialization_service';\nimport { transportHandler } from './transport_service';\nimport { SDK_VERSION } from '../constants';\n\nconst enum ResourceType {\n  NetworkRequest,\n  Trace\n}\n\n/* eslint-disable camelcase */\ninterface ApplicationInfo {\n  google_app_id: string;\n  app_instance_id?: string;\n  web_app_info: WebAppInfo;\n  application_process_state: number;\n}\n\ninterface WebAppInfo {\n  sdk_version: string;\n  page_url: string;\n  service_worker_status: number;\n  visibility_state: number;\n  effective_connection_type: number;\n}\n\ninterface PerfNetworkLog {\n  application_info: ApplicationInfo;\n  network_request_metric: NetworkRequestMetric;\n}\n\ninterface PerfTraceLog {\n  application_info: ApplicationInfo;\n  trace_metric: TraceMetric;\n}\n\ninterface NetworkRequestMetric {\n  url: string;\n  http_method: number;\n  http_response_code: number;\n  response_payload_bytes?: number;\n  client_start_time_us?: number;\n  time_to_response_initiated_us?: number;\n  time_to_response_completed_us?: number;\n}\n\ninterface TraceMetric {\n  name: string;\n  is_auto: boolean;\n  client_start_time_us: number;\n  duration_us: number;\n  counters?: { [key: string]: number };\n  custom_attributes?: { [key: string]: string };\n}\n\n/* eslint-enble camelcase */\n\nlet logger: (\n  resource: NetworkRequest | Trace,\n  resourceType: ResourceType\n) => void | undefined;\n// This method is not called before initialization.\nfunction sendLog(\n  resource: NetworkRequest | Trace,\n  resourceType: ResourceType\n): void {\n  if (!logger) {\n    logger = transportHandler(serializer);\n  }\n  logger(resource, resourceType);\n}\n\nexport function logTrace(trace: Trace): void {\n  const settingsService = SettingsService.getInstance();\n  // Do not log if trace is auto generated and instrumentation is disabled.\n  if (!settingsService.instrumentationEnabled && trace.isAuto) {\n    return;\n  }\n  // Do not log if trace is custom and data collection is disabled.\n  if (!settingsService.dataCollectionEnabled && !trace.isAuto) {\n    return;\n  }\n  // Do not log if required apis are not available.\n  if (!Api.getInstance().requiredApisAvailable()) {\n    return;\n  }\n\n  // Only log the page load auto traces if page is visible.\n  if (trace.isAuto && getVisibilityState() !== VisibilityState.VISIBLE) {\n    return;\n  }\n\n  if (isPerfInitialized()) {\n    sendTraceLog(trace);\n  } else {\n    // Custom traces can be used before the initialization but logging\n    // should wait until after.\n\n    getInitializationPromise().then(\n      () => sendTraceLog(trace),\n      () => sendTraceLog(trace)\n    );\n  }\n}\n\nfunction sendTraceLog(trace: Trace): void {\n  if (!getIid()) {\n    return;\n  }\n\n  const settingsService = SettingsService.getInstance();\n  if (\n    !settingsService.loggingEnabled ||\n    !settingsService.logTraceAfterSampling\n  ) {\n    return;\n  }\n\n  setTimeout(() => sendLog(trace, ResourceType.Trace), 0);\n}\n\nexport function logNetworkRequest(networkRequest: NetworkRequest): void {\n  const settingsService = SettingsService.getInstance();\n  // Do not log network requests if instrumentation is disabled.\n  if (!settingsService.instrumentationEnabled) {\n    return;\n  }\n\n  // Do not log the js sdk's call to transport service domain to avoid unnecessary cycle.\n  // Need to blacklist both old and new endpoints to avoid migration gap.\n  const networkRequestUrl = networkRequest.url;\n\n  // Blacklist old log endpoint and new transport endpoint.\n  // Because Performance SDK doesn't instrument requests sent from SDK itself.\n  const logEndpointUrl = settingsService.logEndPointUrl.split('?')[0];\n  const flEndpointUrl = settingsService.flTransportEndpointUrl.split('?')[0];\n  if (\n    networkRequestUrl === logEndpointUrl ||\n    networkRequestUrl === flEndpointUrl\n  ) {\n    return;\n  }\n\n  if (\n    !settingsService.loggingEnabled ||\n    !settingsService.logNetworkAfterSampling\n  ) {\n    return;\n  }\n\n  setTimeout(() => sendLog(networkRequest, ResourceType.NetworkRequest), 0);\n}\n\nfunction serializer(\n  resource: NetworkRequest | Trace,\n  resourceType: ResourceType\n): string {\n  if (resourceType === ResourceType.NetworkRequest) {\n    return serializeNetworkRequest(resource as NetworkRequest);\n  }\n  return serializeTrace(resource as Trace);\n}\n\nfunction serializeNetworkRequest(networkRequest: NetworkRequest): string {\n  const networkRequestMetric: NetworkRequestMetric = {\n    url: networkRequest.url,\n    http_method: networkRequest.httpMethod || 0,\n    http_response_code: 200,\n    response_payload_bytes: networkRequest.responsePayloadBytes,\n    client_start_time_us: networkRequest.startTimeUs,\n    time_to_response_initiated_us: networkRequest.timeToResponseInitiatedUs,\n    time_to_response_completed_us: networkRequest.timeToResponseCompletedUs\n  };\n  const perfMetric: PerfNetworkLog = {\n    application_info: getApplicationInfo(),\n    network_request_metric: networkRequestMetric\n  };\n  return JSON.stringify(perfMetric);\n}\n\nfunction serializeTrace(trace: Trace): string {\n  const traceMetric: TraceMetric = {\n    name: trace.name,\n    is_auto: trace.isAuto,\n    client_start_time_us: trace.startTimeUs,\n    duration_us: trace.durationUs\n  };\n\n  if (Object.keys(trace.counters).length !== 0) {\n    traceMetric.counters = trace.counters;\n  }\n  const customAttributes = trace.getAttributes();\n  if (Object.keys(customAttributes).length !== 0) {\n    traceMetric.custom_attributes = customAttributes;\n  }\n\n  const perfMetric: PerfTraceLog = {\n    application_info: getApplicationInfo(),\n    trace_metric: traceMetric\n  };\n  return JSON.stringify(perfMetric);\n}\n\nfunction getApplicationInfo(): ApplicationInfo {\n  return {\n    google_app_id: SettingsService.getInstance().getAppId(),\n    app_instance_id: getIid(),\n    web_app_info: {\n      sdk_version: SDK_VERSION,\n      page_url: Api.getInstance().getUrl(),\n      service_worker_status: getServiceWorkerStatus(),\n      visibility_state: getVisibilityState(),\n      effective_connection_type: getEffectiveConnectionType()\n    },\n    application_process_state: 0\n  };\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FIRST_PAINT_COUNTER_NAME,\n  FIRST_CONTENTFUL_PAINT_COUNTER_NAME,\n  FIRST_INPUT_DELAY_COUNTER_NAME,\n  OOB_TRACE_PAGE_LOAD_PREFIX\n} from '../constants';\nimport { consoleLogger } from '../utils/console_logger';\n\nconst MAX_METRIC_NAME_LENGTH = 100;\nconst RESERVED_AUTO_PREFIX = '_';\nconst oobMetrics = [\n  FIRST_PAINT_COUNTER_NAME,\n  FIRST_CONTENTFUL_PAINT_COUNTER_NAME,\n  FIRST_INPUT_DELAY_COUNTER_NAME\n];\n\n/**\n * Returns true if the metric is custom and does not start with reserved prefix, or if\n * the metric is one of out of the box page load trace metrics.\n */\nexport function isValidMetricName(name: string, traceName?: string): boolean {\n  if (name.length === 0 || name.length > MAX_METRIC_NAME_LENGTH) {\n    return false;\n  }\n  return (\n    (traceName &&\n      traceName.startsWith(OOB_TRACE_PAGE_LOAD_PREFIX) &&\n      oobMetrics.indexOf(name) > -1) ||\n    !name.startsWith(RESERVED_AUTO_PREFIX)\n  );\n}\n\n/**\n * Converts the provided value to an integer value to be used in case of a metric.\n * @param providedValue Provided number value of the metric that needs to be converted to an integer.\n *\n * @returns Converted integer number to be set for the metric.\n */\nexport function convertMetricValueToInteger(providedValue: number): number {\n  const valueAsInteger: number = Math.floor(providedValue);\n  if (valueAsInteger < providedValue) {\n    consoleLogger.info(\n      `Metric value should be an Integer, setting the value as : ${valueAsInteger}.`\n    );\n  }\n  return valueAsInteger;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  TRACE_START_MARK_PREFIX,\n  TRACE_STOP_MARK_PREFIX,\n  TRACE_MEASURE_PREFIX,\n  OOB_TRACE_PAGE_LOAD_PREFIX,\n  FIRST_PAINT_COUNTER_NAME,\n  FIRST_CONTENTFUL_PAINT_COUNTER_NAME,\n  FIRST_INPUT_DELAY_COUNTER_NAME\n} from '../constants';\nimport { Api } from '../services/api_service';\nimport { logTrace } from '../services/perf_logger';\nimport { ERROR_FACTORY, ErrorCode } from '../utils/errors';\nimport {\n  isValidCustomAttributeName,\n  isValidCustomAttributeValue\n} from '../utils/attributes_utils';\nimport {\n  isValidMetricName,\n  convertMetricValueToInteger\n} from '../utils/metric_utils';\nimport { PerformanceTrace } from '@firebase/performance-types';\n\nconst enum TraceState {\n  UNINITIALIZED = 1,\n  RUNNING,\n  TERMINATED\n}\n\nexport class Trace implements PerformanceTrace {\n  private state: TraceState = TraceState.UNINITIALIZED;\n  startTimeUs!: number;\n  durationUs!: number;\n  private customAttributes: { [key: string]: string } = {};\n  counters: { [counterName: string]: number } = {};\n  private api = Api.getInstance();\n  private randomId = Math.floor(Math.random() * 1000000);\n  private traceStartMark!: string;\n  private traceStopMark!: string;\n  private traceMeasure!: string;\n\n  /**\n   * @param name The name of the trace.\n   * @param isAuto If the trace is auto-instrumented.\n   * @param traceMeasureName The name of the measure marker in user timing specification. This field\n   * is only set when the trace is built for logging when the user directly uses the user timing\n   * api (performance.mark and performance.measure).\n   */\n  constructor(\n    readonly name: string,\n    readonly isAuto = false,\n    traceMeasureName?: string\n  ) {\n    if (!this.isAuto) {\n      this.traceStartMark = `${TRACE_START_MARK_PREFIX}-${this.randomId}-${this.name}`;\n      this.traceStopMark = `${TRACE_STOP_MARK_PREFIX}-${this.randomId}-${this.name}`;\n      this.traceMeasure =\n        traceMeasureName ||\n        `${TRACE_MEASURE_PREFIX}-${this.randomId}-${this.name}`;\n\n      if (traceMeasureName) {\n        // For the case of direct user timing traces, no start stop will happen. The measure object\n        // is already available.\n        this.calculateTraceMetrics();\n      }\n    }\n  }\n\n  /**\n   * Starts a trace. The measurement of the duration starts at this point.\n   */\n  start(): void {\n    if (this.state !== TraceState.UNINITIALIZED) {\n      throw ERROR_FACTORY.create(ErrorCode.TRACE_STARTED_BEFORE, {\n        traceName: this.name\n      });\n    }\n    this.api.mark(this.traceStartMark);\n    this.state = TraceState.RUNNING;\n  }\n\n  /**\n   * Stops the trace. The measurement of the duration of the trace stops at this point and trace\n   * is logged.\n   */\n  stop(): void {\n    if (this.state !== TraceState.RUNNING) {\n      throw ERROR_FACTORY.create(ErrorCode.TRACE_STOPPED_BEFORE, {\n        traceName: this.name\n      });\n    }\n    this.state = TraceState.TERMINATED;\n    this.api.mark(this.traceStopMark);\n    this.api.measure(\n      this.traceMeasure,\n      this.traceStartMark,\n      this.traceStopMark\n    );\n    this.calculateTraceMetrics();\n    logTrace(this);\n  }\n\n  /**\n   * Records a trace with predetermined values. If this method is used a trace is created and logged\n   * directly. No need to use start and stop methods.\n   * @param startTime Trace start time since epoch in millisec\n   * @param duration The duraction of the trace in millisec\n   * @param options An object which can optionally hold maps of custom metrics and custom attributes\n   */\n  record(\n    startTime: number,\n    duration: number,\n    options?: {\n      metrics?: { [key: string]: number };\n      attributes?: { [key: string]: string };\n    }\n  ): void {\n    if (startTime <= 0) {\n      throw ERROR_FACTORY.create(ErrorCode.NONPOSITIVE_TRACE_START_TIME, {\n        traceName: this.name\n      });\n    }\n    if (duration <= 0) {\n      throw ERROR_FACTORY.create(ErrorCode.NONPOSITIVE_TRACE_DURATION, {\n        traceName: this.name\n      });\n    }\n\n    this.durationUs = Math.floor(duration * 1000);\n    this.startTimeUs = Math.floor(startTime * 1000);\n    if (options && options.attributes) {\n      this.customAttributes = { ...options.attributes };\n    }\n    if (options && options.metrics) {\n      for (const metric of Object.keys(options.metrics)) {\n        if (!isNaN(Number(options.metrics[metric]))) {\n          this.counters[metric] = Number(Math.floor(options.metrics[metric]));\n        }\n      }\n    }\n    logTrace(this);\n  }\n\n  /**\n   * Increments a custom metric by a certain number or 1 if number not specified. Will create a new\n   * custom metric if one with the given name does not exist. The value will be floored down to an\n   * integer.\n   * @param counter Name of the custom metric\n   * @param numAsInteger Increment by value\n   */\n  incrementMetric(counter: string, numAsInteger = 1): void {\n    if (this.counters[counter] === undefined) {\n      this.putMetric(counter, numAsInteger);\n    } else {\n      this.putMetric(counter, this.counters[counter] + numAsInteger);\n    }\n  }\n\n  /**\n   * Sets a custom metric to a specified value. Will create a new custom metric if one with the\n   * given name does not exist. The value will be floored down to an integer.\n   * @param counter Name of the custom metric\n   * @param numAsInteger Set custom metric to this value\n   */\n  putMetric(counter: string, numAsInteger: number): void {\n    if (isValidMetricName(counter, this.name)) {\n      this.counters[counter] = convertMetricValueToInteger(numAsInteger);\n    } else {\n      throw ERROR_FACTORY.create(ErrorCode.INVALID_CUSTOM_METRIC_NAME, {\n        customMetricName: counter\n      });\n    }\n  }\n\n  /**\n   * Returns the value of the custom metric by that name. If a custom metric with that name does\n   * not exist will return zero.\n   * @param counter\n   */\n  getMetric(counter: string): number {\n    return this.counters[counter] || 0;\n  }\n\n  /**\n   * Sets a custom attribute of a trace to a certain value.\n   * @param attr\n   * @param value\n   */\n  putAttribute(attr: string, value: string): void {\n    const isValidName = isValidCustomAttributeName(attr);\n    const isValidValue = isValidCustomAttributeValue(value);\n    if (isValidName && isValidValue) {\n      this.customAttributes[attr] = value;\n      return;\n    }\n    // Throw appropriate error when the attribute name or value is invalid.\n    if (!isValidName) {\n      throw ERROR_FACTORY.create(ErrorCode.INVALID_ATTRIBUTE_NAME, {\n        attributeName: attr\n      });\n    }\n    if (!isValidValue) {\n      throw ERROR_FACTORY.create(ErrorCode.INVALID_ATTRIBUTE_VALUE, {\n        attributeValue: value\n      });\n    }\n  }\n\n  /**\n   * Retrieves the value a custom attribute of a trace is set to.\n   * @param attr\n   */\n  getAttribute(attr: string): string | undefined {\n    return this.customAttributes[attr];\n  }\n\n  removeAttribute(attr: string): void {\n    if (this.customAttributes[attr] === undefined) {\n      return;\n    }\n    delete this.customAttributes[attr];\n  }\n\n  getAttributes(): { [key: string]: string } {\n    return { ...this.customAttributes };\n  }\n\n  private setStartTime(startTime: number): void {\n    this.startTimeUs = startTime;\n  }\n\n  private setDuration(duration: number): void {\n    this.durationUs = duration;\n  }\n\n  /**\n   * Calculates and assigns the duration and start time of the trace using the measure performance\n   * entry.\n   */\n  private calculateTraceMetrics(): void {\n    const perfMeasureEntries = this.api.getEntriesByName(this.traceMeasure);\n    const perfMeasureEntry = perfMeasureEntries && perfMeasureEntries[0];\n    if (perfMeasureEntry) {\n      this.durationUs = Math.floor(perfMeasureEntry.duration * 1000);\n      this.startTimeUs = Math.floor(\n        (perfMeasureEntry.startTime + this.api.getTimeOrigin()) * 1000\n      );\n    }\n  }\n\n  /**\n   * @param navigationTimings A single element array which contains the navigationTIming object of\n   * the page load\n   * @param paintTimings A array which contains paintTiming object of the page load\n   * @param firstInputDelay First input delay in millisec\n   */\n  static createOobTrace(\n    navigationTimings: PerformanceNavigationTiming[],\n    paintTimings: PerformanceEntry[],\n    firstInputDelay?: number\n  ): void {\n    const route = Api.getInstance().getUrl();\n    if (!route) {\n      return;\n    }\n    const trace = new Trace(OOB_TRACE_PAGE_LOAD_PREFIX + route, true);\n    const timeOriginUs = Math.floor(Api.getInstance().getTimeOrigin() * 1000);\n    trace.setStartTime(timeOriginUs);\n\n    // navigationTimings includes only one element.\n    if (navigationTimings && navigationTimings[0]) {\n      trace.setDuration(Math.floor(navigationTimings[0].duration * 1000));\n      trace.putMetric(\n        'domInteractive',\n        Math.floor(navigationTimings[0].domInteractive * 1000)\n      );\n      trace.putMetric(\n        'domContentLoadedEventEnd',\n        Math.floor(navigationTimings[0].domContentLoadedEventEnd * 1000)\n      );\n      trace.putMetric(\n        'loadEventEnd',\n        Math.floor(navigationTimings[0].loadEventEnd * 1000)\n      );\n    }\n\n    const FIRST_PAINT = 'first-paint';\n    const FIRST_CONTENTFUL_PAINT = 'first-contentful-paint';\n    if (paintTimings) {\n      const firstPaint = paintTimings.find(\n        paintObject => paintObject.name === FIRST_PAINT\n      );\n      if (firstPaint && firstPaint.startTime) {\n        trace.putMetric(\n          FIRST_PAINT_COUNTER_NAME,\n          Math.floor(firstPaint.startTime * 1000)\n        );\n      }\n      const firstContentfulPaint = paintTimings.find(\n        paintObject => paintObject.name === FIRST_CONTENTFUL_PAINT\n      );\n      if (firstContentfulPaint && firstContentfulPaint.startTime) {\n        trace.putMetric(\n          FIRST_CONTENTFUL_PAINT_COUNTER_NAME,\n          Math.floor(firstContentfulPaint.startTime * 1000)\n        );\n      }\n\n      if (firstInputDelay) {\n        trace.putMetric(\n          FIRST_INPUT_DELAY_COUNTER_NAME,\n          Math.floor(firstInputDelay * 1000)\n        );\n      }\n    }\n\n    logTrace(trace);\n  }\n\n  static createUserTimingTrace(measureName: string): void {\n    const trace = new Trace(measureName, false, measureName);\n    logTrace(trace);\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Api } from '../services/api_service';\nimport { logNetworkRequest } from '../services/perf_logger';\n\n// The order of values of this enum should not be changed.\nexport const enum HttpMethod {\n  HTTP_METHOD_UNKNOWN = 0,\n  GET = 1,\n  PUT = 2,\n  POST = 3,\n  DELETE = 4,\n  HEAD = 5,\n  PATCH = 6,\n  OPTIONS = 7,\n  TRACE = 8,\n  CONNECT = 9\n}\n\n// Durations are in microseconds.\nexport interface NetworkRequest {\n  url: string;\n  httpMethod?: HttpMethod;\n  requestPayloadBytes?: number;\n  responsePayloadBytes?: number;\n  httpResponseCode?: number;\n  responseContentType?: string;\n  startTimeUs?: number;\n  timeToRequestCompletedUs?: number;\n  timeToResponseInitiatedUs?: number;\n  timeToResponseCompletedUs?: number;\n}\n\nexport function createNetworkRequestEntry(entry: PerformanceEntry): void {\n  const performanceEntry = entry as PerformanceResourceTiming;\n  if (!performanceEntry || performanceEntry.responseStart === undefined) {\n    return;\n  }\n  const timeOrigin = Api.getInstance().getTimeOrigin();\n  const startTimeUs = Math.floor(\n    (performanceEntry.startTime + timeOrigin) * 1000\n  );\n  const timeToResponseInitiatedUs = performanceEntry.responseStart\n    ? Math.floor(\n        (performanceEntry.responseStart - performanceEntry.startTime) * 1000\n      )\n    : undefined;\n  const timeToResponseCompletedUs = Math.floor(\n    (performanceEntry.responseEnd - performanceEntry.startTime) * 1000\n  );\n  // Remove the query params from logged network request url.\n  const url = performanceEntry.name && performanceEntry.name.split('?')[0];\n  const networkRequest: NetworkRequest = {\n    url,\n    responsePayloadBytes: performanceEntry.transferSize,\n    startTimeUs,\n    timeToResponseInitiatedUs,\n    timeToResponseCompletedUs\n  };\n\n  logNetworkRequest(networkRequest);\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Api } from './api_service';\nimport { Trace } from '../resources/trace';\nimport { createNetworkRequestEntry } from '../resources/network_request';\nimport { TRACE_MEASURE_PREFIX } from '../constants';\nimport { getIid } from './iid_service';\n\nconst FID_WAIT_TIME_MS = 5000;\n\nexport function setupOobResources(): void {\n  // Do not initialize unless iid is available.\n  if (!getIid()) {\n    return;\n  }\n  // The load event might not have fired yet, and that means performance navigation timing\n  // object has a duration of 0. The setup should run after all current tasks in js queue.\n  setTimeout(() => setupOobTraces(), 0);\n  setTimeout(() => setupNetworkRequests(), 0);\n  setTimeout(() => setupUserTimingTraces(), 0);\n}\n\nfunction setupNetworkRequests(): void {\n  const api = Api.getInstance();\n  const resources = api.getEntriesByType('resource');\n  for (const resource of resources) {\n    createNetworkRequestEntry(resource);\n  }\n  api.setupObserver('resource', createNetworkRequestEntry);\n}\n\nfunction setupOobTraces(): void {\n  const api = Api.getInstance();\n  const navigationTimings = api.getEntriesByType(\n    'navigation'\n  ) as PerformanceNavigationTiming[];\n  const paintTimings = api.getEntriesByType('paint');\n  // If First Input Desly polyfill is added to the page, report the fid value.\n  // https://github.com/GoogleChromeLabs/first-input-delay\n  if (api.onFirstInputDelay) {\n    // If the fid call back is not called for certain time, continue without it.\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    let timeoutId: any = setTimeout(() => {\n      Trace.createOobTrace(navigationTimings, paintTimings);\n      timeoutId = undefined;\n    }, FID_WAIT_TIME_MS);\n    api.onFirstInputDelay((fid: number) => {\n      if (timeoutId) {\n        clearTimeout(timeoutId);\n        Trace.createOobTrace(navigationTimings, paintTimings, fid);\n      }\n    });\n  } else {\n    Trace.createOobTrace(navigationTimings, paintTimings);\n  }\n}\n\nfunction setupUserTimingTraces(): void {\n  const api = Api.getInstance();\n  // Run through the measure performance entries collected up to this point.\n  const measures = api.getEntriesByType('measure');\n  for (const measure of measures) {\n    createUserTimingTrace(measure);\n  }\n  // Setup an observer to capture the measures from this point on.\n  api.setupObserver('measure', createUserTimingTrace);\n}\n\nfunction createUserTimingTrace(measure: PerformanceEntry): void {\n  const measureName = measure.name;\n  // Do not create a trace, if the user timing marks and measures are created by the sdk itself.\n  if (\n    measureName.substring(0, TRACE_MEASURE_PREFIX.length) ===\n    TRACE_MEASURE_PREFIX\n  ) {\n    return;\n  }\n  Trace.createUserTimingTrace(measureName);\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Trace } from '../resources/trace';\nimport { setupOobResources } from '../services/oob_resources_service';\nimport { SettingsService } from '../services/settings_service';\nimport { getInitializationPromise } from '../services/initialization_service';\nimport { Api } from '../services/api_service';\nimport { FirebaseApp } from '@firebase/app-types';\nimport { FirebasePerformance } from '@firebase/performance-types';\nimport { setupTransportService } from '../services/transport_service';\nimport { validateIndexedDBOpenable } from '@firebase/util';\nimport { consoleLogger } from '../utils/console_logger';\nexport class PerformanceController implements FirebasePerformance {\n  constructor(readonly app: FirebaseApp) {\n    if (Api.getInstance().requiredApisAvailable()) {\n      validateIndexedDBOpenable()\n        .then(isAvailable => {\n          if (isAvailable) {\n            setupTransportService();\n            getInitializationPromise().then(\n              setupOobResources,\n              setupOobResources\n            );\n          }\n        })\n        .catch(error => {\n          consoleLogger.info(`Environment doesn't support IndexedDB: ${error}`);\n        });\n    }\n  }\n\n  trace(name: string): Trace {\n    return new Trace(name);\n  }\n\n  set instrumentationEnabled(val: boolean) {\n    SettingsService.getInstance().instrumentationEnabled = val;\n  }\n  get instrumentationEnabled(): boolean {\n    return SettingsService.getInstance().instrumentationEnabled;\n  }\n\n  set dataCollectionEnabled(val: boolean) {\n    SettingsService.getInstance().dataCollectionEnabled = val;\n  }\n  get dataCollectionEnabled(): boolean {\n    return SettingsService.getInstance().dataCollectionEnabled;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger } from '@firebase/logger';\n\nexport const logger = new Logger('@firebase/analytics');\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  DynamicConfig,\n  DataLayer,\n  Gtag,\n  CustomParams,\n  ControlParams,\n  EventParams,\n  MinimalDynamicConfig\n} from '@firebase/analytics-types';\nimport { GtagCommand, GTAG_URL } from './constants';\nimport { logger } from './logger';\n\n/**\n * Inserts gtag script tag into the page to asynchronously download gtag.\n * @param dataLayerName Name of datalayer (most often the default, \"_dataLayer\").\n */\nexport function insertScriptTag(dataLayerName: string): void {\n  const script = document.createElement('script');\n  // We are not providing an analyticsId in the URL because it would trigger a `page_view`\n  // without fid. We will initialize ga-id using gtag (config) command together with fid.\n  script.src = `${GTAG_URL}?l=${dataLayerName}`;\n  script.async = true;\n  document.head.appendChild(script);\n}\n\n/**\n * Get reference to, or create, global datalayer.\n * @param dataLayerName Name of datalayer (most often the default, \"_dataLayer\").\n */\nexport function getOrCreateDataLayer(dataLayerName: string): DataLayer {\n  // Check for existing dataLayer and create if needed.\n  let dataLayer: DataLayer = [];\n  if (Array.isArray(window[dataLayerName])) {\n    dataLayer = window[dataLayerName] as DataLayer;\n  } else {\n    window[dataLayerName] = dataLayer;\n  }\n  return dataLayer;\n}\n\n/**\n * Wrapped gtag logic when gtag is called with 'config' command.\n *\n * @param gtagCore Basic gtag function that just appends to dataLayer.\n * @param initializationPromisesMap Map of appIds to their initialization promises.\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\n * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.\n * @param measurementId GA Measurement ID to set config for.\n * @param gtagParams Gtag config params to set.\n */\nasync function gtagOnConfig(\n  gtagCore: Gtag,\n  initializationPromisesMap: { [appId: string]: Promise<string> },\n  dynamicConfigPromisesList: Array<\n    Promise<DynamicConfig | MinimalDynamicConfig>\n  >,\n  measurementIdToAppId: { [measurementId: string]: string },\n  measurementId: string,\n  gtagParams?: ControlParams & EventParams & CustomParams\n): Promise<void> {\n  // If config is already fetched, we know the appId and can use it to look up what FID promise we\n  /// are waiting for, and wait only on that one.\n  const correspondingAppId = measurementIdToAppId[measurementId as string];\n  try {\n    if (correspondingAppId) {\n      await initializationPromisesMap[correspondingAppId];\n    } else {\n      // If config is not fetched yet, wait for all configs (we don't know which one we need) and\n      // find the appId (if any) corresponding to this measurementId. If there is one, wait on\n      // that appId's initialization promise. If there is none, promise resolves and gtag\n      // call goes through.\n      const dynamicConfigResults = await Promise.all(dynamicConfigPromisesList);\n      const foundConfig = dynamicConfigResults.find(\n        config => config.measurementId === measurementId\n      );\n      if (foundConfig) {\n        await initializationPromisesMap[foundConfig.appId];\n      }\n    }\n  } catch (e) {\n    logger.error(e);\n  }\n  gtagCore(GtagCommand.CONFIG, measurementId, gtagParams);\n}\n\n/**\n * Wrapped gtag logic when gtag is called with 'event' command.\n *\n * @param gtagCore Basic gtag function that just appends to dataLayer.\n * @param initializationPromisesMap Map of appIds to their initialization promises.\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\n * @param measurementId GA Measurement ID to log event to.\n * @param gtagParams Params to log with this event.\n */\nasync function gtagOnEvent(\n  gtagCore: Gtag,\n  initializationPromisesMap: { [appId: string]: Promise<string> },\n  dynamicConfigPromisesList: Array<\n    Promise<DynamicConfig | MinimalDynamicConfig>\n  >,\n  measurementId: string,\n  gtagParams?: ControlParams & EventParams & CustomParams\n): Promise<void> {\n  try {\n    let initializationPromisesToWaitFor: Array<Promise<string>> = [];\n\n    // If there's a 'send_to' param, check if any ID specified matches\n    // an initializeIds() promise we are waiting for.\n    if (gtagParams && gtagParams['send_to']) {\n      let gaSendToList: string | string[] = gtagParams['send_to'];\n      // Make it an array if is isn't, so it can be dealt with the same way.\n      if (!Array.isArray(gaSendToList)) {\n        gaSendToList = [gaSendToList];\n      }\n      // Checking 'send_to' fields requires having all measurement ID results back from\n      // the dynamic config fetch.\n      const dynamicConfigResults = await Promise.all(dynamicConfigPromisesList);\n      for (const sendToId of gaSendToList) {\n        // Any fetched dynamic measurement ID that matches this 'send_to' ID\n        const foundConfig = dynamicConfigResults.find(\n          config => config.measurementId === sendToId\n        );\n        const initializationPromise =\n          foundConfig && initializationPromisesMap[foundConfig.appId];\n        if (initializationPromise) {\n          initializationPromisesToWaitFor.push(initializationPromise);\n        } else {\n          // Found an item in 'send_to' that is not associated\n          // directly with an FID, possibly a group.  Empty this array,\n          // exit the loop early, and let it get populated below.\n          initializationPromisesToWaitFor = [];\n          break;\n        }\n      }\n    }\n\n    // This will be unpopulated if there was no 'send_to' field , or\n    // if not all entries in the 'send_to' field could be mapped to\n    // a FID. In these cases, wait on all pending initialization promises.\n    if (initializationPromisesToWaitFor.length === 0) {\n      initializationPromisesToWaitFor = Object.values(\n        initializationPromisesMap\n      );\n    }\n\n    // Run core gtag function with args after all relevant initialization\n    // promises have been resolved.\n    await Promise.all(initializationPromisesToWaitFor);\n    // Workaround for http://b/141370449 - third argument cannot be undefined.\n    gtagCore(GtagCommand.EVENT, measurementId, gtagParams || {});\n  } catch (e) {\n    logger.error(e);\n  }\n}\n\n/**\n * Wraps a standard gtag function with extra code to wait for completion of\n * relevant initialization promises before sending requests.\n *\n * @param gtagCore Basic gtag function that just appends to dataLayer.\n * @param initializationPromisesMap Map of appIds to their initialization promises.\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\n * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.\n */\nfunction wrapGtag(\n  gtagCore: Gtag,\n  /**\n   * Allows wrapped gtag calls to wait on whichever intialization promises are required,\n   * depending on the contents of the gtag params' `send_to` field, if any.\n   */\n  initializationPromisesMap: { [appId: string]: Promise<string> },\n  /**\n   * Wrapped gtag calls sometimes require all dynamic config fetches to have returned\n   * before determining what initialization promises (which include FIDs) to wait for.\n   */\n  dynamicConfigPromisesList: Array<\n    Promise<DynamicConfig | MinimalDynamicConfig>\n  >,\n  /**\n   * Wrapped gtag config calls can narrow down which initialization promise (with FID)\n   * to wait for if the measurementId is already fetched, by getting the corresponding appId,\n   * which is the key for the initialization promises map.\n   */\n  measurementIdToAppId: { [measurementId: string]: string }\n): Gtag {\n  /**\n   * Wrapper around gtag that ensures FID is sent with gtag calls.\n   * @param command Gtag command type.\n   * @param idOrNameOrParams Measurement ID if command is EVENT/CONFIG, params if command is SET.\n   * @param gtagParams Params if event is EVENT/CONFIG.\n   */\n  async function gtagWrapper(\n    command: 'config' | 'set' | 'event',\n    idOrNameOrParams: string | ControlParams,\n    gtagParams?: ControlParams & EventParams & CustomParams\n  ): Promise<void> {\n    try {\n      // If event, check that relevant initialization promises have completed.\n      if (command === GtagCommand.EVENT) {\n        // If EVENT, second arg must be measurementId.\n        await gtagOnEvent(\n          gtagCore,\n          initializationPromisesMap,\n          dynamicConfigPromisesList,\n          idOrNameOrParams as string,\n          gtagParams\n        );\n      } else if (command === GtagCommand.CONFIG) {\n        // If CONFIG, second arg must be measurementId.\n        await gtagOnConfig(\n          gtagCore,\n          initializationPromisesMap,\n          dynamicConfigPromisesList,\n          measurementIdToAppId,\n          idOrNameOrParams as string,\n          gtagParams\n        );\n      } else {\n        // If SET, second arg must be params.\n        gtagCore(GtagCommand.SET, idOrNameOrParams as CustomParams);\n      }\n    } catch (e) {\n      logger.error(e);\n    }\n  }\n  return gtagWrapper;\n}\n\n/**\n * Creates global gtag function or wraps existing one if found.\n * This wrapped function attaches Firebase instance ID (FID) to gtag 'config' and\n * 'event' calls that belong to the GAID associated with this Firebase instance.\n *\n * @param initializationPromisesMap Map of appIds to their initialization promises.\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\n * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.\n * @param dataLayerName Name of global GA datalayer array.\n * @param gtagFunctionName Name of global gtag function (\"gtag\" if not user-specified).\n */\nexport function wrapOrCreateGtag(\n  initializationPromisesMap: { [appId: string]: Promise<string> },\n  dynamicConfigPromisesList: Array<\n    Promise<DynamicConfig | MinimalDynamicConfig>\n  >,\n  measurementIdToAppId: { [measurementId: string]: string },\n  dataLayerName: string,\n  gtagFunctionName: string\n): {\n  gtagCore: Gtag;\n  wrappedGtag: Gtag;\n} {\n  // Create a basic core gtag function\n  let gtagCore: Gtag = function (..._args: unknown[]) {\n    // Must push IArguments object, not an array.\n    (window[dataLayerName] as DataLayer).push(arguments);\n  };\n\n  // Replace it with existing one if found\n  if (\n    window[gtagFunctionName] &&\n    typeof window[gtagFunctionName] === 'function'\n  ) {\n    // @ts-ignore\n    gtagCore = window[gtagFunctionName];\n  }\n\n  window[gtagFunctionName] = wrapGtag(\n    gtagCore,\n    initializationPromisesMap,\n    dynamicConfigPromisesList,\n    measurementIdToAppId\n  );\n\n  return {\n    gtagCore,\n    wrappedGtag: window[gtagFunctionName] as Gtag\n  };\n}\n\n/**\n * Returns first script tag in DOM matching our gtag url pattern.\n */\nexport function findGtagScriptOnPage(): HTMLScriptElement | null {\n  const scriptTags = window.document.getElementsByTagName('script');\n  for (const tag of Object.values(scriptTags)) {\n    if (tag.src && tag.src.includes(GTAG_URL)) {\n      return tag;\n    }\n  }\n  return null;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory, FirebaseError } from '@firebase/util';\n\nexport const enum ErrorCode {\n  REGISTRATION_WINDOW = 'registration-window',\n  REGISTRATION_PROJECT_ID = 'registration-project-id',\n  REGISTRATION_API_KEY = 'registration-api-key',\n  REGISTRATION_APP_ID = 'registration-app-id',\n  STORAGE_OPEN = 'storage-open',\n  STORAGE_GET = 'storage-get',\n  STORAGE_SET = 'storage-set',\n  STORAGE_DELETE = 'storage-delete',\n  FETCH_NETWORK = 'fetch-client-network',\n  FETCH_TIMEOUT = 'fetch-timeout',\n  FETCH_THROTTLE = 'fetch-throttle',\n  FETCH_PARSE = 'fetch-client-parse',\n  FETCH_STATUS = 'fetch-status'\n}\n\nconst ERROR_DESCRIPTION_MAP: { readonly [key in ErrorCode]: string } = {\n  [ErrorCode.REGISTRATION_WINDOW]:\n    'Undefined window object. This SDK only supports usage in a browser environment.',\n  [ErrorCode.REGISTRATION_PROJECT_ID]:\n    'Undefined project identifier. Check Firebase app initialization.',\n  [ErrorCode.REGISTRATION_API_KEY]:\n    'Undefined API key. Check Firebase app initialization.',\n  [ErrorCode.REGISTRATION_APP_ID]:\n    'Undefined app identifier. Check Firebase app initialization.',\n  [ErrorCode.STORAGE_OPEN]:\n    'Error thrown when opening storage. Original error: {$originalErrorMessage}.',\n  [ErrorCode.STORAGE_GET]:\n    'Error thrown when reading from storage. Original error: {$originalErrorMessage}.',\n  [ErrorCode.STORAGE_SET]:\n    'Error thrown when writing to storage. Original error: {$originalErrorMessage}.',\n  [ErrorCode.STORAGE_DELETE]:\n    'Error thrown when deleting from storage. Original error: {$originalErrorMessage}.',\n  [ErrorCode.FETCH_NETWORK]:\n    'Fetch client failed to connect to a network. Check Internet connection.' +\n    ' Original error: {$originalErrorMessage}.',\n  [ErrorCode.FETCH_TIMEOUT]:\n    'The config fetch request timed out. ' +\n    ' Configure timeout using \"fetchTimeoutMillis\" SDK setting.',\n  [ErrorCode.FETCH_THROTTLE]:\n    'The config fetch request timed out while in an exponential backoff state.' +\n    ' Configure timeout using \"fetchTimeoutMillis\" SDK setting.' +\n    ' Unix timestamp in milliseconds when fetch request throttling ends: {$throttleEndTimeMillis}.',\n  [ErrorCode.FETCH_PARSE]:\n    'Fetch client could not parse response.' +\n    ' Original error: {$originalErrorMessage}.',\n  [ErrorCode.FETCH_STATUS]:\n    'Fetch server returned an HTTP error status. HTTP status: {$httpStatus}.'\n};\n\n// Note this is effectively a type system binding a code to params. This approach overlaps with the\n// role of TS interfaces, but works well for a few reasons:\n// 1) JS is unaware of TS interfaces, eg we can't test for interface implementation in JS\n// 2) callers should have access to a human-readable summary of the error and this interpolates\n//    params into an error message;\n// 3) callers should be able to programmatically access data associated with an error, which\n//    ErrorData provides.\ninterface ErrorParams {\n  [ErrorCode.STORAGE_OPEN]: { originalErrorMessage: string | undefined };\n  [ErrorCode.STORAGE_GET]: { originalErrorMessage: string | undefined };\n  [ErrorCode.STORAGE_SET]: { originalErrorMessage: string | undefined };\n  [ErrorCode.STORAGE_DELETE]: { originalErrorMessage: string | undefined };\n  [ErrorCode.FETCH_NETWORK]: { originalErrorMessage: string };\n  [ErrorCode.FETCH_THROTTLE]: { throttleEndTimeMillis: number };\n  [ErrorCode.FETCH_PARSE]: { originalErrorMessage: string };\n  [ErrorCode.FETCH_STATUS]: { httpStatus: number };\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<ErrorCode, ErrorParams>(\n  'remoteconfig' /* service */,\n  'Remote Config' /* service name */,\n  ERROR_DESCRIPTION_MAP\n);\n\n// Note how this is like typeof/instanceof, but for ErrorCode.\nexport function hasErrorCode(e: Error, errorCode: ErrorCode): boolean {\n  return e instanceof FirebaseError && e.code.indexOf(errorCode) !== -1;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Most logic is copied from packages/remote-config/src/client/retrying_client.ts\n */\n\nimport { FirebaseApp } from '@firebase/app-types';\nimport {\n  DynamicConfig,\n  ThrottleMetadata,\n  MinimalDynamicConfig\n} from '@firebase/analytics-types';\nimport { FirebaseError, calculateBackoffMillis } from '@firebase/util';\nimport { AnalyticsError, ERROR_FACTORY } from './errors';\nimport { DYNAMIC_CONFIG_URL, FETCH_TIMEOUT_MILLIS } from './constants';\nimport { logger } from './logger';\n\n// App config fields needed by analytics.\nexport interface AppFields {\n  appId: string;\n  apiKey: string;\n  measurementId?: string;\n}\n\n/**\n * Backoff factor for 503 errors, which we want to be conservative about\n * to avoid overloading servers. Each retry interval will be\n * BASE_INTERVAL_MILLIS * LONG_RETRY_FACTOR ^ retryCount, so the second one\n * will be ~30 seconds (with fuzzing).\n */\nexport const LONG_RETRY_FACTOR = 30;\n\n/**\n * Base wait interval to multiplied by backoffFactor^backoffCount.\n */\nconst BASE_INTERVAL_MILLIS = 1000;\n\n/**\n * Stubbable retry data storage class.\n */\nclass RetryData {\n  constructor(\n    public throttleMetadata: { [appId: string]: ThrottleMetadata } = {},\n    public intervalMillis: number = BASE_INTERVAL_MILLIS\n  ) {}\n\n  getThrottleMetadata(appId: string): ThrottleMetadata {\n    return this.throttleMetadata[appId];\n  }\n\n  setThrottleMetadata(appId: string, metadata: ThrottleMetadata): void {\n    this.throttleMetadata[appId] = metadata;\n  }\n\n  deleteThrottleMetadata(appId: string): void {\n    delete this.throttleMetadata[appId];\n  }\n}\n\nconst defaultRetryData = new RetryData();\n\n/**\n * Set GET request headers.\n * @param apiKey App API key.\n */\nfunction getHeaders(apiKey: string): Headers {\n  return new Headers({\n    Accept: 'application/json',\n    'x-goog-api-key': apiKey\n  });\n}\n\n/**\n * Fetches dynamic config from backend.\n * @param app Firebase app to fetch config for.\n */\nexport async function fetchDynamicConfig(\n  appFields: AppFields\n): Promise<DynamicConfig> {\n  const { appId, apiKey } = appFields;\n  const request: RequestInit = {\n    method: 'GET',\n    headers: getHeaders(apiKey)\n  };\n  const appUrl = DYNAMIC_CONFIG_URL.replace('{app-id}', appId);\n  const response = await fetch(appUrl, request);\n  if (response.status !== 200 && response.status !== 304) {\n    let errorMessage = '';\n    try {\n      // Try to get any error message text from server response.\n      const jsonResponse = (await response.json()) as {\n        error?: { message?: string };\n      };\n      if (jsonResponse.error?.message) {\n        errorMessage = jsonResponse.error.message;\n      }\n    } catch (_ignored) {}\n    throw ERROR_FACTORY.create(AnalyticsError.CONFIG_FETCH_FAILED, {\n      httpStatus: response.status,\n      responseMessage: errorMessage\n    });\n  }\n  return response.json();\n}\n\n/**\n * Fetches dynamic config from backend, retrying if failed.\n * @param app Firebase app to fetch config for.\n */\nexport async function fetchDynamicConfigWithRetry(\n  app: FirebaseApp,\n  // retryData and timeoutMillis are parameterized to allow passing a different value for testing.\n  retryData: RetryData = defaultRetryData,\n  timeoutMillis?: number\n): Promise<DynamicConfig | MinimalDynamicConfig> {\n  const { appId, apiKey, measurementId } = app.options;\n\n  if (!appId) {\n    throw ERROR_FACTORY.create(AnalyticsError.NO_APP_ID);\n  }\n\n  if (!apiKey) {\n    if (measurementId) {\n      return {\n        measurementId,\n        appId\n      };\n    }\n    throw ERROR_FACTORY.create(AnalyticsError.NO_API_KEY);\n  }\n\n  const throttleMetadata: ThrottleMetadata = retryData.getThrottleMetadata(\n    appId\n  ) || {\n    backoffCount: 0,\n    throttleEndTimeMillis: Date.now()\n  };\n\n  const signal = new AnalyticsAbortSignal();\n\n  setTimeout(\n    async () => {\n      // Note a very low delay, eg < 10ms, can elapse before listeners are initialized.\n      signal.abort();\n    },\n    timeoutMillis !== undefined ? timeoutMillis : FETCH_TIMEOUT_MILLIS\n  );\n\n  return attemptFetchDynamicConfigWithRetry(\n    { appId, apiKey, measurementId },\n    throttleMetadata,\n    signal,\n    retryData\n  );\n}\n\n/**\n * Runs one retry attempt.\n * @param appFields Necessary app config fields.\n * @param throttleMetadata Ongoing metadata to determine throttling times.\n * @param signal Abort signal.\n */\nasync function attemptFetchDynamicConfigWithRetry(\n  appFields: AppFields,\n  { throttleEndTimeMillis, backoffCount }: ThrottleMetadata,\n  signal: AnalyticsAbortSignal,\n  retryData: RetryData = defaultRetryData // for testing\n): Promise<DynamicConfig | MinimalDynamicConfig> {\n  const { appId, measurementId } = appFields;\n  // Starts with a (potentially zero) timeout to support resumption from stored state.\n  // Ensures the throttle end time is honored if the last attempt timed out.\n  // Note the SDK will never make a request if the fetch timeout expires at this point.\n  try {\n    await setAbortableTimeout(signal, throttleEndTimeMillis);\n  } catch (e) {\n    if (measurementId) {\n      logger.warn(\n        `Timed out fetching this Firebase app's measurement ID from the server.` +\n          ` Falling back to the measurement ID ${measurementId}` +\n          ` provided in the \"measurementId\" field in the local Firebase config. [${e.message}]`\n      );\n      return { appId, measurementId };\n    }\n    throw e;\n  }\n\n  try {\n    const response = await fetchDynamicConfig(appFields);\n\n    // Note the SDK only clears throttle state if response is success or non-retriable.\n    retryData.deleteThrottleMetadata(appId);\n\n    return response;\n  } catch (e) {\n    if (!isRetriableError(e)) {\n      retryData.deleteThrottleMetadata(appId);\n      if (measurementId) {\n        logger.warn(\n          `Failed to fetch this Firebase app's measurement ID from the server.` +\n            ` Falling back to the measurement ID ${measurementId}` +\n            ` provided in the \"measurementId\" field in the local Firebase config. [${e.message}]`\n        );\n        return { appId, measurementId };\n      } else {\n        throw e;\n      }\n    }\n\n    const backoffMillis =\n      Number(e.httpStatus) === 503\n        ? calculateBackoffMillis(\n            backoffCount,\n            retryData.intervalMillis,\n            LONG_RETRY_FACTOR\n          )\n        : calculateBackoffMillis(backoffCount, retryData.intervalMillis);\n\n    // Increments backoff state.\n    const throttleMetadata = {\n      throttleEndTimeMillis: Date.now() + backoffMillis,\n      backoffCount: backoffCount + 1\n    };\n\n    // Persists state.\n    retryData.setThrottleMetadata(appId, throttleMetadata);\n    logger.debug(`Calling attemptFetch again in ${backoffMillis} millis`);\n\n    return attemptFetchDynamicConfigWithRetry(\n      appFields,\n      throttleMetadata,\n      signal,\n      retryData\n    );\n  }\n}\n\n/**\n * Supports waiting on a backoff by:\n *\n * <ul>\n *   <li>Promisifying setTimeout, so we can set a timeout in our Promise chain</li>\n *   <li>Listening on a signal bus for abort events, just like the Fetch API</li>\n *   <li>Failing in the same way the Fetch API fails, so timing out a live request and a throttled\n *       request appear the same.</li>\n * </ul>\n *\n * <p>Visible for testing.\n */\nfunction setAbortableTimeout(\n  signal: AnalyticsAbortSignal,\n  throttleEndTimeMillis: number\n): Promise<void> {\n  return new Promise((resolve, reject) => {\n    // Derives backoff from given end time, normalizing negative numbers to zero.\n    const backoffMillis = Math.max(throttleEndTimeMillis - Date.now(), 0);\n\n    const timeout = setTimeout(resolve, backoffMillis);\n\n    // Adds listener, rather than sets onabort, because signal is a shared object.\n    signal.addEventListener(() => {\n      clearTimeout(timeout);\n      // If the request completes before this timeout, the rejection has no effect.\n      reject(\n        ERROR_FACTORY.create(AnalyticsError.FETCH_THROTTLE, {\n          throttleEndTimeMillis\n        })\n      );\n    });\n  });\n}\n\n/**\n * Returns true if the {@link Error} indicates a fetch request may succeed later.\n */\nfunction isRetriableError(e: Error): boolean {\n  if (!(e instanceof FirebaseError)) {\n    return false;\n  }\n\n  // Uses string index defined by ErrorData, which FirebaseError implements.\n  const httpStatus = Number(e['httpStatus']);\n\n  return (\n    httpStatus === 429 ||\n    httpStatus === 500 ||\n    httpStatus === 503 ||\n    httpStatus === 504\n  );\n}\n\n/**\n * Shims a minimal AbortSignal (copied from Remote Config).\n *\n * <p>AbortController's AbortSignal conveniently decouples fetch timeout logic from other aspects\n * of networking, such as retries. Firebase doesn't use AbortController enough to justify a\n * polyfill recommendation, like we do with the Fetch API, but this minimal shim can easily be\n * swapped out if/when we do.\n */\nexport class AnalyticsAbortSignal {\n  listeners: Array<() => void> = [];\n  addEventListener(listener: () => void): void {\n    this.listeners.push(listener);\n  }\n  abort(): void {\n    this.listeners.forEach(listener => listener());\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  DynamicConfig,\n  Gtag,\n  MinimalDynamicConfig\n} from '@firebase/analytics-types';\nimport { GtagCommand, GA_FID_KEY, ORIGIN_KEY } from './constants';\nimport { FirebaseInstallations } from '@firebase/installations-types';\nimport { fetchDynamicConfigWithRetry } from './get-config';\nimport { logger } from './logger';\nimport { FirebaseApp } from '@firebase/app-types';\nimport {\n  isIndexedDBAvailable,\n  validateIndexedDBOpenable\n} from '@firebase/util';\nimport { ERROR_FACTORY, AnalyticsError } from './errors';\n\nasync function validateIndexedDB(): Promise<boolean> {\n  if (!isIndexedDBAvailable()) {\n    logger.warn(\n      ERROR_FACTORY.create(AnalyticsError.INDEXEDDB_UNAVAILABLE, {\n        errorInfo: 'IndexedDB is not available in this environment.'\n      }).message\n    );\n    return false;\n  } else {\n    try {\n      await validateIndexedDBOpenable();\n    } catch (e) {\n      logger.warn(\n        ERROR_FACTORY.create(AnalyticsError.INDEXEDDB_UNAVAILABLE, {\n          errorInfo: e\n        }).message\n      );\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Initialize the analytics instance in gtag.js by calling config command with fid.\n *\n * NOTE: We combine analytics initialization and setting fid together because we want fid to be\n * part of the `page_view` event that's sent during the initialization\n * @param app Firebase app\n * @param gtagCore The gtag function that's not wrapped.\n * @param dynamicConfigPromisesList Array of all dynamic config promises.\n * @param measurementIdToAppId Maps measurementID to appID.\n * @param installations FirebaseInstallations instance.\n *\n * @returns Measurement ID.\n */\nexport async function initializeIds(\n  app: FirebaseApp,\n  dynamicConfigPromisesList: Array<\n    Promise<DynamicConfig | MinimalDynamicConfig>\n  >,\n  measurementIdToAppId: { [key: string]: string },\n  installations: FirebaseInstallations,\n  gtagCore: Gtag\n): Promise<string> {\n  const dynamicConfigPromise = fetchDynamicConfigWithRetry(app);\n  // Once fetched, map measurementIds to appId, for ease of lookup in wrapped gtag function.\n  dynamicConfigPromise\n    .then(config => {\n      measurementIdToAppId[config.measurementId] = config.appId;\n      if (\n        app.options.measurementId &&\n        config.measurementId !== app.options.measurementId\n      ) {\n        logger.warn(\n          `The measurement ID in the local Firebase config (${app.options.measurementId})` +\n            ` does not match the measurement ID fetched from the server (${config.measurementId}).` +\n            ` To ensure analytics events are always sent to the correct Analytics property,` +\n            ` update the` +\n            ` measurement ID field in the local config or remove it from the local config.`\n        );\n      }\n    })\n    .catch(e => logger.error(e));\n  // Add to list to track state of all dynamic config promises.\n  dynamicConfigPromisesList.push(dynamicConfigPromise);\n\n  const fidPromise: Promise<string | undefined> = validateIndexedDB().then(\n    envIsValid => {\n      if (envIsValid) {\n        return installations.getId();\n      } else {\n        return undefined;\n      }\n    }\n  );\n\n  const [dynamicConfig, fid] = await Promise.all([\n    dynamicConfigPromise,\n    fidPromise\n  ]);\n\n  // This command initializes gtag.js and only needs to be called once for the entire web app,\n  // but since it is idempotent, we can call it multiple times.\n  // We keep it together with other initialization logic for better code structure.\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  gtagCore('js' as any, new Date());\n\n  const configProperties: { [key: string]: string | boolean } = {\n    // guard against developers accidentally setting properties with prefix `firebase_`\n    [ORIGIN_KEY]: 'firebase',\n    update: true\n  };\n\n  if (fid != null) {\n    configProperties[GA_FID_KEY] = fid;\n  }\n\n  // It should be the first config command called on this GA-ID\n  // Initialize this GA-ID and set FID on it using the gtag config API.\n  gtagCore(GtagCommand.CONFIG, dynamicConfig.measurementId, configProperties);\n  return dynamicConfig.measurementId;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FirebaseAnalytics,\n  Gtag,\n  SettingsOptions,\n  DynamicConfig,\n  MinimalDynamicConfig\n} from '@firebase/analytics-types';\nimport {\n  logEvent,\n  setCurrentScreen,\n  setUserId,\n  setUserProperties,\n  setAnalyticsCollectionEnabled\n} from './functions';\nimport {\n  insertScriptTag,\n  getOrCreateDataLayer,\n  wrapOrCreateGtag,\n  findGtagScriptOnPage\n} from './helpers';\nimport { AnalyticsError, ERROR_FACTORY } from './errors';\nimport { FirebaseApp } from '@firebase/app-types';\nimport { FirebaseInstallations } from '@firebase/installations-types';\nimport { areCookiesEnabled, isBrowserExtension } from '@firebase/util';\nimport { initializeIds } from './initialize-ids';\nimport { logger } from './logger';\nimport { FirebaseService } from '@firebase/app-types/private';\n\ninterface FirebaseAnalyticsInternal\n  extends FirebaseAnalytics,\n    FirebaseService {}\n\n/**\n * Maps appId to full initialization promise. Wrapped gtag calls must wait on\n * all or some of these, depending on the call's `send_to` param and the status\n * of the dynamic config fetches (see below).\n */\nlet initializationPromisesMap: {\n  [appId: string]: Promise<string>; // Promise contains measurement ID string.\n} = {};\n\n/**\n * List of dynamic config fetch promises. In certain cases, wrapped gtag calls\n * wait on all these to be complete in order to determine if it can selectively\n * wait for only certain initialization (FID) promises or if it must wait for all.\n */\nlet dynamicConfigPromisesList: Array<Promise<\n  DynamicConfig | MinimalDynamicConfig\n>> = [];\n\n/**\n * Maps fetched measurementIds to appId. Populated when the app's dynamic config\n * fetch completes. If already populated, gtag config calls can use this to\n * selectively wait for only this app's initialization promise (FID) instead of all\n * initialization promises.\n */\nconst measurementIdToAppId: { [measurementId: string]: string } = {};\n\n/**\n * Name for window global data layer array used by GA: defaults to 'dataLayer'.\n */\nlet dataLayerName: string = 'dataLayer';\n\n/**\n * Name for window global gtag function used by GA: defaults to 'gtag'.\n */\nlet gtagName: string = 'gtag';\n\n/**\n * Reproduction of standard gtag function or reference to existing\n * gtag function on window object.\n */\nlet gtagCoreFunction: Gtag;\n\n/**\n * Wrapper around gtag function that ensures FID is sent with all\n * relevant event and config calls.\n */\nlet wrappedGtagFunction: Gtag;\n\n/**\n * Flag to ensure page initialization steps (creation or wrapping of\n * dataLayer and gtag script) are only run once per page load.\n */\nlet globalInitDone: boolean = false;\n\n/**\n * For testing\n */\nexport function resetGlobalVars(\n  newGlobalInitDone = false,\n  newInitializationPromisesMap = {},\n  newDynamicPromises = []\n): void {\n  globalInitDone = newGlobalInitDone;\n  initializationPromisesMap = newInitializationPromisesMap;\n  dynamicConfigPromisesList = newDynamicPromises;\n  dataLayerName = 'dataLayer';\n  gtagName = 'gtag';\n}\n\n/**\n * For testing\n */\nexport function getGlobalVars(): {\n  initializationPromisesMap: { [appId: string]: Promise<string> };\n  dynamicConfigPromisesList: Array<\n    Promise<DynamicConfig | MinimalDynamicConfig>\n  >;\n} {\n  return {\n    initializationPromisesMap,\n    dynamicConfigPromisesList\n  };\n}\n\n/**\n * This must be run before calling firebase.analytics() or it won't\n * have any effect.\n * @param options Custom gtag and dataLayer names.\n */\nexport function settings(options: SettingsOptions): void {\n  if (globalInitDone) {\n    throw ERROR_FACTORY.create(AnalyticsError.ALREADY_INITIALIZED);\n  }\n  if (options.dataLayerName) {\n    dataLayerName = options.dataLayerName;\n  }\n  if (options.gtagName) {\n    gtagName = options.gtagName;\n  }\n}\n\n/**\n * Returns true if no environment mismatch is found.\n * If environment mismatches are found, throws an INVALID_ANALYTICS_CONTEXT\n * error that also lists details for each mismatch found.\n */\nfunction warnOnBrowserContextMismatch(): void {\n  const mismatchedEnvMessages = [];\n  if (isBrowserExtension()) {\n    mismatchedEnvMessages.push('This is a browser extension environment.');\n  }\n  if (!areCookiesEnabled()) {\n    mismatchedEnvMessages.push('Cookies are not available.');\n  }\n  if (mismatchedEnvMessages.length > 0) {\n    const details = mismatchedEnvMessages\n      .map((message, index) => `(${index + 1}) ${message}`)\n      .join(' ');\n    const err = ERROR_FACTORY.create(AnalyticsError.INVALID_ANALYTICS_CONTEXT, {\n      errorInfo: details\n    });\n    logger.warn(err.message);\n  }\n}\n\nexport function factory(\n  app: FirebaseApp,\n  installations: FirebaseInstallations\n): FirebaseAnalytics {\n  warnOnBrowserContextMismatch();\n  const appId = app.options.appId;\n  if (!appId) {\n    throw ERROR_FACTORY.create(AnalyticsError.NO_APP_ID);\n  }\n  if (!app.options.apiKey) {\n    if (app.options.measurementId) {\n      logger.warn(\n        `The \"apiKey\" field is empty in the local Firebase config. This is needed to fetch the latest` +\n          ` measurement ID for this Firebase app. Falling back to the measurement ID ${app.options.measurementId}` +\n          ` provided in the \"measurementId\" field in the local Firebase config.`\n      );\n    } else {\n      throw ERROR_FACTORY.create(AnalyticsError.NO_API_KEY);\n    }\n  }\n  if (initializationPromisesMap[appId] != null) {\n    throw ERROR_FACTORY.create(AnalyticsError.ALREADY_EXISTS, {\n      id: appId\n    });\n  }\n\n  if (!globalInitDone) {\n    // Steps here should only be done once per page: creation or wrapping\n    // of dataLayer and global gtag function.\n\n    // Detect if user has already put the gtag <script> tag on this page.\n    if (!findGtagScriptOnPage()) {\n      insertScriptTag(dataLayerName);\n    }\n    getOrCreateDataLayer(dataLayerName);\n\n    const { wrappedGtag, gtagCore } = wrapOrCreateGtag(\n      initializationPromisesMap,\n      dynamicConfigPromisesList,\n      measurementIdToAppId,\n      dataLayerName,\n      gtagName\n    );\n    wrappedGtagFunction = wrappedGtag;\n    gtagCoreFunction = gtagCore;\n\n    globalInitDone = true;\n  }\n  // Async but non-blocking.\n  // This map reflects the completion state of all promises for each appId.\n  initializationPromisesMap[appId] = initializeIds(\n    app,\n    dynamicConfigPromisesList,\n    measurementIdToAppId,\n    installations,\n    gtagCoreFunction\n  );\n\n  const analyticsInstance: FirebaseAnalyticsInternal = {\n    app,\n    // Public methods return void for API simplicity and to better match gtag,\n    // while internal implementations return promises.\n    logEvent: (eventName, eventParams, options) => {\n      logEvent(\n        wrappedGtagFunction,\n        initializationPromisesMap[appId],\n        eventName,\n        eventParams,\n        options\n      ).catch(e => logger.error(e));\n    },\n    setCurrentScreen: (screenName, options) => {\n      setCurrentScreen(\n        wrappedGtagFunction,\n        initializationPromisesMap[appId],\n        screenName,\n        options\n      ).catch(e => logger.error(e));\n    },\n    setUserId: (id, options) => {\n      setUserId(\n        wrappedGtagFunction,\n        initializationPromisesMap[appId],\n        id,\n        options\n      ).catch(e => logger.error(e));\n    },\n    setUserProperties: (properties, options) => {\n      setUserProperties(\n        wrappedGtagFunction,\n        initializationPromisesMap[appId],\n        properties,\n        options\n      ).catch(e => logger.error(e));\n    },\n    setAnalyticsCollectionEnabled: enabled => {\n      setAnalyticsCollectionEnabled(\n        initializationPromisesMap[appId],\n        enabled\n      ).catch(e => logger.error(e));\n    },\n    INTERNAL: {\n      delete: (): Promise<void> => {\n        delete initializationPromisesMap[appId];\n        return Promise.resolve();\n      }\n    }\n  };\n\n  return analyticsInstance;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AnalyticsCallOptions,\n  Gtag,\n  CustomParams,\n  ControlParams,\n  EventParams\n} from '@firebase/analytics-types';\nimport { GtagCommand } from './constants';\n/**\n * Logs an analytics event through the Firebase SDK.\n *\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\n * @param eventName Google Analytics event name, choose from standard list or use a custom string.\n * @param eventParams Analytics event parameters.\n */\nexport async function logEvent(\n  gtagFunction: Gtag,\n  initializationPromise: Promise<string>,\n  eventName: string,\n  eventParams?: EventParams,\n  options?: AnalyticsCallOptions\n): Promise<void> {\n  if (options && options.global) {\n    gtagFunction(GtagCommand.EVENT, eventName, eventParams);\n    return;\n  } else {\n    const measurementId = await initializationPromise;\n    const params: EventParams | ControlParams = {\n      ...eventParams,\n      'send_to': measurementId\n    };\n    gtagFunction(GtagCommand.EVENT, eventName, params);\n  }\n}\n\n/**\n * Set screen_name parameter for this Google Analytics ID.\n *\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\n * @param screenName Screen name string to set.\n */\nexport async function setCurrentScreen(\n  gtagFunction: Gtag,\n  initializationPromise: Promise<string>,\n  screenName: string | null,\n  options?: AnalyticsCallOptions\n): Promise<void> {\n  if (options && options.global) {\n    gtagFunction(GtagCommand.SET, { 'screen_name': screenName });\n    return Promise.resolve();\n  } else {\n    const measurementId = await initializationPromise;\n    gtagFunction(GtagCommand.CONFIG, measurementId, {\n      update: true,\n      'screen_name': screenName\n    });\n  }\n}\n\n/**\n * Set user_id parameter for this Google Analytics ID.\n *\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\n * @param id User ID string to set\n */\nexport async function setUserId(\n  gtagFunction: Gtag,\n  initializationPromise: Promise<string>,\n  id: string | null,\n  options?: AnalyticsCallOptions\n): Promise<void> {\n  if (options && options.global) {\n    gtagFunction(GtagCommand.SET, { 'user_id': id });\n    return Promise.resolve();\n  } else {\n    const measurementId = await initializationPromise;\n    gtagFunction(GtagCommand.CONFIG, measurementId, {\n      update: true,\n      'user_id': id\n    });\n  }\n}\n\n/**\n * Set all other user properties other than user_id and screen_name.\n *\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\n * @param properties Map of user properties to set\n */\nexport async function setUserProperties(\n  gtagFunction: Gtag,\n  initializationPromise: Promise<string>,\n  properties: CustomParams,\n  options?: AnalyticsCallOptions\n): Promise<void> {\n  if (options && options.global) {\n    const flatProperties: { [key: string]: unknown } = {};\n    for (const key of Object.keys(properties)) {\n      // use dot notation for merge behavior in gtag.js\n      flatProperties[`user_properties.${key}`] = properties[key];\n    }\n    gtagFunction(GtagCommand.SET, flatProperties);\n    return Promise.resolve();\n  } else {\n    const measurementId = await initializationPromise;\n    gtagFunction(GtagCommand.CONFIG, measurementId, {\n      update: true,\n      'user_properties': properties\n    });\n  }\n}\n\n/**\n * Set whether collection is enabled for this ID.\n *\n * @param enabled If true, collection is enabled for this ID.\n */\nexport async function setAnalyticsCollectionEnabled(\n  initializationPromise: Promise<string>,\n  enabled: boolean\n): Promise<void> {\n  const measurementId = await initializationPromise;\n  window[`ga-disable-${measurementId}`] = !enabled;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { StorageCache } from '../storage/storage_cache';\nimport {\n  FetchResponse,\n  RemoteConfigFetchClient,\n  FetchRequest\n} from './remote_config_fetch_client';\nimport { Storage } from '../storage/storage';\nimport { Logger } from '@firebase/logger';\n\n/**\n * Implements the {@link RemoteConfigClient} abstraction with success response caching.\n *\n * <p>Comparable to the browser's Cache API for responses, but the Cache API requires a Service\n * Worker, which requires HTTPS, which would significantly complicate SDK installation. Also, the\n * Cache API doesn't support matching entries by time.\n */\nexport class CachingClient implements RemoteConfigFetchClient {\n  constructor(\n    private readonly client: RemoteConfigFetchClient,\n    private readonly storage: Storage,\n    private readonly storageCache: StorageCache,\n    private readonly logger: Logger\n  ) {}\n\n  /**\n   * Returns true if the age of the cached fetched configs is less than or equal to\n   * {@link Settings#minimumFetchIntervalInSeconds}.\n   *\n   * <p>This is comparable to passing `headers = { 'Cache-Control': max-age <maxAge> }` to the\n   * native Fetch API.\n   *\n   * <p>Visible for testing.\n   */\n  isCachedDataFresh(\n    cacheMaxAgeMillis: number,\n    lastSuccessfulFetchTimestampMillis: number | undefined\n  ): boolean {\n    // Cache can only be fresh if it's populated.\n    if (!lastSuccessfulFetchTimestampMillis) {\n      this.logger.debug('Config fetch cache check. Cache unpopulated.');\n      return false;\n    }\n\n    // Calculates age of cache entry.\n    const cacheAgeMillis = Date.now() - lastSuccessfulFetchTimestampMillis;\n\n    const isCachedDataFresh = cacheAgeMillis <= cacheMaxAgeMillis;\n\n    this.logger.debug(\n      'Config fetch cache check.' +\n        ` Cache age millis: ${cacheAgeMillis}.` +\n        ` Cache max age millis (minimumFetchIntervalMillis setting): ${cacheMaxAgeMillis}.` +\n        ` Is cache hit: ${isCachedDataFresh}.`\n    );\n\n    return isCachedDataFresh;\n  }\n\n  async fetch(request: FetchRequest): Promise<FetchResponse> {\n    // Reads from persisted storage to avoid cache miss if callers don't wait on initialization.\n    const [\n      lastSuccessfulFetchTimestampMillis,\n      lastSuccessfulFetchResponse\n    ] = await Promise.all([\n      this.storage.getLastSuccessfulFetchTimestampMillis(),\n      this.storage.getLastSuccessfulFetchResponse()\n    ]);\n\n    // Exits early on cache hit.\n    if (\n      lastSuccessfulFetchResponse &&\n      this.isCachedDataFresh(\n        request.cacheMaxAgeMillis,\n        lastSuccessfulFetchTimestampMillis\n      )\n    ) {\n      return lastSuccessfulFetchResponse;\n    }\n\n    // Deviates from pure decorator by not honoring a passed ETag since we don't have a public API\n    // that allows the caller to pass an ETag.\n    request.eTag =\n      lastSuccessfulFetchResponse && lastSuccessfulFetchResponse.eTag;\n\n    // Falls back to service on cache miss.\n    const response = await this.client.fetch(request);\n\n    // Fetch throws for non-success responses, so success is guaranteed here.\n\n    const storageOperations = [\n      // Uses write-through cache for consistency with synchronous public API.\n      this.storageCache.setLastSuccessfulFetchTimestampMillis(Date.now())\n    ];\n\n    if (response.status === 200) {\n      // Caches response only if it has changed, ie non-304 responses.\n      storageOperations.push(\n        this.storage.setLastSuccessfulFetchResponse(response)\n      );\n    }\n\n    await Promise.all(storageOperations);\n\n    return response;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseInstallations } from '@firebase/installations-types';\nimport {\n  FetchResponse,\n  RemoteConfigFetchClient,\n  FirebaseRemoteConfigObject,\n  FetchRequest\n} from './remote_config_fetch_client';\nimport { ERROR_FACTORY, ErrorCode } from '../errors';\nimport { getUserLanguage } from '../language';\n\n/**\n * Defines request body parameters required to call the fetch API:\n * https://firebase.google.com/docs/reference/remote-config/rest\n *\n * <p>Not exported because this file encapsulates REST API specifics.\n *\n * <p>Not passing User Properties because Analytics' source of truth on Web is server-side.\n */\ninterface FetchRequestBody {\n  // Disables camelcase linting for request body params.\n  /* eslint-disable camelcase*/\n  sdk_version: string;\n  app_instance_id: string;\n  app_instance_id_token: string;\n  app_id: string;\n  language_code: string;\n  /* eslint-enable camelcase */\n}\n\n/**\n * Implements the Client abstraction for the Remote Config REST API.\n */\nexport class RestClient implements RemoteConfigFetchClient {\n  constructor(\n    private readonly firebaseInstallations: FirebaseInstallations,\n    private readonly sdkVersion: string,\n    private readonly namespace: string,\n    private readonly projectId: string,\n    private readonly apiKey: string,\n    private readonly appId: string\n  ) {}\n\n  /**\n   * Fetches from the Remote Config REST API.\n   *\n   * @throws a {@link ErrorCode.FETCH_NETWORK} error if {@link GlobalFetch#fetch} can't\n   * connect to the network.\n   * @throws a {@link ErrorCode.FETCH_PARSE} error if {@link Response#json} can't parse the\n   * fetch response.\n   * @throws a {@link ErrorCode.FETCH_STATUS} error if the service returns an HTTP error status.\n   */\n  async fetch(request: FetchRequest): Promise<FetchResponse> {\n    const [installationId, installationToken] = await Promise.all([\n      this.firebaseInstallations.getId(),\n      this.firebaseInstallations.getToken()\n    ]);\n\n    const urlBase =\n      window.FIREBASE_REMOTE_CONFIG_URL_BASE ||\n      'https://firebaseremoteconfig.googleapis.com';\n\n    const url = `${urlBase}/v1/projects/${this.projectId}/namespaces/${this.namespace}:fetch?key=${this.apiKey}`;\n\n    const headers = {\n      'Content-Type': 'application/json',\n      'Content-Encoding': 'gzip',\n      // Deviates from pure decorator by not passing max-age header since we don't currently have\n      // service behavior using that header.\n      'If-None-Match': request.eTag || '*'\n    };\n\n    const requestBody: FetchRequestBody = {\n      /* eslint-disable camelcase */\n      sdk_version: this.sdkVersion,\n      app_instance_id: installationId,\n      app_instance_id_token: installationToken,\n      app_id: this.appId,\n      language_code: getUserLanguage()\n      /* eslint-enable camelcase */\n    };\n\n    const options = {\n      method: 'POST',\n      headers,\n      body: JSON.stringify(requestBody)\n    };\n\n    // This logic isn't REST-specific, but shimming abort logic isn't worth another decorator.\n    const fetchPromise = fetch(url, options);\n    const timeoutPromise = new Promise((_resolve, reject) => {\n      // Maps async event listener to Promise API.\n      request.signal.addEventListener(() => {\n        // Emulates https://heycam.github.io/webidl/#aborterror\n        const error = new Error('The operation was aborted.');\n        error.name = 'AbortError';\n        reject(error);\n      });\n    });\n\n    let response;\n    try {\n      await Promise.race([fetchPromise, timeoutPromise]);\n      response = await fetchPromise;\n    } catch (originalError) {\n      let errorCode = ErrorCode.FETCH_NETWORK;\n      if (originalError.name === 'AbortError') {\n        errorCode = ErrorCode.FETCH_TIMEOUT;\n      }\n      throw ERROR_FACTORY.create(errorCode, {\n        originalErrorMessage: originalError.message\n      });\n    }\n\n    let status = response.status;\n\n    // Normalizes nullable header to optional.\n    const responseEtag = response.headers.get('ETag') || undefined;\n\n    let config: FirebaseRemoteConfigObject | undefined;\n    let state: string | undefined;\n\n    // JSON parsing throws SyntaxError if the response body isn't a JSON string.\n    // Requesting application/json and checking for a 200 ensures there's JSON data.\n    if (response.status === 200) {\n      let responseBody;\n      try {\n        responseBody = await response.json();\n      } catch (originalError) {\n        throw ERROR_FACTORY.create(ErrorCode.FETCH_PARSE, {\n          originalErrorMessage: originalError.message\n        });\n      }\n      config = responseBody['entries'];\n      state = responseBody['state'];\n    }\n\n    // Normalizes based on legacy state.\n    if (state === 'INSTANCE_STATE_UNSPECIFIED') {\n      status = 500;\n    } else if (state === 'NO_CHANGE') {\n      status = 304;\n    } else if (state === 'NO_TEMPLATE' || state === 'EMPTY_CONFIG') {\n      // These cases can be fixed remotely, so normalize to safe value.\n      config = {};\n    }\n\n    // Normalize to exception-based control flow for non-success cases.\n    // Encapsulates HTTP specifics in this class as much as possible. Status is still the best for\n    // differentiating success states (200 from 304; the state body param is undefined in a\n    // standard 304).\n    if (status !== 304 && status !== 200) {\n      throw ERROR_FACTORY.create(ErrorCode.FETCH_STATUS, {\n        httpStatus: status\n      });\n    }\n\n    return { status, eTag: responseEtag, config };\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Attempts to get the most accurate browser language setting.\n *\n * <p>Adapted from getUserLanguage in packages/auth/src/utils.js for TypeScript.\n *\n * <p>Defers default language specification to server logic for consistency.\n *\n * @param navigatorLanguage Enables tests to override read-only {@link NavigatorLanguage}.\n */\nexport function getUserLanguage(\n  navigatorLanguage: NavigatorLanguage = navigator\n): string {\n  return (\n    // Most reliable, but only supported in Chrome/Firefox.\n    (navigatorLanguage.languages && navigatorLanguage.languages[0]) ||\n    // Supported in most browsers, but returns the language of the browser\n    // UI, not the language set in browser settings.\n    navigatorLanguage.language\n    // Polyfill otherwise.\n  );\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Defines a client, as in https://en.wikipedia.org/wiki/Client%E2%80%93server_model, for the\n * Remote Config server (https://firebase.google.com/docs/reference/remote-config/rest).\n *\n * <p>Abstracts throttle, response cache and network implementation details.\n *\n * <p>Modeled after the native {@link GlobalFetch} interface, which is relatively modern and\n * convenient, but simplified for Remote Config's use case.\n *\n * Disambiguation: {@link GlobalFetch} interface and the Remote Config service define \"fetch\"\n * methods. The RestClient uses the former to make HTTP calls. This interface abstracts the latter.\n */\nexport interface RemoteConfigFetchClient {\n  /**\n   * @throws if response status is not 200 or 304.\n   */\n  fetch(request: FetchRequest): Promise<FetchResponse>;\n}\n\n/**\n * Defines a self-descriptive reference for config key-value pairs.\n */\nexport interface FirebaseRemoteConfigObject {\n  [key: string]: string;\n}\n\n/**\n * Shims a minimal AbortSignal.\n *\n * <p>AbortController's AbortSignal conveniently decouples fetch timeout logic from other aspects\n * of networking, such as retries. Firebase doesn't use AbortController enough to justify a\n * polyfill recommendation, like we do with the Fetch API, but this minimal shim can easily be\n * swapped out if/when we do.\n */\nexport class RemoteConfigAbortSignal {\n  listeners: Array<() => void> = [];\n  addEventListener(listener: () => void): void {\n    this.listeners.push(listener);\n  }\n  abort(): void {\n    this.listeners.forEach(listener => listener());\n  }\n}\n\n/**\n * Defines per-request inputs for the Remote Config fetch request.\n *\n * <p>Modeled after the native {@link Request} interface, but simplified for Remote Config's\n * use case.\n */\nexport interface FetchRequest {\n  /**\n   * Uses cached config if it is younger than this age.\n   *\n   * <p>Required because it's defined by settings, which always have a value.\n   *\n   * <p>Comparable to passing `headers = { 'Cache-Control': max-age <maxAge> }` to the native\n   * Fetch API.\n   */\n  cacheMaxAgeMillis: number;\n\n  /**\n   * An event bus for the signal to abort a request.\n   *\n   * <p>Required because all requests should be abortable.\n   *\n   * <p>Comparable to the native\n   * Fetch API's \"signal\" field on its request configuration object\n   * https://fetch.spec.whatwg.org/#dom-requestinit-signal.\n   *\n   * <p>Disambiguation: Remote Config commonly refers to API inputs as\n   * \"signals\". See the private ConfigFetchRequestBody interface for those:\n   * http://google3/firebase/remote_config/web/src/core/rest_client.ts?l=14&rcl=255515243.\n   */\n  signal: RemoteConfigAbortSignal;\n\n  /**\n   * The ETag header value from the last response.\n   *\n   * <p>Optional in case this is the first request.\n   *\n   * <p>Comparable to passing `headers = { 'If-None-Match': <eTag> }` to the native Fetch API.\n   */\n  eTag?: string;\n}\n\n/**\n * Defines a successful response (200 or 304).\n *\n * <p>Modeled after the native {@link Response} interface, but simplified for Remote Config's\n * use case.\n */\nexport interface FetchResponse {\n  /**\n   * The HTTP status, which is useful for differentiating success responses with data from\n   * those without.\n   *\n   * <p>{@link RemoteConfigClient} is modeled after the native {@link GlobalFetch} interface, so\n   * HTTP status is first-class.\n   *\n   * <p>Disambiguation: the fetch response returns a legacy \"state\" value that is redundant with the\n   * HTTP status code. The former is normalized into the latter.\n   */\n  status: number;\n\n  /**\n   * Defines the ETag response header value.\n   *\n   * <p>Only defined for 200 and 304 responses.\n   */\n  eTag?: string;\n\n  /**\n   * Defines the map of parameters returned as \"entries\" in the fetch response body.\n   *\n   * <p>Only defined for 200 responses.\n   */\n  config?: FirebaseRemoteConfigObject;\n\n  // Note: we're not extracting experiment metadata until\n  // ABT and Analytics have Web SDKs.\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Value as ValueType, ValueSource } from '@firebase/remote-config-types';\n\nconst DEFAULT_VALUE_FOR_BOOLEAN = false;\nconst DEFAULT_VALUE_FOR_STRING = '';\nconst DEFAULT_VALUE_FOR_NUMBER = 0;\n\nconst BOOLEAN_TRUTHY_VALUES = ['1', 'true', 't', 'yes', 'y', 'on'];\n\nexport class Value implements ValueType {\n  constructor(\n    private readonly _source: ValueSource,\n    private readonly _value: string = DEFAULT_VALUE_FOR_STRING\n  ) {}\n\n  asString(): string {\n    return this._value;\n  }\n\n  asBoolean(): boolean {\n    if (this._source === 'static') {\n      return DEFAULT_VALUE_FOR_BOOLEAN;\n    }\n    return BOOLEAN_TRUTHY_VALUES.indexOf(this._value.toLowerCase()) >= 0;\n  }\n\n  asNumber(): number {\n    if (this._source === 'static') {\n      return DEFAULT_VALUE_FOR_NUMBER;\n    }\n    let num = Number(this._value);\n    if (isNaN(num)) {\n      num = DEFAULT_VALUE_FOR_NUMBER;\n    }\n    return num;\n  }\n\n  getSource(): ValueSource {\n    return this._source;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app-types';\nimport {\n  RemoteConfig as RemoteConfigType,\n  FetchStatus,\n  Settings,\n  Value as ValueType,\n  LogLevel as RemoteConfigLogLevel\n} from '@firebase/remote-config-types';\nimport { StorageCache } from './storage/storage_cache';\nimport {\n  RemoteConfigFetchClient,\n  RemoteConfigAbortSignal\n} from './client/remote_config_fetch_client';\nimport { Value } from './value';\nimport { ErrorCode, hasErrorCode } from './errors';\nimport { Storage } from './storage/storage';\nimport { Logger, LogLevel as FirebaseLogLevel } from '@firebase/logger';\n\nconst DEFAULT_FETCH_TIMEOUT_MILLIS = 60 * 1000; // One minute\nconst DEFAULT_CACHE_MAX_AGE_MILLIS = 12 * 60 * 60 * 1000; // Twelve hours.\n\n/**\n * Encapsulates business logic mapping network and storage dependencies to the public SDK API.\n *\n * See {@link https://github.com/FirebasePrivate/firebase-js-sdk/blob/master/packages/firebase/index.d.ts|interface documentation} for method descriptions.\n */\nexport class RemoteConfig implements RemoteConfigType {\n  // Tracks completion of initialization promise.\n  private _isInitializationComplete = false;\n\n  // De-duplicates initialization calls.\n  private _initializePromise?: Promise<void>;\n\n  settings: Settings = {\n    fetchTimeoutMillis: DEFAULT_FETCH_TIMEOUT_MILLIS,\n    minimumFetchIntervalMillis: DEFAULT_CACHE_MAX_AGE_MILLIS\n  };\n\n  defaultConfig: { [key: string]: string | number | boolean } = {};\n\n  // Based on packages/firestore/src/util/log.ts but not static because we need per-instance levels\n  // to differentiate 2p and 3p use-cases.\n  setLogLevel(logLevel: RemoteConfigLogLevel): void {\n    switch (logLevel) {\n      case 'debug':\n        this._logger.logLevel = FirebaseLogLevel.DEBUG;\n        break;\n      case 'silent':\n        this._logger.logLevel = FirebaseLogLevel.SILENT;\n        break;\n      default:\n        this._logger.logLevel = FirebaseLogLevel.ERROR;\n    }\n  }\n\n  get fetchTimeMillis(): number {\n    return this._storageCache.getLastSuccessfulFetchTimestampMillis() || -1;\n  }\n\n  get lastFetchStatus(): FetchStatus {\n    return this._storageCache.getLastFetchStatus() || 'no-fetch-yet';\n  }\n\n  constructor(\n    // Required by FirebaseServiceFactory interface.\n    readonly app: FirebaseApp,\n    // JS doesn't support private yet\n    // (https://github.com/tc39/proposal-class-fields#private-fields), so we hint using an\n    // underscore prefix.\n    private readonly _client: RemoteConfigFetchClient,\n    private readonly _storageCache: StorageCache,\n    private readonly _storage: Storage,\n    private readonly _logger: Logger\n  ) {}\n\n  async activate(): Promise<boolean> {\n    const [lastSuccessfulFetchResponse, activeConfigEtag] = await Promise.all([\n      this._storage.getLastSuccessfulFetchResponse(),\n      this._storage.getActiveConfigEtag()\n    ]);\n    if (\n      !lastSuccessfulFetchResponse ||\n      !lastSuccessfulFetchResponse.config ||\n      !lastSuccessfulFetchResponse.eTag ||\n      lastSuccessfulFetchResponse.eTag === activeConfigEtag\n    ) {\n      // Either there is no successful fetched config, or is the same as current active\n      // config.\n      return false;\n    }\n    await Promise.all([\n      this._storageCache.setActiveConfig(lastSuccessfulFetchResponse.config),\n      this._storage.setActiveConfigEtag(lastSuccessfulFetchResponse.eTag)\n    ]);\n    return true;\n  }\n\n  ensureInitialized(): Promise<void> {\n    if (!this._initializePromise) {\n      this._initializePromise = this._storageCache\n        .loadFromStorage()\n        .then(() => {\n          this._isInitializationComplete = true;\n        });\n    }\n    return this._initializePromise;\n  }\n\n  /**\n   * @throws a {@link ErrorCode.FETCH_CLIENT_TIMEOUT} if the request takes longer than\n   * {@link Settings.fetchTimeoutInSeconds} or\n   * {@link DEFAULT_FETCH_TIMEOUT_SECONDS}.\n   */\n  async fetch(): Promise<void> {\n    // Aborts the request after the given timeout, causing the fetch call to\n    // reject with an AbortError.\n    //\n    // <p>Aborting after the request completes is a no-op, so we don't need a\n    // corresponding clearTimeout.\n    //\n    // Locating abort logic here because:\n    // * it uses a developer setting (timeout)\n    // * it applies to all retries (like curl's max-time arg)\n    // * it is consistent with the Fetch API's signal input\n    const abortSignal = new RemoteConfigAbortSignal();\n\n    setTimeout(async () => {\n      // Note a very low delay, eg < 10ms, can elapse before listeners are initialized.\n      abortSignal.abort();\n    }, this.settings.fetchTimeoutMillis);\n\n    // Catches *all* errors thrown by client so status can be set consistently.\n    try {\n      await this._client.fetch({\n        cacheMaxAgeMillis: this.settings.minimumFetchIntervalMillis,\n        signal: abortSignal\n      });\n\n      await this._storageCache.setLastFetchStatus('success');\n    } catch (e) {\n      const lastFetchStatus = hasErrorCode(e, ErrorCode.FETCH_THROTTLE)\n        ? 'throttle'\n        : 'failure';\n      await this._storageCache.setLastFetchStatus(lastFetchStatus);\n      throw e;\n    }\n  }\n\n  async fetchAndActivate(): Promise<boolean> {\n    await this.fetch();\n    return this.activate();\n  }\n\n  getAll(): { [key: string]: ValueType } {\n    return getAllKeys(\n      this._storageCache.getActiveConfig(),\n      this.defaultConfig\n    ).reduce((allConfigs, key) => {\n      allConfigs[key] = this.getValue(key);\n      return allConfigs;\n    }, {} as { [key: string]: ValueType });\n  }\n\n  getBoolean(key: string): boolean {\n    return this.getValue(key).asBoolean();\n  }\n\n  getNumber(key: string): number {\n    return this.getValue(key).asNumber();\n  }\n\n  getString(key: string): string {\n    return this.getValue(key).asString();\n  }\n\n  getValue(key: string): ValueType {\n    if (!this._isInitializationComplete) {\n      this._logger.debug(\n        `A value was requested for key \"${key}\" before SDK initialization completed.` +\n          ' Await on ensureInitialized if the intent was to get a previously activated value.'\n      );\n    }\n    const activeConfig = this._storageCache.getActiveConfig();\n    if (activeConfig && activeConfig[key] !== undefined) {\n      return new Value('remote', activeConfig[key]);\n    } else if (this.defaultConfig && this.defaultConfig[key] !== undefined) {\n      return new Value('default', String(this.defaultConfig[key]));\n    }\n    this._logger.debug(\n      `Returning static value for key \"${key}\".` +\n        ' Define a default or remote value if this is unintentional.'\n    );\n    return new Value('static');\n  }\n}\n\n/**\n * Dedupes and returns an array of all the keys of the received objects.\n */\nfunction getAllKeys(obj1: {} = {}, obj2: {} = {}): string[] {\n  return Object.keys({ ...obj1, ...obj2 });\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FetchStatus } from '@firebase/remote-config-types';\nimport {\n  FetchResponse,\n  FirebaseRemoteConfigObject\n} from '../client/remote_config_fetch_client';\nimport { ERROR_FACTORY, ErrorCode } from '../errors';\nimport { FirebaseError } from '@firebase/util';\n\n/**\n * Converts an error event associated with a {@link IDBRequest} to a {@link FirebaseError}.\n */\nfunction toFirebaseError(event: Event, errorCode: ErrorCode): FirebaseError {\n  const originalError = (event.target as IDBRequest).error || undefined;\n  return ERROR_FACTORY.create(errorCode, {\n    originalErrorMessage: originalError && originalError.message\n  });\n}\n\n/**\n * A general-purpose store keyed by app + namespace + {@link\n * ProjectNamespaceKeyFieldValue}.\n *\n * <p>The Remote Config SDK can be used with multiple app installations, and each app can interact\n * with multiple namespaces, so this store uses app (ID + name) and namespace as common parent keys\n * for a set of key-value pairs. See {@link Storage#createCompositeKey}.\n *\n * <p>Visible for testing.\n */\nexport const APP_NAMESPACE_STORE = 'app_namespace_store';\n\nconst DB_NAME = 'firebase_remote_config';\nconst DB_VERSION = 1;\n\n/**\n * Encapsulates metadata concerning throttled fetch requests.\n */\nexport interface ThrottleMetadata {\n  // The number of times fetch has backed off. Used for resuming backoff after a timeout.\n  backoffCount: number;\n  // The Unix timestamp in milliseconds when callers can retry a request.\n  throttleEndTimeMillis: number;\n}\n\n/**\n * Provides type-safety for the \"key\" field used by {@link APP_NAMESPACE_STORE}.\n *\n * <p>This seems like a small price to avoid potentially subtle bugs caused by a typo.\n */\ntype ProjectNamespaceKeyFieldValue =\n  | 'active_config'\n  | 'active_config_etag'\n  | 'last_fetch_status'\n  | 'last_successful_fetch_timestamp_millis'\n  | 'last_successful_fetch_response'\n  | 'settings'\n  | 'throttle_metadata';\n\n// Visible for testing.\nexport function openDatabase(): Promise<IDBDatabase> {\n  return new Promise((resolve, reject) => {\n    const request = indexedDB.open(DB_NAME, DB_VERSION);\n    request.onerror = event => {\n      reject(toFirebaseError(event, ErrorCode.STORAGE_OPEN));\n    };\n    request.onsuccess = event => {\n      resolve((event.target as IDBOpenDBRequest).result);\n    };\n    request.onupgradeneeded = event => {\n      const db = (event.target as IDBOpenDBRequest).result;\n\n      // We don't use 'break' in this switch statement, the fall-through\n      // behavior is what we want, because if there are multiple versions between\n      // the old version and the current version, we want ALL the migrations\n      // that correspond to those versions to run, not only the last one.\n      // eslint-disable-next-line default-case\n      switch (event.oldVersion) {\n        case 0:\n          db.createObjectStore(APP_NAMESPACE_STORE, {\n            keyPath: 'compositeKey'\n          });\n      }\n    };\n  });\n}\n\n/**\n * Abstracts data persistence.\n */\nexport class Storage {\n  /**\n   * @param appId enables storage segmentation by app (ID + name).\n   * @param appName enables storage segmentation by app (ID + name).\n   * @param namespace enables storage segmentation by namespace.\n   */\n  constructor(\n    private readonly appId: string,\n    private readonly appName: string,\n    private readonly namespace: string,\n    private readonly openDbPromise = openDatabase()\n  ) {}\n\n  getLastFetchStatus(): Promise<FetchStatus | undefined> {\n    return this.get<FetchStatus>('last_fetch_status');\n  }\n\n  setLastFetchStatus(status: FetchStatus): Promise<void> {\n    return this.set<FetchStatus>('last_fetch_status', status);\n  }\n\n  // This is comparable to a cache entry timestamp. If we need to expire other data, we could\n  // consider adding timestamp to all storage records and an optional max age arg to getters.\n  getLastSuccessfulFetchTimestampMillis(): Promise<number | undefined> {\n    return this.get<number>('last_successful_fetch_timestamp_millis');\n  }\n\n  setLastSuccessfulFetchTimestampMillis(timestamp: number): Promise<void> {\n    return this.set<number>(\n      'last_successful_fetch_timestamp_millis',\n      timestamp\n    );\n  }\n\n  getLastSuccessfulFetchResponse(): Promise<FetchResponse | undefined> {\n    return this.get<FetchResponse>('last_successful_fetch_response');\n  }\n\n  setLastSuccessfulFetchResponse(response: FetchResponse): Promise<void> {\n    return this.set<FetchResponse>('last_successful_fetch_response', response);\n  }\n\n  getActiveConfig(): Promise<FirebaseRemoteConfigObject | undefined> {\n    return this.get<FirebaseRemoteConfigObject>('active_config');\n  }\n\n  setActiveConfig(config: FirebaseRemoteConfigObject): Promise<void> {\n    return this.set<FirebaseRemoteConfigObject>('active_config', config);\n  }\n\n  getActiveConfigEtag(): Promise<string | undefined> {\n    return this.get<string>('active_config_etag');\n  }\n\n  setActiveConfigEtag(etag: string): Promise<void> {\n    return this.set<string>('active_config_etag', etag);\n  }\n\n  getThrottleMetadata(): Promise<ThrottleMetadata | undefined> {\n    return this.get<ThrottleMetadata>('throttle_metadata');\n  }\n\n  setThrottleMetadata(metadata: ThrottleMetadata): Promise<void> {\n    return this.set<ThrottleMetadata>('throttle_metadata', metadata);\n  }\n\n  deleteThrottleMetadata(): Promise<void> {\n    return this.delete('throttle_metadata');\n  }\n\n  async get<T>(key: ProjectNamespaceKeyFieldValue): Promise<T | undefined> {\n    const db = await this.openDbPromise;\n    return new Promise((resolve, reject) => {\n      const transaction = db.transaction([APP_NAMESPACE_STORE], 'readonly');\n      const objectStore = transaction.objectStore(APP_NAMESPACE_STORE);\n      const compositeKey = this.createCompositeKey(key);\n      try {\n        const request = objectStore.get(compositeKey);\n        request.onerror = event => {\n          reject(toFirebaseError(event, ErrorCode.STORAGE_GET));\n        };\n        request.onsuccess = event => {\n          const result = (event.target as IDBRequest).result;\n          if (result) {\n            resolve(result.value);\n          } else {\n            resolve(undefined);\n          }\n        };\n      } catch (e) {\n        reject(\n          ERROR_FACTORY.create(ErrorCode.STORAGE_GET, {\n            originalErrorMessage: e && e.message\n          })\n        );\n      }\n    });\n  }\n\n  async set<T>(key: ProjectNamespaceKeyFieldValue, value: T): Promise<void> {\n    const db = await this.openDbPromise;\n    return new Promise((resolve, reject) => {\n      const transaction = db.transaction([APP_NAMESPACE_STORE], 'readwrite');\n      const objectStore = transaction.objectStore(APP_NAMESPACE_STORE);\n      const compositeKey = this.createCompositeKey(key);\n      try {\n        const request = objectStore.put({\n          compositeKey,\n          value\n        });\n        request.onerror = (event: Event) => {\n          reject(toFirebaseError(event, ErrorCode.STORAGE_SET));\n        };\n        request.onsuccess = () => {\n          resolve();\n        };\n      } catch (e) {\n        reject(\n          ERROR_FACTORY.create(ErrorCode.STORAGE_SET, {\n            originalErrorMessage: e && e.message\n          })\n        );\n      }\n    });\n  }\n\n  async delete(key: ProjectNamespaceKeyFieldValue): Promise<void> {\n    const db = await this.openDbPromise;\n    return new Promise((resolve, reject) => {\n      const transaction = db.transaction([APP_NAMESPACE_STORE], 'readwrite');\n      const objectStore = transaction.objectStore(APP_NAMESPACE_STORE);\n      const compositeKey = this.createCompositeKey(key);\n      try {\n        const request = objectStore.delete(compositeKey);\n        request.onerror = (event: Event) => {\n          reject(toFirebaseError(event, ErrorCode.STORAGE_DELETE));\n        };\n        request.onsuccess = () => {\n          resolve();\n        };\n      } catch (e) {\n        reject(\n          ERROR_FACTORY.create(ErrorCode.STORAGE_DELETE, {\n            originalErrorMessage: e && e.message\n          })\n        );\n      }\n    });\n  }\n\n  // Facilitates composite key functionality (which is unsupported in IE).\n  createCompositeKey(key: ProjectNamespaceKeyFieldValue): string {\n    return [this.appId, this.appName, this.namespace, key].join();\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FetchStatus } from '@firebase/remote-config-types';\nimport { FirebaseRemoteConfigObject } from '../client/remote_config_fetch_client';\nimport { Storage } from './storage';\n\n/**\n * A memory cache layer over storage to support the SDK's synchronous read requirements.\n */\nexport class StorageCache {\n  constructor(private readonly storage: Storage) {}\n\n  /**\n   * Memory caches.\n   */\n  private lastFetchStatus?: FetchStatus;\n  private lastSuccessfulFetchTimestampMillis?: number;\n  private activeConfig?: FirebaseRemoteConfigObject;\n\n  /**\n   * Memory-only getters\n   */\n  getLastFetchStatus(): FetchStatus | undefined {\n    return this.lastFetchStatus;\n  }\n\n  getLastSuccessfulFetchTimestampMillis(): number | undefined {\n    return this.lastSuccessfulFetchTimestampMillis;\n  }\n\n  getActiveConfig(): FirebaseRemoteConfigObject | undefined {\n    return this.activeConfig;\n  }\n\n  /**\n   * Read-ahead getter\n   */\n  async loadFromStorage(): Promise<void> {\n    const lastFetchStatusPromise = this.storage.getLastFetchStatus();\n    const lastSuccessfulFetchTimestampMillisPromise = this.storage.getLastSuccessfulFetchTimestampMillis();\n    const activeConfigPromise = this.storage.getActiveConfig();\n\n    // Note:\n    // 1. we consistently check for undefined to avoid clobbering defined values\n    //   in memory\n    // 2. we defer awaiting to improve readability, as opposed to destructuring\n    //   a Promise.all result, for example\n\n    const lastFetchStatus = await lastFetchStatusPromise;\n    if (lastFetchStatus) {\n      this.lastFetchStatus = lastFetchStatus;\n    }\n\n    const lastSuccessfulFetchTimestampMillis = await lastSuccessfulFetchTimestampMillisPromise;\n    if (lastSuccessfulFetchTimestampMillis) {\n      this.lastSuccessfulFetchTimestampMillis = lastSuccessfulFetchTimestampMillis;\n    }\n\n    const activeConfig = await activeConfigPromise;\n    if (activeConfig) {\n      this.activeConfig = activeConfig;\n    }\n  }\n\n  /**\n   * Write-through setters\n   */\n  setLastFetchStatus(status: FetchStatus): Promise<void> {\n    this.lastFetchStatus = status;\n    return this.storage.setLastFetchStatus(status);\n  }\n\n  setLastSuccessfulFetchTimestampMillis(\n    timestampMillis: number\n  ): Promise<void> {\n    this.lastSuccessfulFetchTimestampMillis = timestampMillis;\n    return this.storage.setLastSuccessfulFetchTimestampMillis(timestampMillis);\n  }\n\n  setActiveConfig(activeConfig: FirebaseRemoteConfigObject): Promise<void> {\n    this.activeConfig = activeConfig;\n    return this.storage.setActiveConfig(activeConfig);\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  RemoteConfigAbortSignal,\n  RemoteConfigFetchClient,\n  FetchResponse,\n  FetchRequest\n} from './remote_config_fetch_client';\nimport { ThrottleMetadata, Storage } from '../storage/storage';\nimport { ErrorCode, ERROR_FACTORY } from '../errors';\nimport { FirebaseError, calculateBackoffMillis } from '@firebase/util';\n\n/**\n * Supports waiting on a backoff by:\n *\n * <ul>\n *   <li>Promisifying setTimeout, so we can set a timeout in our Promise chain</li>\n *   <li>Listening on a signal bus for abort events, just like the Fetch API</li>\n *   <li>Failing in the same way the Fetch API fails, so timing out a live request and a throttled\n *       request appear the same.</li>\n * </ul>\n *\n * <p>Visible for testing.\n */\nexport function setAbortableTimeout(\n  signal: RemoteConfigAbortSignal,\n  throttleEndTimeMillis: number\n): Promise<void> {\n  return new Promise((resolve, reject) => {\n    // Derives backoff from given end time, normalizing negative numbers to zero.\n    const backoffMillis = Math.max(throttleEndTimeMillis - Date.now(), 0);\n\n    const timeout = setTimeout(resolve, backoffMillis);\n\n    // Adds listener, rather than sets onabort, because signal is a shared object.\n    signal.addEventListener(() => {\n      clearTimeout(timeout);\n\n      // If the request completes before this timeout, the rejection has no effect.\n      reject(\n        ERROR_FACTORY.create(ErrorCode.FETCH_THROTTLE, {\n          throttleEndTimeMillis\n        })\n      );\n    });\n  });\n}\n\n/**\n * Returns true if the {@link Error} indicates a fetch request may succeed later.\n */\nfunction isRetriableError(e: Error): boolean {\n  if (!(e instanceof FirebaseError)) {\n    return false;\n  }\n\n  // Uses string index defined by ErrorData, which FirebaseError implements.\n  const httpStatus = Number(e['httpStatus']);\n\n  return (\n    httpStatus === 429 ||\n    httpStatus === 500 ||\n    httpStatus === 503 ||\n    httpStatus === 504\n  );\n}\n\n/**\n * Decorates a Client with retry logic.\n *\n * <p>Comparable to CachingClient, but uses backoff logic instead of cache max age and doesn't cache\n * responses (because the SDK has no use for error responses).\n */\nexport class RetryingClient implements RemoteConfigFetchClient {\n  constructor(\n    private readonly client: RemoteConfigFetchClient,\n    private readonly storage: Storage\n  ) {}\n\n  async fetch(request: FetchRequest): Promise<FetchResponse> {\n    const throttleMetadata = (await this.storage.getThrottleMetadata()) || {\n      backoffCount: 0,\n      throttleEndTimeMillis: Date.now()\n    };\n\n    return this.attemptFetch(request, throttleMetadata);\n  }\n\n  /**\n   * A recursive helper for attempting a fetch request repeatedly.\n   *\n   * @throws any non-retriable errors.\n   */\n  async attemptFetch(\n    request: FetchRequest,\n    { throttleEndTimeMillis, backoffCount }: ThrottleMetadata\n  ): Promise<FetchResponse> {\n    // Starts with a (potentially zero) timeout to support resumption from stored state.\n    // Ensures the throttle end time is honored if the last attempt timed out.\n    // Note the SDK will never make a request if the fetch timeout expires at this point.\n    await setAbortableTimeout(request.signal, throttleEndTimeMillis);\n\n    try {\n      const response = await this.client.fetch(request);\n\n      // Note the SDK only clears throttle state if response is success or non-retriable.\n      await this.storage.deleteThrottleMetadata();\n\n      return response;\n    } catch (e) {\n      if (!isRetriableError(e)) {\n        throw e;\n      }\n\n      // Increments backoff state.\n      const throttleMetadata = {\n        throttleEndTimeMillis:\n          Date.now() + calculateBackoffMillis(backoffCount),\n        backoffCount: backoffCount + 1\n      };\n\n      // Persists state.\n      await this.storage.setThrottleMetadata(throttleMetadata);\n\n      return this.attemptFetch(request, throttleMetadata);\n    }\n  }\n}\n"],"sourceRoot":""}